
pi_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069f0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08006ab0  08006ab0  00016ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bf4  08006bf4  00020128  2**0
                  CONTENTS
  4 .ARM          00000008  08006bf4  08006bf4  00016bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bfc  08006bfc  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bfc  08006bfc  00016bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c00  08006c00  00016c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  08006c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001108  20000128  08006d2c  00020128  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001230  08006d2c  00021230  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 13 .debug_info   000154d8  00000000  00000000  00020193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000339e  00000000  00000000  0003566b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c0  00000000  00000000  00038a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001019  00000000  00000000  00039ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013cc4  00000000  00000000  0003aee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019a41  00000000  00000000  0004ebad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00079a2b  00000000  00000000  000685ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004bd0  00000000  00000000  000e201c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000e6bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000128 	.word	0x20000128
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006a98 	.word	0x08006a98

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000012c 	.word	0x2000012c
 8000104:	08006a98 	.word	0x08006a98

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f84c 	bl	80002ec <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__aeabi_f2uiz>:
 80002bc:	219e      	movs	r1, #158	; 0x9e
 80002be:	b510      	push	{r4, lr}
 80002c0:	05c9      	lsls	r1, r1, #23
 80002c2:	1c04      	adds	r4, r0, #0
 80002c4:	f000 fd7e 	bl	8000dc4 <__aeabi_fcmpge>
 80002c8:	2800      	cmp	r0, #0
 80002ca:	d103      	bne.n	80002d4 <__aeabi_f2uiz+0x18>
 80002cc:	1c20      	adds	r0, r4, #0
 80002ce:	f000 fce1 	bl	8000c94 <__aeabi_f2iz>
 80002d2:	bd10      	pop	{r4, pc}
 80002d4:	219e      	movs	r1, #158	; 0x9e
 80002d6:	1c20      	adds	r0, r4, #0
 80002d8:	05c9      	lsls	r1, r1, #23
 80002da:	f000 fb3b 	bl	8000954 <__aeabi_fsub>
 80002de:	f000 fcd9 	bl	8000c94 <__aeabi_f2iz>
 80002e2:	2380      	movs	r3, #128	; 0x80
 80002e4:	061b      	lsls	r3, r3, #24
 80002e6:	469c      	mov	ip, r3
 80002e8:	4460      	add	r0, ip
 80002ea:	e7f2      	b.n	80002d2 <__aeabi_f2uiz+0x16>

080002ec <__udivmoddi4>:
 80002ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ee:	4657      	mov	r7, sl
 80002f0:	464e      	mov	r6, r9
 80002f2:	4645      	mov	r5, r8
 80002f4:	46de      	mov	lr, fp
 80002f6:	b5e0      	push	{r5, r6, r7, lr}
 80002f8:	0004      	movs	r4, r0
 80002fa:	000d      	movs	r5, r1
 80002fc:	4692      	mov	sl, r2
 80002fe:	4699      	mov	r9, r3
 8000300:	b083      	sub	sp, #12
 8000302:	428b      	cmp	r3, r1
 8000304:	d830      	bhi.n	8000368 <__udivmoddi4+0x7c>
 8000306:	d02d      	beq.n	8000364 <__udivmoddi4+0x78>
 8000308:	4649      	mov	r1, r9
 800030a:	4650      	mov	r0, sl
 800030c:	f000 fd82 	bl	8000e14 <__clzdi2>
 8000310:	0029      	movs	r1, r5
 8000312:	0006      	movs	r6, r0
 8000314:	0020      	movs	r0, r4
 8000316:	f000 fd7d 	bl	8000e14 <__clzdi2>
 800031a:	1a33      	subs	r3, r6, r0
 800031c:	4698      	mov	r8, r3
 800031e:	3b20      	subs	r3, #32
 8000320:	d434      	bmi.n	800038c <__udivmoddi4+0xa0>
 8000322:	469b      	mov	fp, r3
 8000324:	4653      	mov	r3, sl
 8000326:	465a      	mov	r2, fp
 8000328:	4093      	lsls	r3, r2
 800032a:	4642      	mov	r2, r8
 800032c:	001f      	movs	r7, r3
 800032e:	4653      	mov	r3, sl
 8000330:	4093      	lsls	r3, r2
 8000332:	001e      	movs	r6, r3
 8000334:	42af      	cmp	r7, r5
 8000336:	d83b      	bhi.n	80003b0 <__udivmoddi4+0xc4>
 8000338:	42af      	cmp	r7, r5
 800033a:	d100      	bne.n	800033e <__udivmoddi4+0x52>
 800033c:	e079      	b.n	8000432 <__udivmoddi4+0x146>
 800033e:	465b      	mov	r3, fp
 8000340:	1ba4      	subs	r4, r4, r6
 8000342:	41bd      	sbcs	r5, r7
 8000344:	2b00      	cmp	r3, #0
 8000346:	da00      	bge.n	800034a <__udivmoddi4+0x5e>
 8000348:	e076      	b.n	8000438 <__udivmoddi4+0x14c>
 800034a:	2200      	movs	r2, #0
 800034c:	2300      	movs	r3, #0
 800034e:	9200      	str	r2, [sp, #0]
 8000350:	9301      	str	r3, [sp, #4]
 8000352:	2301      	movs	r3, #1
 8000354:	465a      	mov	r2, fp
 8000356:	4093      	lsls	r3, r2
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	2301      	movs	r3, #1
 800035c:	4642      	mov	r2, r8
 800035e:	4093      	lsls	r3, r2
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	e029      	b.n	80003b8 <__udivmoddi4+0xcc>
 8000364:	4282      	cmp	r2, r0
 8000366:	d9cf      	bls.n	8000308 <__udivmoddi4+0x1c>
 8000368:	2200      	movs	r2, #0
 800036a:	2300      	movs	r3, #0
 800036c:	9200      	str	r2, [sp, #0]
 800036e:	9301      	str	r3, [sp, #4]
 8000370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <__udivmoddi4+0x8e>
 8000376:	601c      	str	r4, [r3, #0]
 8000378:	605d      	str	r5, [r3, #4]
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	b003      	add	sp, #12
 8000380:	bcf0      	pop	{r4, r5, r6, r7}
 8000382:	46bb      	mov	fp, r7
 8000384:	46b2      	mov	sl, r6
 8000386:	46a9      	mov	r9, r5
 8000388:	46a0      	mov	r8, r4
 800038a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800038c:	4642      	mov	r2, r8
 800038e:	469b      	mov	fp, r3
 8000390:	2320      	movs	r3, #32
 8000392:	1a9b      	subs	r3, r3, r2
 8000394:	4652      	mov	r2, sl
 8000396:	40da      	lsrs	r2, r3
 8000398:	4641      	mov	r1, r8
 800039a:	0013      	movs	r3, r2
 800039c:	464a      	mov	r2, r9
 800039e:	408a      	lsls	r2, r1
 80003a0:	0017      	movs	r7, r2
 80003a2:	4642      	mov	r2, r8
 80003a4:	431f      	orrs	r7, r3
 80003a6:	4653      	mov	r3, sl
 80003a8:	4093      	lsls	r3, r2
 80003aa:	001e      	movs	r6, r3
 80003ac:	42af      	cmp	r7, r5
 80003ae:	d9c3      	bls.n	8000338 <__udivmoddi4+0x4c>
 80003b0:	2200      	movs	r2, #0
 80003b2:	2300      	movs	r3, #0
 80003b4:	9200      	str	r2, [sp, #0]
 80003b6:	9301      	str	r3, [sp, #4]
 80003b8:	4643      	mov	r3, r8
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d0d8      	beq.n	8000370 <__udivmoddi4+0x84>
 80003be:	07fb      	lsls	r3, r7, #31
 80003c0:	0872      	lsrs	r2, r6, #1
 80003c2:	431a      	orrs	r2, r3
 80003c4:	4646      	mov	r6, r8
 80003c6:	087b      	lsrs	r3, r7, #1
 80003c8:	e00e      	b.n	80003e8 <__udivmoddi4+0xfc>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d101      	bne.n	80003d2 <__udivmoddi4+0xe6>
 80003ce:	42a2      	cmp	r2, r4
 80003d0:	d80c      	bhi.n	80003ec <__udivmoddi4+0x100>
 80003d2:	1aa4      	subs	r4, r4, r2
 80003d4:	419d      	sbcs	r5, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	1924      	adds	r4, r4, r4
 80003da:	416d      	adcs	r5, r5
 80003dc:	2100      	movs	r1, #0
 80003de:	3e01      	subs	r6, #1
 80003e0:	1824      	adds	r4, r4, r0
 80003e2:	414d      	adcs	r5, r1
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d006      	beq.n	80003f6 <__udivmoddi4+0x10a>
 80003e8:	42ab      	cmp	r3, r5
 80003ea:	d9ee      	bls.n	80003ca <__udivmoddi4+0xde>
 80003ec:	3e01      	subs	r6, #1
 80003ee:	1924      	adds	r4, r4, r4
 80003f0:	416d      	adcs	r5, r5
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d1f8      	bne.n	80003e8 <__udivmoddi4+0xfc>
 80003f6:	9800      	ldr	r0, [sp, #0]
 80003f8:	9901      	ldr	r1, [sp, #4]
 80003fa:	465b      	mov	r3, fp
 80003fc:	1900      	adds	r0, r0, r4
 80003fe:	4169      	adcs	r1, r5
 8000400:	2b00      	cmp	r3, #0
 8000402:	db24      	blt.n	800044e <__udivmoddi4+0x162>
 8000404:	002b      	movs	r3, r5
 8000406:	465a      	mov	r2, fp
 8000408:	4644      	mov	r4, r8
 800040a:	40d3      	lsrs	r3, r2
 800040c:	002a      	movs	r2, r5
 800040e:	40e2      	lsrs	r2, r4
 8000410:	001c      	movs	r4, r3
 8000412:	465b      	mov	r3, fp
 8000414:	0015      	movs	r5, r2
 8000416:	2b00      	cmp	r3, #0
 8000418:	db2a      	blt.n	8000470 <__udivmoddi4+0x184>
 800041a:	0026      	movs	r6, r4
 800041c:	409e      	lsls	r6, r3
 800041e:	0033      	movs	r3, r6
 8000420:	0026      	movs	r6, r4
 8000422:	4647      	mov	r7, r8
 8000424:	40be      	lsls	r6, r7
 8000426:	0032      	movs	r2, r6
 8000428:	1a80      	subs	r0, r0, r2
 800042a:	4199      	sbcs	r1, r3
 800042c:	9000      	str	r0, [sp, #0]
 800042e:	9101      	str	r1, [sp, #4]
 8000430:	e79e      	b.n	8000370 <__udivmoddi4+0x84>
 8000432:	42a3      	cmp	r3, r4
 8000434:	d8bc      	bhi.n	80003b0 <__udivmoddi4+0xc4>
 8000436:	e782      	b.n	800033e <__udivmoddi4+0x52>
 8000438:	4642      	mov	r2, r8
 800043a:	2320      	movs	r3, #32
 800043c:	2100      	movs	r1, #0
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	2200      	movs	r2, #0
 8000442:	9100      	str	r1, [sp, #0]
 8000444:	9201      	str	r2, [sp, #4]
 8000446:	2201      	movs	r2, #1
 8000448:	40da      	lsrs	r2, r3
 800044a:	9201      	str	r2, [sp, #4]
 800044c:	e785      	b.n	800035a <__udivmoddi4+0x6e>
 800044e:	4642      	mov	r2, r8
 8000450:	2320      	movs	r3, #32
 8000452:	1a9b      	subs	r3, r3, r2
 8000454:	002a      	movs	r2, r5
 8000456:	4646      	mov	r6, r8
 8000458:	409a      	lsls	r2, r3
 800045a:	0023      	movs	r3, r4
 800045c:	40f3      	lsrs	r3, r6
 800045e:	4644      	mov	r4, r8
 8000460:	4313      	orrs	r3, r2
 8000462:	002a      	movs	r2, r5
 8000464:	40e2      	lsrs	r2, r4
 8000466:	001c      	movs	r4, r3
 8000468:	465b      	mov	r3, fp
 800046a:	0015      	movs	r5, r2
 800046c:	2b00      	cmp	r3, #0
 800046e:	dad4      	bge.n	800041a <__udivmoddi4+0x12e>
 8000470:	4642      	mov	r2, r8
 8000472:	002f      	movs	r7, r5
 8000474:	2320      	movs	r3, #32
 8000476:	0026      	movs	r6, r4
 8000478:	4097      	lsls	r7, r2
 800047a:	1a9b      	subs	r3, r3, r2
 800047c:	40de      	lsrs	r6, r3
 800047e:	003b      	movs	r3, r7
 8000480:	4333      	orrs	r3, r6
 8000482:	e7cd      	b.n	8000420 <__udivmoddi4+0x134>

08000484 <__aeabi_fdiv>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	464f      	mov	r7, r9
 8000488:	4646      	mov	r6, r8
 800048a:	46d6      	mov	lr, sl
 800048c:	0245      	lsls	r5, r0, #9
 800048e:	b5c0      	push	{r6, r7, lr}
 8000490:	0047      	lsls	r7, r0, #1
 8000492:	1c0c      	adds	r4, r1, #0
 8000494:	0a6d      	lsrs	r5, r5, #9
 8000496:	0e3f      	lsrs	r7, r7, #24
 8000498:	0fc6      	lsrs	r6, r0, #31
 800049a:	2f00      	cmp	r7, #0
 800049c:	d100      	bne.n	80004a0 <__aeabi_fdiv+0x1c>
 800049e:	e06f      	b.n	8000580 <__aeabi_fdiv+0xfc>
 80004a0:	2fff      	cmp	r7, #255	; 0xff
 80004a2:	d100      	bne.n	80004a6 <__aeabi_fdiv+0x22>
 80004a4:	e074      	b.n	8000590 <__aeabi_fdiv+0x10c>
 80004a6:	2300      	movs	r3, #0
 80004a8:	2280      	movs	r2, #128	; 0x80
 80004aa:	4699      	mov	r9, r3
 80004ac:	469a      	mov	sl, r3
 80004ae:	00ed      	lsls	r5, r5, #3
 80004b0:	04d2      	lsls	r2, r2, #19
 80004b2:	4315      	orrs	r5, r2
 80004b4:	3f7f      	subs	r7, #127	; 0x7f
 80004b6:	0263      	lsls	r3, r4, #9
 80004b8:	0a5b      	lsrs	r3, r3, #9
 80004ba:	4698      	mov	r8, r3
 80004bc:	0063      	lsls	r3, r4, #1
 80004be:	0e1b      	lsrs	r3, r3, #24
 80004c0:	0fe4      	lsrs	r4, r4, #31
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d04d      	beq.n	8000562 <__aeabi_fdiv+0xde>
 80004c6:	2bff      	cmp	r3, #255	; 0xff
 80004c8:	d045      	beq.n	8000556 <__aeabi_fdiv+0xd2>
 80004ca:	4642      	mov	r2, r8
 80004cc:	2180      	movs	r1, #128	; 0x80
 80004ce:	00d2      	lsls	r2, r2, #3
 80004d0:	04c9      	lsls	r1, r1, #19
 80004d2:	4311      	orrs	r1, r2
 80004d4:	4688      	mov	r8, r1
 80004d6:	2200      	movs	r2, #0
 80004d8:	3b7f      	subs	r3, #127	; 0x7f
 80004da:	0031      	movs	r1, r6
 80004dc:	1aff      	subs	r7, r7, r3
 80004de:	464b      	mov	r3, r9
 80004e0:	4061      	eors	r1, r4
 80004e2:	b2c9      	uxtb	r1, r1
 80004e4:	2b0f      	cmp	r3, #15
 80004e6:	d900      	bls.n	80004ea <__aeabi_fdiv+0x66>
 80004e8:	e0b8      	b.n	800065c <__aeabi_fdiv+0x1d8>
 80004ea:	4870      	ldr	r0, [pc, #448]	; (80006ac <__aeabi_fdiv+0x228>)
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	58c3      	ldr	r3, [r0, r3]
 80004f0:	469f      	mov	pc, r3
 80004f2:	2300      	movs	r3, #0
 80004f4:	4698      	mov	r8, r3
 80004f6:	0026      	movs	r6, r4
 80004f8:	4645      	mov	r5, r8
 80004fa:	4692      	mov	sl, r2
 80004fc:	4653      	mov	r3, sl
 80004fe:	2b02      	cmp	r3, #2
 8000500:	d100      	bne.n	8000504 <__aeabi_fdiv+0x80>
 8000502:	e08d      	b.n	8000620 <__aeabi_fdiv+0x19c>
 8000504:	2b03      	cmp	r3, #3
 8000506:	d100      	bne.n	800050a <__aeabi_fdiv+0x86>
 8000508:	e0a1      	b.n	800064e <__aeabi_fdiv+0x1ca>
 800050a:	2b01      	cmp	r3, #1
 800050c:	d018      	beq.n	8000540 <__aeabi_fdiv+0xbc>
 800050e:	003b      	movs	r3, r7
 8000510:	337f      	adds	r3, #127	; 0x7f
 8000512:	2b00      	cmp	r3, #0
 8000514:	dd6d      	ble.n	80005f2 <__aeabi_fdiv+0x16e>
 8000516:	076a      	lsls	r2, r5, #29
 8000518:	d004      	beq.n	8000524 <__aeabi_fdiv+0xa0>
 800051a:	220f      	movs	r2, #15
 800051c:	402a      	ands	r2, r5
 800051e:	2a04      	cmp	r2, #4
 8000520:	d000      	beq.n	8000524 <__aeabi_fdiv+0xa0>
 8000522:	3504      	adds	r5, #4
 8000524:	012a      	lsls	r2, r5, #4
 8000526:	d503      	bpl.n	8000530 <__aeabi_fdiv+0xac>
 8000528:	4b61      	ldr	r3, [pc, #388]	; (80006b0 <__aeabi_fdiv+0x22c>)
 800052a:	401d      	ands	r5, r3
 800052c:	003b      	movs	r3, r7
 800052e:	3380      	adds	r3, #128	; 0x80
 8000530:	2bfe      	cmp	r3, #254	; 0xfe
 8000532:	dd00      	ble.n	8000536 <__aeabi_fdiv+0xb2>
 8000534:	e074      	b.n	8000620 <__aeabi_fdiv+0x19c>
 8000536:	01aa      	lsls	r2, r5, #6
 8000538:	0a52      	lsrs	r2, r2, #9
 800053a:	b2d8      	uxtb	r0, r3
 800053c:	e002      	b.n	8000544 <__aeabi_fdiv+0xc0>
 800053e:	000e      	movs	r6, r1
 8000540:	2000      	movs	r0, #0
 8000542:	2200      	movs	r2, #0
 8000544:	05c0      	lsls	r0, r0, #23
 8000546:	07f6      	lsls	r6, r6, #31
 8000548:	4310      	orrs	r0, r2
 800054a:	4330      	orrs	r0, r6
 800054c:	bce0      	pop	{r5, r6, r7}
 800054e:	46ba      	mov	sl, r7
 8000550:	46b1      	mov	r9, r6
 8000552:	46a8      	mov	r8, r5
 8000554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000556:	4643      	mov	r3, r8
 8000558:	2b00      	cmp	r3, #0
 800055a:	d13f      	bne.n	80005dc <__aeabi_fdiv+0x158>
 800055c:	2202      	movs	r2, #2
 800055e:	3fff      	subs	r7, #255	; 0xff
 8000560:	e003      	b.n	800056a <__aeabi_fdiv+0xe6>
 8000562:	4643      	mov	r3, r8
 8000564:	2b00      	cmp	r3, #0
 8000566:	d12d      	bne.n	80005c4 <__aeabi_fdiv+0x140>
 8000568:	2201      	movs	r2, #1
 800056a:	0031      	movs	r1, r6
 800056c:	464b      	mov	r3, r9
 800056e:	4061      	eors	r1, r4
 8000570:	b2c9      	uxtb	r1, r1
 8000572:	4313      	orrs	r3, r2
 8000574:	2b0f      	cmp	r3, #15
 8000576:	d838      	bhi.n	80005ea <__aeabi_fdiv+0x166>
 8000578:	484e      	ldr	r0, [pc, #312]	; (80006b4 <__aeabi_fdiv+0x230>)
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	58c3      	ldr	r3, [r0, r3]
 800057e:	469f      	mov	pc, r3
 8000580:	2d00      	cmp	r5, #0
 8000582:	d113      	bne.n	80005ac <__aeabi_fdiv+0x128>
 8000584:	2304      	movs	r3, #4
 8000586:	4699      	mov	r9, r3
 8000588:	3b03      	subs	r3, #3
 800058a:	2700      	movs	r7, #0
 800058c:	469a      	mov	sl, r3
 800058e:	e792      	b.n	80004b6 <__aeabi_fdiv+0x32>
 8000590:	2d00      	cmp	r5, #0
 8000592:	d105      	bne.n	80005a0 <__aeabi_fdiv+0x11c>
 8000594:	2308      	movs	r3, #8
 8000596:	4699      	mov	r9, r3
 8000598:	3b06      	subs	r3, #6
 800059a:	27ff      	movs	r7, #255	; 0xff
 800059c:	469a      	mov	sl, r3
 800059e:	e78a      	b.n	80004b6 <__aeabi_fdiv+0x32>
 80005a0:	230c      	movs	r3, #12
 80005a2:	4699      	mov	r9, r3
 80005a4:	3b09      	subs	r3, #9
 80005a6:	27ff      	movs	r7, #255	; 0xff
 80005a8:	469a      	mov	sl, r3
 80005aa:	e784      	b.n	80004b6 <__aeabi_fdiv+0x32>
 80005ac:	0028      	movs	r0, r5
 80005ae:	f000 fc13 	bl	8000dd8 <__clzsi2>
 80005b2:	2776      	movs	r7, #118	; 0x76
 80005b4:	1f43      	subs	r3, r0, #5
 80005b6:	409d      	lsls	r5, r3
 80005b8:	2300      	movs	r3, #0
 80005ba:	427f      	negs	r7, r7
 80005bc:	4699      	mov	r9, r3
 80005be:	469a      	mov	sl, r3
 80005c0:	1a3f      	subs	r7, r7, r0
 80005c2:	e778      	b.n	80004b6 <__aeabi_fdiv+0x32>
 80005c4:	4640      	mov	r0, r8
 80005c6:	f000 fc07 	bl	8000dd8 <__clzsi2>
 80005ca:	4642      	mov	r2, r8
 80005cc:	1f43      	subs	r3, r0, #5
 80005ce:	409a      	lsls	r2, r3
 80005d0:	2376      	movs	r3, #118	; 0x76
 80005d2:	425b      	negs	r3, r3
 80005d4:	4690      	mov	r8, r2
 80005d6:	1a1b      	subs	r3, r3, r0
 80005d8:	2200      	movs	r2, #0
 80005da:	e77e      	b.n	80004da <__aeabi_fdiv+0x56>
 80005dc:	2303      	movs	r3, #3
 80005de:	464a      	mov	r2, r9
 80005e0:	431a      	orrs	r2, r3
 80005e2:	4691      	mov	r9, r2
 80005e4:	33fc      	adds	r3, #252	; 0xfc
 80005e6:	2203      	movs	r2, #3
 80005e8:	e777      	b.n	80004da <__aeabi_fdiv+0x56>
 80005ea:	000e      	movs	r6, r1
 80005ec:	20ff      	movs	r0, #255	; 0xff
 80005ee:	2200      	movs	r2, #0
 80005f0:	e7a8      	b.n	8000544 <__aeabi_fdiv+0xc0>
 80005f2:	2201      	movs	r2, #1
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	2b1b      	cmp	r3, #27
 80005f8:	dca2      	bgt.n	8000540 <__aeabi_fdiv+0xbc>
 80005fa:	379e      	adds	r7, #158	; 0x9e
 80005fc:	002a      	movs	r2, r5
 80005fe:	40bd      	lsls	r5, r7
 8000600:	40da      	lsrs	r2, r3
 8000602:	1e6b      	subs	r3, r5, #1
 8000604:	419d      	sbcs	r5, r3
 8000606:	4315      	orrs	r5, r2
 8000608:	076a      	lsls	r2, r5, #29
 800060a:	d004      	beq.n	8000616 <__aeabi_fdiv+0x192>
 800060c:	220f      	movs	r2, #15
 800060e:	402a      	ands	r2, r5
 8000610:	2a04      	cmp	r2, #4
 8000612:	d000      	beq.n	8000616 <__aeabi_fdiv+0x192>
 8000614:	3504      	adds	r5, #4
 8000616:	016a      	lsls	r2, r5, #5
 8000618:	d544      	bpl.n	80006a4 <__aeabi_fdiv+0x220>
 800061a:	2001      	movs	r0, #1
 800061c:	2200      	movs	r2, #0
 800061e:	e791      	b.n	8000544 <__aeabi_fdiv+0xc0>
 8000620:	20ff      	movs	r0, #255	; 0xff
 8000622:	2200      	movs	r2, #0
 8000624:	e78e      	b.n	8000544 <__aeabi_fdiv+0xc0>
 8000626:	2280      	movs	r2, #128	; 0x80
 8000628:	2600      	movs	r6, #0
 800062a:	20ff      	movs	r0, #255	; 0xff
 800062c:	03d2      	lsls	r2, r2, #15
 800062e:	e789      	b.n	8000544 <__aeabi_fdiv+0xc0>
 8000630:	2300      	movs	r3, #0
 8000632:	4698      	mov	r8, r3
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	03d2      	lsls	r2, r2, #15
 8000638:	4215      	tst	r5, r2
 800063a:	d008      	beq.n	800064e <__aeabi_fdiv+0x1ca>
 800063c:	4643      	mov	r3, r8
 800063e:	4213      	tst	r3, r2
 8000640:	d105      	bne.n	800064e <__aeabi_fdiv+0x1ca>
 8000642:	431a      	orrs	r2, r3
 8000644:	0252      	lsls	r2, r2, #9
 8000646:	0026      	movs	r6, r4
 8000648:	20ff      	movs	r0, #255	; 0xff
 800064a:	0a52      	lsrs	r2, r2, #9
 800064c:	e77a      	b.n	8000544 <__aeabi_fdiv+0xc0>
 800064e:	2280      	movs	r2, #128	; 0x80
 8000650:	03d2      	lsls	r2, r2, #15
 8000652:	432a      	orrs	r2, r5
 8000654:	0252      	lsls	r2, r2, #9
 8000656:	20ff      	movs	r0, #255	; 0xff
 8000658:	0a52      	lsrs	r2, r2, #9
 800065a:	e773      	b.n	8000544 <__aeabi_fdiv+0xc0>
 800065c:	4642      	mov	r2, r8
 800065e:	016b      	lsls	r3, r5, #5
 8000660:	0155      	lsls	r5, r2, #5
 8000662:	42ab      	cmp	r3, r5
 8000664:	d21a      	bcs.n	800069c <__aeabi_fdiv+0x218>
 8000666:	201b      	movs	r0, #27
 8000668:	2200      	movs	r2, #0
 800066a:	3f01      	subs	r7, #1
 800066c:	2601      	movs	r6, #1
 800066e:	001c      	movs	r4, r3
 8000670:	0052      	lsls	r2, r2, #1
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	2c00      	cmp	r4, #0
 8000676:	db01      	blt.n	800067c <__aeabi_fdiv+0x1f8>
 8000678:	429d      	cmp	r5, r3
 800067a:	d801      	bhi.n	8000680 <__aeabi_fdiv+0x1fc>
 800067c:	1b5b      	subs	r3, r3, r5
 800067e:	4332      	orrs	r2, r6
 8000680:	3801      	subs	r0, #1
 8000682:	2800      	cmp	r0, #0
 8000684:	d1f3      	bne.n	800066e <__aeabi_fdiv+0x1ea>
 8000686:	1e58      	subs	r0, r3, #1
 8000688:	4183      	sbcs	r3, r0
 800068a:	4313      	orrs	r3, r2
 800068c:	001d      	movs	r5, r3
 800068e:	003b      	movs	r3, r7
 8000690:	337f      	adds	r3, #127	; 0x7f
 8000692:	000e      	movs	r6, r1
 8000694:	2b00      	cmp	r3, #0
 8000696:	dd00      	ble.n	800069a <__aeabi_fdiv+0x216>
 8000698:	e73d      	b.n	8000516 <__aeabi_fdiv+0x92>
 800069a:	e7aa      	b.n	80005f2 <__aeabi_fdiv+0x16e>
 800069c:	201a      	movs	r0, #26
 800069e:	2201      	movs	r2, #1
 80006a0:	1b5b      	subs	r3, r3, r5
 80006a2:	e7e3      	b.n	800066c <__aeabi_fdiv+0x1e8>
 80006a4:	01aa      	lsls	r2, r5, #6
 80006a6:	2000      	movs	r0, #0
 80006a8:	0a52      	lsrs	r2, r2, #9
 80006aa:	e74b      	b.n	8000544 <__aeabi_fdiv+0xc0>
 80006ac:	08006b08 	.word	0x08006b08
 80006b0:	f7ffffff 	.word	0xf7ffffff
 80006b4:	08006b48 	.word	0x08006b48

080006b8 <__aeabi_fmul>:
 80006b8:	0243      	lsls	r3, r0, #9
 80006ba:	0a5b      	lsrs	r3, r3, #9
 80006bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006be:	464f      	mov	r7, r9
 80006c0:	4646      	mov	r6, r8
 80006c2:	4699      	mov	r9, r3
 80006c4:	46d6      	mov	lr, sl
 80006c6:	0fc3      	lsrs	r3, r0, #31
 80006c8:	0045      	lsls	r5, r0, #1
 80006ca:	4698      	mov	r8, r3
 80006cc:	b5c0      	push	{r6, r7, lr}
 80006ce:	464b      	mov	r3, r9
 80006d0:	1c0f      	adds	r7, r1, #0
 80006d2:	0e2d      	lsrs	r5, r5, #24
 80006d4:	d100      	bne.n	80006d8 <__aeabi_fmul+0x20>
 80006d6:	e0cb      	b.n	8000870 <__aeabi_fmul+0x1b8>
 80006d8:	2dff      	cmp	r5, #255	; 0xff
 80006da:	d100      	bne.n	80006de <__aeabi_fmul+0x26>
 80006dc:	e0cf      	b.n	800087e <__aeabi_fmul+0x1c6>
 80006de:	2280      	movs	r2, #128	; 0x80
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	04d2      	lsls	r2, r2, #19
 80006e4:	431a      	orrs	r2, r3
 80006e6:	2300      	movs	r3, #0
 80006e8:	4691      	mov	r9, r2
 80006ea:	2600      	movs	r6, #0
 80006ec:	469a      	mov	sl, r3
 80006ee:	3d7f      	subs	r5, #127	; 0x7f
 80006f0:	027c      	lsls	r4, r7, #9
 80006f2:	007b      	lsls	r3, r7, #1
 80006f4:	0a64      	lsrs	r4, r4, #9
 80006f6:	0e1b      	lsrs	r3, r3, #24
 80006f8:	0fff      	lsrs	r7, r7, #31
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d100      	bne.n	8000700 <__aeabi_fmul+0x48>
 80006fe:	e0a9      	b.n	8000854 <__aeabi_fmul+0x19c>
 8000700:	2bff      	cmp	r3, #255	; 0xff
 8000702:	d011      	beq.n	8000728 <__aeabi_fmul+0x70>
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	00e4      	lsls	r4, r4, #3
 8000708:	04d2      	lsls	r2, r2, #19
 800070a:	4314      	orrs	r4, r2
 800070c:	4642      	mov	r2, r8
 800070e:	3b7f      	subs	r3, #127	; 0x7f
 8000710:	195b      	adds	r3, r3, r5
 8000712:	407a      	eors	r2, r7
 8000714:	2000      	movs	r0, #0
 8000716:	b2d2      	uxtb	r2, r2
 8000718:	1c5d      	adds	r5, r3, #1
 800071a:	2e0a      	cmp	r6, #10
 800071c:	dd13      	ble.n	8000746 <__aeabi_fmul+0x8e>
 800071e:	003a      	movs	r2, r7
 8000720:	2e0b      	cmp	r6, #11
 8000722:	d047      	beq.n	80007b4 <__aeabi_fmul+0xfc>
 8000724:	4647      	mov	r7, r8
 8000726:	e03f      	b.n	80007a8 <__aeabi_fmul+0xf0>
 8000728:	002b      	movs	r3, r5
 800072a:	33ff      	adds	r3, #255	; 0xff
 800072c:	2c00      	cmp	r4, #0
 800072e:	d11e      	bne.n	800076e <__aeabi_fmul+0xb6>
 8000730:	2202      	movs	r2, #2
 8000732:	4316      	orrs	r6, r2
 8000734:	4642      	mov	r2, r8
 8000736:	3501      	adds	r5, #1
 8000738:	407a      	eors	r2, r7
 800073a:	b2d2      	uxtb	r2, r2
 800073c:	35ff      	adds	r5, #255	; 0xff
 800073e:	2e0a      	cmp	r6, #10
 8000740:	dd00      	ble.n	8000744 <__aeabi_fmul+0x8c>
 8000742:	e0e4      	b.n	800090e <__aeabi_fmul+0x256>
 8000744:	2002      	movs	r0, #2
 8000746:	2e02      	cmp	r6, #2
 8000748:	dc1c      	bgt.n	8000784 <__aeabi_fmul+0xcc>
 800074a:	3e01      	subs	r6, #1
 800074c:	2e01      	cmp	r6, #1
 800074e:	d842      	bhi.n	80007d6 <__aeabi_fmul+0x11e>
 8000750:	2802      	cmp	r0, #2
 8000752:	d03d      	beq.n	80007d0 <__aeabi_fmul+0x118>
 8000754:	2801      	cmp	r0, #1
 8000756:	d166      	bne.n	8000826 <__aeabi_fmul+0x16e>
 8000758:	2000      	movs	r0, #0
 800075a:	2100      	movs	r1, #0
 800075c:	05c0      	lsls	r0, r0, #23
 800075e:	4308      	orrs	r0, r1
 8000760:	07d2      	lsls	r2, r2, #31
 8000762:	4310      	orrs	r0, r2
 8000764:	bce0      	pop	{r5, r6, r7}
 8000766:	46ba      	mov	sl, r7
 8000768:	46b1      	mov	r9, r6
 800076a:	46a8      	mov	r8, r5
 800076c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800076e:	2203      	movs	r2, #3
 8000770:	4316      	orrs	r6, r2
 8000772:	4642      	mov	r2, r8
 8000774:	3501      	adds	r5, #1
 8000776:	407a      	eors	r2, r7
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	35ff      	adds	r5, #255	; 0xff
 800077c:	2e0a      	cmp	r6, #10
 800077e:	dd00      	ble.n	8000782 <__aeabi_fmul+0xca>
 8000780:	e0e4      	b.n	800094c <__aeabi_fmul+0x294>
 8000782:	2003      	movs	r0, #3
 8000784:	2101      	movs	r1, #1
 8000786:	40b1      	lsls	r1, r6
 8000788:	26a6      	movs	r6, #166	; 0xa6
 800078a:	00f6      	lsls	r6, r6, #3
 800078c:	4231      	tst	r1, r6
 800078e:	d10a      	bne.n	80007a6 <__aeabi_fmul+0xee>
 8000790:	2690      	movs	r6, #144	; 0x90
 8000792:	00b6      	lsls	r6, r6, #2
 8000794:	4231      	tst	r1, r6
 8000796:	d116      	bne.n	80007c6 <__aeabi_fmul+0x10e>
 8000798:	3eb9      	subs	r6, #185	; 0xb9
 800079a:	3eff      	subs	r6, #255	; 0xff
 800079c:	420e      	tst	r6, r1
 800079e:	d01a      	beq.n	80007d6 <__aeabi_fmul+0x11e>
 80007a0:	46a1      	mov	r9, r4
 80007a2:	4682      	mov	sl, r0
 80007a4:	e000      	b.n	80007a8 <__aeabi_fmul+0xf0>
 80007a6:	0017      	movs	r7, r2
 80007a8:	4653      	mov	r3, sl
 80007aa:	003a      	movs	r2, r7
 80007ac:	2b02      	cmp	r3, #2
 80007ae:	d00f      	beq.n	80007d0 <__aeabi_fmul+0x118>
 80007b0:	464c      	mov	r4, r9
 80007b2:	4650      	mov	r0, sl
 80007b4:	2803      	cmp	r0, #3
 80007b6:	d1cd      	bne.n	8000754 <__aeabi_fmul+0x9c>
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	03c9      	lsls	r1, r1, #15
 80007bc:	4321      	orrs	r1, r4
 80007be:	0249      	lsls	r1, r1, #9
 80007c0:	20ff      	movs	r0, #255	; 0xff
 80007c2:	0a49      	lsrs	r1, r1, #9
 80007c4:	e7ca      	b.n	800075c <__aeabi_fmul+0xa4>
 80007c6:	2180      	movs	r1, #128	; 0x80
 80007c8:	2200      	movs	r2, #0
 80007ca:	20ff      	movs	r0, #255	; 0xff
 80007cc:	03c9      	lsls	r1, r1, #15
 80007ce:	e7c5      	b.n	800075c <__aeabi_fmul+0xa4>
 80007d0:	20ff      	movs	r0, #255	; 0xff
 80007d2:	2100      	movs	r1, #0
 80007d4:	e7c2      	b.n	800075c <__aeabi_fmul+0xa4>
 80007d6:	0c20      	lsrs	r0, r4, #16
 80007d8:	4649      	mov	r1, r9
 80007da:	0424      	lsls	r4, r4, #16
 80007dc:	0c24      	lsrs	r4, r4, #16
 80007de:	0027      	movs	r7, r4
 80007e0:	0c0e      	lsrs	r6, r1, #16
 80007e2:	0409      	lsls	r1, r1, #16
 80007e4:	0c09      	lsrs	r1, r1, #16
 80007e6:	4374      	muls	r4, r6
 80007e8:	434f      	muls	r7, r1
 80007ea:	4346      	muls	r6, r0
 80007ec:	4348      	muls	r0, r1
 80007ee:	0c39      	lsrs	r1, r7, #16
 80007f0:	1900      	adds	r0, r0, r4
 80007f2:	1809      	adds	r1, r1, r0
 80007f4:	428c      	cmp	r4, r1
 80007f6:	d903      	bls.n	8000800 <__aeabi_fmul+0x148>
 80007f8:	2080      	movs	r0, #128	; 0x80
 80007fa:	0240      	lsls	r0, r0, #9
 80007fc:	4684      	mov	ip, r0
 80007fe:	4466      	add	r6, ip
 8000800:	043f      	lsls	r7, r7, #16
 8000802:	0408      	lsls	r0, r1, #16
 8000804:	0c3f      	lsrs	r7, r7, #16
 8000806:	19c0      	adds	r0, r0, r7
 8000808:	0184      	lsls	r4, r0, #6
 800080a:	1e67      	subs	r7, r4, #1
 800080c:	41bc      	sbcs	r4, r7
 800080e:	0c09      	lsrs	r1, r1, #16
 8000810:	0e80      	lsrs	r0, r0, #26
 8000812:	1989      	adds	r1, r1, r6
 8000814:	4304      	orrs	r4, r0
 8000816:	0189      	lsls	r1, r1, #6
 8000818:	430c      	orrs	r4, r1
 800081a:	0109      	lsls	r1, r1, #4
 800081c:	d571      	bpl.n	8000902 <__aeabi_fmul+0x24a>
 800081e:	2301      	movs	r3, #1
 8000820:	0861      	lsrs	r1, r4, #1
 8000822:	401c      	ands	r4, r3
 8000824:	430c      	orrs	r4, r1
 8000826:	002b      	movs	r3, r5
 8000828:	337f      	adds	r3, #127	; 0x7f
 800082a:	2b00      	cmp	r3, #0
 800082c:	dd51      	ble.n	80008d2 <__aeabi_fmul+0x21a>
 800082e:	0761      	lsls	r1, r4, #29
 8000830:	d004      	beq.n	800083c <__aeabi_fmul+0x184>
 8000832:	210f      	movs	r1, #15
 8000834:	4021      	ands	r1, r4
 8000836:	2904      	cmp	r1, #4
 8000838:	d000      	beq.n	800083c <__aeabi_fmul+0x184>
 800083a:	3404      	adds	r4, #4
 800083c:	0121      	lsls	r1, r4, #4
 800083e:	d503      	bpl.n	8000848 <__aeabi_fmul+0x190>
 8000840:	4b43      	ldr	r3, [pc, #268]	; (8000950 <__aeabi_fmul+0x298>)
 8000842:	401c      	ands	r4, r3
 8000844:	002b      	movs	r3, r5
 8000846:	3380      	adds	r3, #128	; 0x80
 8000848:	2bfe      	cmp	r3, #254	; 0xfe
 800084a:	dcc1      	bgt.n	80007d0 <__aeabi_fmul+0x118>
 800084c:	01a1      	lsls	r1, r4, #6
 800084e:	0a49      	lsrs	r1, r1, #9
 8000850:	b2d8      	uxtb	r0, r3
 8000852:	e783      	b.n	800075c <__aeabi_fmul+0xa4>
 8000854:	2c00      	cmp	r4, #0
 8000856:	d12c      	bne.n	80008b2 <__aeabi_fmul+0x1fa>
 8000858:	2301      	movs	r3, #1
 800085a:	4642      	mov	r2, r8
 800085c:	431e      	orrs	r6, r3
 800085e:	002b      	movs	r3, r5
 8000860:	407a      	eors	r2, r7
 8000862:	2001      	movs	r0, #1
 8000864:	b2d2      	uxtb	r2, r2
 8000866:	1c5d      	adds	r5, r3, #1
 8000868:	2e0a      	cmp	r6, #10
 800086a:	dd00      	ble.n	800086e <__aeabi_fmul+0x1b6>
 800086c:	e757      	b.n	800071e <__aeabi_fmul+0x66>
 800086e:	e76a      	b.n	8000746 <__aeabi_fmul+0x8e>
 8000870:	2b00      	cmp	r3, #0
 8000872:	d110      	bne.n	8000896 <__aeabi_fmul+0x1de>
 8000874:	2301      	movs	r3, #1
 8000876:	2604      	movs	r6, #4
 8000878:	2500      	movs	r5, #0
 800087a:	469a      	mov	sl, r3
 800087c:	e738      	b.n	80006f0 <__aeabi_fmul+0x38>
 800087e:	2b00      	cmp	r3, #0
 8000880:	d104      	bne.n	800088c <__aeabi_fmul+0x1d4>
 8000882:	2302      	movs	r3, #2
 8000884:	2608      	movs	r6, #8
 8000886:	25ff      	movs	r5, #255	; 0xff
 8000888:	469a      	mov	sl, r3
 800088a:	e731      	b.n	80006f0 <__aeabi_fmul+0x38>
 800088c:	2303      	movs	r3, #3
 800088e:	260c      	movs	r6, #12
 8000890:	25ff      	movs	r5, #255	; 0xff
 8000892:	469a      	mov	sl, r3
 8000894:	e72c      	b.n	80006f0 <__aeabi_fmul+0x38>
 8000896:	4648      	mov	r0, r9
 8000898:	f000 fa9e 	bl	8000dd8 <__clzsi2>
 800089c:	464a      	mov	r2, r9
 800089e:	1f43      	subs	r3, r0, #5
 80008a0:	2576      	movs	r5, #118	; 0x76
 80008a2:	409a      	lsls	r2, r3
 80008a4:	2300      	movs	r3, #0
 80008a6:	426d      	negs	r5, r5
 80008a8:	4691      	mov	r9, r2
 80008aa:	2600      	movs	r6, #0
 80008ac:	469a      	mov	sl, r3
 80008ae:	1a2d      	subs	r5, r5, r0
 80008b0:	e71e      	b.n	80006f0 <__aeabi_fmul+0x38>
 80008b2:	0020      	movs	r0, r4
 80008b4:	f000 fa90 	bl	8000dd8 <__clzsi2>
 80008b8:	4642      	mov	r2, r8
 80008ba:	1f43      	subs	r3, r0, #5
 80008bc:	409c      	lsls	r4, r3
 80008be:	1a2b      	subs	r3, r5, r0
 80008c0:	3b76      	subs	r3, #118	; 0x76
 80008c2:	407a      	eors	r2, r7
 80008c4:	2000      	movs	r0, #0
 80008c6:	b2d2      	uxtb	r2, r2
 80008c8:	1c5d      	adds	r5, r3, #1
 80008ca:	2e0a      	cmp	r6, #10
 80008cc:	dd00      	ble.n	80008d0 <__aeabi_fmul+0x218>
 80008ce:	e726      	b.n	800071e <__aeabi_fmul+0x66>
 80008d0:	e739      	b.n	8000746 <__aeabi_fmul+0x8e>
 80008d2:	2101      	movs	r1, #1
 80008d4:	1acb      	subs	r3, r1, r3
 80008d6:	2b1b      	cmp	r3, #27
 80008d8:	dd00      	ble.n	80008dc <__aeabi_fmul+0x224>
 80008da:	e73d      	b.n	8000758 <__aeabi_fmul+0xa0>
 80008dc:	359e      	adds	r5, #158	; 0x9e
 80008de:	0021      	movs	r1, r4
 80008e0:	40ac      	lsls	r4, r5
 80008e2:	40d9      	lsrs	r1, r3
 80008e4:	1e63      	subs	r3, r4, #1
 80008e6:	419c      	sbcs	r4, r3
 80008e8:	4321      	orrs	r1, r4
 80008ea:	074b      	lsls	r3, r1, #29
 80008ec:	d004      	beq.n	80008f8 <__aeabi_fmul+0x240>
 80008ee:	230f      	movs	r3, #15
 80008f0:	400b      	ands	r3, r1
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	d000      	beq.n	80008f8 <__aeabi_fmul+0x240>
 80008f6:	3104      	adds	r1, #4
 80008f8:	014b      	lsls	r3, r1, #5
 80008fa:	d504      	bpl.n	8000906 <__aeabi_fmul+0x24e>
 80008fc:	2001      	movs	r0, #1
 80008fe:	2100      	movs	r1, #0
 8000900:	e72c      	b.n	800075c <__aeabi_fmul+0xa4>
 8000902:	001d      	movs	r5, r3
 8000904:	e78f      	b.n	8000826 <__aeabi_fmul+0x16e>
 8000906:	0189      	lsls	r1, r1, #6
 8000908:	2000      	movs	r0, #0
 800090a:	0a49      	lsrs	r1, r1, #9
 800090c:	e726      	b.n	800075c <__aeabi_fmul+0xa4>
 800090e:	2302      	movs	r3, #2
 8000910:	2e0f      	cmp	r6, #15
 8000912:	d10c      	bne.n	800092e <__aeabi_fmul+0x276>
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	464b      	mov	r3, r9
 8000918:	03c9      	lsls	r1, r1, #15
 800091a:	420b      	tst	r3, r1
 800091c:	d00d      	beq.n	800093a <__aeabi_fmul+0x282>
 800091e:	420c      	tst	r4, r1
 8000920:	d10b      	bne.n	800093a <__aeabi_fmul+0x282>
 8000922:	4321      	orrs	r1, r4
 8000924:	0249      	lsls	r1, r1, #9
 8000926:	003a      	movs	r2, r7
 8000928:	20ff      	movs	r0, #255	; 0xff
 800092a:	0a49      	lsrs	r1, r1, #9
 800092c:	e716      	b.n	800075c <__aeabi_fmul+0xa4>
 800092e:	2e0b      	cmp	r6, #11
 8000930:	d000      	beq.n	8000934 <__aeabi_fmul+0x27c>
 8000932:	e6f7      	b.n	8000724 <__aeabi_fmul+0x6c>
 8000934:	46a1      	mov	r9, r4
 8000936:	469a      	mov	sl, r3
 8000938:	e736      	b.n	80007a8 <__aeabi_fmul+0xf0>
 800093a:	2180      	movs	r1, #128	; 0x80
 800093c:	464b      	mov	r3, r9
 800093e:	03c9      	lsls	r1, r1, #15
 8000940:	4319      	orrs	r1, r3
 8000942:	0249      	lsls	r1, r1, #9
 8000944:	4642      	mov	r2, r8
 8000946:	20ff      	movs	r0, #255	; 0xff
 8000948:	0a49      	lsrs	r1, r1, #9
 800094a:	e707      	b.n	800075c <__aeabi_fmul+0xa4>
 800094c:	2303      	movs	r3, #3
 800094e:	e7df      	b.n	8000910 <__aeabi_fmul+0x258>
 8000950:	f7ffffff 	.word	0xf7ffffff

08000954 <__aeabi_fsub>:
 8000954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000956:	46c6      	mov	lr, r8
 8000958:	0243      	lsls	r3, r0, #9
 800095a:	0a5b      	lsrs	r3, r3, #9
 800095c:	0045      	lsls	r5, r0, #1
 800095e:	00da      	lsls	r2, r3, #3
 8000960:	0fc4      	lsrs	r4, r0, #31
 8000962:	0248      	lsls	r0, r1, #9
 8000964:	004f      	lsls	r7, r1, #1
 8000966:	4694      	mov	ip, r2
 8000968:	0a42      	lsrs	r2, r0, #9
 800096a:	001e      	movs	r6, r3
 800096c:	4690      	mov	r8, r2
 800096e:	b500      	push	{lr}
 8000970:	0e2d      	lsrs	r5, r5, #24
 8000972:	0e3f      	lsrs	r7, r7, #24
 8000974:	0fc9      	lsrs	r1, r1, #31
 8000976:	0980      	lsrs	r0, r0, #6
 8000978:	2fff      	cmp	r7, #255	; 0xff
 800097a:	d059      	beq.n	8000a30 <__aeabi_fsub+0xdc>
 800097c:	2201      	movs	r2, #1
 800097e:	4051      	eors	r1, r2
 8000980:	428c      	cmp	r4, r1
 8000982:	d039      	beq.n	80009f8 <__aeabi_fsub+0xa4>
 8000984:	1bea      	subs	r2, r5, r7
 8000986:	2a00      	cmp	r2, #0
 8000988:	dd58      	ble.n	8000a3c <__aeabi_fsub+0xe8>
 800098a:	2f00      	cmp	r7, #0
 800098c:	d068      	beq.n	8000a60 <__aeabi_fsub+0x10c>
 800098e:	2dff      	cmp	r5, #255	; 0xff
 8000990:	d100      	bne.n	8000994 <__aeabi_fsub+0x40>
 8000992:	e0d1      	b.n	8000b38 <__aeabi_fsub+0x1e4>
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	04db      	lsls	r3, r3, #19
 8000998:	4318      	orrs	r0, r3
 800099a:	2a1b      	cmp	r2, #27
 800099c:	dc00      	bgt.n	80009a0 <__aeabi_fsub+0x4c>
 800099e:	e0e3      	b.n	8000b68 <__aeabi_fsub+0x214>
 80009a0:	2301      	movs	r3, #1
 80009a2:	4662      	mov	r2, ip
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	015a      	lsls	r2, r3, #5
 80009a8:	d400      	bmi.n	80009ac <__aeabi_fsub+0x58>
 80009aa:	e0ac      	b.n	8000b06 <__aeabi_fsub+0x1b2>
 80009ac:	019b      	lsls	r3, r3, #6
 80009ae:	099e      	lsrs	r6, r3, #6
 80009b0:	0030      	movs	r0, r6
 80009b2:	f000 fa11 	bl	8000dd8 <__clzsi2>
 80009b6:	0033      	movs	r3, r6
 80009b8:	3805      	subs	r0, #5
 80009ba:	4083      	lsls	r3, r0
 80009bc:	4285      	cmp	r5, r0
 80009be:	dc00      	bgt.n	80009c2 <__aeabi_fsub+0x6e>
 80009c0:	e0c6      	b.n	8000b50 <__aeabi_fsub+0x1fc>
 80009c2:	4ab2      	ldr	r2, [pc, #712]	; (8000c8c <__aeabi_fsub+0x338>)
 80009c4:	1a2d      	subs	r5, r5, r0
 80009c6:	4013      	ands	r3, r2
 80009c8:	075a      	lsls	r2, r3, #29
 80009ca:	d004      	beq.n	80009d6 <__aeabi_fsub+0x82>
 80009cc:	220f      	movs	r2, #15
 80009ce:	401a      	ands	r2, r3
 80009d0:	2a04      	cmp	r2, #4
 80009d2:	d000      	beq.n	80009d6 <__aeabi_fsub+0x82>
 80009d4:	3304      	adds	r3, #4
 80009d6:	015a      	lsls	r2, r3, #5
 80009d8:	d400      	bmi.n	80009dc <__aeabi_fsub+0x88>
 80009da:	e097      	b.n	8000b0c <__aeabi_fsub+0x1b8>
 80009dc:	1c6a      	adds	r2, r5, #1
 80009de:	2dfe      	cmp	r5, #254	; 0xfe
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fsub+0x90>
 80009e2:	e084      	b.n	8000aee <__aeabi_fsub+0x19a>
 80009e4:	019b      	lsls	r3, r3, #6
 80009e6:	0a5e      	lsrs	r6, r3, #9
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	05d0      	lsls	r0, r2, #23
 80009ec:	4330      	orrs	r0, r6
 80009ee:	07e4      	lsls	r4, r4, #31
 80009f0:	4320      	orrs	r0, r4
 80009f2:	bc80      	pop	{r7}
 80009f4:	46b8      	mov	r8, r7
 80009f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009f8:	1bea      	subs	r2, r5, r7
 80009fa:	2a00      	cmp	r2, #0
 80009fc:	dd41      	ble.n	8000a82 <__aeabi_fsub+0x12e>
 80009fe:	2f00      	cmp	r7, #0
 8000a00:	d06b      	beq.n	8000ada <__aeabi_fsub+0x186>
 8000a02:	2dff      	cmp	r5, #255	; 0xff
 8000a04:	d100      	bne.n	8000a08 <__aeabi_fsub+0xb4>
 8000a06:	e097      	b.n	8000b38 <__aeabi_fsub+0x1e4>
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	04db      	lsls	r3, r3, #19
 8000a0c:	4318      	orrs	r0, r3
 8000a0e:	2a1b      	cmp	r2, #27
 8000a10:	dc00      	bgt.n	8000a14 <__aeabi_fsub+0xc0>
 8000a12:	e0cc      	b.n	8000bae <__aeabi_fsub+0x25a>
 8000a14:	2301      	movs	r3, #1
 8000a16:	4463      	add	r3, ip
 8000a18:	015a      	lsls	r2, r3, #5
 8000a1a:	d574      	bpl.n	8000b06 <__aeabi_fsub+0x1b2>
 8000a1c:	3501      	adds	r5, #1
 8000a1e:	2dff      	cmp	r5, #255	; 0xff
 8000a20:	d065      	beq.n	8000aee <__aeabi_fsub+0x19a>
 8000a22:	2201      	movs	r2, #1
 8000a24:	499a      	ldr	r1, [pc, #616]	; (8000c90 <__aeabi_fsub+0x33c>)
 8000a26:	401a      	ands	r2, r3
 8000a28:	085b      	lsrs	r3, r3, #1
 8000a2a:	400b      	ands	r3, r1
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	e7cb      	b.n	80009c8 <__aeabi_fsub+0x74>
 8000a30:	2800      	cmp	r0, #0
 8000a32:	d01f      	beq.n	8000a74 <__aeabi_fsub+0x120>
 8000a34:	428c      	cmp	r4, r1
 8000a36:	d022      	beq.n	8000a7e <__aeabi_fsub+0x12a>
 8000a38:	002a      	movs	r2, r5
 8000a3a:	3aff      	subs	r2, #255	; 0xff
 8000a3c:	2a00      	cmp	r2, #0
 8000a3e:	d035      	beq.n	8000aac <__aeabi_fsub+0x158>
 8000a40:	1b7a      	subs	r2, r7, r5
 8000a42:	2d00      	cmp	r5, #0
 8000a44:	d000      	beq.n	8000a48 <__aeabi_fsub+0xf4>
 8000a46:	e099      	b.n	8000b7c <__aeabi_fsub+0x228>
 8000a48:	4663      	mov	r3, ip
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_fsub+0xfc>
 8000a4e:	e0dd      	b.n	8000c0c <__aeabi_fsub+0x2b8>
 8000a50:	1e53      	subs	r3, r2, #1
 8000a52:	2a01      	cmp	r2, #1
 8000a54:	d100      	bne.n	8000a58 <__aeabi_fsub+0x104>
 8000a56:	e105      	b.n	8000c64 <__aeabi_fsub+0x310>
 8000a58:	2aff      	cmp	r2, #255	; 0xff
 8000a5a:	d06b      	beq.n	8000b34 <__aeabi_fsub+0x1e0>
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	e094      	b.n	8000b8a <__aeabi_fsub+0x236>
 8000a60:	2800      	cmp	r0, #0
 8000a62:	d073      	beq.n	8000b4c <__aeabi_fsub+0x1f8>
 8000a64:	1e51      	subs	r1, r2, #1
 8000a66:	2a01      	cmp	r2, #1
 8000a68:	d100      	bne.n	8000a6c <__aeabi_fsub+0x118>
 8000a6a:	e0df      	b.n	8000c2c <__aeabi_fsub+0x2d8>
 8000a6c:	2aff      	cmp	r2, #255	; 0xff
 8000a6e:	d063      	beq.n	8000b38 <__aeabi_fsub+0x1e4>
 8000a70:	000a      	movs	r2, r1
 8000a72:	e792      	b.n	800099a <__aeabi_fsub+0x46>
 8000a74:	2201      	movs	r2, #1
 8000a76:	4051      	eors	r1, r2
 8000a78:	42a1      	cmp	r1, r4
 8000a7a:	d000      	beq.n	8000a7e <__aeabi_fsub+0x12a>
 8000a7c:	e782      	b.n	8000984 <__aeabi_fsub+0x30>
 8000a7e:	002a      	movs	r2, r5
 8000a80:	3aff      	subs	r2, #255	; 0xff
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d036      	beq.n	8000af4 <__aeabi_fsub+0x1a0>
 8000a86:	1b7a      	subs	r2, r7, r5
 8000a88:	2d00      	cmp	r5, #0
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_fsub+0x13a>
 8000a8c:	e0aa      	b.n	8000be4 <__aeabi_fsub+0x290>
 8000a8e:	2fff      	cmp	r7, #255	; 0xff
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fsub+0x140>
 8000a92:	e0da      	b.n	8000c4a <__aeabi_fsub+0x2f6>
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	4661      	mov	r1, ip
 8000a98:	04db      	lsls	r3, r3, #19
 8000a9a:	4319      	orrs	r1, r3
 8000a9c:	468c      	mov	ip, r1
 8000a9e:	2a1b      	cmp	r2, #27
 8000aa0:	dc00      	bgt.n	8000aa4 <__aeabi_fsub+0x150>
 8000aa2:	e0d4      	b.n	8000c4e <__aeabi_fsub+0x2fa>
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	003d      	movs	r5, r7
 8000aa8:	181b      	adds	r3, r3, r0
 8000aaa:	e7b5      	b.n	8000a18 <__aeabi_fsub+0xc4>
 8000aac:	27fe      	movs	r7, #254	; 0xfe
 8000aae:	1c6a      	adds	r2, r5, #1
 8000ab0:	4217      	tst	r7, r2
 8000ab2:	d171      	bne.n	8000b98 <__aeabi_fsub+0x244>
 8000ab4:	2d00      	cmp	r5, #0
 8000ab6:	d000      	beq.n	8000aba <__aeabi_fsub+0x166>
 8000ab8:	e09e      	b.n	8000bf8 <__aeabi_fsub+0x2a4>
 8000aba:	4663      	mov	r3, ip
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_fsub+0x16e>
 8000ac0:	e0d5      	b.n	8000c6e <__aeabi_fsub+0x31a>
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d100      	bne.n	8000aca <__aeabi_fsub+0x176>
 8000ac8:	e78f      	b.n	80009ea <__aeabi_fsub+0x96>
 8000aca:	1a1b      	subs	r3, r3, r0
 8000acc:	015e      	lsls	r6, r3, #5
 8000ace:	d400      	bmi.n	8000ad2 <__aeabi_fsub+0x17e>
 8000ad0:	e0d6      	b.n	8000c80 <__aeabi_fsub+0x32c>
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	1ac3      	subs	r3, r0, r3
 8000ad8:	e776      	b.n	80009c8 <__aeabi_fsub+0x74>
 8000ada:	2800      	cmp	r0, #0
 8000adc:	d036      	beq.n	8000b4c <__aeabi_fsub+0x1f8>
 8000ade:	1e51      	subs	r1, r2, #1
 8000ae0:	2a01      	cmp	r2, #1
 8000ae2:	d100      	bne.n	8000ae6 <__aeabi_fsub+0x192>
 8000ae4:	e09a      	b.n	8000c1c <__aeabi_fsub+0x2c8>
 8000ae6:	2aff      	cmp	r2, #255	; 0xff
 8000ae8:	d026      	beq.n	8000b38 <__aeabi_fsub+0x1e4>
 8000aea:	000a      	movs	r2, r1
 8000aec:	e78f      	b.n	8000a0e <__aeabi_fsub+0xba>
 8000aee:	22ff      	movs	r2, #255	; 0xff
 8000af0:	2600      	movs	r6, #0
 8000af2:	e77a      	b.n	80009ea <__aeabi_fsub+0x96>
 8000af4:	27fe      	movs	r7, #254	; 0xfe
 8000af6:	1c6a      	adds	r2, r5, #1
 8000af8:	4217      	tst	r7, r2
 8000afa:	d062      	beq.n	8000bc2 <__aeabi_fsub+0x26e>
 8000afc:	2aff      	cmp	r2, #255	; 0xff
 8000afe:	d0f6      	beq.n	8000aee <__aeabi_fsub+0x19a>
 8000b00:	0015      	movs	r5, r2
 8000b02:	4460      	add	r0, ip
 8000b04:	0843      	lsrs	r3, r0, #1
 8000b06:	075a      	lsls	r2, r3, #29
 8000b08:	d000      	beq.n	8000b0c <__aeabi_fsub+0x1b8>
 8000b0a:	e75f      	b.n	80009cc <__aeabi_fsub+0x78>
 8000b0c:	08db      	lsrs	r3, r3, #3
 8000b0e:	2dff      	cmp	r5, #255	; 0xff
 8000b10:	d012      	beq.n	8000b38 <__aeabi_fsub+0x1e4>
 8000b12:	025b      	lsls	r3, r3, #9
 8000b14:	0a5e      	lsrs	r6, r3, #9
 8000b16:	b2ea      	uxtb	r2, r5
 8000b18:	e767      	b.n	80009ea <__aeabi_fsub+0x96>
 8000b1a:	4662      	mov	r2, ip
 8000b1c:	2a00      	cmp	r2, #0
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_fsub+0x1ce>
 8000b20:	e093      	b.n	8000c4a <__aeabi_fsub+0x2f6>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	d008      	beq.n	8000b38 <__aeabi_fsub+0x1e4>
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	03d2      	lsls	r2, r2, #15
 8000b2a:	4213      	tst	r3, r2
 8000b2c:	d004      	beq.n	8000b38 <__aeabi_fsub+0x1e4>
 8000b2e:	4640      	mov	r0, r8
 8000b30:	4210      	tst	r0, r2
 8000b32:	d101      	bne.n	8000b38 <__aeabi_fsub+0x1e4>
 8000b34:	000c      	movs	r4, r1
 8000b36:	4643      	mov	r3, r8
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d0d8      	beq.n	8000aee <__aeabi_fsub+0x19a>
 8000b3c:	2680      	movs	r6, #128	; 0x80
 8000b3e:	03f6      	lsls	r6, r6, #15
 8000b40:	431e      	orrs	r6, r3
 8000b42:	0276      	lsls	r6, r6, #9
 8000b44:	22ff      	movs	r2, #255	; 0xff
 8000b46:	0a76      	lsrs	r6, r6, #9
 8000b48:	e74f      	b.n	80009ea <__aeabi_fsub+0x96>
 8000b4a:	4643      	mov	r3, r8
 8000b4c:	0015      	movs	r5, r2
 8000b4e:	e7de      	b.n	8000b0e <__aeabi_fsub+0x1ba>
 8000b50:	2220      	movs	r2, #32
 8000b52:	1b40      	subs	r0, r0, r5
 8000b54:	3001      	adds	r0, #1
 8000b56:	1a12      	subs	r2, r2, r0
 8000b58:	0019      	movs	r1, r3
 8000b5a:	4093      	lsls	r3, r2
 8000b5c:	40c1      	lsrs	r1, r0
 8000b5e:	1e5a      	subs	r2, r3, #1
 8000b60:	4193      	sbcs	r3, r2
 8000b62:	2500      	movs	r5, #0
 8000b64:	430b      	orrs	r3, r1
 8000b66:	e72f      	b.n	80009c8 <__aeabi_fsub+0x74>
 8000b68:	2320      	movs	r3, #32
 8000b6a:	1a9b      	subs	r3, r3, r2
 8000b6c:	0001      	movs	r1, r0
 8000b6e:	4098      	lsls	r0, r3
 8000b70:	0003      	movs	r3, r0
 8000b72:	40d1      	lsrs	r1, r2
 8000b74:	1e5a      	subs	r2, r3, #1
 8000b76:	4193      	sbcs	r3, r2
 8000b78:	430b      	orrs	r3, r1
 8000b7a:	e712      	b.n	80009a2 <__aeabi_fsub+0x4e>
 8000b7c:	2fff      	cmp	r7, #255	; 0xff
 8000b7e:	d0d9      	beq.n	8000b34 <__aeabi_fsub+0x1e0>
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	4664      	mov	r4, ip
 8000b84:	04db      	lsls	r3, r3, #19
 8000b86:	431c      	orrs	r4, r3
 8000b88:	46a4      	mov	ip, r4
 8000b8a:	2a1b      	cmp	r2, #27
 8000b8c:	dd52      	ble.n	8000c34 <__aeabi_fsub+0x2e0>
 8000b8e:	2301      	movs	r3, #1
 8000b90:	000c      	movs	r4, r1
 8000b92:	003d      	movs	r5, r7
 8000b94:	1ac3      	subs	r3, r0, r3
 8000b96:	e706      	b.n	80009a6 <__aeabi_fsub+0x52>
 8000b98:	4663      	mov	r3, ip
 8000b9a:	1a1e      	subs	r6, r3, r0
 8000b9c:	0173      	lsls	r3, r6, #5
 8000b9e:	d439      	bmi.n	8000c14 <__aeabi_fsub+0x2c0>
 8000ba0:	2e00      	cmp	r6, #0
 8000ba2:	d000      	beq.n	8000ba6 <__aeabi_fsub+0x252>
 8000ba4:	e704      	b.n	80009b0 <__aeabi_fsub+0x5c>
 8000ba6:	2400      	movs	r4, #0
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2600      	movs	r6, #0
 8000bac:	e71d      	b.n	80009ea <__aeabi_fsub+0x96>
 8000bae:	2320      	movs	r3, #32
 8000bb0:	1a9b      	subs	r3, r3, r2
 8000bb2:	0001      	movs	r1, r0
 8000bb4:	4098      	lsls	r0, r3
 8000bb6:	0003      	movs	r3, r0
 8000bb8:	40d1      	lsrs	r1, r2
 8000bba:	1e5a      	subs	r2, r3, #1
 8000bbc:	4193      	sbcs	r3, r2
 8000bbe:	430b      	orrs	r3, r1
 8000bc0:	e729      	b.n	8000a16 <__aeabi_fsub+0xc2>
 8000bc2:	2d00      	cmp	r5, #0
 8000bc4:	d1a9      	bne.n	8000b1a <__aeabi_fsub+0x1c6>
 8000bc6:	4663      	mov	r3, ip
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d056      	beq.n	8000c7a <__aeabi_fsub+0x326>
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_fsub+0x280>
 8000bd2:	e70a      	b.n	80009ea <__aeabi_fsub+0x96>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	4463      	add	r3, ip
 8000bd8:	015a      	lsls	r2, r3, #5
 8000bda:	d594      	bpl.n	8000b06 <__aeabi_fsub+0x1b2>
 8000bdc:	4a2b      	ldr	r2, [pc, #172]	; (8000c8c <__aeabi_fsub+0x338>)
 8000bde:	3501      	adds	r5, #1
 8000be0:	4013      	ands	r3, r2
 8000be2:	e790      	b.n	8000b06 <__aeabi_fsub+0x1b2>
 8000be4:	4663      	mov	r3, ip
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d0af      	beq.n	8000b4a <__aeabi_fsub+0x1f6>
 8000bea:	1e53      	subs	r3, r2, #1
 8000bec:	2a01      	cmp	r2, #1
 8000bee:	d015      	beq.n	8000c1c <__aeabi_fsub+0x2c8>
 8000bf0:	2aff      	cmp	r2, #255	; 0xff
 8000bf2:	d02a      	beq.n	8000c4a <__aeabi_fsub+0x2f6>
 8000bf4:	001a      	movs	r2, r3
 8000bf6:	e752      	b.n	8000a9e <__aeabi_fsub+0x14a>
 8000bf8:	4662      	mov	r2, ip
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	d191      	bne.n	8000b22 <__aeabi_fsub+0x1ce>
 8000bfe:	2800      	cmp	r0, #0
 8000c00:	d198      	bne.n	8000b34 <__aeabi_fsub+0x1e0>
 8000c02:	2680      	movs	r6, #128	; 0x80
 8000c04:	2400      	movs	r4, #0
 8000c06:	22ff      	movs	r2, #255	; 0xff
 8000c08:	03f6      	lsls	r6, r6, #15
 8000c0a:	e6ee      	b.n	80009ea <__aeabi_fsub+0x96>
 8000c0c:	000c      	movs	r4, r1
 8000c0e:	4643      	mov	r3, r8
 8000c10:	0015      	movs	r5, r2
 8000c12:	e77c      	b.n	8000b0e <__aeabi_fsub+0x1ba>
 8000c14:	4663      	mov	r3, ip
 8000c16:	000c      	movs	r4, r1
 8000c18:	1ac6      	subs	r6, r0, r3
 8000c1a:	e6c9      	b.n	80009b0 <__aeabi_fsub+0x5c>
 8000c1c:	0003      	movs	r3, r0
 8000c1e:	4463      	add	r3, ip
 8000c20:	2501      	movs	r5, #1
 8000c22:	015a      	lsls	r2, r3, #5
 8000c24:	d400      	bmi.n	8000c28 <__aeabi_fsub+0x2d4>
 8000c26:	e76e      	b.n	8000b06 <__aeabi_fsub+0x1b2>
 8000c28:	2502      	movs	r5, #2
 8000c2a:	e6fa      	b.n	8000a22 <__aeabi_fsub+0xce>
 8000c2c:	4663      	mov	r3, ip
 8000c2e:	2501      	movs	r5, #1
 8000c30:	1a1b      	subs	r3, r3, r0
 8000c32:	e6b8      	b.n	80009a6 <__aeabi_fsub+0x52>
 8000c34:	4664      	mov	r4, ip
 8000c36:	2320      	movs	r3, #32
 8000c38:	40d4      	lsrs	r4, r2
 8000c3a:	1a9b      	subs	r3, r3, r2
 8000c3c:	4662      	mov	r2, ip
 8000c3e:	409a      	lsls	r2, r3
 8000c40:	0013      	movs	r3, r2
 8000c42:	1e5a      	subs	r2, r3, #1
 8000c44:	4193      	sbcs	r3, r2
 8000c46:	4323      	orrs	r3, r4
 8000c48:	e7a2      	b.n	8000b90 <__aeabi_fsub+0x23c>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	e774      	b.n	8000b38 <__aeabi_fsub+0x1e4>
 8000c4e:	4661      	mov	r1, ip
 8000c50:	2320      	movs	r3, #32
 8000c52:	40d1      	lsrs	r1, r2
 8000c54:	1a9b      	subs	r3, r3, r2
 8000c56:	4662      	mov	r2, ip
 8000c58:	409a      	lsls	r2, r3
 8000c5a:	0013      	movs	r3, r2
 8000c5c:	1e5a      	subs	r2, r3, #1
 8000c5e:	4193      	sbcs	r3, r2
 8000c60:	430b      	orrs	r3, r1
 8000c62:	e720      	b.n	8000aa6 <__aeabi_fsub+0x152>
 8000c64:	4663      	mov	r3, ip
 8000c66:	000c      	movs	r4, r1
 8000c68:	2501      	movs	r5, #1
 8000c6a:	1ac3      	subs	r3, r0, r3
 8000c6c:	e69b      	b.n	80009a6 <__aeabi_fsub+0x52>
 8000c6e:	2800      	cmp	r0, #0
 8000c70:	d099      	beq.n	8000ba6 <__aeabi_fsub+0x252>
 8000c72:	000c      	movs	r4, r1
 8000c74:	4646      	mov	r6, r8
 8000c76:	2200      	movs	r2, #0
 8000c78:	e6b7      	b.n	80009ea <__aeabi_fsub+0x96>
 8000c7a:	4646      	mov	r6, r8
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	e6b4      	b.n	80009ea <__aeabi_fsub+0x96>
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d000      	beq.n	8000c86 <__aeabi_fsub+0x332>
 8000c84:	e73f      	b.n	8000b06 <__aeabi_fsub+0x1b2>
 8000c86:	2400      	movs	r4, #0
 8000c88:	2600      	movs	r6, #0
 8000c8a:	e6ae      	b.n	80009ea <__aeabi_fsub+0x96>
 8000c8c:	fbffffff 	.word	0xfbffffff
 8000c90:	7dffffff 	.word	0x7dffffff

08000c94 <__aeabi_f2iz>:
 8000c94:	0241      	lsls	r1, r0, #9
 8000c96:	0042      	lsls	r2, r0, #1
 8000c98:	0fc3      	lsrs	r3, r0, #31
 8000c9a:	0a49      	lsrs	r1, r1, #9
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	0e12      	lsrs	r2, r2, #24
 8000ca0:	2a7e      	cmp	r2, #126	; 0x7e
 8000ca2:	dd03      	ble.n	8000cac <__aeabi_f2iz+0x18>
 8000ca4:	2a9d      	cmp	r2, #157	; 0x9d
 8000ca6:	dd02      	ble.n	8000cae <__aeabi_f2iz+0x1a>
 8000ca8:	4a09      	ldr	r2, [pc, #36]	; (8000cd0 <__aeabi_f2iz+0x3c>)
 8000caa:	1898      	adds	r0, r3, r2
 8000cac:	4770      	bx	lr
 8000cae:	2080      	movs	r0, #128	; 0x80
 8000cb0:	0400      	lsls	r0, r0, #16
 8000cb2:	4301      	orrs	r1, r0
 8000cb4:	2a95      	cmp	r2, #149	; 0x95
 8000cb6:	dc07      	bgt.n	8000cc8 <__aeabi_f2iz+0x34>
 8000cb8:	2096      	movs	r0, #150	; 0x96
 8000cba:	1a82      	subs	r2, r0, r2
 8000cbc:	40d1      	lsrs	r1, r2
 8000cbe:	4248      	negs	r0, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d1f3      	bne.n	8000cac <__aeabi_f2iz+0x18>
 8000cc4:	0008      	movs	r0, r1
 8000cc6:	e7f1      	b.n	8000cac <__aeabi_f2iz+0x18>
 8000cc8:	3a96      	subs	r2, #150	; 0x96
 8000cca:	4091      	lsls	r1, r2
 8000ccc:	e7f7      	b.n	8000cbe <__aeabi_f2iz+0x2a>
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	7fffffff 	.word	0x7fffffff

08000cd4 <__aeabi_ui2f>:
 8000cd4:	b570      	push	{r4, r5, r6, lr}
 8000cd6:	1e04      	subs	r4, r0, #0
 8000cd8:	d00e      	beq.n	8000cf8 <__aeabi_ui2f+0x24>
 8000cda:	f000 f87d 	bl	8000dd8 <__clzsi2>
 8000cde:	239e      	movs	r3, #158	; 0x9e
 8000ce0:	0001      	movs	r1, r0
 8000ce2:	1a1b      	subs	r3, r3, r0
 8000ce4:	2b96      	cmp	r3, #150	; 0x96
 8000ce6:	dc0c      	bgt.n	8000d02 <__aeabi_ui2f+0x2e>
 8000ce8:	2808      	cmp	r0, #8
 8000cea:	d02c      	beq.n	8000d46 <__aeabi_ui2f+0x72>
 8000cec:	3908      	subs	r1, #8
 8000cee:	408c      	lsls	r4, r1
 8000cf0:	0264      	lsls	r4, r4, #9
 8000cf2:	0a64      	lsrs	r4, r4, #9
 8000cf4:	b2d8      	uxtb	r0, r3
 8000cf6:	e001      	b.n	8000cfc <__aeabi_ui2f+0x28>
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	2400      	movs	r4, #0
 8000cfc:	05c0      	lsls	r0, r0, #23
 8000cfe:	4320      	orrs	r0, r4
 8000d00:	bd70      	pop	{r4, r5, r6, pc}
 8000d02:	2b99      	cmp	r3, #153	; 0x99
 8000d04:	dd0a      	ble.n	8000d1c <__aeabi_ui2f+0x48>
 8000d06:	0002      	movs	r2, r0
 8000d08:	0020      	movs	r0, r4
 8000d0a:	321b      	adds	r2, #27
 8000d0c:	4090      	lsls	r0, r2
 8000d0e:	0002      	movs	r2, r0
 8000d10:	1e50      	subs	r0, r2, #1
 8000d12:	4182      	sbcs	r2, r0
 8000d14:	2005      	movs	r0, #5
 8000d16:	1a40      	subs	r0, r0, r1
 8000d18:	40c4      	lsrs	r4, r0
 8000d1a:	4314      	orrs	r4, r2
 8000d1c:	2905      	cmp	r1, #5
 8000d1e:	dc16      	bgt.n	8000d4e <__aeabi_ui2f+0x7a>
 8000d20:	0022      	movs	r2, r4
 8000d22:	480f      	ldr	r0, [pc, #60]	; (8000d60 <__aeabi_ui2f+0x8c>)
 8000d24:	4002      	ands	r2, r0
 8000d26:	0765      	lsls	r5, r4, #29
 8000d28:	d009      	beq.n	8000d3e <__aeabi_ui2f+0x6a>
 8000d2a:	250f      	movs	r5, #15
 8000d2c:	402c      	ands	r4, r5
 8000d2e:	2c04      	cmp	r4, #4
 8000d30:	d005      	beq.n	8000d3e <__aeabi_ui2f+0x6a>
 8000d32:	3204      	adds	r2, #4
 8000d34:	0154      	lsls	r4, r2, #5
 8000d36:	d502      	bpl.n	8000d3e <__aeabi_ui2f+0x6a>
 8000d38:	239f      	movs	r3, #159	; 0x9f
 8000d3a:	4002      	ands	r2, r0
 8000d3c:	1a5b      	subs	r3, r3, r1
 8000d3e:	0192      	lsls	r2, r2, #6
 8000d40:	0a54      	lsrs	r4, r2, #9
 8000d42:	b2d8      	uxtb	r0, r3
 8000d44:	e7da      	b.n	8000cfc <__aeabi_ui2f+0x28>
 8000d46:	0264      	lsls	r4, r4, #9
 8000d48:	2096      	movs	r0, #150	; 0x96
 8000d4a:	0a64      	lsrs	r4, r4, #9
 8000d4c:	e7d6      	b.n	8000cfc <__aeabi_ui2f+0x28>
 8000d4e:	1f4a      	subs	r2, r1, #5
 8000d50:	4094      	lsls	r4, r2
 8000d52:	0022      	movs	r2, r4
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <__aeabi_ui2f+0x8c>)
 8000d56:	4002      	ands	r2, r0
 8000d58:	0765      	lsls	r5, r4, #29
 8000d5a:	d0f0      	beq.n	8000d3e <__aeabi_ui2f+0x6a>
 8000d5c:	e7e5      	b.n	8000d2a <__aeabi_ui2f+0x56>
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	fbffffff 	.word	0xfbffffff

08000d64 <__aeabi_cfrcmple>:
 8000d64:	4684      	mov	ip, r0
 8000d66:	0008      	movs	r0, r1
 8000d68:	4661      	mov	r1, ip
 8000d6a:	e7ff      	b.n	8000d6c <__aeabi_cfcmpeq>

08000d6c <__aeabi_cfcmpeq>:
 8000d6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000d6e:	f000 f8c9 	bl	8000f04 <__lesf2>
 8000d72:	2800      	cmp	r0, #0
 8000d74:	d401      	bmi.n	8000d7a <__aeabi_cfcmpeq+0xe>
 8000d76:	2100      	movs	r1, #0
 8000d78:	42c8      	cmn	r0, r1
 8000d7a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000d7c <__aeabi_fcmpeq>:
 8000d7c:	b510      	push	{r4, lr}
 8000d7e:	f000 f855 	bl	8000e2c <__eqsf2>
 8000d82:	4240      	negs	r0, r0
 8000d84:	3001      	adds	r0, #1
 8000d86:	bd10      	pop	{r4, pc}

08000d88 <__aeabi_fcmplt>:
 8000d88:	b510      	push	{r4, lr}
 8000d8a:	f000 f8bb 	bl	8000f04 <__lesf2>
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	db01      	blt.n	8000d96 <__aeabi_fcmplt+0xe>
 8000d92:	2000      	movs	r0, #0
 8000d94:	bd10      	pop	{r4, pc}
 8000d96:	2001      	movs	r0, #1
 8000d98:	bd10      	pop	{r4, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)

08000d9c <__aeabi_fcmple>:
 8000d9c:	b510      	push	{r4, lr}
 8000d9e:	f000 f8b1 	bl	8000f04 <__lesf2>
 8000da2:	2800      	cmp	r0, #0
 8000da4:	dd01      	ble.n	8000daa <__aeabi_fcmple+0xe>
 8000da6:	2000      	movs	r0, #0
 8000da8:	bd10      	pop	{r4, pc}
 8000daa:	2001      	movs	r0, #1
 8000dac:	bd10      	pop	{r4, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)

08000db0 <__aeabi_fcmpgt>:
 8000db0:	b510      	push	{r4, lr}
 8000db2:	f000 f861 	bl	8000e78 <__gesf2>
 8000db6:	2800      	cmp	r0, #0
 8000db8:	dc01      	bgt.n	8000dbe <__aeabi_fcmpgt+0xe>
 8000dba:	2000      	movs	r0, #0
 8000dbc:	bd10      	pop	{r4, pc}
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	bd10      	pop	{r4, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)

08000dc4 <__aeabi_fcmpge>:
 8000dc4:	b510      	push	{r4, lr}
 8000dc6:	f000 f857 	bl	8000e78 <__gesf2>
 8000dca:	2800      	cmp	r0, #0
 8000dcc:	da01      	bge.n	8000dd2 <__aeabi_fcmpge+0xe>
 8000dce:	2000      	movs	r0, #0
 8000dd0:	bd10      	pop	{r4, pc}
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	bd10      	pop	{r4, pc}
 8000dd6:	46c0      	nop			; (mov r8, r8)

08000dd8 <__clzsi2>:
 8000dd8:	211c      	movs	r1, #28
 8000dda:	2301      	movs	r3, #1
 8000ddc:	041b      	lsls	r3, r3, #16
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d301      	bcc.n	8000de6 <__clzsi2+0xe>
 8000de2:	0c00      	lsrs	r0, r0, #16
 8000de4:	3910      	subs	r1, #16
 8000de6:	0a1b      	lsrs	r3, r3, #8
 8000de8:	4298      	cmp	r0, r3
 8000dea:	d301      	bcc.n	8000df0 <__clzsi2+0x18>
 8000dec:	0a00      	lsrs	r0, r0, #8
 8000dee:	3908      	subs	r1, #8
 8000df0:	091b      	lsrs	r3, r3, #4
 8000df2:	4298      	cmp	r0, r3
 8000df4:	d301      	bcc.n	8000dfa <__clzsi2+0x22>
 8000df6:	0900      	lsrs	r0, r0, #4
 8000df8:	3904      	subs	r1, #4
 8000dfa:	a202      	add	r2, pc, #8	; (adr r2, 8000e04 <__clzsi2+0x2c>)
 8000dfc:	5c10      	ldrb	r0, [r2, r0]
 8000dfe:	1840      	adds	r0, r0, r1
 8000e00:	4770      	bx	lr
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	02020304 	.word	0x02020304
 8000e08:	01010101 	.word	0x01010101
	...

08000e14 <__clzdi2>:
 8000e14:	b510      	push	{r4, lr}
 8000e16:	2900      	cmp	r1, #0
 8000e18:	d103      	bne.n	8000e22 <__clzdi2+0xe>
 8000e1a:	f7ff ffdd 	bl	8000dd8 <__clzsi2>
 8000e1e:	3020      	adds	r0, #32
 8000e20:	e002      	b.n	8000e28 <__clzdi2+0x14>
 8000e22:	0008      	movs	r0, r1
 8000e24:	f7ff ffd8 	bl	8000dd8 <__clzsi2>
 8000e28:	bd10      	pop	{r4, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)

08000e2c <__eqsf2>:
 8000e2c:	b570      	push	{r4, r5, r6, lr}
 8000e2e:	0042      	lsls	r2, r0, #1
 8000e30:	0245      	lsls	r5, r0, #9
 8000e32:	024e      	lsls	r6, r1, #9
 8000e34:	004c      	lsls	r4, r1, #1
 8000e36:	0fc3      	lsrs	r3, r0, #31
 8000e38:	0a6d      	lsrs	r5, r5, #9
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	0e12      	lsrs	r2, r2, #24
 8000e3e:	0a76      	lsrs	r6, r6, #9
 8000e40:	0e24      	lsrs	r4, r4, #24
 8000e42:	0fc9      	lsrs	r1, r1, #31
 8000e44:	2aff      	cmp	r2, #255	; 0xff
 8000e46:	d006      	beq.n	8000e56 <__eqsf2+0x2a>
 8000e48:	2cff      	cmp	r4, #255	; 0xff
 8000e4a:	d003      	beq.n	8000e54 <__eqsf2+0x28>
 8000e4c:	42a2      	cmp	r2, r4
 8000e4e:	d101      	bne.n	8000e54 <__eqsf2+0x28>
 8000e50:	42b5      	cmp	r5, r6
 8000e52:	d006      	beq.n	8000e62 <__eqsf2+0x36>
 8000e54:	bd70      	pop	{r4, r5, r6, pc}
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	d1fc      	bne.n	8000e54 <__eqsf2+0x28>
 8000e5a:	2cff      	cmp	r4, #255	; 0xff
 8000e5c:	d1fa      	bne.n	8000e54 <__eqsf2+0x28>
 8000e5e:	2e00      	cmp	r6, #0
 8000e60:	d1f8      	bne.n	8000e54 <__eqsf2+0x28>
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d006      	beq.n	8000e74 <__eqsf2+0x48>
 8000e66:	2001      	movs	r0, #1
 8000e68:	2a00      	cmp	r2, #0
 8000e6a:	d1f3      	bne.n	8000e54 <__eqsf2+0x28>
 8000e6c:	0028      	movs	r0, r5
 8000e6e:	1e43      	subs	r3, r0, #1
 8000e70:	4198      	sbcs	r0, r3
 8000e72:	e7ef      	b.n	8000e54 <__eqsf2+0x28>
 8000e74:	2000      	movs	r0, #0
 8000e76:	e7ed      	b.n	8000e54 <__eqsf2+0x28>

08000e78 <__gesf2>:
 8000e78:	b570      	push	{r4, r5, r6, lr}
 8000e7a:	0042      	lsls	r2, r0, #1
 8000e7c:	0245      	lsls	r5, r0, #9
 8000e7e:	024e      	lsls	r6, r1, #9
 8000e80:	004c      	lsls	r4, r1, #1
 8000e82:	0fc3      	lsrs	r3, r0, #31
 8000e84:	0a6d      	lsrs	r5, r5, #9
 8000e86:	0e12      	lsrs	r2, r2, #24
 8000e88:	0a76      	lsrs	r6, r6, #9
 8000e8a:	0e24      	lsrs	r4, r4, #24
 8000e8c:	0fc8      	lsrs	r0, r1, #31
 8000e8e:	2aff      	cmp	r2, #255	; 0xff
 8000e90:	d01b      	beq.n	8000eca <__gesf2+0x52>
 8000e92:	2cff      	cmp	r4, #255	; 0xff
 8000e94:	d00e      	beq.n	8000eb4 <__gesf2+0x3c>
 8000e96:	2a00      	cmp	r2, #0
 8000e98:	d11b      	bne.n	8000ed2 <__gesf2+0x5a>
 8000e9a:	2c00      	cmp	r4, #0
 8000e9c:	d101      	bne.n	8000ea2 <__gesf2+0x2a>
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d01c      	beq.n	8000edc <__gesf2+0x64>
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d00c      	beq.n	8000ec0 <__gesf2+0x48>
 8000ea6:	4283      	cmp	r3, r0
 8000ea8:	d01c      	beq.n	8000ee4 <__gesf2+0x6c>
 8000eaa:	2102      	movs	r1, #2
 8000eac:	1e58      	subs	r0, r3, #1
 8000eae:	4008      	ands	r0, r1
 8000eb0:	3801      	subs	r0, #1
 8000eb2:	bd70      	pop	{r4, r5, r6, pc}
 8000eb4:	2e00      	cmp	r6, #0
 8000eb6:	d122      	bne.n	8000efe <__gesf2+0x86>
 8000eb8:	2a00      	cmp	r2, #0
 8000eba:	d1f4      	bne.n	8000ea6 <__gesf2+0x2e>
 8000ebc:	2d00      	cmp	r5, #0
 8000ebe:	d1f2      	bne.n	8000ea6 <__gesf2+0x2e>
 8000ec0:	2800      	cmp	r0, #0
 8000ec2:	d1f6      	bne.n	8000eb2 <__gesf2+0x3a>
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	4240      	negs	r0, r0
 8000ec8:	e7f3      	b.n	8000eb2 <__gesf2+0x3a>
 8000eca:	2d00      	cmp	r5, #0
 8000ecc:	d117      	bne.n	8000efe <__gesf2+0x86>
 8000ece:	2cff      	cmp	r4, #255	; 0xff
 8000ed0:	d0f0      	beq.n	8000eb4 <__gesf2+0x3c>
 8000ed2:	2c00      	cmp	r4, #0
 8000ed4:	d1e7      	bne.n	8000ea6 <__gesf2+0x2e>
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	d1e5      	bne.n	8000ea6 <__gesf2+0x2e>
 8000eda:	e7e6      	b.n	8000eaa <__gesf2+0x32>
 8000edc:	2000      	movs	r0, #0
 8000ede:	2d00      	cmp	r5, #0
 8000ee0:	d0e7      	beq.n	8000eb2 <__gesf2+0x3a>
 8000ee2:	e7e2      	b.n	8000eaa <__gesf2+0x32>
 8000ee4:	42a2      	cmp	r2, r4
 8000ee6:	dc05      	bgt.n	8000ef4 <__gesf2+0x7c>
 8000ee8:	dbea      	blt.n	8000ec0 <__gesf2+0x48>
 8000eea:	42b5      	cmp	r5, r6
 8000eec:	d802      	bhi.n	8000ef4 <__gesf2+0x7c>
 8000eee:	d3e7      	bcc.n	8000ec0 <__gesf2+0x48>
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	e7de      	b.n	8000eb2 <__gesf2+0x3a>
 8000ef4:	4243      	negs	r3, r0
 8000ef6:	4158      	adcs	r0, r3
 8000ef8:	0040      	lsls	r0, r0, #1
 8000efa:	3801      	subs	r0, #1
 8000efc:	e7d9      	b.n	8000eb2 <__gesf2+0x3a>
 8000efe:	2002      	movs	r0, #2
 8000f00:	4240      	negs	r0, r0
 8000f02:	e7d6      	b.n	8000eb2 <__gesf2+0x3a>

08000f04 <__lesf2>:
 8000f04:	b570      	push	{r4, r5, r6, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0245      	lsls	r5, r0, #9
 8000f0a:	024e      	lsls	r6, r1, #9
 8000f0c:	004c      	lsls	r4, r1, #1
 8000f0e:	0fc3      	lsrs	r3, r0, #31
 8000f10:	0a6d      	lsrs	r5, r5, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a76      	lsrs	r6, r6, #9
 8000f16:	0e24      	lsrs	r4, r4, #24
 8000f18:	0fc8      	lsrs	r0, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	; 0xff
 8000f1c:	d00b      	beq.n	8000f36 <__lesf2+0x32>
 8000f1e:	2cff      	cmp	r4, #255	; 0xff
 8000f20:	d00d      	beq.n	8000f3e <__lesf2+0x3a>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11f      	bne.n	8000f66 <__lesf2+0x62>
 8000f26:	2c00      	cmp	r4, #0
 8000f28:	d116      	bne.n	8000f58 <__lesf2+0x54>
 8000f2a:	2e00      	cmp	r6, #0
 8000f2c:	d114      	bne.n	8000f58 <__lesf2+0x54>
 8000f2e:	2000      	movs	r0, #0
 8000f30:	2d00      	cmp	r5, #0
 8000f32:	d010      	beq.n	8000f56 <__lesf2+0x52>
 8000f34:	e009      	b.n	8000f4a <__lesf2+0x46>
 8000f36:	2d00      	cmp	r5, #0
 8000f38:	d10c      	bne.n	8000f54 <__lesf2+0x50>
 8000f3a:	2cff      	cmp	r4, #255	; 0xff
 8000f3c:	d113      	bne.n	8000f66 <__lesf2+0x62>
 8000f3e:	2e00      	cmp	r6, #0
 8000f40:	d108      	bne.n	8000f54 <__lesf2+0x50>
 8000f42:	2a00      	cmp	r2, #0
 8000f44:	d008      	beq.n	8000f58 <__lesf2+0x54>
 8000f46:	4283      	cmp	r3, r0
 8000f48:	d012      	beq.n	8000f70 <__lesf2+0x6c>
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	1e58      	subs	r0, r3, #1
 8000f4e:	4008      	ands	r0, r1
 8000f50:	3801      	subs	r0, #1
 8000f52:	e000      	b.n	8000f56 <__lesf2+0x52>
 8000f54:	2002      	movs	r0, #2
 8000f56:	bd70      	pop	{r4, r5, r6, pc}
 8000f58:	2d00      	cmp	r5, #0
 8000f5a:	d1f4      	bne.n	8000f46 <__lesf2+0x42>
 8000f5c:	2800      	cmp	r0, #0
 8000f5e:	d1fa      	bne.n	8000f56 <__lesf2+0x52>
 8000f60:	2001      	movs	r0, #1
 8000f62:	4240      	negs	r0, r0
 8000f64:	e7f7      	b.n	8000f56 <__lesf2+0x52>
 8000f66:	2c00      	cmp	r4, #0
 8000f68:	d1ed      	bne.n	8000f46 <__lesf2+0x42>
 8000f6a:	2e00      	cmp	r6, #0
 8000f6c:	d1eb      	bne.n	8000f46 <__lesf2+0x42>
 8000f6e:	e7ec      	b.n	8000f4a <__lesf2+0x46>
 8000f70:	42a2      	cmp	r2, r4
 8000f72:	dc05      	bgt.n	8000f80 <__lesf2+0x7c>
 8000f74:	dbf2      	blt.n	8000f5c <__lesf2+0x58>
 8000f76:	42b5      	cmp	r5, r6
 8000f78:	d802      	bhi.n	8000f80 <__lesf2+0x7c>
 8000f7a:	d3ef      	bcc.n	8000f5c <__lesf2+0x58>
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	e7ea      	b.n	8000f56 <__lesf2+0x52>
 8000f80:	4243      	negs	r3, r0
 8000f82:	4158      	adcs	r0, r3
 8000f84:	0040      	lsls	r0, r0, #1
 8000f86:	3801      	subs	r0, #1
 8000f88:	e7e5      	b.n	8000f56 <__lesf2+0x52>
 8000f8a:	46c0      	nop			; (mov r8, r8)

08000f8c <segment_write>:
		{ 1, 0, 0, 1, 0, 0, 0, 1 }, // Y (31)
		{ 1, 0, 1, 0, 0, 1, 0, 0 }, // Z (32)
		{ 1, 1, 1, 1, 1, 1, 1, 1 }, // BLANK (33)
		{ 1, 0, 0, 1, 1, 1, 0, 0 }}; // DEG (34)

void segment_write(uint8_t *data, uint8_t mode) {
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	000a      	movs	r2, r1
 8000f96:	1cfb      	adds	r3, r7, #3
 8000f98:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < 8; i++) {
 8000f9a:	230f      	movs	r3, #15
 8000f9c:	18fb      	adds	r3, r7, r3
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
 8000fa2:	e087      	b.n	80010b4 <segment_write+0x128>
		HAL_GPIO_WritePin(A_HT_GPIO_Port, A_HT_Pin, segment_data[data[0]][i]);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	001a      	movs	r2, r3
 8000faa:	240f      	movs	r4, #15
 8000fac:	193b      	adds	r3, r7, r4
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4946      	ldr	r1, [pc, #280]	; (80010cc <segment_write+0x140>)
 8000fb2:	00d2      	lsls	r2, r2, #3
 8000fb4:	188a      	adds	r2, r1, r2
 8000fb6:	5cd2      	ldrb	r2, [r2, r3]
 8000fb8:	23a0      	movs	r3, #160	; 0xa0
 8000fba:	05db      	lsls	r3, r3, #23
 8000fbc:	2102      	movs	r1, #2
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f001 f8cd 	bl	800215e <HAL_GPIO_WritePin>
		if((mode == 1) && (i== 0)){
 8000fc4:	1cfb      	adds	r3, r7, #3
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d10b      	bne.n	8000fe4 <segment_write+0x58>
 8000fcc:	193b      	adds	r3, r7, r4
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d107      	bne.n	8000fe4 <segment_write+0x58>
			HAL_GPIO_WritePin(A_HO_GPIO_Port, A_HO_Pin, 0);
 8000fd4:	23a0      	movs	r3, #160	; 0xa0
 8000fd6:	05db      	lsls	r3, r3, #23
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2110      	movs	r1, #16
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f001 f8be 	bl	800215e <HAL_GPIO_WritePin>
 8000fe2:	e010      	b.n	8001006 <segment_write+0x7a>
		}else{
			HAL_GPIO_WritePin(A_HO_GPIO_Port, A_HO_Pin, segment_data[data[1]][i]);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	001a      	movs	r2, r3
 8000fec:	230f      	movs	r3, #15
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	4936      	ldr	r1, [pc, #216]	; (80010cc <segment_write+0x140>)
 8000ff4:	00d2      	lsls	r2, r2, #3
 8000ff6:	188a      	adds	r2, r1, r2
 8000ff8:	5cd2      	ldrb	r2, [r2, r3]
 8000ffa:	23a0      	movs	r3, #160	; 0xa0
 8000ffc:	05db      	lsls	r3, r3, #23
 8000ffe:	2110      	movs	r1, #16
 8001000:	0018      	movs	r0, r3
 8001002:	f001 f8ac 	bl	800215e <HAL_GPIO_WritePin>
		}


		HAL_GPIO_WritePin(A_MT_GPIO_Port, A_MT_Pin, segment_data[data[2]][i]);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3302      	adds	r3, #2
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	001a      	movs	r2, r3
 800100e:	240f      	movs	r4, #15
 8001010:	193b      	adds	r3, r7, r4
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	492d      	ldr	r1, [pc, #180]	; (80010cc <segment_write+0x140>)
 8001016:	00d2      	lsls	r2, r2, #3
 8001018:	188a      	adds	r2, r1, r2
 800101a:	5cd2      	ldrb	r2, [r2, r3]
 800101c:	23a0      	movs	r3, #160	; 0xa0
 800101e:	05db      	lsls	r3, r3, #23
 8001020:	2140      	movs	r1, #64	; 0x40
 8001022:	0018      	movs	r0, r3
 8001024:	f001 f89b 	bl	800215e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A_MO_GPIO_Port, A_MO_Pin, segment_data[data[3]][i]);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3303      	adds	r3, #3
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	001a      	movs	r2, r3
 8001030:	193b      	adds	r3, r7, r4
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4925      	ldr	r1, [pc, #148]	; (80010cc <segment_write+0x140>)
 8001036:	00d2      	lsls	r2, r2, #3
 8001038:	188a      	adds	r2, r1, r2
 800103a:	5cd2      	ldrb	r2, [r2, r3]
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	0059      	lsls	r1, r3, #1
 8001040:	23a0      	movs	r3, #160	; 0xa0
 8001042:	05db      	lsls	r3, r3, #23
 8001044:	0018      	movs	r0, r3
 8001046:	f001 f88a 	bl	800215e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(A_ST_GPIO_Port, A_ST_Pin, segment_data[data[4]][i]);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3304      	adds	r3, #4
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	001a      	movs	r2, r3
 8001052:	193b      	adds	r3, r7, r4
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	491d      	ldr	r1, [pc, #116]	; (80010cc <segment_write+0x140>)
 8001058:	00d2      	lsls	r2, r2, #3
 800105a:	188a      	adds	r2, r1, r2
 800105c:	5cd2      	ldrb	r2, [r2, r3]
 800105e:	2380      	movs	r3, #128	; 0x80
 8001060:	00d9      	lsls	r1, r3, #3
 8001062:	23a0      	movs	r3, #160	; 0xa0
 8001064:	05db      	lsls	r3, r3, #23
 8001066:	0018      	movs	r0, r3
 8001068:	f001 f879 	bl	800215e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A_SO_GPIO_Port, A_SO_Pin, segment_data[data[5]][i]);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3305      	adds	r3, #5
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	001a      	movs	r2, r3
 8001074:	193b      	adds	r3, r7, r4
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4914      	ldr	r1, [pc, #80]	; (80010cc <segment_write+0x140>)
 800107a:	00d2      	lsls	r2, r2, #3
 800107c:	188a      	adds	r2, r1, r2
 800107e:	5cd2      	ldrb	r2, [r2, r3]
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	0159      	lsls	r1, r3, #5
 8001084:	23a0      	movs	r3, #160	; 0xa0
 8001086:	05db      	lsls	r3, r3, #23
 8001088:	0018      	movs	r0, r3
 800108a:	f001 f868 	bl	800215e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(CLOCK_GPIO_Port, CLOCK_Pin, 0);
 800108e:	23a0      	movs	r3, #160	; 0xa0
 8001090:	05db      	lsls	r3, r3, #23
 8001092:	2200      	movs	r2, #0
 8001094:	2108      	movs	r1, #8
 8001096:	0018      	movs	r0, r3
 8001098:	f001 f861 	bl	800215e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CLOCK_GPIO_Port, CLOCK_Pin, 1);
 800109c:	23a0      	movs	r3, #160	; 0xa0
 800109e:	05db      	lsls	r3, r3, #23
 80010a0:	2201      	movs	r2, #1
 80010a2:	2108      	movs	r1, #8
 80010a4:	0018      	movs	r0, r3
 80010a6:	f001 f85a 	bl	800215e <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 8; i++) {
 80010aa:	193b      	adds	r3, r7, r4
 80010ac:	781a      	ldrb	r2, [r3, #0]
 80010ae:	193b      	adds	r3, r7, r4
 80010b0:	3201      	adds	r2, #1
 80010b2:	701a      	strb	r2, [r3, #0]
 80010b4:	230f      	movs	r3, #15
 80010b6:	18fb      	adds	r3, r7, r3
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b07      	cmp	r3, #7
 80010bc:	d800      	bhi.n	80010c0 <segment_write+0x134>
 80010be:	e771      	b.n	8000fa4 <segment_write+0x18>
	}
}
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b005      	add	sp, #20
 80010c8:	bd90      	pop	{r4, r7, pc}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	20000000 	.word	0x20000000

080010d0 <button_thread>:
#include "button_thread.h"
#include "main.h"

extern UART_HandleTypeDef huart2;

void button_thread(void *pvParameters) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	/* Just to remove compiler warning. */
	(void) pvParameters;

	const TickType_t delay_100_ms = pdMS_TO_TICKS(100UL);
 80010d8:	2364      	movs	r3, #100	; 0x64
 80010da:	60fb      	str	r3, [r7, #12]

	uint8_t button_value;

	while(1){
		if(HAL_GPIO_ReadPin(BTN_UP_GPIO_Port, BTN_UP_Pin)){
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <button_thread+0xa8>)
 80010de:	2101      	movs	r1, #1
 80010e0:	0018      	movs	r0, r3
 80010e2:	f001 f81f 	bl	8002124 <HAL_GPIO_ReadPin>
 80010e6:	1e03      	subs	r3, r0, #0
 80010e8:	d00a      	beq.n	8001100 <button_thread+0x30>
			button_value = BUTTON_UP;
 80010ea:	210b      	movs	r1, #11
 80010ec:	187b      	adds	r3, r7, r1
 80010ee:	2201      	movs	r2, #1
 80010f0:	701a      	strb	r2, [r3, #0]
			xQueueSend(button_queue, (void *) &button_value, (TickType_t) 10);
 80010f2:	4b22      	ldr	r3, [pc, #136]	; (800117c <button_thread+0xac>)
 80010f4:	6818      	ldr	r0, [r3, #0]
 80010f6:	1879      	adds	r1, r7, r1
 80010f8:	2300      	movs	r3, #0
 80010fa:	220a      	movs	r2, #10
 80010fc:	f004 fa15 	bl	800552a <xQueueGenericSend>
		}
		if(HAL_GPIO_ReadPin(BTN_DOWN_GPIO_Port, BTN_DOWN_Pin)){
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <button_thread+0xa8>)
 8001102:	2102      	movs	r1, #2
 8001104:	0018      	movs	r0, r3
 8001106:	f001 f80d 	bl	8002124 <HAL_GPIO_ReadPin>
 800110a:	1e03      	subs	r3, r0, #0
 800110c:	d00a      	beq.n	8001124 <button_thread+0x54>
			button_value = BUTTON_DOWN;
 800110e:	210b      	movs	r1, #11
 8001110:	187b      	adds	r3, r7, r1
 8001112:	2202      	movs	r2, #2
 8001114:	701a      	strb	r2, [r3, #0]
			xQueueSend(button_queue, (void *) &button_value, (TickType_t) 10);
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <button_thread+0xac>)
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	1879      	adds	r1, r7, r1
 800111c:	2300      	movs	r3, #0
 800111e:	220a      	movs	r2, #10
 8001120:	f004 fa03 	bl	800552a <xQueueGenericSend>
		}
		if(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port, BTN_LEFT_Pin)){
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <button_thread+0xa8>)
 8001126:	2104      	movs	r1, #4
 8001128:	0018      	movs	r0, r3
 800112a:	f000 fffb 	bl	8002124 <HAL_GPIO_ReadPin>
 800112e:	1e03      	subs	r3, r0, #0
 8001130:	d00a      	beq.n	8001148 <button_thread+0x78>
			button_value = BUTTON_LEFT;
 8001132:	210b      	movs	r1, #11
 8001134:	187b      	adds	r3, r7, r1
 8001136:	2203      	movs	r2, #3
 8001138:	701a      	strb	r2, [r3, #0]
			xQueueSend(button_queue, (void *) &button_value, (TickType_t) 10);
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <button_thread+0xac>)
 800113c:	6818      	ldr	r0, [r3, #0]
 800113e:	1879      	adds	r1, r7, r1
 8001140:	2300      	movs	r3, #0
 8001142:	220a      	movs	r2, #10
 8001144:	f004 f9f1 	bl	800552a <xQueueGenericSend>
		}
		if(HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port, BTN_RIGHT_Pin)){
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <button_thread+0xa8>)
 800114a:	2108      	movs	r1, #8
 800114c:	0018      	movs	r0, r3
 800114e:	f000 ffe9 	bl	8002124 <HAL_GPIO_ReadPin>
 8001152:	1e03      	subs	r3, r0, #0
 8001154:	d00a      	beq.n	800116c <button_thread+0x9c>
			button_value = BUTTON_RIGHT;
 8001156:	210b      	movs	r1, #11
 8001158:	187b      	adds	r3, r7, r1
 800115a:	2204      	movs	r2, #4
 800115c:	701a      	strb	r2, [r3, #0]
			xQueueSend(button_queue, (void *) &button_value, (TickType_t) 10);
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <button_thread+0xac>)
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	1879      	adds	r1, r7, r1
 8001164:	2300      	movs	r3, #0
 8001166:	220a      	movs	r2, #10
 8001168:	f004 f9df 	bl	800552a <xQueueGenericSend>
		}
		vTaskDelay(delay_100_ms);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	0018      	movs	r0, r3
 8001170:	f004 fcf6 	bl	8005b60 <vTaskDelay>
		if(HAL_GPIO_ReadPin(BTN_UP_GPIO_Port, BTN_UP_Pin)){
 8001174:	e7b2      	b.n	80010dc <button_thread+0xc>
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	50000400 	.word	0x50000400
 800117c:	200004e4 	.word	0x200004e4

08001180 <clock_thread>:
extern RTC_HandleTypeDef hrtc;
extern TIM_HandleTypeDef htim2;
extern I2C_HandleTypeDef hi2c1;
extern uint8_t segment_data[34][8];

void clock_thread(void *pvParameters) {
 8001180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001182:	b097      	sub	sp, #92	; 0x5c
 8001184:	af02      	add	r7, sp, #8
 8001186:	6078      	str	r0, [r7, #4]
	/* Just to remove compiler warning. */
	(void) pvParameters;

	const TickType_t delay_1000_ms = pdMS_TO_TICKS(1000UL);
 8001188:	23fa      	movs	r3, #250	; 0xfa
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	64bb      	str	r3, [r7, #72]	; 0x48
	const TickType_t delay_100_ms = pdMS_TO_TICKS(100UL);
 800118e:	2364      	movs	r3, #100	; 0x64
 8001190:	647b      	str	r3, [r7, #68]	; 0x44

	uint8_t data[6] = {
 8001192:	2030      	movs	r0, #48	; 0x30
 8001194:	183b      	adds	r3, r7, r0
 8001196:	4a81      	ldr	r2, [pc, #516]	; (800139c <clock_thread+0x21c>)
 8001198:	6811      	ldr	r1, [r2, #0]
 800119a:	6019      	str	r1, [r3, #0]
 800119c:	8892      	ldrh	r2, [r2, #4]
 800119e:	809a      	strh	r2, [r3, #4]
			SEG_BLANK, SEG_BLANK, SEG_BLANK, SEG_BLANK, SEG_BLANK,SEG_BLANK
	};
	segment_write(data, 0);
 80011a0:	183b      	adds	r3, r7, r0
 80011a2:	2100      	movs	r1, #0
 80011a4:	0018      	movs	r0, r3
 80011a6:	f7ff fef1 	bl	8000f8c <segment_write>

	RTC_TimeTypeDef sTimeStamp;
	RTC_DateTypeDef sTimeStampDate;

	uint8_t bcd;
	uint8_t old_sec = 15;
 80011aa:	234f      	movs	r3, #79	; 0x4f
 80011ac:	18fb      	adds	r3, r7, r3
 80011ae:	220f      	movs	r2, #15
 80011b0:	701a      	strb	r2, [r3, #0]

	uint8_t sht_addr = 0x88;
 80011b2:	2543      	movs	r5, #67	; 0x43
 80011b4:	197b      	adds	r3, r7, r5
 80011b6:	2288      	movs	r2, #136	; 0x88
 80011b8:	701a      	strb	r2, [r3, #0]

	uint8_t sht_tx[2] = {0x20, 0x32};
 80011ba:	2014      	movs	r0, #20
 80011bc:	183b      	adds	r3, r7, r0
 80011be:	4a78      	ldr	r2, [pc, #480]	; (80013a0 <clock_thread+0x220>)
 80011c0:	801a      	strh	r2, [r3, #0]
	uint8_t sht_rx[6];
	HAL_StatusTypeDef result;

	result = HAL_I2C_Master_Transmit(&hi2c1, sht_addr, sht_tx, 2, 10);
 80011c2:	197b      	adds	r3, r7, r5
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	b299      	uxth	r1, r3
 80011c8:	2642      	movs	r6, #66	; 0x42
 80011ca:	19bc      	adds	r4, r7, r6
 80011cc:	183a      	adds	r2, r7, r0
 80011ce:	4875      	ldr	r0, [pc, #468]	; (80013a4 <clock_thread+0x224>)
 80011d0:	230a      	movs	r3, #10
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2302      	movs	r3, #2
 80011d6:	f001 f875 	bl	80022c4 <HAL_I2C_Master_Transmit>
 80011da:	0003      	movs	r3, r0
 80011dc:	7023      	strb	r3, [r4, #0]
	vTaskDelay(delay_100_ms);
 80011de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011e0:	0018      	movs	r0, r3
 80011e2:	f004 fcbd 	bl	8005b60 <vTaskDelay>
	result = HAL_I2C_Master_Receive(&hi2c1, sht_addr, sht_rx, 3, 10);
 80011e6:	197b      	adds	r3, r7, r5
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b299      	uxth	r1, r3
 80011ec:	19bc      	adds	r4, r7, r6
 80011ee:	250c      	movs	r5, #12
 80011f0:	197a      	adds	r2, r7, r5
 80011f2:	486c      	ldr	r0, [pc, #432]	; (80013a4 <clock_thread+0x224>)
 80011f4:	230a      	movs	r3, #10
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2303      	movs	r3, #3
 80011fa:	f001 f96b 	bl	80024d4 <HAL_I2C_Master_Receive>
 80011fe:	0003      	movs	r3, r0
 8001200:	7023      	strb	r3, [r4, #0]

	uint16_t st = 0;
 8001202:	2040      	movs	r0, #64	; 0x40
 8001204:	183b      	adds	r3, r7, r0
 8001206:	2200      	movs	r2, #0
 8001208:	801a      	strh	r2, [r3, #0]
	uint32_t temp_seg = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	63fb      	str	r3, [r7, #60]	; 0x3c
	st = sht_rx[0] << 8;
 800120e:	197b      	adds	r3, r7, r5
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b29a      	uxth	r2, r3
 8001214:	183b      	adds	r3, r7, r0
 8001216:	0212      	lsls	r2, r2, #8
 8001218:	801a      	strh	r2, [r3, #0]
	st = st | sht_rx[1];
 800121a:	197b      	adds	r3, r7, r5
 800121c:	785b      	ldrb	r3, [r3, #1]
 800121e:	b299      	uxth	r1, r3
 8001220:	183b      	adds	r3, r7, r0
 8001222:	183a      	adds	r2, r7, r0
 8001224:	8812      	ldrh	r2, [r2, #0]
 8001226:	430a      	orrs	r2, r1
 8001228:	801a      	strh	r2, [r3, #0]

	float temperature = -45+175*((float)st/65535);
 800122a:	183b      	adds	r3, r7, r0
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	0018      	movs	r0, r3
 8001230:	f7ff fd50 	bl	8000cd4 <__aeabi_ui2f>
 8001234:	1c03      	adds	r3, r0, #0
 8001236:	495c      	ldr	r1, [pc, #368]	; (80013a8 <clock_thread+0x228>)
 8001238:	1c18      	adds	r0, r3, #0
 800123a:	f7ff f923 	bl	8000484 <__aeabi_fdiv>
 800123e:	1c03      	adds	r3, r0, #0
 8001240:	495a      	ldr	r1, [pc, #360]	; (80013ac <clock_thread+0x22c>)
 8001242:	1c18      	adds	r0, r3, #0
 8001244:	f7ff fa38 	bl	80006b8 <__aeabi_fmul>
 8001248:	1c03      	adds	r3, r0, #0
 800124a:	4959      	ldr	r1, [pc, #356]	; (80013b0 <clock_thread+0x230>)
 800124c:	1c18      	adds	r0, r3, #0
 800124e:	f7ff fb81 	bl	8000954 <__aeabi_fsub>
 8001252:	1c03      	adds	r3, r0, #0
 8001254:	63bb      	str	r3, [r7, #56]	; 0x38

	while(1){
		HAL_RTC_GetDate(&hrtc, &sTimeStampDate, RTC_FORMAT_BIN);
 8001256:	2318      	movs	r3, #24
 8001258:	18f9      	adds	r1, r7, r3
 800125a:	4b56      	ldr	r3, [pc, #344]	; (80013b4 <clock_thread+0x234>)
 800125c:	2200      	movs	r2, #0
 800125e:	0018      	movs	r0, r3
 8001260:	f002 fd62 	bl	8003d28 <HAL_RTC_GetDate>
		HAL_RTC_GetTime(&hrtc, &sTimeStamp, RTC_FORMAT_BIN);
 8001264:	231c      	movs	r3, #28
 8001266:	18f9      	adds	r1, r7, r3
 8001268:	4b52      	ldr	r3, [pc, #328]	; (80013b4 <clock_thread+0x234>)
 800126a:	2200      	movs	r2, #0
 800126c:	0018      	movs	r0, r3
 800126e:	f002 fcfd 	bl	8003c6c <HAL_RTC_GetTime>

		result = HAL_I2C_Master_Receive(&hi2c1, sht_addr, sht_rx, 3, 10);
 8001272:	2343      	movs	r3, #67	; 0x43
 8001274:	18fb      	adds	r3, r7, r3
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b299      	uxth	r1, r3
 800127a:	2342      	movs	r3, #66	; 0x42
 800127c:	18fc      	adds	r4, r7, r3
 800127e:	250c      	movs	r5, #12
 8001280:	197a      	adds	r2, r7, r5
 8001282:	4848      	ldr	r0, [pc, #288]	; (80013a4 <clock_thread+0x224>)
 8001284:	230a      	movs	r3, #10
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2303      	movs	r3, #3
 800128a:	f001 f923 	bl	80024d4 <HAL_I2C_Master_Receive>
 800128e:	0003      	movs	r3, r0
 8001290:	7023      	strb	r3, [r4, #0]
		st = sht_rx[0] << 8;
 8001292:	0029      	movs	r1, r5
 8001294:	187b      	adds	r3, r7, r1
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b29a      	uxth	r2, r3
 800129a:	2040      	movs	r0, #64	; 0x40
 800129c:	183b      	adds	r3, r7, r0
 800129e:	0212      	lsls	r2, r2, #8
 80012a0:	801a      	strh	r2, [r3, #0]
		st = st | sht_rx[1];
 80012a2:	187b      	adds	r3, r7, r1
 80012a4:	785b      	ldrb	r3, [r3, #1]
 80012a6:	b299      	uxth	r1, r3
 80012a8:	183b      	adds	r3, r7, r0
 80012aa:	183a      	adds	r2, r7, r0
 80012ac:	8812      	ldrh	r2, [r2, #0]
 80012ae:	430a      	orrs	r2, r1
 80012b0:	801a      	strh	r2, [r3, #0]

		temperature = -45+175*((float)st/65535);
 80012b2:	183b      	adds	r3, r7, r0
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	0018      	movs	r0, r3
 80012b8:	f7ff fd0c 	bl	8000cd4 <__aeabi_ui2f>
 80012bc:	1c03      	adds	r3, r0, #0
 80012be:	493a      	ldr	r1, [pc, #232]	; (80013a8 <clock_thread+0x228>)
 80012c0:	1c18      	adds	r0, r3, #0
 80012c2:	f7ff f8df 	bl	8000484 <__aeabi_fdiv>
 80012c6:	1c03      	adds	r3, r0, #0
 80012c8:	4938      	ldr	r1, [pc, #224]	; (80013ac <clock_thread+0x22c>)
 80012ca:	1c18      	adds	r0, r3, #0
 80012cc:	f7ff f9f4 	bl	80006b8 <__aeabi_fmul>
 80012d0:	1c03      	adds	r3, r0, #0
 80012d2:	4937      	ldr	r1, [pc, #220]	; (80013b0 <clock_thread+0x230>)
 80012d4:	1c18      	adds	r0, r3, #0
 80012d6:	f7ff fb3d 	bl	8000954 <__aeabi_fsub>
 80012da:	1c03      	adds	r3, r0, #0
 80012dc:	63bb      	str	r3, [r7, #56]	; 0x38
		temp_seg = temperature*100;
 80012de:	4936      	ldr	r1, [pc, #216]	; (80013b8 <clock_thread+0x238>)
 80012e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80012e2:	f7ff f9e9 	bl	80006b8 <__aeabi_fmul>
 80012e6:	1c03      	adds	r3, r0, #0
 80012e8:	1c18      	adds	r0, r3, #0
 80012ea:	f7fe ffe7 	bl	80002bc <__aeabi_f2uiz>
 80012ee:	0003      	movs	r3, r0
 80012f0:	63fb      	str	r3, [r7, #60]	; 0x3c

		data[5] = SEG_C;
 80012f2:	2430      	movs	r4, #48	; 0x30
 80012f4:	193b      	adds	r3, r7, r4
 80012f6:	220c      	movs	r2, #12
 80012f8:	715a      	strb	r2, [r3, #5]
		data[4] = SEG_DEG;
 80012fa:	193b      	adds	r3, r7, r4
 80012fc:	2222      	movs	r2, #34	; 0x22
 80012fe:	711a      	strb	r2, [r3, #4]
		data[3] = temp_seg%10;
 8001300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001302:	210a      	movs	r1, #10
 8001304:	0018      	movs	r0, r3
 8001306:	f7fe ff85 	bl	8000214 <__aeabi_uidivmod>
 800130a:	000b      	movs	r3, r1
 800130c:	b2da      	uxtb	r2, r3
 800130e:	193b      	adds	r3, r7, r4
 8001310:	70da      	strb	r2, [r3, #3]
		temp_seg /= 10;
 8001312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001314:	210a      	movs	r1, #10
 8001316:	0018      	movs	r0, r3
 8001318:	f7fe fef6 	bl	8000108 <__udivsi3>
 800131c:	0003      	movs	r3, r0
 800131e:	63fb      	str	r3, [r7, #60]	; 0x3c
		data[2] = temp_seg%10;
 8001320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001322:	210a      	movs	r1, #10
 8001324:	0018      	movs	r0, r3
 8001326:	f7fe ff75 	bl	8000214 <__aeabi_uidivmod>
 800132a:	000b      	movs	r3, r1
 800132c:	b2da      	uxtb	r2, r3
 800132e:	193b      	adds	r3, r7, r4
 8001330:	709a      	strb	r2, [r3, #2]
		temp_seg /= 10;
 8001332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001334:	210a      	movs	r1, #10
 8001336:	0018      	movs	r0, r3
 8001338:	f7fe fee6 	bl	8000108 <__udivsi3>
 800133c:	0003      	movs	r3, r0
 800133e:	63fb      	str	r3, [r7, #60]	; 0x3c
		data[1] = temp_seg%10;
 8001340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001342:	210a      	movs	r1, #10
 8001344:	0018      	movs	r0, r3
 8001346:	f7fe ff65 	bl	8000214 <__aeabi_uidivmod>
 800134a:	000b      	movs	r3, r1
 800134c:	b2da      	uxtb	r2, r3
 800134e:	193b      	adds	r3, r7, r4
 8001350:	705a      	strb	r2, [r3, #1]
		temp_seg /= 10;
 8001352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001354:	210a      	movs	r1, #10
 8001356:	0018      	movs	r0, r3
 8001358:	f7fe fed6 	bl	8000108 <__udivsi3>
 800135c:	0003      	movs	r3, r0
 800135e:	63fb      	str	r3, [r7, #60]	; 0x3c
		data[0] = temp_seg%10;
 8001360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001362:	210a      	movs	r1, #10
 8001364:	0018      	movs	r0, r3
 8001366:	f7fe ff55 	bl	8000214 <__aeabi_uidivmod>
 800136a:	000b      	movs	r3, r1
 800136c:	b2da      	uxtb	r2, r3
 800136e:	193b      	adds	r3, r7, r4
 8001370:	701a      	strb	r2, [r3, #0]

		if(old_sec != data[3]){
 8001372:	193b      	adds	r3, r7, r4
 8001374:	78db      	ldrb	r3, [r3, #3]
 8001376:	254f      	movs	r5, #79	; 0x4f
 8001378:	197a      	adds	r2, r7, r5
 800137a:	7812      	ldrb	r2, [r2, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d008      	beq.n	8001392 <clock_thread+0x212>
			segment_write(data, MODE_TEMP);
 8001380:	193b      	adds	r3, r7, r4
 8001382:	2101      	movs	r1, #1
 8001384:	0018      	movs	r0, r3
 8001386:	f7ff fe01 	bl	8000f8c <segment_write>
			old_sec = data[3];
 800138a:	197b      	adds	r3, r7, r5
 800138c:	193a      	adds	r2, r7, r4
 800138e:	78d2      	ldrb	r2, [r2, #3]
 8001390:	701a      	strb	r2, [r3, #0]
		}

		vTaskDelay(delay_1000_ms);
 8001392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001394:	0018      	movs	r0, r3
 8001396:	f004 fbe3 	bl	8005b60 <vTaskDelay>
		HAL_RTC_GetDate(&hrtc, &sTimeStampDate, RTC_FORMAT_BIN);
 800139a:	e75c      	b.n	8001256 <clock_thread+0xd6>
 800139c:	08006ab0 	.word	0x08006ab0
 80013a0:	00003220 	.word	0x00003220
 80013a4:	20000398 	.word	0x20000398
 80013a8:	477fff00 	.word	0x477fff00
 80013ac:	432f0000 	.word	0x432f0000
 80013b0:	42340000 	.word	0x42340000
 80013b4:	200003ec 	.word	0x200003ec
 80013b8:	42c80000 	.word	0x42c80000

080013bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <vApplicationGetIdleTaskMemory+0x28>)
 80013cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80013d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2280      	movs	r2, #128	; 0x80
 80013d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	46bd      	mov	sp, r7
 80013de:	b004      	add	sp, #16
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	20000144 	.word	0x20000144
 80013e8:	20000198 	.word	0x20000198

080013ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b08b      	sub	sp, #44	; 0x2c
 80013f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f2:	f000 fc05 	bl	8001c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f6:	f000 f853 	bl	80014a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013fa:	f000 f9f3 	bl	80017e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013fe:	f000 f8d7 	bl	80015b0 <MX_I2C1_Init>
  MX_RTC_Init();
 8001402:	f000 f915 	bl	8001630 <MX_RTC_Init>
  MX_TIM2_Init();
 8001406:	f000 f93d 	bl	8001684 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800140a:	f000 f9bb 	bl	8001784 <MX_USART2_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  button_queue = xQueueCreate(16, sizeof(uint8_t));
 800140e:	2200      	movs	r2, #0
 8001410:	2101      	movs	r1, #1
 8001412:	2010      	movs	r0, #16
 8001414:	f004 f82f 	bl	8005476 <xQueueGenericCreate>
 8001418:	0002      	movs	r2, r0
 800141a:	4b18      	ldr	r3, [pc, #96]	; (800147c <main+0x90>)
 800141c:	601a      	str	r2, [r3, #0]
  if(button_queue == NULL){
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <main+0x90>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d100      	bne.n	8001428 <main+0x3c>
	  while(1);
 8001426:	e7fe      	b.n	8001426 <main+0x3a>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4a15      	ldr	r2, [pc, #84]	; (8001480 <main+0x94>)
 800142c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800142e:	c313      	stmia	r3!, {r0, r1, r4}
 8001430:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001432:	c313      	stmia	r3!, {r0, r1, r4}
 8001434:	6812      	ldr	r2, [r2, #0]
 8001436:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	2100      	movs	r1, #0
 800143c:	0018      	movs	r0, r3
 800143e:	f003 febc 	bl	80051ba <osThreadCreate>
 8001442:	0002      	movs	r2, r0
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <main+0x98>)
 8001446:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(clock_thread, "clock_thread", configMINIMAL_STACK_SIZE, NULL, 2, &clock_thread_handle);
 8001448:	490f      	ldr	r1, [pc, #60]	; (8001488 <main+0x9c>)
 800144a:	4810      	ldr	r0, [pc, #64]	; (800148c <main+0xa0>)
 800144c:	4b10      	ldr	r3, [pc, #64]	; (8001490 <main+0xa4>)
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	2302      	movs	r3, #2
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2300      	movs	r3, #0
 8001456:	2280      	movs	r2, #128	; 0x80
 8001458:	f004 fa50 	bl	80058fc <xTaskCreate>
  xTaskCreate(button_thread, "button_thread", configMINIMAL_STACK_SIZE, NULL, 1, &button_thread_handle);
 800145c:	490d      	ldr	r1, [pc, #52]	; (8001494 <main+0xa8>)
 800145e:	480e      	ldr	r0, [pc, #56]	; (8001498 <main+0xac>)
 8001460:	4b0e      	ldr	r3, [pc, #56]	; (800149c <main+0xb0>)
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	2301      	movs	r3, #1
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	2300      	movs	r3, #0
 800146a:	2280      	movs	r2, #128	; 0x80
 800146c:	f004 fa46 	bl	80058fc <xTaskCreate>

  vTaskStartScheduler();
 8001470:	f004 fb9c 	bl	8005bac <vTaskStartScheduler>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001474:	f003 fe99 	bl	80051aa <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001478:	e7fe      	b.n	8001478 <main+0x8c>
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	200004e4 	.word	0x200004e4
 8001480:	08006ae4 	.word	0x08006ae4
 8001484:	200004d8 	.word	0x200004d8
 8001488:	08006ab8 	.word	0x08006ab8
 800148c:	08001181 	.word	0x08001181
 8001490:	200004dc 	.word	0x200004dc
 8001494:	08006ac8 	.word	0x08006ac8
 8001498:	080010d1 	.word	0x080010d1
 800149c:	200004e0 	.word	0x200004e0

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b099      	sub	sp, #100	; 0x64
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	242c      	movs	r4, #44	; 0x2c
 80014a8:	193b      	adds	r3, r7, r4
 80014aa:	0018      	movs	r0, r3
 80014ac:	2334      	movs	r3, #52	; 0x34
 80014ae:	001a      	movs	r2, r3
 80014b0:	2100      	movs	r1, #0
 80014b2:	f005 fabb 	bl	8006a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b6:	2318      	movs	r3, #24
 80014b8:	18fb      	adds	r3, r7, r3
 80014ba:	0018      	movs	r0, r3
 80014bc:	2314      	movs	r3, #20
 80014be:	001a      	movs	r2, r3
 80014c0:	2100      	movs	r1, #0
 80014c2:	f005 fab3 	bl	8006a2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014c6:	003b      	movs	r3, r7
 80014c8:	0018      	movs	r0, r3
 80014ca:	2318      	movs	r3, #24
 80014cc:	001a      	movs	r2, r3
 80014ce:	2100      	movs	r1, #0
 80014d0:	f005 faac 	bl	8006a2c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d4:	4b33      	ldr	r3, [pc, #204]	; (80015a4 <SystemClock_Config+0x104>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a33      	ldr	r2, [pc, #204]	; (80015a8 <SystemClock_Config+0x108>)
 80014da:	401a      	ands	r2, r3
 80014dc:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <SystemClock_Config+0x104>)
 80014de:	2180      	movs	r1, #128	; 0x80
 80014e0:	0109      	lsls	r1, r1, #4
 80014e2:	430a      	orrs	r2, r1
 80014e4:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014e6:	f001 fc4b 	bl	8002d80 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80014ea:	4b30      	ldr	r3, [pc, #192]	; (80015ac <SystemClock_Config+0x10c>)
 80014ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014ee:	4b2f      	ldr	r3, [pc, #188]	; (80015ac <SystemClock_Config+0x10c>)
 80014f0:	492d      	ldr	r1, [pc, #180]	; (80015a8 <SystemClock_Config+0x108>)
 80014f2:	400a      	ands	r2, r1
 80014f4:	651a      	str	r2, [r3, #80]	; 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80014f6:	193b      	adds	r3, r7, r4
 80014f8:	2206      	movs	r2, #6
 80014fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014fc:	193b      	adds	r3, r7, r4
 80014fe:	2280      	movs	r2, #128	; 0x80
 8001500:	0052      	lsls	r2, r2, #1
 8001502:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001504:	0021      	movs	r1, r4
 8001506:	187b      	adds	r3, r7, r1
 8001508:	2201      	movs	r2, #1
 800150a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800150c:	187b      	adds	r3, r7, r1
 800150e:	2210      	movs	r2, #16
 8001510:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001512:	187b      	adds	r3, r7, r1
 8001514:	2202      	movs	r2, #2
 8001516:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001518:	187b      	adds	r3, r7, r1
 800151a:	2200      	movs	r2, #0
 800151c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800151e:	187b      	adds	r3, r7, r1
 8001520:	2280      	movs	r2, #128	; 0x80
 8001522:	02d2      	lsls	r2, r2, #11
 8001524:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001526:	187b      	adds	r3, r7, r1
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	03d2      	lsls	r2, r2, #15
 800152c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152e:	187b      	adds	r3, r7, r1
 8001530:	0018      	movs	r0, r3
 8001532:	f001 fc33 	bl	8002d9c <HAL_RCC_OscConfig>
 8001536:	1e03      	subs	r3, r0, #0
 8001538:	d001      	beq.n	800153e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800153a:	f000 f9ed 	bl	8001918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153e:	2118      	movs	r1, #24
 8001540:	187b      	adds	r3, r7, r1
 8001542:	220f      	movs	r2, #15
 8001544:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001546:	187b      	adds	r3, r7, r1
 8001548:	2203      	movs	r2, #3
 800154a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154c:	187b      	adds	r3, r7, r1
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001552:	187b      	adds	r3, r7, r1
 8001554:	2200      	movs	r2, #0
 8001556:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001558:	187b      	adds	r3, r7, r1
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800155e:	187b      	adds	r3, r7, r1
 8001560:	2101      	movs	r1, #1
 8001562:	0018      	movs	r0, r3
 8001564:	f001 ff96 	bl	8003494 <HAL_RCC_ClockConfig>
 8001568:	1e03      	subs	r3, r0, #0
 800156a:	d001      	beq.n	8001570 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800156c:	f000 f9d4 	bl	8001918 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001570:	003b      	movs	r3, r7
 8001572:	222a      	movs	r2, #42	; 0x2a
 8001574:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001576:	003b      	movs	r3, r7
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800157c:	003b      	movs	r3, r7
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001582:	003b      	movs	r3, r7
 8001584:	2280      	movs	r2, #128	; 0x80
 8001586:	0252      	lsls	r2, r2, #9
 8001588:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800158a:	003b      	movs	r3, r7
 800158c:	0018      	movs	r0, r3
 800158e:	f002 f9a5 	bl	80038dc <HAL_RCCEx_PeriphCLKConfig>
 8001592:	1e03      	subs	r3, r0, #0
 8001594:	d001      	beq.n	800159a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001596:	f000 f9bf 	bl	8001918 <Error_Handler>
  }
}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	46bd      	mov	sp, r7
 800159e:	b019      	add	sp, #100	; 0x64
 80015a0:	bd90      	pop	{r4, r7, pc}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	40007000 	.word	0x40007000
 80015a8:	ffffe7ff 	.word	0xffffe7ff
 80015ac:	40021000 	.word	0x40021000

080015b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015b4:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <MX_I2C1_Init+0x74>)
 80015b6:	4a1c      	ldr	r2, [pc, #112]	; (8001628 <MX_I2C1_Init+0x78>)
 80015b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <MX_I2C1_Init+0x74>)
 80015bc:	4a1b      	ldr	r2, [pc, #108]	; (800162c <MX_I2C1_Init+0x7c>)
 80015be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015c0:	4b18      	ldr	r3, [pc, #96]	; (8001624 <MX_I2C1_Init+0x74>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <MX_I2C1_Init+0x74>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015cc:	4b15      	ldr	r3, [pc, #84]	; (8001624 <MX_I2C1_Init+0x74>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <MX_I2C1_Init+0x74>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <MX_I2C1_Init+0x74>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <MX_I2C1_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <MX_I2C1_Init+0x74>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <MX_I2C1_Init+0x74>)
 80015ec:	0018      	movs	r0, r3
 80015ee:	f000 fdd3 	bl	8002198 <HAL_I2C_Init>
 80015f2:	1e03      	subs	r3, r0, #0
 80015f4:	d001      	beq.n	80015fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015f6:	f000 f98f 	bl	8001918 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <MX_I2C1_Init+0x74>)
 80015fc:	2100      	movs	r1, #0
 80015fe:	0018      	movs	r0, r3
 8001600:	f001 fb26 	bl	8002c50 <HAL_I2CEx_ConfigAnalogFilter>
 8001604:	1e03      	subs	r3, r0, #0
 8001606:	d001      	beq.n	800160c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001608:	f000 f986 	bl	8001918 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <MX_I2C1_Init+0x74>)
 800160e:	2100      	movs	r1, #0
 8001610:	0018      	movs	r0, r3
 8001612:	f001 fb69 	bl	8002ce8 <HAL_I2CEx_ConfigDigitalFilter>
 8001616:	1e03      	subs	r3, r0, #0
 8001618:	d001      	beq.n	800161e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800161a:	f000 f97d 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000398 	.word	0x20000398
 8001628:	40005400 	.word	0x40005400
 800162c:	00707cbb 	.word	0x00707cbb

08001630 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_RTC_Init+0x4c>)
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <MX_RTC_Init+0x50>)
 8001638:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <MX_RTC_Init+0x4c>)
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001640:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_RTC_Init+0x4c>)
 8001642:	227f      	movs	r2, #127	; 0x7f
 8001644:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001646:	4b0d      	ldr	r3, [pc, #52]	; (800167c <MX_RTC_Init+0x4c>)
 8001648:	22ff      	movs	r2, #255	; 0xff
 800164a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <MX_RTC_Init+0x4c>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <MX_RTC_Init+0x4c>)
 8001654:	2200      	movs	r2, #0
 8001656:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <MX_RTC_Init+0x4c>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <MX_RTC_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <MX_RTC_Init+0x4c>)
 8001666:	0018      	movs	r0, r3
 8001668:	f002 fa64 	bl	8003b34 <HAL_RTC_Init>
 800166c:	1e03      	subs	r3, r0, #0
 800166e:	d001      	beq.n	8001674 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001670:	f000 f952 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	200003ec 	.word	0x200003ec
 8001680:	40002800 	.word	0x40002800

08001684 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800168a:	2318      	movs	r3, #24
 800168c:	18fb      	adds	r3, r7, r3
 800168e:	0018      	movs	r0, r3
 8001690:	2310      	movs	r3, #16
 8001692:	001a      	movs	r2, r3
 8001694:	2100      	movs	r1, #0
 8001696:	f005 f9c9 	bl	8006a2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169a:	2310      	movs	r3, #16
 800169c:	18fb      	adds	r3, r7, r3
 800169e:	0018      	movs	r0, r3
 80016a0:	2308      	movs	r3, #8
 80016a2:	001a      	movs	r2, r3
 80016a4:	2100      	movs	r1, #0
 80016a6:	f005 f9c1 	bl	8006a2c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016aa:	003b      	movs	r3, r7
 80016ac:	0018      	movs	r0, r3
 80016ae:	2310      	movs	r3, #16
 80016b0:	001a      	movs	r2, r3
 80016b2:	2100      	movs	r1, #0
 80016b4:	f005 f9ba 	bl	8006a2c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016b8:	4b30      	ldr	r3, [pc, #192]	; (800177c <MX_TIM2_Init+0xf8>)
 80016ba:	2280      	movs	r2, #128	; 0x80
 80016bc:	05d2      	lsls	r2, r2, #23
 80016be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 80016c0:	4b2e      	ldr	r3, [pc, #184]	; (800177c <MX_TIM2_Init+0xf8>)
 80016c2:	221f      	movs	r2, #31
 80016c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c6:	4b2d      	ldr	r3, [pc, #180]	; (800177c <MX_TIM2_Init+0xf8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80016cc:	4b2b      	ldr	r3, [pc, #172]	; (800177c <MX_TIM2_Init+0xf8>)
 80016ce:	4a2c      	ldr	r2, [pc, #176]	; (8001780 <MX_TIM2_Init+0xfc>)
 80016d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d2:	4b2a      	ldr	r3, [pc, #168]	; (800177c <MX_TIM2_Init+0xf8>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016d8:	4b28      	ldr	r3, [pc, #160]	; (800177c <MX_TIM2_Init+0xf8>)
 80016da:	2280      	movs	r2, #128	; 0x80
 80016dc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016de:	4b27      	ldr	r3, [pc, #156]	; (800177c <MX_TIM2_Init+0xf8>)
 80016e0:	0018      	movs	r0, r3
 80016e2:	f002 fc26 	bl	8003f32 <HAL_TIM_Base_Init>
 80016e6:	1e03      	subs	r3, r0, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80016ea:	f000 f915 	bl	8001918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ee:	2118      	movs	r1, #24
 80016f0:	187b      	adds	r3, r7, r1
 80016f2:	2280      	movs	r2, #128	; 0x80
 80016f4:	0152      	lsls	r2, r2, #5
 80016f6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016f8:	187a      	adds	r2, r7, r1
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <MX_TIM2_Init+0xf8>)
 80016fc:	0011      	movs	r1, r2
 80016fe:	0018      	movs	r0, r3
 8001700:	f002 fd66 	bl	80041d0 <HAL_TIM_ConfigClockSource>
 8001704:	1e03      	subs	r3, r0, #0
 8001706:	d001      	beq.n	800170c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001708:	f000 f906 	bl	8001918 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <MX_TIM2_Init+0xf8>)
 800170e:	0018      	movs	r0, r3
 8001710:	f002 fc4f 	bl	8003fb2 <HAL_TIM_PWM_Init>
 8001714:	1e03      	subs	r3, r0, #0
 8001716:	d001      	beq.n	800171c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001718:	f000 f8fe 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171c:	2110      	movs	r1, #16
 800171e:	187b      	adds	r3, r7, r1
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001724:	187b      	adds	r3, r7, r1
 8001726:	2200      	movs	r2, #0
 8001728:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800172a:	187a      	adds	r2, r7, r1
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <MX_TIM2_Init+0xf8>)
 800172e:	0011      	movs	r1, r2
 8001730:	0018      	movs	r0, r3
 8001732:	f003 f809 	bl	8004748 <HAL_TIMEx_MasterConfigSynchronization>
 8001736:	1e03      	subs	r3, r0, #0
 8001738:	d001      	beq.n	800173e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800173a:	f000 f8ed 	bl	8001918 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800173e:	003b      	movs	r3, r7
 8001740:	2260      	movs	r2, #96	; 0x60
 8001742:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 499;
 8001744:	003b      	movs	r3, r7
 8001746:	22f4      	movs	r2, #244	; 0xf4
 8001748:	32ff      	adds	r2, #255	; 0xff
 800174a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800174c:	003b      	movs	r3, r7
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001752:	003b      	movs	r3, r7
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001758:	0039      	movs	r1, r7
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <MX_TIM2_Init+0xf8>)
 800175c:	2208      	movs	r2, #8
 800175e:	0018      	movs	r0, r3
 8001760:	f002 fc70 	bl	8004044 <HAL_TIM_PWM_ConfigChannel>
 8001764:	1e03      	subs	r3, r0, #0
 8001766:	d001      	beq.n	800176c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001768:	f000 f8d6 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <MX_TIM2_Init+0xf8>)
 800176e:	0018      	movs	r0, r3
 8001770:	f000 f968 	bl	8001a44 <HAL_TIM_MspPostInit>

}
 8001774:	46c0      	nop			; (mov r8, r8)
 8001776:	46bd      	mov	sp, r7
 8001778:	b00a      	add	sp, #40	; 0x28
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000410 	.word	0x20000410
 8001780:	000003e7 	.word	0x000003e7

08001784 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <MX_USART2_UART_Init+0x58>)
 800178a:	4a15      	ldr	r2, [pc, #84]	; (80017e0 <MX_USART2_UART_Init+0x5c>)
 800178c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800178e:	4b13      	ldr	r3, [pc, #76]	; (80017dc <MX_USART2_UART_Init+0x58>)
 8001790:	22e1      	movs	r2, #225	; 0xe1
 8001792:	0252      	lsls	r2, r2, #9
 8001794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_USART2_UART_Init+0x58>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MX_USART2_UART_Init+0x58>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_USART2_UART_Init+0x58>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <MX_USART2_UART_Init+0x58>)
 80017aa:	220c      	movs	r2, #12
 80017ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <MX_USART2_UART_Init+0x58>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MX_USART2_UART_Init+0x58>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <MX_USART2_UART_Init+0x58>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <MX_USART2_UART_Init+0x58>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017c6:	4b05      	ldr	r3, [pc, #20]	; (80017dc <MX_USART2_UART_Init+0x58>)
 80017c8:	0018      	movs	r0, r3
 80017ca:	f003 f80d 	bl	80047e8 <HAL_UART_Init>
 80017ce:	1e03      	subs	r3, r0, #0
 80017d0:	d001      	beq.n	80017d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017d2:	f000 f8a1 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000450 	.word	0x20000450
 80017e0:	40004400 	.word	0x40004400

080017e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ea:	240c      	movs	r4, #12
 80017ec:	193b      	adds	r3, r7, r4
 80017ee:	0018      	movs	r0, r3
 80017f0:	2314      	movs	r3, #20
 80017f2:	001a      	movs	r2, r3
 80017f4:	2100      	movs	r1, #0
 80017f6:	f005 f919 	bl	8006a2c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fa:	4b3f      	ldr	r3, [pc, #252]	; (80018f8 <MX_GPIO_Init+0x114>)
 80017fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017fe:	4b3e      	ldr	r3, [pc, #248]	; (80018f8 <MX_GPIO_Init+0x114>)
 8001800:	2104      	movs	r1, #4
 8001802:	430a      	orrs	r2, r1
 8001804:	62da      	str	r2, [r3, #44]	; 0x2c
 8001806:	4b3c      	ldr	r3, [pc, #240]	; (80018f8 <MX_GPIO_Init+0x114>)
 8001808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180a:	2204      	movs	r2, #4
 800180c:	4013      	ands	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <MX_GPIO_Init+0x114>)
 8001814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001816:	4b38      	ldr	r3, [pc, #224]	; (80018f8 <MX_GPIO_Init+0x114>)
 8001818:	2101      	movs	r1, #1
 800181a:	430a      	orrs	r2, r1
 800181c:	62da      	str	r2, [r3, #44]	; 0x2c
 800181e:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <MX_GPIO_Init+0x114>)
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001822:	2201      	movs	r2, #1
 8001824:	4013      	ands	r3, r2
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	4b33      	ldr	r3, [pc, #204]	; (80018f8 <MX_GPIO_Init+0x114>)
 800182c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800182e:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <MX_GPIO_Init+0x114>)
 8001830:	2102      	movs	r1, #2
 8001832:	430a      	orrs	r2, r1
 8001834:	62da      	str	r2, [r3, #44]	; 0x2c
 8001836:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <MX_GPIO_Init+0x114>)
 8001838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183a:	2202      	movs	r2, #2
 800183c:	4013      	ands	r3, r2
 800183e:	603b      	str	r3, [r7, #0]
 8001840:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLEAR_Pin|A_HT_Pin|B_HT_Pin|CLOCK_Pin
 8001842:	492e      	ldr	r1, [pc, #184]	; (80018fc <MX_GPIO_Init+0x118>)
 8001844:	23a0      	movs	r3, #160	; 0xa0
 8001846:	05db      	lsls	r3, r3, #23
 8001848:	2201      	movs	r2, #1
 800184a:	0018      	movs	r0, r3
 800184c:	f000 fc87 	bl	800215e <HAL_GPIO_WritePin>
                          |A_HO_Pin|B_HO_Pin|A_MT_Pin|B_MT_Pin
                          |A_MO_Pin|B_MO_Pin|A_ST_Pin|B_ST_Pin
                          |A_SO_Pin|B_SO_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	011b      	lsls	r3, r3, #4
 8001854:	482a      	ldr	r0, [pc, #168]	; (8001900 <MX_GPIO_Init+0x11c>)
 8001856:	2200      	movs	r2, #0
 8001858:	0019      	movs	r1, r3
 800185a:	f000 fc80 	bl	800215e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CLEAR_Pin A_HT_Pin B_HT_Pin A_HO_Pin
                           B_HO_Pin A_MT_Pin B_MT_Pin A_MO_Pin
                           B_MO_Pin A_ST_Pin B_ST_Pin A_SO_Pin
                           B_SO_Pin */
  GPIO_InitStruct.Pin = CLEAR_Pin|A_HT_Pin|B_HT_Pin|A_HO_Pin
 800185e:	193b      	adds	r3, r7, r4
 8001860:	4a28      	ldr	r2, [pc, #160]	; (8001904 <MX_GPIO_Init+0x120>)
 8001862:	601a      	str	r2, [r3, #0]
                          |B_HO_Pin|A_MT_Pin|B_MT_Pin|A_MO_Pin
                          |B_MO_Pin|A_ST_Pin|B_ST_Pin|A_SO_Pin
                          |B_SO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001864:	193b      	adds	r3, r7, r4
 8001866:	2201      	movs	r2, #1
 8001868:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	193b      	adds	r3, r7, r4
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001870:	193b      	adds	r3, r7, r4
 8001872:	2202      	movs	r2, #2
 8001874:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001876:	193a      	adds	r2, r7, r4
 8001878:	23a0      	movs	r3, #160	; 0xa0
 800187a:	05db      	lsls	r3, r3, #23
 800187c:	0011      	movs	r1, r2
 800187e:	0018      	movs	r0, r3
 8001880:	f000 fae2 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLOCK_Pin */
  GPIO_InitStruct.Pin = CLOCK_Pin;
 8001884:	193b      	adds	r3, r7, r4
 8001886:	2208      	movs	r2, #8
 8001888:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188a:	193b      	adds	r3, r7, r4
 800188c:	2201      	movs	r2, #1
 800188e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	193b      	adds	r3, r7, r4
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001896:	193b      	adds	r3, r7, r4
 8001898:	2203      	movs	r2, #3
 800189a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CLOCK_GPIO_Port, &GPIO_InitStruct);
 800189c:	193a      	adds	r2, r7, r4
 800189e:	23a0      	movs	r3, #160	; 0xa0
 80018a0:	05db      	lsls	r3, r3, #23
 80018a2:	0011      	movs	r1, r2
 80018a4:	0018      	movs	r0, r3
 80018a6:	f000 facf 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_UP_Pin BTN_DOWN_Pin BTN_LEFT_Pin BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_DOWN_Pin|BTN_LEFT_Pin|BTN_RIGHT_Pin;
 80018aa:	193b      	adds	r3, r7, r4
 80018ac:	220f      	movs	r2, #15
 80018ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b0:	193b      	adds	r3, r7, r4
 80018b2:	2200      	movs	r2, #0
 80018b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	193b      	adds	r3, r7, r4
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018bc:	193b      	adds	r3, r7, r4
 80018be:	4a10      	ldr	r2, [pc, #64]	; (8001900 <MX_GPIO_Init+0x11c>)
 80018c0:	0019      	movs	r1, r3
 80018c2:	0010      	movs	r0, r2
 80018c4:	f000 fac0 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80018c8:	0021      	movs	r1, r4
 80018ca:	187b      	adds	r3, r7, r1
 80018cc:	2280      	movs	r2, #128	; 0x80
 80018ce:	0112      	lsls	r2, r2, #4
 80018d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d2:	187b      	adds	r3, r7, r1
 80018d4:	2201      	movs	r2, #1
 80018d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	187b      	adds	r3, r7, r1
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	187b      	adds	r3, r7, r1
 80018e0:	2200      	movs	r2, #0
 80018e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e4:	187b      	adds	r3, r7, r1
 80018e6:	4a06      	ldr	r2, [pc, #24]	; (8001900 <MX_GPIO_Init+0x11c>)
 80018e8:	0019      	movs	r1, r3
 80018ea:	0010      	movs	r0, r2
 80018ec:	f000 faac 	bl	8001e48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018f0:	46c0      	nop			; (mov r8, r8)
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b009      	add	sp, #36	; 0x24
 80018f6:	bd90      	pop	{r4, r7, pc}
 80018f8:	40021000 	.word	0x40021000
 80018fc:	00009fff 	.word	0x00009fff
 8001900:	50000400 	.word	0x50000400
 8001904:	00009ff7 	.word	0x00009ff7

08001908 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001910:	2001      	movs	r0, #1
 8001912:	f003 fc9f 	bl	8005254 <osDelay>
 8001916:	e7fb      	b.n	8001910 <StartDefaultTask+0x8>

08001918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800191c:	b672      	cpsid	i
}
 800191e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001920:	e7fe      	b.n	8001920 <Error_Handler+0x8>
	...

08001924 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_MspInit+0x34>)
 800192a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_MspInit+0x34>)
 800192e:	2101      	movs	r1, #1
 8001930:	430a      	orrs	r2, r1
 8001932:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <HAL_MspInit+0x34>)
 8001936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001938:	4b07      	ldr	r3, [pc, #28]	; (8001958 <HAL_MspInit+0x34>)
 800193a:	2180      	movs	r1, #128	; 0x80
 800193c:	0549      	lsls	r1, r1, #21
 800193e:	430a      	orrs	r2, r1
 8001940:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8001942:	2302      	movs	r3, #2
 8001944:	425b      	negs	r3, r3
 8001946:	2200      	movs	r2, #0
 8001948:	2103      	movs	r1, #3
 800194a:	0018      	movs	r0, r3
 800194c:	f000 fa5a 	bl	8001e04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001950:	46c0      	nop			; (mov r8, r8)
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	40021000 	.word	0x40021000

0800195c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	240c      	movs	r4, #12
 8001966:	193b      	adds	r3, r7, r4
 8001968:	0018      	movs	r0, r3
 800196a:	2314      	movs	r3, #20
 800196c:	001a      	movs	r2, r3
 800196e:	2100      	movs	r1, #0
 8001970:	f005 f85c 	bl	8006a2c <memset>
  if(hi2c->Instance==I2C1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a18      	ldr	r2, [pc, #96]	; (80019dc <HAL_I2C_MspInit+0x80>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d129      	bne.n	80019d2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197e:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <HAL_I2C_MspInit+0x84>)
 8001980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001982:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <HAL_I2C_MspInit+0x84>)
 8001984:	2102      	movs	r1, #2
 8001986:	430a      	orrs	r2, r1
 8001988:	62da      	str	r2, [r3, #44]	; 0x2c
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <HAL_I2C_MspInit+0x84>)
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	2202      	movs	r2, #2
 8001990:	4013      	ands	r3, r2
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001996:	193b      	adds	r3, r7, r4
 8001998:	22c0      	movs	r2, #192	; 0xc0
 800199a:	0092      	lsls	r2, r2, #2
 800199c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800199e:	0021      	movs	r1, r4
 80019a0:	187b      	adds	r3, r7, r1
 80019a2:	2212      	movs	r2, #18
 80019a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	187b      	adds	r3, r7, r1
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ac:	187b      	adds	r3, r7, r1
 80019ae:	2203      	movs	r2, #3
 80019b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019b2:	187b      	adds	r3, r7, r1
 80019b4:	2204      	movs	r2, #4
 80019b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b8:	187b      	adds	r3, r7, r1
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <HAL_I2C_MspInit+0x88>)
 80019bc:	0019      	movs	r1, r3
 80019be:	0010      	movs	r0, r2
 80019c0:	f000 fa42 	bl	8001e48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_I2C_MspInit+0x84>)
 80019c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_I2C_MspInit+0x84>)
 80019ca:	2180      	movs	r1, #128	; 0x80
 80019cc:	0389      	lsls	r1, r1, #14
 80019ce:	430a      	orrs	r2, r1
 80019d0:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b009      	add	sp, #36	; 0x24
 80019d8:	bd90      	pop	{r4, r7, pc}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	40005400 	.word	0x40005400
 80019e0:	40021000 	.word	0x40021000
 80019e4:	50000400 	.word	0x50000400

080019e8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a06      	ldr	r2, [pc, #24]	; (8001a10 <HAL_RTC_MspInit+0x28>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d106      	bne.n	8001a08 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_RTC_MspInit+0x2c>)
 80019fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <HAL_RTC_MspInit+0x2c>)
 8001a00:	2180      	movs	r1, #128	; 0x80
 8001a02:	02c9      	lsls	r1, r1, #11
 8001a04:	430a      	orrs	r2, r1
 8001a06:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a08:	46c0      	nop			; (mov r8, r8)
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	b002      	add	sp, #8
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40002800 	.word	0x40002800
 8001a14:	40021000 	.word	0x40021000

08001a18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	05db      	lsls	r3, r3, #23
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d105      	bne.n	8001a38 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <HAL_TIM_Base_MspInit+0x28>)
 8001a2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a30:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <HAL_TIM_Base_MspInit+0x28>)
 8001a32:	2101      	movs	r1, #1
 8001a34:	430a      	orrs	r2, r1
 8001a36:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a38:	46c0      	nop			; (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b002      	add	sp, #8
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021000 	.word	0x40021000

08001a44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	240c      	movs	r4, #12
 8001a4e:	193b      	adds	r3, r7, r4
 8001a50:	0018      	movs	r0, r3
 8001a52:	2314      	movs	r3, #20
 8001a54:	001a      	movs	r2, r3
 8001a56:	2100      	movs	r1, #0
 8001a58:	f004 ffe8 	bl	8006a2c <memset>
  if(htim->Instance==TIM2)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	05db      	lsls	r3, r3, #23
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d122      	bne.n	8001aae <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a68:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <HAL_TIM_MspPostInit+0x74>)
 8001a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_TIM_MspPostInit+0x74>)
 8001a6e:	2102      	movs	r1, #2
 8001a70:	430a      	orrs	r2, r1
 8001a72:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a74:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <HAL_TIM_MspPostInit+0x74>)
 8001a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a78:	2202      	movs	r2, #2
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a80:	193b      	adds	r3, r7, r4
 8001a82:	2280      	movs	r2, #128	; 0x80
 8001a84:	00d2      	lsls	r2, r2, #3
 8001a86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	0021      	movs	r1, r4
 8001a8a:	187b      	adds	r3, r7, r1
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	187b      	adds	r3, r7, r1
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a96:	187b      	adds	r3, r7, r1
 8001a98:	2200      	movs	r2, #0
 8001a9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001a9c:	187b      	adds	r3, r7, r1
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa2:	187b      	adds	r3, r7, r1
 8001aa4:	4a05      	ldr	r2, [pc, #20]	; (8001abc <HAL_TIM_MspPostInit+0x78>)
 8001aa6:	0019      	movs	r1, r3
 8001aa8:	0010      	movs	r0, r2
 8001aaa:	f000 f9cd 	bl	8001e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b009      	add	sp, #36	; 0x24
 8001ab4:	bd90      	pop	{r4, r7, pc}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	50000400 	.word	0x50000400

08001ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b089      	sub	sp, #36	; 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	240c      	movs	r4, #12
 8001aca:	193b      	adds	r3, r7, r4
 8001acc:	0018      	movs	r0, r3
 8001ace:	2314      	movs	r3, #20
 8001ad0:	001a      	movs	r2, r3
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	f004 ffaa 	bl	8006a2c <memset>
  if(huart->Instance==USART2)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a17      	ldr	r2, [pc, #92]	; (8001b3c <HAL_UART_MspInit+0x7c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d128      	bne.n	8001b34 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <HAL_UART_MspInit+0x80>)
 8001ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ae6:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <HAL_UART_MspInit+0x80>)
 8001ae8:	2180      	movs	r1, #128	; 0x80
 8001aea:	0289      	lsls	r1, r1, #10
 8001aec:	430a      	orrs	r2, r1
 8001aee:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <HAL_UART_MspInit+0x80>)
 8001af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_UART_MspInit+0x80>)
 8001af6:	2102      	movs	r1, #2
 8001af8:	430a      	orrs	r2, r1
 8001afa:	62da      	str	r2, [r3, #44]	; 0x2c
 8001afc:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <HAL_UART_MspInit+0x80>)
 8001afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b00:	2202      	movs	r2, #2
 8001b02:	4013      	ands	r3, r2
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB6     ------> USART2_TX
    PB7     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b08:	0021      	movs	r1, r4
 8001b0a:	187b      	adds	r3, r7, r1
 8001b0c:	22c0      	movs	r2, #192	; 0xc0
 8001b0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b10:	187b      	adds	r3, r7, r1
 8001b12:	2202      	movs	r2, #2
 8001b14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	187b      	adds	r3, r7, r1
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1c:	187b      	adds	r3, r7, r1
 8001b1e:	2203      	movs	r2, #3
 8001b20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8001b22:	187b      	adds	r3, r7, r1
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b28:	187b      	adds	r3, r7, r1
 8001b2a:	4a06      	ldr	r2, [pc, #24]	; (8001b44 <HAL_UART_MspInit+0x84>)
 8001b2c:	0019      	movs	r1, r3
 8001b2e:	0010      	movs	r0, r2
 8001b30:	f000 f98a 	bl	8001e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b34:	46c0      	nop			; (mov r8, r8)
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b009      	add	sp, #36	; 0x24
 8001b3a:	bd90      	pop	{r4, r7, pc}
 8001b3c:	40004400 	.word	0x40004400
 8001b40:	40021000 	.word	0x40021000
 8001b44:	50000400 	.word	0x50000400

08001b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <NMI_Handler+0x4>

08001b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b52:	e7fe      	b.n	8001b52 <HardFault_Handler+0x4>

08001b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b58:	f000 f8a6 	bl	8001ca8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b5c:	f004 fbbe 	bl	80062dc <xTaskGetSchedulerState>
 8001b60:	0003      	movs	r3, r0
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d001      	beq.n	8001b6a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001b66:	f004 fd7f 	bl	8006668 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b74:	46c0      	nop			; (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001b7c:	4813      	ldr	r0, [pc, #76]	; (8001bcc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001b7e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b80:	f7ff fff6 	bl	8001b70 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001b84:	4812      	ldr	r0, [pc, #72]	; (8001bd0 <LoopForever+0x6>)
    LDR R1, [R0]
 8001b86:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001b88:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001b8a:	4a12      	ldr	r2, [pc, #72]	; (8001bd4 <LoopForever+0xa>)
    CMP R1, R2
 8001b8c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001b8e:	d105      	bne.n	8001b9c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001b90:	4811      	ldr	r0, [pc, #68]	; (8001bd8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001b92:	4912      	ldr	r1, [pc, #72]	; (8001bdc <LoopForever+0x12>)
    STR R1, [R0]
 8001b94:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001b96:	4812      	ldr	r0, [pc, #72]	; (8001be0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001b98:	4912      	ldr	r1, [pc, #72]	; (8001be4 <LoopForever+0x1a>)
    STR R1, [R0]
 8001b9a:	6001      	str	r1, [r0, #0]

08001b9c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b9c:	4812      	ldr	r0, [pc, #72]	; (8001be8 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001b9e:	4913      	ldr	r1, [pc, #76]	; (8001bec <LoopForever+0x22>)
  ldr r2, =_sidata
 8001ba0:	4a13      	ldr	r2, [pc, #76]	; (8001bf0 <LoopForever+0x26>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba4:	e002      	b.n	8001bac <LoopCopyDataInit>

08001ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001baa:	3304      	adds	r3, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb0:	d3f9      	bcc.n	8001ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb2:	4a10      	ldr	r2, [pc, #64]	; (8001bf4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001bb4:	4c10      	ldr	r4, [pc, #64]	; (8001bf8 <LoopForever+0x2e>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb8:	e001      	b.n	8001bbe <LoopFillZerobss>

08001bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bbc:	3204      	adds	r2, #4

08001bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc0:	d3fb      	bcc.n	8001bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bc2:	f004 ff3b 	bl	8006a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc6:	f7ff fc11 	bl	80013ec <main>

08001bca <LoopForever>:

LoopForever:
    b LoopForever
 8001bca:	e7fe      	b.n	8001bca <LoopForever>
   ldr   r0, =_estack
 8001bcc:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8001bd0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001bd4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001bd8:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001bdc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001be0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001be4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bec:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8001bf0:	08006c04 	.word	0x08006c04
  ldr r2, =_sbss
 8001bf4:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8001bf8:	20001230 	.word	0x20001230

08001bfc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bfc:	e7fe      	b.n	8001bfc <ADC1_IRQHandler>
	...

08001c00 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c06:	1dfb      	adds	r3, r7, #7
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_Init+0x3c>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_Init+0x3c>)
 8001c12:	2140      	movs	r1, #64	; 0x40
 8001c14:	430a      	orrs	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c18:	2003      	movs	r0, #3
 8001c1a:	f000 f811 	bl	8001c40 <HAL_InitTick>
 8001c1e:	1e03      	subs	r3, r0, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001c22:	1dfb      	adds	r3, r7, #7
 8001c24:	2201      	movs	r2, #1
 8001c26:	701a      	strb	r2, [r3, #0]
 8001c28:	e001      	b.n	8001c2e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c2a:	f7ff fe7b 	bl	8001924 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c2e:	1dfb      	adds	r3, r7, #7
 8001c30:	781b      	ldrb	r3, [r3, #0]
}
 8001c32:	0018      	movs	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b002      	add	sp, #8
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	40022000 	.word	0x40022000

08001c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <HAL_InitTick+0x5c>)
 8001c4a:	681c      	ldr	r4, [r3, #0]
 8001c4c:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <HAL_InitTick+0x60>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	0019      	movs	r1, r3
 8001c52:	23fa      	movs	r3, #250	; 0xfa
 8001c54:	0098      	lsls	r0, r3, #2
 8001c56:	f7fe fa57 	bl	8000108 <__udivsi3>
 8001c5a:	0003      	movs	r3, r0
 8001c5c:	0019      	movs	r1, r3
 8001c5e:	0020      	movs	r0, r4
 8001c60:	f7fe fa52 	bl	8000108 <__udivsi3>
 8001c64:	0003      	movs	r3, r0
 8001c66:	0018      	movs	r0, r3
 8001c68:	f000 f8e1 	bl	8001e2e <HAL_SYSTICK_Config>
 8001c6c:	1e03      	subs	r3, r0, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e00f      	b.n	8001c94 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	d80b      	bhi.n	8001c92 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	425b      	negs	r3, r3
 8001c80:	2200      	movs	r2, #0
 8001c82:	0018      	movs	r0, r3
 8001c84:	f000 f8be 	bl	8001e04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_InitTick+0x64>)
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e000      	b.n	8001c94 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
}
 8001c94:	0018      	movs	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b003      	add	sp, #12
 8001c9a:	bd90      	pop	{r4, r7, pc}
 8001c9c:	20000118 	.word	0x20000118
 8001ca0:	20000120 	.word	0x20000120
 8001ca4:	2000011c 	.word	0x2000011c

08001ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_IncTick+0x1c>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	001a      	movs	r2, r3
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_IncTick+0x20>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	18d2      	adds	r2, r2, r3
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <HAL_IncTick+0x20>)
 8001cba:	601a      	str	r2, [r3, #0]
}
 8001cbc:	46c0      	nop			; (mov r8, r8)
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	20000120 	.word	0x20000120
 8001cc8:	200004e8 	.word	0x200004e8

08001ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd0:	4b02      	ldr	r3, [pc, #8]	; (8001cdc <HAL_GetTick+0x10>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	200004e8 	.word	0x200004e8

08001ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	0002      	movs	r2, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	1dfb      	adds	r3, r7, #7
 8001cec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cee:	1dfb      	adds	r3, r7, #7
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b7f      	cmp	r3, #127	; 0x7f
 8001cf4:	d828      	bhi.n	8001d48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cf6:	4a2f      	ldr	r2, [pc, #188]	; (8001db4 <__NVIC_SetPriority+0xd4>)
 8001cf8:	1dfb      	adds	r3, r7, #7
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	b25b      	sxtb	r3, r3
 8001cfe:	089b      	lsrs	r3, r3, #2
 8001d00:	33c0      	adds	r3, #192	; 0xc0
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	589b      	ldr	r3, [r3, r2]
 8001d06:	1dfa      	adds	r2, r7, #7
 8001d08:	7812      	ldrb	r2, [r2, #0]
 8001d0a:	0011      	movs	r1, r2
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	400a      	ands	r2, r1
 8001d10:	00d2      	lsls	r2, r2, #3
 8001d12:	21ff      	movs	r1, #255	; 0xff
 8001d14:	4091      	lsls	r1, r2
 8001d16:	000a      	movs	r2, r1
 8001d18:	43d2      	mvns	r2, r2
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	019b      	lsls	r3, r3, #6
 8001d22:	22ff      	movs	r2, #255	; 0xff
 8001d24:	401a      	ands	r2, r3
 8001d26:	1dfb      	adds	r3, r7, #7
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	4003      	ands	r3, r0
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d34:	481f      	ldr	r0, [pc, #124]	; (8001db4 <__NVIC_SetPriority+0xd4>)
 8001d36:	1dfb      	adds	r3, r7, #7
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	b25b      	sxtb	r3, r3
 8001d3c:	089b      	lsrs	r3, r3, #2
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	33c0      	adds	r3, #192	; 0xc0
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d46:	e031      	b.n	8001dac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d48:	4a1b      	ldr	r2, [pc, #108]	; (8001db8 <__NVIC_SetPriority+0xd8>)
 8001d4a:	1dfb      	adds	r3, r7, #7
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	0019      	movs	r1, r3
 8001d50:	230f      	movs	r3, #15
 8001d52:	400b      	ands	r3, r1
 8001d54:	3b08      	subs	r3, #8
 8001d56:	089b      	lsrs	r3, r3, #2
 8001d58:	3306      	adds	r3, #6
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	18d3      	adds	r3, r2, r3
 8001d5e:	3304      	adds	r3, #4
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	1dfa      	adds	r2, r7, #7
 8001d64:	7812      	ldrb	r2, [r2, #0]
 8001d66:	0011      	movs	r1, r2
 8001d68:	2203      	movs	r2, #3
 8001d6a:	400a      	ands	r2, r1
 8001d6c:	00d2      	lsls	r2, r2, #3
 8001d6e:	21ff      	movs	r1, #255	; 0xff
 8001d70:	4091      	lsls	r1, r2
 8001d72:	000a      	movs	r2, r1
 8001d74:	43d2      	mvns	r2, r2
 8001d76:	401a      	ands	r2, r3
 8001d78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	019b      	lsls	r3, r3, #6
 8001d7e:	22ff      	movs	r2, #255	; 0xff
 8001d80:	401a      	ands	r2, r3
 8001d82:	1dfb      	adds	r3, r7, #7
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	0018      	movs	r0, r3
 8001d88:	2303      	movs	r3, #3
 8001d8a:	4003      	ands	r3, r0
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d90:	4809      	ldr	r0, [pc, #36]	; (8001db8 <__NVIC_SetPriority+0xd8>)
 8001d92:	1dfb      	adds	r3, r7, #7
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	001c      	movs	r4, r3
 8001d98:	230f      	movs	r3, #15
 8001d9a:	4023      	ands	r3, r4
 8001d9c:	3b08      	subs	r3, #8
 8001d9e:	089b      	lsrs	r3, r3, #2
 8001da0:	430a      	orrs	r2, r1
 8001da2:	3306      	adds	r3, #6
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	18c3      	adds	r3, r0, r3
 8001da8:	3304      	adds	r3, #4
 8001daa:	601a      	str	r2, [r3, #0]
}
 8001dac:	46c0      	nop			; (mov r8, r8)
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b003      	add	sp, #12
 8001db2:	bd90      	pop	{r4, r7, pc}
 8001db4:	e000e100 	.word	0xe000e100
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	1e5a      	subs	r2, r3, #1
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	045b      	lsls	r3, r3, #17
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d301      	bcc.n	8001dd4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e010      	b.n	8001df6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <SysTick_Config+0x44>)
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	3a01      	subs	r2, #1
 8001dda:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ddc:	2301      	movs	r3, #1
 8001dde:	425b      	negs	r3, r3
 8001de0:	2103      	movs	r1, #3
 8001de2:	0018      	movs	r0, r3
 8001de4:	f7ff ff7c 	bl	8001ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <SysTick_Config+0x44>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <SysTick_Config+0x44>)
 8001df0:	2207      	movs	r2, #7
 8001df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	0018      	movs	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	b002      	add	sp, #8
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	e000e010 	.word	0xe000e010

08001e04 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	210f      	movs	r1, #15
 8001e10:	187b      	adds	r3, r7, r1
 8001e12:	1c02      	adds	r2, r0, #0
 8001e14:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	187b      	adds	r3, r7, r1
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	b25b      	sxtb	r3, r3
 8001e1e:	0011      	movs	r1, r2
 8001e20:	0018      	movs	r0, r3
 8001e22:	f7ff ff5d 	bl	8001ce0 <__NVIC_SetPriority>
}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b004      	add	sp, #16
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f7ff ffbf 	bl	8001dbc <SysTick_Config>
 8001e3e:	0003      	movs	r3, r0
}
 8001e40:	0018      	movs	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b002      	add	sp, #8
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e5e:	e149      	b.n	80020f4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2101      	movs	r1, #1
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4091      	lsls	r1, r2
 8001e6a:	000a      	movs	r2, r1
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d100      	bne.n	8001e78 <HAL_GPIO_Init+0x30>
 8001e76:	e13a      	b.n	80020ee <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d005      	beq.n	8001e90 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2203      	movs	r2, #3
 8001e8a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d130      	bne.n	8001ef2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	0013      	movs	r3, r2
 8001ea0:	43da      	mvns	r2, r3
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	409a      	lsls	r2, r3
 8001eb2:	0013      	movs	r3, r2
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	0013      	movs	r3, r2
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	091b      	lsrs	r3, r3, #4
 8001edc:	2201      	movs	r2, #1
 8001ede:	401a      	ands	r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	0013      	movs	r3, r2
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d017      	beq.n	8001f2e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	2203      	movs	r2, #3
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	0013      	movs	r3, r2
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	0013      	movs	r3, r2
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2203      	movs	r2, #3
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d123      	bne.n	8001f82 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	08da      	lsrs	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3208      	adds	r2, #8
 8001f42:	0092      	lsls	r2, r2, #2
 8001f44:	58d3      	ldr	r3, [r2, r3]
 8001f46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2207      	movs	r2, #7
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	220f      	movs	r2, #15
 8001f52:	409a      	lsls	r2, r3
 8001f54:	0013      	movs	r3, r2
 8001f56:	43da      	mvns	r2, r3
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	691a      	ldr	r2, [r3, #16]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2107      	movs	r1, #7
 8001f66:	400b      	ands	r3, r1
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	0013      	movs	r3, r2
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	08da      	lsrs	r2, r3, #3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3208      	adds	r2, #8
 8001f7c:	0092      	lsls	r2, r2, #2
 8001f7e:	6939      	ldr	r1, [r7, #16]
 8001f80:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	0013      	movs	r3, r2
 8001f92:	43da      	mvns	r2, r3
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	401a      	ands	r2, r3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	0013      	movs	r3, r2
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	23c0      	movs	r3, #192	; 0xc0
 8001fbc:	029b      	lsls	r3, r3, #10
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d100      	bne.n	8001fc4 <HAL_GPIO_Init+0x17c>
 8001fc2:	e094      	b.n	80020ee <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc4:	4b51      	ldr	r3, [pc, #324]	; (800210c <HAL_GPIO_Init+0x2c4>)
 8001fc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fc8:	4b50      	ldr	r3, [pc, #320]	; (800210c <HAL_GPIO_Init+0x2c4>)
 8001fca:	2101      	movs	r1, #1
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fd0:	4a4f      	ldr	r2, [pc, #316]	; (8002110 <HAL_GPIO_Init+0x2c8>)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	089b      	lsrs	r3, r3, #2
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	589b      	ldr	r3, [r3, r2]
 8001fdc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	220f      	movs	r2, #15
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	0013      	movs	r3, r2
 8001fec:	43da      	mvns	r2, r3
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	23a0      	movs	r3, #160	; 0xa0
 8001ff8:	05db      	lsls	r3, r3, #23
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d013      	beq.n	8002026 <HAL_GPIO_Init+0x1de>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a44      	ldr	r2, [pc, #272]	; (8002114 <HAL_GPIO_Init+0x2cc>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00d      	beq.n	8002022 <HAL_GPIO_Init+0x1da>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a43      	ldr	r2, [pc, #268]	; (8002118 <HAL_GPIO_Init+0x2d0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d007      	beq.n	800201e <HAL_GPIO_Init+0x1d6>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a42      	ldr	r2, [pc, #264]	; (800211c <HAL_GPIO_Init+0x2d4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d101      	bne.n	800201a <HAL_GPIO_Init+0x1d2>
 8002016:	2305      	movs	r3, #5
 8002018:	e006      	b.n	8002028 <HAL_GPIO_Init+0x1e0>
 800201a:	2306      	movs	r3, #6
 800201c:	e004      	b.n	8002028 <HAL_GPIO_Init+0x1e0>
 800201e:	2302      	movs	r3, #2
 8002020:	e002      	b.n	8002028 <HAL_GPIO_Init+0x1e0>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <HAL_GPIO_Init+0x1e0>
 8002026:	2300      	movs	r3, #0
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	2103      	movs	r1, #3
 800202c:	400a      	ands	r2, r1
 800202e:	0092      	lsls	r2, r2, #2
 8002030:	4093      	lsls	r3, r2
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002038:	4935      	ldr	r1, [pc, #212]	; (8002110 <HAL_GPIO_Init+0x2c8>)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	089b      	lsrs	r3, r3, #2
 800203e:	3302      	adds	r3, #2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002046:	4b36      	ldr	r3, [pc, #216]	; (8002120 <HAL_GPIO_Init+0x2d8>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	43da      	mvns	r2, r3
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4013      	ands	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	035b      	lsls	r3, r3, #13
 800205e:	4013      	ands	r3, r2
 8002060:	d003      	beq.n	800206a <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800206a:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <HAL_GPIO_Init+0x2d8>)
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002070:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <HAL_GPIO_Init+0x2d8>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	43da      	mvns	r2, r3
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	039b      	lsls	r3, r3, #14
 8002088:	4013      	ands	r3, r2
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002094:	4b22      	ldr	r3, [pc, #136]	; (8002120 <HAL_GPIO_Init+0x2d8>)
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800209a:	4b21      	ldr	r3, [pc, #132]	; (8002120 <HAL_GPIO_Init+0x2d8>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	43da      	mvns	r2, r3
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4013      	ands	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	2380      	movs	r3, #128	; 0x80
 80020b0:	029b      	lsls	r3, r3, #10
 80020b2:	4013      	ands	r3, r2
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020be:	4b18      	ldr	r3, [pc, #96]	; (8002120 <HAL_GPIO_Init+0x2d8>)
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020c4:	4b16      	ldr	r3, [pc, #88]	; (8002120 <HAL_GPIO_Init+0x2d8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	43da      	mvns	r2, r3
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4013      	ands	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	025b      	lsls	r3, r3, #9
 80020dc:	4013      	ands	r3, r2
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020e8:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <HAL_GPIO_Init+0x2d8>)
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	3301      	adds	r3, #1
 80020f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	40da      	lsrs	r2, r3
 80020fc:	1e13      	subs	r3, r2, #0
 80020fe:	d000      	beq.n	8002102 <HAL_GPIO_Init+0x2ba>
 8002100:	e6ae      	b.n	8001e60 <HAL_GPIO_Init+0x18>
  }
}
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	46c0      	nop			; (mov r8, r8)
 8002106:	46bd      	mov	sp, r7
 8002108:	b006      	add	sp, #24
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40021000 	.word	0x40021000
 8002110:	40010000 	.word	0x40010000
 8002114:	50000400 	.word	0x50000400
 8002118:	50000800 	.word	0x50000800
 800211c:	50001c00 	.word	0x50001c00
 8002120:	40010400 	.word	0x40010400

08002124 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	000a      	movs	r2, r1
 800212e:	1cbb      	adds	r3, r7, #2
 8002130:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	1cba      	adds	r2, r7, #2
 8002138:	8812      	ldrh	r2, [r2, #0]
 800213a:	4013      	ands	r3, r2
 800213c:	d004      	beq.n	8002148 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800213e:	230f      	movs	r3, #15
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	2201      	movs	r2, #1
 8002144:	701a      	strb	r2, [r3, #0]
 8002146:	e003      	b.n	8002150 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002148:	230f      	movs	r3, #15
 800214a:	18fb      	adds	r3, r7, r3
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002150:	230f      	movs	r3, #15
 8002152:	18fb      	adds	r3, r7, r3
 8002154:	781b      	ldrb	r3, [r3, #0]
}
 8002156:	0018      	movs	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	b004      	add	sp, #16
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	0008      	movs	r0, r1
 8002168:	0011      	movs	r1, r2
 800216a:	1cbb      	adds	r3, r7, #2
 800216c:	1c02      	adds	r2, r0, #0
 800216e:	801a      	strh	r2, [r3, #0]
 8002170:	1c7b      	adds	r3, r7, #1
 8002172:	1c0a      	adds	r2, r1, #0
 8002174:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002176:	1c7b      	adds	r3, r7, #1
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d004      	beq.n	8002188 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800217e:	1cbb      	adds	r3, r7, #2
 8002180:	881a      	ldrh	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002186:	e003      	b.n	8002190 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002188:	1cbb      	adds	r3, r7, #2
 800218a:	881a      	ldrh	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	46bd      	mov	sp, r7
 8002194:	b002      	add	sp, #8
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e082      	b.n	80022b0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2241      	movs	r2, #65	; 0x41
 80021ae:	5c9b      	ldrb	r3, [r3, r2]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d107      	bne.n	80021c6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2240      	movs	r2, #64	; 0x40
 80021ba:	2100      	movs	r1, #0
 80021bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	0018      	movs	r0, r3
 80021c2:	f7ff fbcb 	bl	800195c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2241      	movs	r2, #65	; 0x41
 80021ca:	2124      	movs	r1, #36	; 0x24
 80021cc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2101      	movs	r1, #1
 80021da:	438a      	bics	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4934      	ldr	r1, [pc, #208]	; (80022b8 <HAL_I2C_Init+0x120>)
 80021e8:	400a      	ands	r2, r1
 80021ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4931      	ldr	r1, [pc, #196]	; (80022bc <HAL_I2C_Init+0x124>)
 80021f8:	400a      	ands	r2, r1
 80021fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d108      	bne.n	8002216 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2180      	movs	r1, #128	; 0x80
 800220e:	0209      	lsls	r1, r1, #8
 8002210:	430a      	orrs	r2, r1
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	e007      	b.n	8002226 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2184      	movs	r1, #132	; 0x84
 8002220:	0209      	lsls	r1, r1, #8
 8002222:	430a      	orrs	r2, r1
 8002224:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d104      	bne.n	8002238 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2280      	movs	r2, #128	; 0x80
 8002234:	0112      	lsls	r2, r2, #4
 8002236:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	491f      	ldr	r1, [pc, #124]	; (80022c0 <HAL_I2C_Init+0x128>)
 8002244:	430a      	orrs	r2, r1
 8002246:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	491a      	ldr	r1, [pc, #104]	; (80022bc <HAL_I2C_Init+0x124>)
 8002254:	400a      	ands	r2, r1
 8002256:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	431a      	orrs	r2, r3
 8002262:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69d9      	ldr	r1, [r3, #28]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1a      	ldr	r2, [r3, #32]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2101      	movs	r1, #1
 800228e:	430a      	orrs	r2, r1
 8002290:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2241      	movs	r2, #65	; 0x41
 800229c:	2120      	movs	r1, #32
 800229e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2242      	movs	r2, #66	; 0x42
 80022aa:	2100      	movs	r1, #0
 80022ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	0018      	movs	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b002      	add	sp, #8
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	f0ffffff 	.word	0xf0ffffff
 80022bc:	ffff7fff 	.word	0xffff7fff
 80022c0:	02008000 	.word	0x02008000

080022c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80022c4:	b590      	push	{r4, r7, lr}
 80022c6:	b089      	sub	sp, #36	; 0x24
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	0008      	movs	r0, r1
 80022ce:	607a      	str	r2, [r7, #4]
 80022d0:	0019      	movs	r1, r3
 80022d2:	230a      	movs	r3, #10
 80022d4:	18fb      	adds	r3, r7, r3
 80022d6:	1c02      	adds	r2, r0, #0
 80022d8:	801a      	strh	r2, [r3, #0]
 80022da:	2308      	movs	r3, #8
 80022dc:	18fb      	adds	r3, r7, r3
 80022de:	1c0a      	adds	r2, r1, #0
 80022e0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2241      	movs	r2, #65	; 0x41
 80022e6:	5c9b      	ldrb	r3, [r3, r2]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	d000      	beq.n	80022f0 <HAL_I2C_Master_Transmit+0x2c>
 80022ee:	e0e7      	b.n	80024c0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2240      	movs	r2, #64	; 0x40
 80022f4:	5c9b      	ldrb	r3, [r3, r2]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_I2C_Master_Transmit+0x3a>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e0e1      	b.n	80024c2 <HAL_I2C_Master_Transmit+0x1fe>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2240      	movs	r2, #64	; 0x40
 8002302:	2101      	movs	r1, #1
 8002304:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002306:	f7ff fce1 	bl	8001ccc <HAL_GetTick>
 800230a:	0003      	movs	r3, r0
 800230c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	0219      	lsls	r1, r3, #8
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	2319      	movs	r3, #25
 800231a:	2201      	movs	r2, #1
 800231c:	f000 fa04 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 8002320:	1e03      	subs	r3, r0, #0
 8002322:	d001      	beq.n	8002328 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0cc      	b.n	80024c2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2241      	movs	r2, #65	; 0x41
 800232c:	2121      	movs	r1, #33	; 0x21
 800232e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2242      	movs	r2, #66	; 0x42
 8002334:	2110      	movs	r1, #16
 8002336:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2208      	movs	r2, #8
 8002348:	18ba      	adds	r2, r7, r2
 800234a:	8812      	ldrh	r2, [r2, #0]
 800234c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002358:	b29b      	uxth	r3, r3
 800235a:	2bff      	cmp	r3, #255	; 0xff
 800235c:	d911      	bls.n	8002382 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	22ff      	movs	r2, #255	; 0xff
 8002362:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002368:	b2da      	uxtb	r2, r3
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	045c      	lsls	r4, r3, #17
 800236e:	230a      	movs	r3, #10
 8002370:	18fb      	adds	r3, r7, r3
 8002372:	8819      	ldrh	r1, [r3, #0]
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	4b55      	ldr	r3, [pc, #340]	; (80024cc <HAL_I2C_Master_Transmit+0x208>)
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	0023      	movs	r3, r4
 800237c:	f000 fc2e 	bl	8002bdc <I2C_TransferConfig>
 8002380:	e075      	b.n	800246e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002386:	b29a      	uxth	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002390:	b2da      	uxtb	r2, r3
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	049c      	lsls	r4, r3, #18
 8002396:	230a      	movs	r3, #10
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	8819      	ldrh	r1, [r3, #0]
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	4b4b      	ldr	r3, [pc, #300]	; (80024cc <HAL_I2C_Master_Transmit+0x208>)
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	0023      	movs	r3, r4
 80023a4:	f000 fc1a 	bl	8002bdc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80023a8:	e061      	b.n	800246e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	0018      	movs	r0, r3
 80023b2:	f000 fa07 	bl	80027c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80023b6:	1e03      	subs	r3, r0, #0
 80023b8:	d001      	beq.n	80023be <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e081      	b.n	80024c2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	781a      	ldrb	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	1c5a      	adds	r2, r3, #1
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d8:	b29b      	uxth	r3, r3
 80023da:	3b01      	subs	r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d03a      	beq.n	800246e <HAL_I2C_Master_Transmit+0x1aa>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d136      	bne.n	800246e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	0013      	movs	r3, r2
 800240a:	2200      	movs	r2, #0
 800240c:	2180      	movs	r1, #128	; 0x80
 800240e:	f000 f98b 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 8002412:	1e03      	subs	r3, r0, #0
 8002414:	d001      	beq.n	800241a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e053      	b.n	80024c2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241e:	b29b      	uxth	r3, r3
 8002420:	2bff      	cmp	r3, #255	; 0xff
 8002422:	d911      	bls.n	8002448 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	22ff      	movs	r2, #255	; 0xff
 8002428:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242e:	b2da      	uxtb	r2, r3
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	045c      	lsls	r4, r3, #17
 8002434:	230a      	movs	r3, #10
 8002436:	18fb      	adds	r3, r7, r3
 8002438:	8819      	ldrh	r1, [r3, #0]
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	2300      	movs	r3, #0
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	0023      	movs	r3, r4
 8002442:	f000 fbcb 	bl	8002bdc <I2C_TransferConfig>
 8002446:	e012      	b.n	800246e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002456:	b2da      	uxtb	r2, r3
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	049c      	lsls	r4, r3, #18
 800245c:	230a      	movs	r3, #10
 800245e:	18fb      	adds	r3, r7, r3
 8002460:	8819      	ldrh	r1, [r3, #0]
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	2300      	movs	r3, #0
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	0023      	movs	r3, r4
 800246a:	f000 fbb7 	bl	8002bdc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002472:	b29b      	uxth	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d198      	bne.n	80023aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	0018      	movs	r0, r3
 8002480:	f000 f9e6 	bl	8002850 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002484:	1e03      	subs	r3, r0, #0
 8002486:	d001      	beq.n	800248c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e01a      	b.n	80024c2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2220      	movs	r2, #32
 8002492:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	490c      	ldr	r1, [pc, #48]	; (80024d0 <HAL_I2C_Master_Transmit+0x20c>)
 80024a0:	400a      	ands	r2, r1
 80024a2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2241      	movs	r2, #65	; 0x41
 80024a8:	2120      	movs	r1, #32
 80024aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2242      	movs	r2, #66	; 0x42
 80024b0:	2100      	movs	r1, #0
 80024b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2240      	movs	r2, #64	; 0x40
 80024b8:	2100      	movs	r1, #0
 80024ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	e000      	b.n	80024c2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80024c0:	2302      	movs	r3, #2
  }
}
 80024c2:	0018      	movs	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b007      	add	sp, #28
 80024c8:	bd90      	pop	{r4, r7, pc}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	80002000 	.word	0x80002000
 80024d0:	fe00e800 	.word	0xfe00e800

080024d4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80024d4:	b590      	push	{r4, r7, lr}
 80024d6:	b089      	sub	sp, #36	; 0x24
 80024d8:	af02      	add	r7, sp, #8
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	0008      	movs	r0, r1
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	0019      	movs	r1, r3
 80024e2:	230a      	movs	r3, #10
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	1c02      	adds	r2, r0, #0
 80024e8:	801a      	strh	r2, [r3, #0]
 80024ea:	2308      	movs	r3, #8
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	1c0a      	adds	r2, r1, #0
 80024f0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2241      	movs	r2, #65	; 0x41
 80024f6:	5c9b      	ldrb	r3, [r3, r2]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b20      	cmp	r3, #32
 80024fc:	d000      	beq.n	8002500 <HAL_I2C_Master_Receive+0x2c>
 80024fe:	e0e8      	b.n	80026d2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2240      	movs	r2, #64	; 0x40
 8002504:	5c9b      	ldrb	r3, [r3, r2]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d101      	bne.n	800250e <HAL_I2C_Master_Receive+0x3a>
 800250a:	2302      	movs	r3, #2
 800250c:	e0e2      	b.n	80026d4 <HAL_I2C_Master_Receive+0x200>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2240      	movs	r2, #64	; 0x40
 8002512:	2101      	movs	r1, #1
 8002514:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002516:	f7ff fbd9 	bl	8001ccc <HAL_GetTick>
 800251a:	0003      	movs	r3, r0
 800251c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	0219      	lsls	r1, r3, #8
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	2319      	movs	r3, #25
 800252a:	2201      	movs	r2, #1
 800252c:	f000 f8fc 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 8002530:	1e03      	subs	r3, r0, #0
 8002532:	d001      	beq.n	8002538 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0cd      	b.n	80026d4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2241      	movs	r2, #65	; 0x41
 800253c:	2122      	movs	r1, #34	; 0x22
 800253e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2242      	movs	r2, #66	; 0x42
 8002544:	2110      	movs	r1, #16
 8002546:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2208      	movs	r2, #8
 8002558:	18ba      	adds	r2, r7, r2
 800255a:	8812      	ldrh	r2, [r2, #0]
 800255c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	2bff      	cmp	r3, #255	; 0xff
 800256c:	d911      	bls.n	8002592 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	22ff      	movs	r2, #255	; 0xff
 8002572:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002578:	b2da      	uxtb	r2, r3
 800257a:	2380      	movs	r3, #128	; 0x80
 800257c:	045c      	lsls	r4, r3, #17
 800257e:	230a      	movs	r3, #10
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	8819      	ldrh	r1, [r3, #0]
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	4b55      	ldr	r3, [pc, #340]	; (80026dc <HAL_I2C_Master_Receive+0x208>)
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	0023      	movs	r3, r4
 800258c:	f000 fb26 	bl	8002bdc <I2C_TransferConfig>
 8002590:	e076      	b.n	8002680 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	049c      	lsls	r4, r3, #18
 80025a6:	230a      	movs	r3, #10
 80025a8:	18fb      	adds	r3, r7, r3
 80025aa:	8819      	ldrh	r1, [r3, #0]
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	4b4b      	ldr	r3, [pc, #300]	; (80026dc <HAL_I2C_Master_Receive+0x208>)
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	0023      	movs	r3, r4
 80025b4:	f000 fb12 	bl	8002bdc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80025b8:	e062      	b.n	8002680 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	0018      	movs	r0, r3
 80025c2:	f000 f989 	bl	80028d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025c6:	1e03      	subs	r3, r0, #0
 80025c8:	d001      	beq.n	80025ce <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e082      	b.n	80026d4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d03a      	beq.n	8002680 <HAL_I2C_Master_Receive+0x1ac>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260e:	2b00      	cmp	r3, #0
 8002610:	d136      	bne.n	8002680 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	0013      	movs	r3, r2
 800261c:	2200      	movs	r2, #0
 800261e:	2180      	movs	r1, #128	; 0x80
 8002620:	f000 f882 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 8002624:	1e03      	subs	r3, r0, #0
 8002626:	d001      	beq.n	800262c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e053      	b.n	80026d4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002630:	b29b      	uxth	r3, r3
 8002632:	2bff      	cmp	r3, #255	; 0xff
 8002634:	d911      	bls.n	800265a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	22ff      	movs	r2, #255	; 0xff
 800263a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002640:	b2da      	uxtb	r2, r3
 8002642:	2380      	movs	r3, #128	; 0x80
 8002644:	045c      	lsls	r4, r3, #17
 8002646:	230a      	movs	r3, #10
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	8819      	ldrh	r1, [r3, #0]
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	2300      	movs	r3, #0
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	0023      	movs	r3, r4
 8002654:	f000 fac2 	bl	8002bdc <I2C_TransferConfig>
 8002658:	e012      	b.n	8002680 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002668:	b2da      	uxtb	r2, r3
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	049c      	lsls	r4, r3, #18
 800266e:	230a      	movs	r3, #10
 8002670:	18fb      	adds	r3, r7, r3
 8002672:	8819      	ldrh	r1, [r3, #0]
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	2300      	movs	r3, #0
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	0023      	movs	r3, r4
 800267c:	f000 faae 	bl	8002bdc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d197      	bne.n	80025ba <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	0018      	movs	r0, r3
 8002692:	f000 f8dd 	bl	8002850 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002696:	1e03      	subs	r3, r0, #0
 8002698:	d001      	beq.n	800269e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e01a      	b.n	80026d4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2220      	movs	r2, #32
 80026a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	490b      	ldr	r1, [pc, #44]	; (80026e0 <HAL_I2C_Master_Receive+0x20c>)
 80026b2:	400a      	ands	r2, r1
 80026b4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2241      	movs	r2, #65	; 0x41
 80026ba:	2120      	movs	r1, #32
 80026bc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2242      	movs	r2, #66	; 0x42
 80026c2:	2100      	movs	r1, #0
 80026c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2240      	movs	r2, #64	; 0x40
 80026ca:	2100      	movs	r1, #0
 80026cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	e000      	b.n	80026d4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80026d2:	2302      	movs	r3, #2
  }
}
 80026d4:	0018      	movs	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b007      	add	sp, #28
 80026da:	bd90      	pop	{r4, r7, pc}
 80026dc:	80002400 	.word	0x80002400
 80026e0:	fe00e800 	.word	0xfe00e800

080026e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	2202      	movs	r2, #2
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d103      	bne.n	8002702 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2200      	movs	r2, #0
 8002700:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	2201      	movs	r2, #1
 800270a:	4013      	ands	r3, r2
 800270c:	2b01      	cmp	r3, #1
 800270e:	d007      	beq.n	8002720 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2101      	movs	r1, #1
 800271c:	430a      	orrs	r2, r1
 800271e:	619a      	str	r2, [r3, #24]
  }
}
 8002720:	46c0      	nop			; (mov r8, r8)
 8002722:	46bd      	mov	sp, r7
 8002724:	b002      	add	sp, #8
 8002726:	bd80      	pop	{r7, pc}

08002728 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	1dfb      	adds	r3, r7, #7
 8002736:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002738:	e030      	b.n	800279c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	3301      	adds	r3, #1
 800273e:	d02d      	beq.n	800279c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002740:	f7ff fac4 	bl	8001ccc <HAL_GetTick>
 8002744:	0002      	movs	r2, r0
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d302      	bcc.n	8002756 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d122      	bne.n	800279c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	4013      	ands	r3, r2
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	425a      	negs	r2, r3
 8002766:	4153      	adcs	r3, r2
 8002768:	b2db      	uxtb	r3, r3
 800276a:	001a      	movs	r2, r3
 800276c:	1dfb      	adds	r3, r7, #7
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d113      	bne.n	800279c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002778:	2220      	movs	r2, #32
 800277a:	431a      	orrs	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2241      	movs	r2, #65	; 0x41
 8002784:	2120      	movs	r1, #32
 8002786:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2242      	movs	r2, #66	; 0x42
 800278c:	2100      	movs	r1, #0
 800278e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2240      	movs	r2, #64	; 0x40
 8002794:	2100      	movs	r1, #0
 8002796:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e00f      	b.n	80027bc <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	4013      	ands	r3, r2
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	425a      	negs	r2, r3
 80027ac:	4153      	adcs	r3, r2
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	001a      	movs	r2, r3
 80027b2:	1dfb      	adds	r3, r7, #7
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d0bf      	beq.n	800273a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	0018      	movs	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	b004      	add	sp, #16
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027d0:	e032      	b.n	8002838 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	0018      	movs	r0, r3
 80027da:	f000 f8ff 	bl	80029dc <I2C_IsErrorOccurred>
 80027de:	1e03      	subs	r3, r0, #0
 80027e0:	d001      	beq.n	80027e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e030      	b.n	8002848 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	3301      	adds	r3, #1
 80027ea:	d025      	beq.n	8002838 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ec:	f7ff fa6e 	bl	8001ccc <HAL_GetTick>
 80027f0:	0002      	movs	r2, r0
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d302      	bcc.n	8002802 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d11a      	bne.n	8002838 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	2202      	movs	r2, #2
 800280a:	4013      	ands	r3, r2
 800280c:	2b02      	cmp	r3, #2
 800280e:	d013      	beq.n	8002838 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002814:	2220      	movs	r2, #32
 8002816:	431a      	orrs	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2241      	movs	r2, #65	; 0x41
 8002820:	2120      	movs	r1, #32
 8002822:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2242      	movs	r2, #66	; 0x42
 8002828:	2100      	movs	r1, #0
 800282a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2240      	movs	r2, #64	; 0x40
 8002830:	2100      	movs	r1, #0
 8002832:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e007      	b.n	8002848 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	2202      	movs	r2, #2
 8002840:	4013      	ands	r3, r2
 8002842:	2b02      	cmp	r3, #2
 8002844:	d1c5      	bne.n	80027d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	0018      	movs	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	b004      	add	sp, #16
 800284e:	bd80      	pop	{r7, pc}

08002850 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800285c:	e02f      	b.n	80028be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68b9      	ldr	r1, [r7, #8]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	0018      	movs	r0, r3
 8002866:	f000 f8b9 	bl	80029dc <I2C_IsErrorOccurred>
 800286a:	1e03      	subs	r3, r0, #0
 800286c:	d001      	beq.n	8002872 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e02d      	b.n	80028ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002872:	f7ff fa2b 	bl	8001ccc <HAL_GetTick>
 8002876:	0002      	movs	r2, r0
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	429a      	cmp	r2, r3
 8002880:	d302      	bcc.n	8002888 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d11a      	bne.n	80028be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2220      	movs	r2, #32
 8002890:	4013      	ands	r3, r2
 8002892:	2b20      	cmp	r3, #32
 8002894:	d013      	beq.n	80028be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	2220      	movs	r2, #32
 800289c:	431a      	orrs	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2241      	movs	r2, #65	; 0x41
 80028a6:	2120      	movs	r1, #32
 80028a8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2242      	movs	r2, #66	; 0x42
 80028ae:	2100      	movs	r1, #0
 80028b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2240      	movs	r2, #64	; 0x40
 80028b6:	2100      	movs	r1, #0
 80028b8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e007      	b.n	80028ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2220      	movs	r2, #32
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b20      	cmp	r3, #32
 80028ca:	d1c8      	bne.n	800285e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	0018      	movs	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	b004      	add	sp, #16
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028e4:	e06b      	b.n	80029be <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	68b9      	ldr	r1, [r7, #8]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	0018      	movs	r0, r3
 80028ee:	f000 f875 	bl	80029dc <I2C_IsErrorOccurred>
 80028f2:	1e03      	subs	r3, r0, #0
 80028f4:	d001      	beq.n	80028fa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e069      	b.n	80029ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	2220      	movs	r2, #32
 8002902:	4013      	ands	r3, r2
 8002904:	2b20      	cmp	r3, #32
 8002906:	d138      	bne.n	800297a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	2204      	movs	r2, #4
 8002910:	4013      	ands	r3, r2
 8002912:	2b04      	cmp	r3, #4
 8002914:	d105      	bne.n	8002922 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	e055      	b.n	80029ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	2210      	movs	r2, #16
 800292a:	4013      	ands	r3, r2
 800292c:	2b10      	cmp	r3, #16
 800292e:	d107      	bne.n	8002940 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2210      	movs	r2, #16
 8002936:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2204      	movs	r2, #4
 800293c:	645a      	str	r2, [r3, #68]	; 0x44
 800293e:	e002      	b.n	8002946 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2220      	movs	r2, #32
 800294c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	491f      	ldr	r1, [pc, #124]	; (80029d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800295a:	400a      	ands	r2, r1
 800295c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2241      	movs	r2, #65	; 0x41
 8002962:	2120      	movs	r1, #32
 8002964:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2242      	movs	r2, #66	; 0x42
 800296a:	2100      	movs	r1, #0
 800296c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2240      	movs	r2, #64	; 0x40
 8002972:	2100      	movs	r1, #0
 8002974:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e029      	b.n	80029ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800297a:	f7ff f9a7 	bl	8001ccc <HAL_GetTick>
 800297e:	0002      	movs	r2, r0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	429a      	cmp	r2, r3
 8002988:	d302      	bcc.n	8002990 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d116      	bne.n	80029be <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	2204      	movs	r2, #4
 8002998:	4013      	ands	r3, r2
 800299a:	2b04      	cmp	r3, #4
 800299c:	d00f      	beq.n	80029be <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	2220      	movs	r2, #32
 80029a4:	431a      	orrs	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2241      	movs	r2, #65	; 0x41
 80029ae:	2120      	movs	r1, #32
 80029b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2240      	movs	r2, #64	; 0x40
 80029b6:	2100      	movs	r1, #0
 80029b8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e007      	b.n	80029ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	2204      	movs	r2, #4
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d18c      	bne.n	80028e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	0018      	movs	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	b004      	add	sp, #16
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	fe00e800 	.word	0xfe00e800

080029dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029dc:	b590      	push	{r4, r7, lr}
 80029de:	b08b      	sub	sp, #44	; 0x2c
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e8:	2327      	movs	r3, #39	; 0x27
 80029ea:	18fb      	adds	r3, r7, r3
 80029ec:	2200      	movs	r2, #0
 80029ee:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2210      	movs	r2, #16
 8002a04:	4013      	ands	r3, r2
 8002a06:	d100      	bne.n	8002a0a <I2C_IsErrorOccurred+0x2e>
 8002a08:	e082      	b.n	8002b10 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2210      	movs	r2, #16
 8002a10:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a12:	e060      	b.n	8002ad6 <I2C_IsErrorOccurred+0xfa>
 8002a14:	2427      	movs	r4, #39	; 0x27
 8002a16:	193b      	adds	r3, r7, r4
 8002a18:	193a      	adds	r2, r7, r4
 8002a1a:	7812      	ldrb	r2, [r2, #0]
 8002a1c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	3301      	adds	r3, #1
 8002a22:	d058      	beq.n	8002ad6 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a24:	f7ff f952 	bl	8001ccc <HAL_GetTick>
 8002a28:	0002      	movs	r2, r0
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d306      	bcc.n	8002a42 <I2C_IsErrorOccurred+0x66>
 8002a34:	193b      	adds	r3, r7, r4
 8002a36:	193a      	adds	r2, r7, r4
 8002a38:	7812      	ldrb	r2, [r2, #0]
 8002a3a:	701a      	strb	r2, [r3, #0]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d149      	bne.n	8002ad6 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	2380      	movs	r3, #128	; 0x80
 8002a4a:	01db      	lsls	r3, r3, #7
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002a50:	2013      	movs	r0, #19
 8002a52:	183b      	adds	r3, r7, r0
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	2142      	movs	r1, #66	; 0x42
 8002a58:	5c52      	ldrb	r2, [r2, r1]
 8002a5a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699a      	ldr	r2, [r3, #24]
 8002a62:	2380      	movs	r3, #128	; 0x80
 8002a64:	021b      	lsls	r3, r3, #8
 8002a66:	401a      	ands	r2, r3
 8002a68:	2380      	movs	r3, #128	; 0x80
 8002a6a:	021b      	lsls	r3, r3, #8
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d126      	bne.n	8002abe <I2C_IsErrorOccurred+0xe2>
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	2380      	movs	r3, #128	; 0x80
 8002a74:	01db      	lsls	r3, r3, #7
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d021      	beq.n	8002abe <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002a7a:	183b      	adds	r3, r7, r0
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b20      	cmp	r3, #32
 8002a80:	d01d      	beq.n	8002abe <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2180      	movs	r1, #128	; 0x80
 8002a8e:	01c9      	lsls	r1, r1, #7
 8002a90:	430a      	orrs	r2, r1
 8002a92:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002a94:	f7ff f91a 	bl	8001ccc <HAL_GetTick>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a9c:	e00f      	b.n	8002abe <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002a9e:	f7ff f915 	bl	8001ccc <HAL_GetTick>
 8002aa2:	0002      	movs	r2, r0
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b19      	cmp	r3, #25
 8002aaa:	d908      	bls.n	8002abe <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ab4:	2327      	movs	r3, #39	; 0x27
 8002ab6:	18fb      	adds	r3, r7, r3
 8002ab8:	2201      	movs	r2, #1
 8002aba:	701a      	strb	r2, [r3, #0]

              break;
 8002abc:	e00b      	b.n	8002ad6 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2127      	movs	r1, #39	; 0x27
 8002aca:	187a      	adds	r2, r7, r1
 8002acc:	1879      	adds	r1, r7, r1
 8002ace:	7809      	ldrb	r1, [r1, #0]
 8002ad0:	7011      	strb	r1, [r2, #0]
 8002ad2:	2b20      	cmp	r3, #32
 8002ad4:	d1e3      	bne.n	8002a9e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	2220      	movs	r2, #32
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b20      	cmp	r3, #32
 8002ae2:	d004      	beq.n	8002aee <I2C_IsErrorOccurred+0x112>
 8002ae4:	2327      	movs	r3, #39	; 0x27
 8002ae6:	18fb      	adds	r3, r7, r3
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d092      	beq.n	8002a14 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002aee:	2327      	movs	r3, #39	; 0x27
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d103      	bne.n	8002b00 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2220      	movs	r2, #32
 8002afe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	2204      	movs	r2, #4
 8002b04:	4313      	orrs	r3, r2
 8002b06:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b08:	2327      	movs	r3, #39	; 0x27
 8002b0a:	18fb      	adds	r3, r7, r3
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	2380      	movs	r3, #128	; 0x80
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d00c      	beq.n	8002b3c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	2201      	movs	r2, #1
 8002b26:	4313      	orrs	r3, r2
 8002b28:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2280      	movs	r2, #128	; 0x80
 8002b30:	0052      	lsls	r2, r2, #1
 8002b32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b34:	2327      	movs	r3, #39	; 0x27
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	2201      	movs	r2, #1
 8002b3a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4013      	ands	r3, r2
 8002b44:	d00c      	beq.n	8002b60 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	2208      	movs	r2, #8
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2280      	movs	r2, #128	; 0x80
 8002b54:	00d2      	lsls	r2, r2, #3
 8002b56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b58:	2327      	movs	r3, #39	; 0x27
 8002b5a:	18fb      	adds	r3, r7, r3
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	2380      	movs	r3, #128	; 0x80
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4013      	ands	r3, r2
 8002b68:	d00c      	beq.n	8002b84 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2280      	movs	r2, #128	; 0x80
 8002b78:	0092      	lsls	r2, r2, #2
 8002b7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b7c:	2327      	movs	r3, #39	; 0x27
 8002b7e:	18fb      	adds	r3, r7, r3
 8002b80:	2201      	movs	r2, #1
 8002b82:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002b84:	2327      	movs	r3, #39	; 0x27
 8002b86:	18fb      	adds	r3, r7, r3
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d01d      	beq.n	8002bca <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	0018      	movs	r0, r3
 8002b92:	f7ff fda7 	bl	80026e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	490d      	ldr	r1, [pc, #52]	; (8002bd8 <I2C_IsErrorOccurred+0x1fc>)
 8002ba2:	400a      	ands	r2, r1
 8002ba4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	431a      	orrs	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2241      	movs	r2, #65	; 0x41
 8002bb6:	2120      	movs	r1, #32
 8002bb8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2242      	movs	r2, #66	; 0x42
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2240      	movs	r2, #64	; 0x40
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002bca:	2327      	movs	r3, #39	; 0x27
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	781b      	ldrb	r3, [r3, #0]
}
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b00b      	add	sp, #44	; 0x2c
 8002bd6:	bd90      	pop	{r4, r7, pc}
 8002bd8:	fe00e800 	.word	0xfe00e800

08002bdc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	0008      	movs	r0, r1
 8002be6:	0011      	movs	r1, r2
 8002be8:	607b      	str	r3, [r7, #4]
 8002bea:	240a      	movs	r4, #10
 8002bec:	193b      	adds	r3, r7, r4
 8002bee:	1c02      	adds	r2, r0, #0
 8002bf0:	801a      	strh	r2, [r3, #0]
 8002bf2:	2009      	movs	r0, #9
 8002bf4:	183b      	adds	r3, r7, r0
 8002bf6:	1c0a      	adds	r2, r1, #0
 8002bf8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bfa:	193b      	adds	r3, r7, r4
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	059b      	lsls	r3, r3, #22
 8002c00:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c02:	183b      	adds	r3, r7, r0
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	0419      	lsls	r1, r3, #16
 8002c08:	23ff      	movs	r3, #255	; 0xff
 8002c0a:	041b      	lsls	r3, r3, #16
 8002c0c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c0e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c16:	4313      	orrs	r3, r2
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	085b      	lsrs	r3, r3, #1
 8002c1c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c26:	0d51      	lsrs	r1, r2, #21
 8002c28:	2280      	movs	r2, #128	; 0x80
 8002c2a:	00d2      	lsls	r2, r2, #3
 8002c2c:	400a      	ands	r2, r1
 8002c2e:	4907      	ldr	r1, [pc, #28]	; (8002c4c <I2C_TransferConfig+0x70>)
 8002c30:	430a      	orrs	r2, r1
 8002c32:	43d2      	mvns	r2, r2
 8002c34:	401a      	ands	r2, r3
 8002c36:	0011      	movs	r1, r2
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	46bd      	mov	sp, r7
 8002c46:	b007      	add	sp, #28
 8002c48:	bd90      	pop	{r4, r7, pc}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	03ff63ff 	.word	0x03ff63ff

08002c50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2241      	movs	r2, #65	; 0x41
 8002c5e:	5c9b      	ldrb	r3, [r3, r2]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b20      	cmp	r3, #32
 8002c64:	d138      	bne.n	8002cd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2240      	movs	r2, #64	; 0x40
 8002c6a:	5c9b      	ldrb	r3, [r3, r2]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e032      	b.n	8002cda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2240      	movs	r2, #64	; 0x40
 8002c78:	2101      	movs	r1, #1
 8002c7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2241      	movs	r2, #65	; 0x41
 8002c80:	2124      	movs	r1, #36	; 0x24
 8002c82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2101      	movs	r1, #1
 8002c90:	438a      	bics	r2, r1
 8002c92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4911      	ldr	r1, [pc, #68]	; (8002ce4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002ca0:	400a      	ands	r2, r1
 8002ca2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6819      	ldr	r1, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2241      	movs	r2, #65	; 0x41
 8002cc8:	2120      	movs	r1, #32
 8002cca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2240      	movs	r2, #64	; 0x40
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	e000      	b.n	8002cda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002cd8:	2302      	movs	r3, #2
  }
}
 8002cda:	0018      	movs	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b002      	add	sp, #8
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	ffffefff 	.word	0xffffefff

08002ce8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2241      	movs	r2, #65	; 0x41
 8002cf6:	5c9b      	ldrb	r3, [r3, r2]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b20      	cmp	r3, #32
 8002cfc:	d139      	bne.n	8002d72 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2240      	movs	r2, #64	; 0x40
 8002d02:	5c9b      	ldrb	r3, [r3, r2]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e033      	b.n	8002d74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2240      	movs	r2, #64	; 0x40
 8002d10:	2101      	movs	r1, #1
 8002d12:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2241      	movs	r2, #65	; 0x41
 8002d18:	2124      	movs	r1, #36	; 0x24
 8002d1a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2101      	movs	r1, #1
 8002d28:	438a      	bics	r2, r1
 8002d2a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4a11      	ldr	r2, [pc, #68]	; (8002d7c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	021b      	lsls	r3, r3, #8
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2101      	movs	r1, #1
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2241      	movs	r2, #65	; 0x41
 8002d62:	2120      	movs	r1, #32
 8002d64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2240      	movs	r2, #64	; 0x40
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	e000      	b.n	8002d74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d72:	2302      	movs	r3, #2
  }
}
 8002d74:	0018      	movs	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b004      	add	sp, #16
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	fffff0ff 	.word	0xfffff0ff

08002d80 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d84:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002d8a:	2180      	movs	r1, #128	; 0x80
 8002d8c:	0049      	lsls	r1, r1, #1
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]
}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40007000 	.word	0x40007000

08002d9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d9c:	b5b0      	push	{r4, r5, r7, lr}
 8002d9e:	b08a      	sub	sp, #40	; 0x28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d102      	bne.n	8002db0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f000 fb6c 	bl	8003488 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002db0:	4bc8      	ldr	r3, [pc, #800]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	220c      	movs	r2, #12
 8002db6:	4013      	ands	r3, r2
 8002db8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dba:	4bc6      	ldr	r3, [pc, #792]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	2380      	movs	r3, #128	; 0x80
 8002dc0:	025b      	lsls	r3, r3, #9
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d100      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x36>
 8002dd0:	e07d      	b.n	8002ece <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d007      	beq.n	8002de8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	2b0c      	cmp	r3, #12
 8002ddc:	d112      	bne.n	8002e04 <HAL_RCC_OscConfig+0x68>
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	025b      	lsls	r3, r3, #9
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d10d      	bne.n	8002e04 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de8:	4bba      	ldr	r3, [pc, #744]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	029b      	lsls	r3, r3, #10
 8002df0:	4013      	ands	r3, r2
 8002df2:	d100      	bne.n	8002df6 <HAL_RCC_OscConfig+0x5a>
 8002df4:	e06a      	b.n	8002ecc <HAL_RCC_OscConfig+0x130>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d166      	bne.n	8002ecc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	f000 fb42 	bl	8003488 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	2380      	movs	r3, #128	; 0x80
 8002e0a:	025b      	lsls	r3, r3, #9
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d107      	bne.n	8002e20 <HAL_RCC_OscConfig+0x84>
 8002e10:	4bb0      	ldr	r3, [pc, #704]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4baf      	ldr	r3, [pc, #700]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002e16:	2180      	movs	r1, #128	; 0x80
 8002e18:	0249      	lsls	r1, r1, #9
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	e027      	b.n	8002e70 <HAL_RCC_OscConfig+0xd4>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	23a0      	movs	r3, #160	; 0xa0
 8002e26:	02db      	lsls	r3, r3, #11
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d10e      	bne.n	8002e4a <HAL_RCC_OscConfig+0xae>
 8002e2c:	4ba9      	ldr	r3, [pc, #676]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	4ba8      	ldr	r3, [pc, #672]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002e32:	2180      	movs	r1, #128	; 0x80
 8002e34:	02c9      	lsls	r1, r1, #11
 8002e36:	430a      	orrs	r2, r1
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	4ba6      	ldr	r3, [pc, #664]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	4ba5      	ldr	r3, [pc, #660]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002e40:	2180      	movs	r1, #128	; 0x80
 8002e42:	0249      	lsls	r1, r1, #9
 8002e44:	430a      	orrs	r2, r1
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	e012      	b.n	8002e70 <HAL_RCC_OscConfig+0xd4>
 8002e4a:	4ba2      	ldr	r3, [pc, #648]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	4ba1      	ldr	r3, [pc, #644]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002e50:	49a1      	ldr	r1, [pc, #644]	; (80030d8 <HAL_RCC_OscConfig+0x33c>)
 8002e52:	400a      	ands	r2, r1
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	4b9f      	ldr	r3, [pc, #636]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	2380      	movs	r3, #128	; 0x80
 8002e5c:	025b      	lsls	r3, r3, #9
 8002e5e:	4013      	ands	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4b9b      	ldr	r3, [pc, #620]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	4b9a      	ldr	r3, [pc, #616]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002e6a:	499c      	ldr	r1, [pc, #624]	; (80030dc <HAL_RCC_OscConfig+0x340>)
 8002e6c:	400a      	ands	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d014      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e78:	f7fe ff28 	bl	8001ccc <HAL_GetTick>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e82:	f7fe ff23 	bl	8001ccc <HAL_GetTick>
 8002e86:	0002      	movs	r2, r0
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b64      	cmp	r3, #100	; 0x64
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e2f9      	b.n	8003488 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e94:	4b8f      	ldr	r3, [pc, #572]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	029b      	lsls	r3, r3, #10
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d0f0      	beq.n	8002e82 <HAL_RCC_OscConfig+0xe6>
 8002ea0:	e015      	b.n	8002ece <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea2:	f7fe ff13 	bl	8001ccc <HAL_GetTick>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eac:	f7fe ff0e 	bl	8001ccc <HAL_GetTick>
 8002eb0:	0002      	movs	r2, r0
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b64      	cmp	r3, #100	; 0x64
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e2e4      	b.n	8003488 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ebe:	4b85      	ldr	r3, [pc, #532]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	029b      	lsls	r3, r3, #10
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x110>
 8002eca:	e000      	b.n	8002ece <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ecc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d100      	bne.n	8002eda <HAL_RCC_OscConfig+0x13e>
 8002ed8:	e099      	b.n	800300e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d009      	beq.n	8002efc <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002ee8:	4b7a      	ldr	r3, [pc, #488]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b79      	ldr	r3, [pc, #484]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002eee:	2120      	movs	r1, #32
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	4393      	bics	r3, r2
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d005      	beq.n	8002f0e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	2b0c      	cmp	r3, #12
 8002f06:	d13e      	bne.n	8002f86 <HAL_RCC_OscConfig+0x1ea>
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d13b      	bne.n	8002f86 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002f0e:	4b71      	ldr	r3, [pc, #452]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2204      	movs	r2, #4
 8002f14:	4013      	ands	r3, r2
 8002f16:	d004      	beq.n	8002f22 <HAL_RCC_OscConfig+0x186>
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e2b2      	b.n	8003488 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f22:	4b6c      	ldr	r3, [pc, #432]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	4a6e      	ldr	r2, [pc, #440]	; (80030e0 <HAL_RCC_OscConfig+0x344>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	0019      	movs	r1, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	021a      	lsls	r2, r3, #8
 8002f32:	4b68      	ldr	r3, [pc, #416]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002f34:	430a      	orrs	r2, r1
 8002f36:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002f38:	4b66      	ldr	r3, [pc, #408]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2209      	movs	r2, #9
 8002f3e:	4393      	bics	r3, r2
 8002f40:	0019      	movs	r1, r3
 8002f42:	4b64      	ldr	r3, [pc, #400]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f46:	430a      	orrs	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f4a:	f000 fbeb 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 8002f4e:	0001      	movs	r1, r0
 8002f50:	4b60      	ldr	r3, [pc, #384]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	220f      	movs	r2, #15
 8002f58:	4013      	ands	r3, r2
 8002f5a:	4a62      	ldr	r2, [pc, #392]	; (80030e4 <HAL_RCC_OscConfig+0x348>)
 8002f5c:	5cd3      	ldrb	r3, [r2, r3]
 8002f5e:	000a      	movs	r2, r1
 8002f60:	40da      	lsrs	r2, r3
 8002f62:	4b61      	ldr	r3, [pc, #388]	; (80030e8 <HAL_RCC_OscConfig+0x34c>)
 8002f64:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002f66:	4b61      	ldr	r3, [pc, #388]	; (80030ec <HAL_RCC_OscConfig+0x350>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2513      	movs	r5, #19
 8002f6c:	197c      	adds	r4, r7, r5
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f7fe fe66 	bl	8001c40 <HAL_InitTick>
 8002f74:	0003      	movs	r3, r0
 8002f76:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002f78:	197b      	adds	r3, r7, r5
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d046      	beq.n	800300e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002f80:	197b      	adds	r3, r7, r5
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	e280      	b.n	8003488 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d027      	beq.n	8002fdc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002f8c:	4b51      	ldr	r3, [pc, #324]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2209      	movs	r2, #9
 8002f92:	4393      	bics	r3, r2
 8002f94:	0019      	movs	r1, r3
 8002f96:	4b4f      	ldr	r3, [pc, #316]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9e:	f7fe fe95 	bl	8001ccc <HAL_GetTick>
 8002fa2:	0003      	movs	r3, r0
 8002fa4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fa8:	f7fe fe90 	bl	8001ccc <HAL_GetTick>
 8002fac:	0002      	movs	r2, r0
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e266      	b.n	8003488 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fba:	4b46      	ldr	r3, [pc, #280]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d0f1      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc4:	4b43      	ldr	r3, [pc, #268]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4a45      	ldr	r2, [pc, #276]	; (80030e0 <HAL_RCC_OscConfig+0x344>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	0019      	movs	r1, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	021a      	lsls	r2, r3, #8
 8002fd4:	4b3f      	ldr	r3, [pc, #252]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	e018      	b.n	800300e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fdc:	4b3d      	ldr	r3, [pc, #244]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b3c      	ldr	r3, [pc, #240]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	438a      	bics	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f7fe fe70 	bl	8001ccc <HAL_GetTick>
 8002fec:	0003      	movs	r3, r0
 8002fee:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ff2:	f7fe fe6b 	bl	8001ccc <HAL_GetTick>
 8002ff6:	0002      	movs	r2, r0
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e241      	b.n	8003488 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003004:	4b33      	ldr	r3, [pc, #204]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2204      	movs	r2, #4
 800300a:	4013      	ands	r3, r2
 800300c:	d1f1      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2210      	movs	r2, #16
 8003014:	4013      	ands	r3, r2
 8003016:	d100      	bne.n	800301a <HAL_RCC_OscConfig+0x27e>
 8003018:	e0a1      	b.n	800315e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d140      	bne.n	80030a2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003020:	4b2c      	ldr	r3, [pc, #176]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4013      	ands	r3, r2
 800302a:	d005      	beq.n	8003038 <HAL_RCC_OscConfig+0x29c>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e227      	b.n	8003488 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003038:	4b26      	ldr	r3, [pc, #152]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4a2c      	ldr	r2, [pc, #176]	; (80030f0 <HAL_RCC_OscConfig+0x354>)
 800303e:	4013      	ands	r3, r2
 8003040:	0019      	movs	r1, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1a      	ldr	r2, [r3, #32]
 8003046:	4b23      	ldr	r3, [pc, #140]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8003048:	430a      	orrs	r2, r1
 800304a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800304c:	4b21      	ldr	r3, [pc, #132]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	021b      	lsls	r3, r3, #8
 8003052:	0a19      	lsrs	r1, r3, #8
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	061a      	lsls	r2, r3, #24
 800305a:	4b1e      	ldr	r3, [pc, #120]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 800305c:	430a      	orrs	r2, r1
 800305e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	0b5b      	lsrs	r3, r3, #13
 8003066:	3301      	adds	r3, #1
 8003068:	2280      	movs	r2, #128	; 0x80
 800306a:	0212      	lsls	r2, r2, #8
 800306c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800306e:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	091b      	lsrs	r3, r3, #4
 8003074:	210f      	movs	r1, #15
 8003076:	400b      	ands	r3, r1
 8003078:	491a      	ldr	r1, [pc, #104]	; (80030e4 <HAL_RCC_OscConfig+0x348>)
 800307a:	5ccb      	ldrb	r3, [r1, r3]
 800307c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800307e:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <HAL_RCC_OscConfig+0x34c>)
 8003080:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003082:	4b1a      	ldr	r3, [pc, #104]	; (80030ec <HAL_RCC_OscConfig+0x350>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2513      	movs	r5, #19
 8003088:	197c      	adds	r4, r7, r5
 800308a:	0018      	movs	r0, r3
 800308c:	f7fe fdd8 	bl	8001c40 <HAL_InitTick>
 8003090:	0003      	movs	r3, r0
 8003092:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003094:	197b      	adds	r3, r7, r5
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d060      	beq.n	800315e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 800309c:	197b      	adds	r3, r7, r5
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	e1f2      	b.n	8003488 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d03f      	beq.n	800312a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030aa:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <HAL_RCC_OscConfig+0x338>)
 80030b0:	2180      	movs	r1, #128	; 0x80
 80030b2:	0049      	lsls	r1, r1, #1
 80030b4:	430a      	orrs	r2, r1
 80030b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b8:	f7fe fe08 	bl	8001ccc <HAL_GetTick>
 80030bc:	0003      	movs	r3, r0
 80030be:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80030c0:	e018      	b.n	80030f4 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030c2:	f7fe fe03 	bl	8001ccc <HAL_GetTick>
 80030c6:	0002      	movs	r2, r0
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d911      	bls.n	80030f4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e1d9      	b.n	8003488 <HAL_RCC_OscConfig+0x6ec>
 80030d4:	40021000 	.word	0x40021000
 80030d8:	fffeffff 	.word	0xfffeffff
 80030dc:	fffbffff 	.word	0xfffbffff
 80030e0:	ffffe0ff 	.word	0xffffe0ff
 80030e4:	08006b88 	.word	0x08006b88
 80030e8:	20000118 	.word	0x20000118
 80030ec:	2000011c 	.word	0x2000011c
 80030f0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80030f4:	4bc9      	ldr	r3, [pc, #804]	; (800341c <HAL_RCC_OscConfig+0x680>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	2380      	movs	r3, #128	; 0x80
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4013      	ands	r3, r2
 80030fe:	d0e0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003100:	4bc6      	ldr	r3, [pc, #792]	; (800341c <HAL_RCC_OscConfig+0x680>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4ac6      	ldr	r2, [pc, #792]	; (8003420 <HAL_RCC_OscConfig+0x684>)
 8003106:	4013      	ands	r3, r2
 8003108:	0019      	movs	r1, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1a      	ldr	r2, [r3, #32]
 800310e:	4bc3      	ldr	r3, [pc, #780]	; (800341c <HAL_RCC_OscConfig+0x680>)
 8003110:	430a      	orrs	r2, r1
 8003112:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003114:	4bc1      	ldr	r3, [pc, #772]	; (800341c <HAL_RCC_OscConfig+0x680>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	021b      	lsls	r3, r3, #8
 800311a:	0a19      	lsrs	r1, r3, #8
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	061a      	lsls	r2, r3, #24
 8003122:	4bbe      	ldr	r3, [pc, #760]	; (800341c <HAL_RCC_OscConfig+0x680>)
 8003124:	430a      	orrs	r2, r1
 8003126:	605a      	str	r2, [r3, #4]
 8003128:	e019      	b.n	800315e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800312a:	4bbc      	ldr	r3, [pc, #752]	; (800341c <HAL_RCC_OscConfig+0x680>)
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	4bbb      	ldr	r3, [pc, #748]	; (800341c <HAL_RCC_OscConfig+0x680>)
 8003130:	49bc      	ldr	r1, [pc, #752]	; (8003424 <HAL_RCC_OscConfig+0x688>)
 8003132:	400a      	ands	r2, r1
 8003134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003136:	f7fe fdc9 	bl	8001ccc <HAL_GetTick>
 800313a:	0003      	movs	r3, r0
 800313c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003140:	f7fe fdc4 	bl	8001ccc <HAL_GetTick>
 8003144:	0002      	movs	r2, r0
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e19a      	b.n	8003488 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003152:	4bb2      	ldr	r3, [pc, #712]	; (800341c <HAL_RCC_OscConfig+0x680>)
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	2380      	movs	r3, #128	; 0x80
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4013      	ands	r3, r2
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2208      	movs	r2, #8
 8003164:	4013      	ands	r3, r2
 8003166:	d036      	beq.n	80031d6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d019      	beq.n	80031a4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003170:	4baa      	ldr	r3, [pc, #680]	; (800341c <HAL_RCC_OscConfig+0x680>)
 8003172:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003174:	4ba9      	ldr	r3, [pc, #676]	; (800341c <HAL_RCC_OscConfig+0x680>)
 8003176:	2101      	movs	r1, #1
 8003178:	430a      	orrs	r2, r1
 800317a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317c:	f7fe fda6 	bl	8001ccc <HAL_GetTick>
 8003180:	0003      	movs	r3, r0
 8003182:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003186:	f7fe fda1 	bl	8001ccc <HAL_GetTick>
 800318a:	0002      	movs	r2, r0
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e177      	b.n	8003488 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003198:	4ba0      	ldr	r3, [pc, #640]	; (800341c <HAL_RCC_OscConfig+0x680>)
 800319a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319c:	2202      	movs	r2, #2
 800319e:	4013      	ands	r3, r2
 80031a0:	d0f1      	beq.n	8003186 <HAL_RCC_OscConfig+0x3ea>
 80031a2:	e018      	b.n	80031d6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031a4:	4b9d      	ldr	r3, [pc, #628]	; (800341c <HAL_RCC_OscConfig+0x680>)
 80031a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031a8:	4b9c      	ldr	r3, [pc, #624]	; (800341c <HAL_RCC_OscConfig+0x680>)
 80031aa:	2101      	movs	r1, #1
 80031ac:	438a      	bics	r2, r1
 80031ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b0:	f7fe fd8c 	bl	8001ccc <HAL_GetTick>
 80031b4:	0003      	movs	r3, r0
 80031b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ba:	f7fe fd87 	bl	8001ccc <HAL_GetTick>
 80031be:	0002      	movs	r2, r0
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e15d      	b.n	8003488 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031cc:	4b93      	ldr	r3, [pc, #588]	; (800341c <HAL_RCC_OscConfig+0x680>)
 80031ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d0:	2202      	movs	r2, #2
 80031d2:	4013      	ands	r3, r2
 80031d4:	d1f1      	bne.n	80031ba <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2204      	movs	r2, #4
 80031dc:	4013      	ands	r3, r2
 80031de:	d100      	bne.n	80031e2 <HAL_RCC_OscConfig+0x446>
 80031e0:	e0ae      	b.n	8003340 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031e2:	2023      	movs	r0, #35	; 0x23
 80031e4:	183b      	adds	r3, r7, r0
 80031e6:	2200      	movs	r2, #0
 80031e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ea:	4b8c      	ldr	r3, [pc, #560]	; (800341c <HAL_RCC_OscConfig+0x680>)
 80031ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ee:	2380      	movs	r3, #128	; 0x80
 80031f0:	055b      	lsls	r3, r3, #21
 80031f2:	4013      	ands	r3, r2
 80031f4:	d109      	bne.n	800320a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f6:	4b89      	ldr	r3, [pc, #548]	; (800341c <HAL_RCC_OscConfig+0x680>)
 80031f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031fa:	4b88      	ldr	r3, [pc, #544]	; (800341c <HAL_RCC_OscConfig+0x680>)
 80031fc:	2180      	movs	r1, #128	; 0x80
 80031fe:	0549      	lsls	r1, r1, #21
 8003200:	430a      	orrs	r2, r1
 8003202:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003204:	183b      	adds	r3, r7, r0
 8003206:	2201      	movs	r2, #1
 8003208:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320a:	4b87      	ldr	r3, [pc, #540]	; (8003428 <HAL_RCC_OscConfig+0x68c>)
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	4013      	ands	r3, r2
 8003214:	d11a      	bne.n	800324c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003216:	4b84      	ldr	r3, [pc, #528]	; (8003428 <HAL_RCC_OscConfig+0x68c>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	4b83      	ldr	r3, [pc, #524]	; (8003428 <HAL_RCC_OscConfig+0x68c>)
 800321c:	2180      	movs	r1, #128	; 0x80
 800321e:	0049      	lsls	r1, r1, #1
 8003220:	430a      	orrs	r2, r1
 8003222:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003224:	f7fe fd52 	bl	8001ccc <HAL_GetTick>
 8003228:	0003      	movs	r3, r0
 800322a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800322e:	f7fe fd4d 	bl	8001ccc <HAL_GetTick>
 8003232:	0002      	movs	r2, r0
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b64      	cmp	r3, #100	; 0x64
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e123      	b.n	8003488 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003240:	4b79      	ldr	r3, [pc, #484]	; (8003428 <HAL_RCC_OscConfig+0x68c>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	2380      	movs	r3, #128	; 0x80
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	4013      	ands	r3, r2
 800324a:	d0f0      	beq.n	800322e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	429a      	cmp	r2, r3
 8003256:	d107      	bne.n	8003268 <HAL_RCC_OscConfig+0x4cc>
 8003258:	4b70      	ldr	r3, [pc, #448]	; (800341c <HAL_RCC_OscConfig+0x680>)
 800325a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800325c:	4b6f      	ldr	r3, [pc, #444]	; (800341c <HAL_RCC_OscConfig+0x680>)
 800325e:	2180      	movs	r1, #128	; 0x80
 8003260:	0049      	lsls	r1, r1, #1
 8003262:	430a      	orrs	r2, r1
 8003264:	651a      	str	r2, [r3, #80]	; 0x50
 8003266:	e031      	b.n	80032cc <HAL_RCC_OscConfig+0x530>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10c      	bne.n	800328a <HAL_RCC_OscConfig+0x4ee>
 8003270:	4b6a      	ldr	r3, [pc, #424]	; (800341c <HAL_RCC_OscConfig+0x680>)
 8003272:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003274:	4b69      	ldr	r3, [pc, #420]	; (800341c <HAL_RCC_OscConfig+0x680>)
 8003276:	496b      	ldr	r1, [pc, #428]	; (8003424 <HAL_RCC_OscConfig+0x688>)
 8003278:	400a      	ands	r2, r1
 800327a:	651a      	str	r2, [r3, #80]	; 0x50
 800327c:	4b67      	ldr	r3, [pc, #412]	; (800341c <HAL_RCC_OscConfig+0x680>)
 800327e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003280:	4b66      	ldr	r3, [pc, #408]	; (800341c <HAL_RCC_OscConfig+0x680>)
 8003282:	496a      	ldr	r1, [pc, #424]	; (800342c <HAL_RCC_OscConfig+0x690>)
 8003284:	400a      	ands	r2, r1
 8003286:	651a      	str	r2, [r3, #80]	; 0x50
 8003288:	e020      	b.n	80032cc <HAL_RCC_OscConfig+0x530>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	23a0      	movs	r3, #160	; 0xa0
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	429a      	cmp	r2, r3
 8003294:	d10e      	bne.n	80032b4 <HAL_RCC_OscConfig+0x518>
 8003296:	4b61      	ldr	r3, [pc, #388]	; (800341c <HAL_RCC_OscConfig+0x680>)
 8003298:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800329a:	4b60      	ldr	r3, [pc, #384]	; (800341c <HAL_RCC_OscConfig+0x680>)
 800329c:	2180      	movs	r1, #128	; 0x80
 800329e:	00c9      	lsls	r1, r1, #3
 80032a0:	430a      	orrs	r2, r1
 80032a2:	651a      	str	r2, [r3, #80]	; 0x50
 80032a4:	4b5d      	ldr	r3, [pc, #372]	; (800341c <HAL_RCC_OscConfig+0x680>)
 80032a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032a8:	4b5c      	ldr	r3, [pc, #368]	; (800341c <HAL_RCC_OscConfig+0x680>)
 80032aa:	2180      	movs	r1, #128	; 0x80
 80032ac:	0049      	lsls	r1, r1, #1
 80032ae:	430a      	orrs	r2, r1
 80032b0:	651a      	str	r2, [r3, #80]	; 0x50
 80032b2:	e00b      	b.n	80032cc <HAL_RCC_OscConfig+0x530>
 80032b4:	4b59      	ldr	r3, [pc, #356]	; (800341c <HAL_RCC_OscConfig+0x680>)
 80032b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032b8:	4b58      	ldr	r3, [pc, #352]	; (800341c <HAL_RCC_OscConfig+0x680>)
 80032ba:	495a      	ldr	r1, [pc, #360]	; (8003424 <HAL_RCC_OscConfig+0x688>)
 80032bc:	400a      	ands	r2, r1
 80032be:	651a      	str	r2, [r3, #80]	; 0x50
 80032c0:	4b56      	ldr	r3, [pc, #344]	; (800341c <HAL_RCC_OscConfig+0x680>)
 80032c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032c4:	4b55      	ldr	r3, [pc, #340]	; (800341c <HAL_RCC_OscConfig+0x680>)
 80032c6:	4959      	ldr	r1, [pc, #356]	; (800342c <HAL_RCC_OscConfig+0x690>)
 80032c8:	400a      	ands	r2, r1
 80032ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d015      	beq.n	8003300 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d4:	f7fe fcfa 	bl	8001ccc <HAL_GetTick>
 80032d8:	0003      	movs	r3, r0
 80032da:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032dc:	e009      	b.n	80032f2 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032de:	f7fe fcf5 	bl	8001ccc <HAL_GetTick>
 80032e2:	0002      	movs	r2, r0
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	4a51      	ldr	r2, [pc, #324]	; (8003430 <HAL_RCC_OscConfig+0x694>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e0ca      	b.n	8003488 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032f2:	4b4a      	ldr	r3, [pc, #296]	; (800341c <HAL_RCC_OscConfig+0x680>)
 80032f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032f6:	2380      	movs	r3, #128	; 0x80
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4013      	ands	r3, r2
 80032fc:	d0ef      	beq.n	80032de <HAL_RCC_OscConfig+0x542>
 80032fe:	e014      	b.n	800332a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003300:	f7fe fce4 	bl	8001ccc <HAL_GetTick>
 8003304:	0003      	movs	r3, r0
 8003306:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003308:	e009      	b.n	800331e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330a:	f7fe fcdf 	bl	8001ccc <HAL_GetTick>
 800330e:	0002      	movs	r2, r0
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	4a46      	ldr	r2, [pc, #280]	; (8003430 <HAL_RCC_OscConfig+0x694>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e0b4      	b.n	8003488 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800331e:	4b3f      	ldr	r3, [pc, #252]	; (800341c <HAL_RCC_OscConfig+0x680>)
 8003320:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003322:	2380      	movs	r3, #128	; 0x80
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4013      	ands	r3, r2
 8003328:	d1ef      	bne.n	800330a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800332a:	2323      	movs	r3, #35	; 0x23
 800332c:	18fb      	adds	r3, r7, r3
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d105      	bne.n	8003340 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003334:	4b39      	ldr	r3, [pc, #228]	; (800341c <HAL_RCC_OscConfig+0x680>)
 8003336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003338:	4b38      	ldr	r3, [pc, #224]	; (800341c <HAL_RCC_OscConfig+0x680>)
 800333a:	493e      	ldr	r1, [pc, #248]	; (8003434 <HAL_RCC_OscConfig+0x698>)
 800333c:	400a      	ands	r2, r1
 800333e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	2b00      	cmp	r3, #0
 8003346:	d100      	bne.n	800334a <HAL_RCC_OscConfig+0x5ae>
 8003348:	e09d      	b.n	8003486 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	2b0c      	cmp	r3, #12
 800334e:	d100      	bne.n	8003352 <HAL_RCC_OscConfig+0x5b6>
 8003350:	e076      	b.n	8003440 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	2b02      	cmp	r3, #2
 8003358:	d145      	bne.n	80033e6 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335a:	4b30      	ldr	r3, [pc, #192]	; (800341c <HAL_RCC_OscConfig+0x680>)
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	4b2f      	ldr	r3, [pc, #188]	; (800341c <HAL_RCC_OscConfig+0x680>)
 8003360:	4935      	ldr	r1, [pc, #212]	; (8003438 <HAL_RCC_OscConfig+0x69c>)
 8003362:	400a      	ands	r2, r1
 8003364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003366:	f7fe fcb1 	bl	8001ccc <HAL_GetTick>
 800336a:	0003      	movs	r3, r0
 800336c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003370:	f7fe fcac 	bl	8001ccc <HAL_GetTick>
 8003374:	0002      	movs	r2, r0
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e082      	b.n	8003488 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003382:	4b26      	ldr	r3, [pc, #152]	; (800341c <HAL_RCC_OscConfig+0x680>)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	2380      	movs	r3, #128	; 0x80
 8003388:	049b      	lsls	r3, r3, #18
 800338a:	4013      	ands	r3, r2
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800338e:	4b23      	ldr	r3, [pc, #140]	; (800341c <HAL_RCC_OscConfig+0x680>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	4a2a      	ldr	r2, [pc, #168]	; (800343c <HAL_RCC_OscConfig+0x6a0>)
 8003394:	4013      	ands	r3, r2
 8003396:	0019      	movs	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	431a      	orrs	r2, r3
 80033a8:	4b1c      	ldr	r3, [pc, #112]	; (800341c <HAL_RCC_OscConfig+0x680>)
 80033aa:	430a      	orrs	r2, r1
 80033ac:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ae:	4b1b      	ldr	r3, [pc, #108]	; (800341c <HAL_RCC_OscConfig+0x680>)
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	4b1a      	ldr	r3, [pc, #104]	; (800341c <HAL_RCC_OscConfig+0x680>)
 80033b4:	2180      	movs	r1, #128	; 0x80
 80033b6:	0449      	lsls	r1, r1, #17
 80033b8:	430a      	orrs	r2, r1
 80033ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033bc:	f7fe fc86 	bl	8001ccc <HAL_GetTick>
 80033c0:	0003      	movs	r3, r0
 80033c2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c6:	f7fe fc81 	bl	8001ccc <HAL_GetTick>
 80033ca:	0002      	movs	r2, r0
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e057      	b.n	8003488 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80033d8:	4b10      	ldr	r3, [pc, #64]	; (800341c <HAL_RCC_OscConfig+0x680>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	2380      	movs	r3, #128	; 0x80
 80033de:	049b      	lsls	r3, r3, #18
 80033e0:	4013      	ands	r3, r2
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x62a>
 80033e4:	e04f      	b.n	8003486 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e6:	4b0d      	ldr	r3, [pc, #52]	; (800341c <HAL_RCC_OscConfig+0x680>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	4b0c      	ldr	r3, [pc, #48]	; (800341c <HAL_RCC_OscConfig+0x680>)
 80033ec:	4912      	ldr	r1, [pc, #72]	; (8003438 <HAL_RCC_OscConfig+0x69c>)
 80033ee:	400a      	ands	r2, r1
 80033f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f2:	f7fe fc6b 	bl	8001ccc <HAL_GetTick>
 80033f6:	0003      	movs	r3, r0
 80033f8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033fc:	f7fe fc66 	bl	8001ccc <HAL_GetTick>
 8003400:	0002      	movs	r2, r0
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e03c      	b.n	8003488 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800340e:	4b03      	ldr	r3, [pc, #12]	; (800341c <HAL_RCC_OscConfig+0x680>)
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	2380      	movs	r3, #128	; 0x80
 8003414:	049b      	lsls	r3, r3, #18
 8003416:	4013      	ands	r3, r2
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0x660>
 800341a:	e034      	b.n	8003486 <HAL_RCC_OscConfig+0x6ea>
 800341c:	40021000 	.word	0x40021000
 8003420:	ffff1fff 	.word	0xffff1fff
 8003424:	fffffeff 	.word	0xfffffeff
 8003428:	40007000 	.word	0x40007000
 800342c:	fffffbff 	.word	0xfffffbff
 8003430:	00001388 	.word	0x00001388
 8003434:	efffffff 	.word	0xefffffff
 8003438:	feffffff 	.word	0xfeffffff
 800343c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e01d      	b.n	8003488 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800344c:	4b10      	ldr	r3, [pc, #64]	; (8003490 <HAL_RCC_OscConfig+0x6f4>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	025b      	lsls	r3, r3, #9
 8003458:	401a      	ands	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345e:	429a      	cmp	r2, r3
 8003460:	d10f      	bne.n	8003482 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	23f0      	movs	r3, #240	; 0xf0
 8003466:	039b      	lsls	r3, r3, #14
 8003468:	401a      	ands	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800346e:	429a      	cmp	r2, r3
 8003470:	d107      	bne.n	8003482 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	23c0      	movs	r3, #192	; 0xc0
 8003476:	041b      	lsls	r3, r3, #16
 8003478:	401a      	ands	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800347e:	429a      	cmp	r2, r3
 8003480:	d001      	beq.n	8003486 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	0018      	movs	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	b00a      	add	sp, #40	; 0x28
 800348e:	bdb0      	pop	{r4, r5, r7, pc}
 8003490:	40021000 	.word	0x40021000

08003494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003494:	b5b0      	push	{r4, r5, r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e128      	b.n	80036fa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034a8:	4b96      	ldr	r3, [pc, #600]	; (8003704 <HAL_RCC_ClockConfig+0x270>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2201      	movs	r2, #1
 80034ae:	4013      	ands	r3, r2
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d91e      	bls.n	80034f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b6:	4b93      	ldr	r3, [pc, #588]	; (8003704 <HAL_RCC_ClockConfig+0x270>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2201      	movs	r2, #1
 80034bc:	4393      	bics	r3, r2
 80034be:	0019      	movs	r1, r3
 80034c0:	4b90      	ldr	r3, [pc, #576]	; (8003704 <HAL_RCC_ClockConfig+0x270>)
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034c8:	f7fe fc00 	bl	8001ccc <HAL_GetTick>
 80034cc:	0003      	movs	r3, r0
 80034ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d0:	e009      	b.n	80034e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d2:	f7fe fbfb 	bl	8001ccc <HAL_GetTick>
 80034d6:	0002      	movs	r2, r0
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	4a8a      	ldr	r2, [pc, #552]	; (8003708 <HAL_RCC_ClockConfig+0x274>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e109      	b.n	80036fa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e6:	4b87      	ldr	r3, [pc, #540]	; (8003704 <HAL_RCC_ClockConfig+0x270>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2201      	movs	r2, #1
 80034ec:	4013      	ands	r3, r2
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d1ee      	bne.n	80034d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2202      	movs	r2, #2
 80034fa:	4013      	ands	r3, r2
 80034fc:	d009      	beq.n	8003512 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034fe:	4b83      	ldr	r3, [pc, #524]	; (800370c <HAL_RCC_ClockConfig+0x278>)
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	22f0      	movs	r2, #240	; 0xf0
 8003504:	4393      	bics	r3, r2
 8003506:	0019      	movs	r1, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	4b7f      	ldr	r3, [pc, #508]	; (800370c <HAL_RCC_ClockConfig+0x278>)
 800350e:	430a      	orrs	r2, r1
 8003510:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2201      	movs	r2, #1
 8003518:	4013      	ands	r3, r2
 800351a:	d100      	bne.n	800351e <HAL_RCC_ClockConfig+0x8a>
 800351c:	e089      	b.n	8003632 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d107      	bne.n	8003536 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003526:	4b79      	ldr	r3, [pc, #484]	; (800370c <HAL_RCC_ClockConfig+0x278>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	2380      	movs	r3, #128	; 0x80
 800352c:	029b      	lsls	r3, r3, #10
 800352e:	4013      	ands	r3, r2
 8003530:	d120      	bne.n	8003574 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e0e1      	b.n	80036fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b03      	cmp	r3, #3
 800353c:	d107      	bne.n	800354e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800353e:	4b73      	ldr	r3, [pc, #460]	; (800370c <HAL_RCC_ClockConfig+0x278>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	2380      	movs	r3, #128	; 0x80
 8003544:	049b      	lsls	r3, r3, #18
 8003546:	4013      	ands	r3, r2
 8003548:	d114      	bne.n	8003574 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e0d5      	b.n	80036fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d106      	bne.n	8003564 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003556:	4b6d      	ldr	r3, [pc, #436]	; (800370c <HAL_RCC_ClockConfig+0x278>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2204      	movs	r2, #4
 800355c:	4013      	ands	r3, r2
 800355e:	d109      	bne.n	8003574 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0ca      	b.n	80036fa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003564:	4b69      	ldr	r3, [pc, #420]	; (800370c <HAL_RCC_ClockConfig+0x278>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	2380      	movs	r3, #128	; 0x80
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4013      	ands	r3, r2
 800356e:	d101      	bne.n	8003574 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0c2      	b.n	80036fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003574:	4b65      	ldr	r3, [pc, #404]	; (800370c <HAL_RCC_ClockConfig+0x278>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	2203      	movs	r2, #3
 800357a:	4393      	bics	r3, r2
 800357c:	0019      	movs	r1, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	4b62      	ldr	r3, [pc, #392]	; (800370c <HAL_RCC_ClockConfig+0x278>)
 8003584:	430a      	orrs	r2, r1
 8003586:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003588:	f7fe fba0 	bl	8001ccc <HAL_GetTick>
 800358c:	0003      	movs	r3, r0
 800358e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b02      	cmp	r3, #2
 8003596:	d111      	bne.n	80035bc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003598:	e009      	b.n	80035ae <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800359a:	f7fe fb97 	bl	8001ccc <HAL_GetTick>
 800359e:	0002      	movs	r2, r0
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	4a58      	ldr	r2, [pc, #352]	; (8003708 <HAL_RCC_ClockConfig+0x274>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e0a5      	b.n	80036fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80035ae:	4b57      	ldr	r3, [pc, #348]	; (800370c <HAL_RCC_ClockConfig+0x278>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	220c      	movs	r2, #12
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d1ef      	bne.n	800359a <HAL_RCC_ClockConfig+0x106>
 80035ba:	e03a      	b.n	8003632 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b03      	cmp	r3, #3
 80035c2:	d111      	bne.n	80035e8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035c4:	e009      	b.n	80035da <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c6:	f7fe fb81 	bl	8001ccc <HAL_GetTick>
 80035ca:	0002      	movs	r2, r0
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	4a4d      	ldr	r2, [pc, #308]	; (8003708 <HAL_RCC_ClockConfig+0x274>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e08f      	b.n	80036fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035da:	4b4c      	ldr	r3, [pc, #304]	; (800370c <HAL_RCC_ClockConfig+0x278>)
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	220c      	movs	r2, #12
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b0c      	cmp	r3, #12
 80035e4:	d1ef      	bne.n	80035c6 <HAL_RCC_ClockConfig+0x132>
 80035e6:	e024      	b.n	8003632 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d11b      	bne.n	8003628 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80035f0:	e009      	b.n	8003606 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f2:	f7fe fb6b 	bl	8001ccc <HAL_GetTick>
 80035f6:	0002      	movs	r2, r0
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	4a42      	ldr	r2, [pc, #264]	; (8003708 <HAL_RCC_ClockConfig+0x274>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e079      	b.n	80036fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003606:	4b41      	ldr	r3, [pc, #260]	; (800370c <HAL_RCC_ClockConfig+0x278>)
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	220c      	movs	r2, #12
 800360c:	4013      	ands	r3, r2
 800360e:	2b04      	cmp	r3, #4
 8003610:	d1ef      	bne.n	80035f2 <HAL_RCC_ClockConfig+0x15e>
 8003612:	e00e      	b.n	8003632 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003614:	f7fe fb5a 	bl	8001ccc <HAL_GetTick>
 8003618:	0002      	movs	r2, r0
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	4a3a      	ldr	r2, [pc, #232]	; (8003708 <HAL_RCC_ClockConfig+0x274>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e068      	b.n	80036fa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003628:	4b38      	ldr	r3, [pc, #224]	; (800370c <HAL_RCC_ClockConfig+0x278>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	220c      	movs	r2, #12
 800362e:	4013      	ands	r3, r2
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003632:	4b34      	ldr	r3, [pc, #208]	; (8003704 <HAL_RCC_ClockConfig+0x270>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2201      	movs	r2, #1
 8003638:	4013      	ands	r3, r2
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d21e      	bcs.n	800367e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003640:	4b30      	ldr	r3, [pc, #192]	; (8003704 <HAL_RCC_ClockConfig+0x270>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2201      	movs	r2, #1
 8003646:	4393      	bics	r3, r2
 8003648:	0019      	movs	r1, r3
 800364a:	4b2e      	ldr	r3, [pc, #184]	; (8003704 <HAL_RCC_ClockConfig+0x270>)
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003652:	f7fe fb3b 	bl	8001ccc <HAL_GetTick>
 8003656:	0003      	movs	r3, r0
 8003658:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800365a:	e009      	b.n	8003670 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800365c:	f7fe fb36 	bl	8001ccc <HAL_GetTick>
 8003660:	0002      	movs	r2, r0
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	4a28      	ldr	r2, [pc, #160]	; (8003708 <HAL_RCC_ClockConfig+0x274>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e044      	b.n	80036fa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003670:	4b24      	ldr	r3, [pc, #144]	; (8003704 <HAL_RCC_ClockConfig+0x270>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2201      	movs	r2, #1
 8003676:	4013      	ands	r3, r2
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	d1ee      	bne.n	800365c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2204      	movs	r2, #4
 8003684:	4013      	ands	r3, r2
 8003686:	d009      	beq.n	800369c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003688:	4b20      	ldr	r3, [pc, #128]	; (800370c <HAL_RCC_ClockConfig+0x278>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	4a20      	ldr	r2, [pc, #128]	; (8003710 <HAL_RCC_ClockConfig+0x27c>)
 800368e:	4013      	ands	r3, r2
 8003690:	0019      	movs	r1, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	4b1d      	ldr	r3, [pc, #116]	; (800370c <HAL_RCC_ClockConfig+0x278>)
 8003698:	430a      	orrs	r2, r1
 800369a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2208      	movs	r2, #8
 80036a2:	4013      	ands	r3, r2
 80036a4:	d00a      	beq.n	80036bc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036a6:	4b19      	ldr	r3, [pc, #100]	; (800370c <HAL_RCC_ClockConfig+0x278>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	4a1a      	ldr	r2, [pc, #104]	; (8003714 <HAL_RCC_ClockConfig+0x280>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	0019      	movs	r1, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	00da      	lsls	r2, r3, #3
 80036b6:	4b15      	ldr	r3, [pc, #84]	; (800370c <HAL_RCC_ClockConfig+0x278>)
 80036b8:	430a      	orrs	r2, r1
 80036ba:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036bc:	f000 f832 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 80036c0:	0001      	movs	r1, r0
 80036c2:	4b12      	ldr	r3, [pc, #72]	; (800370c <HAL_RCC_ClockConfig+0x278>)
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	091b      	lsrs	r3, r3, #4
 80036c8:	220f      	movs	r2, #15
 80036ca:	4013      	ands	r3, r2
 80036cc:	4a12      	ldr	r2, [pc, #72]	; (8003718 <HAL_RCC_ClockConfig+0x284>)
 80036ce:	5cd3      	ldrb	r3, [r2, r3]
 80036d0:	000a      	movs	r2, r1
 80036d2:	40da      	lsrs	r2, r3
 80036d4:	4b11      	ldr	r3, [pc, #68]	; (800371c <HAL_RCC_ClockConfig+0x288>)
 80036d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036d8:	4b11      	ldr	r3, [pc, #68]	; (8003720 <HAL_RCC_ClockConfig+0x28c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	250b      	movs	r5, #11
 80036de:	197c      	adds	r4, r7, r5
 80036e0:	0018      	movs	r0, r3
 80036e2:	f7fe faad 	bl	8001c40 <HAL_InitTick>
 80036e6:	0003      	movs	r3, r0
 80036e8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80036ea:	197b      	adds	r3, r7, r5
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80036f2:	197b      	adds	r3, r7, r5
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	e000      	b.n	80036fa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	0018      	movs	r0, r3
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b004      	add	sp, #16
 8003700:	bdb0      	pop	{r4, r5, r7, pc}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	40022000 	.word	0x40022000
 8003708:	00001388 	.word	0x00001388
 800370c:	40021000 	.word	0x40021000
 8003710:	fffff8ff 	.word	0xfffff8ff
 8003714:	ffffc7ff 	.word	0xffffc7ff
 8003718:	08006b88 	.word	0x08006b88
 800371c:	20000118 	.word	0x20000118
 8003720:	2000011c 	.word	0x2000011c

08003724 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003724:	b5b0      	push	{r4, r5, r7, lr}
 8003726:	b08e      	sub	sp, #56	; 0x38
 8003728:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800372a:	4b4c      	ldr	r3, [pc, #304]	; (800385c <HAL_RCC_GetSysClockFreq+0x138>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003732:	230c      	movs	r3, #12
 8003734:	4013      	ands	r3, r2
 8003736:	2b0c      	cmp	r3, #12
 8003738:	d014      	beq.n	8003764 <HAL_RCC_GetSysClockFreq+0x40>
 800373a:	d900      	bls.n	800373e <HAL_RCC_GetSysClockFreq+0x1a>
 800373c:	e07b      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x112>
 800373e:	2b04      	cmp	r3, #4
 8003740:	d002      	beq.n	8003748 <HAL_RCC_GetSysClockFreq+0x24>
 8003742:	2b08      	cmp	r3, #8
 8003744:	d00b      	beq.n	800375e <HAL_RCC_GetSysClockFreq+0x3a>
 8003746:	e076      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003748:	4b44      	ldr	r3, [pc, #272]	; (800385c <HAL_RCC_GetSysClockFreq+0x138>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2210      	movs	r2, #16
 800374e:	4013      	ands	r3, r2
 8003750:	d002      	beq.n	8003758 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003752:	4b43      	ldr	r3, [pc, #268]	; (8003860 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003754:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003756:	e07c      	b.n	8003852 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003758:	4b42      	ldr	r3, [pc, #264]	; (8003864 <HAL_RCC_GetSysClockFreq+0x140>)
 800375a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800375c:	e079      	b.n	8003852 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800375e:	4b42      	ldr	r3, [pc, #264]	; (8003868 <HAL_RCC_GetSysClockFreq+0x144>)
 8003760:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003762:	e076      	b.n	8003852 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003766:	0c9a      	lsrs	r2, r3, #18
 8003768:	230f      	movs	r3, #15
 800376a:	401a      	ands	r2, r3
 800376c:	4b3f      	ldr	r3, [pc, #252]	; (800386c <HAL_RCC_GetSysClockFreq+0x148>)
 800376e:	5c9b      	ldrb	r3, [r3, r2]
 8003770:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003774:	0d9a      	lsrs	r2, r3, #22
 8003776:	2303      	movs	r3, #3
 8003778:	4013      	ands	r3, r2
 800377a:	3301      	adds	r3, #1
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800377e:	4b37      	ldr	r3, [pc, #220]	; (800385c <HAL_RCC_GetSysClockFreq+0x138>)
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	2380      	movs	r3, #128	; 0x80
 8003784:	025b      	lsls	r3, r3, #9
 8003786:	4013      	ands	r3, r2
 8003788:	d01a      	beq.n	80037c0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800378a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	2300      	movs	r3, #0
 8003790:	61fb      	str	r3, [r7, #28]
 8003792:	4a35      	ldr	r2, [pc, #212]	; (8003868 <HAL_RCC_GetSysClockFreq+0x144>)
 8003794:	2300      	movs	r3, #0
 8003796:	69b8      	ldr	r0, [r7, #24]
 8003798:	69f9      	ldr	r1, [r7, #28]
 800379a:	f7fc fd61 	bl	8000260 <__aeabi_lmul>
 800379e:	0002      	movs	r2, r0
 80037a0:	000b      	movs	r3, r1
 80037a2:	0010      	movs	r0, r2
 80037a4:	0019      	movs	r1, r3
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	613b      	str	r3, [r7, #16]
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f7fc fd35 	bl	8000220 <__aeabi_uldivmod>
 80037b6:	0002      	movs	r2, r0
 80037b8:	000b      	movs	r3, r1
 80037ba:	0013      	movs	r3, r2
 80037bc:	637b      	str	r3, [r7, #52]	; 0x34
 80037be:	e037      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80037c0:	4b26      	ldr	r3, [pc, #152]	; (800385c <HAL_RCC_GetSysClockFreq+0x138>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2210      	movs	r2, #16
 80037c6:	4013      	ands	r3, r2
 80037c8:	d01a      	beq.n	8003800 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80037ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037cc:	60bb      	str	r3, [r7, #8]
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	4a23      	ldr	r2, [pc, #140]	; (8003860 <HAL_RCC_GetSysClockFreq+0x13c>)
 80037d4:	2300      	movs	r3, #0
 80037d6:	68b8      	ldr	r0, [r7, #8]
 80037d8:	68f9      	ldr	r1, [r7, #12]
 80037da:	f7fc fd41 	bl	8000260 <__aeabi_lmul>
 80037de:	0002      	movs	r2, r0
 80037e0:	000b      	movs	r3, r1
 80037e2:	0010      	movs	r0, r2
 80037e4:	0019      	movs	r1, r3
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	603b      	str	r3, [r7, #0]
 80037ea:	2300      	movs	r3, #0
 80037ec:	607b      	str	r3, [r7, #4]
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f7fc fd15 	bl	8000220 <__aeabi_uldivmod>
 80037f6:	0002      	movs	r2, r0
 80037f8:	000b      	movs	r3, r1
 80037fa:	0013      	movs	r3, r2
 80037fc:	637b      	str	r3, [r7, #52]	; 0x34
 80037fe:	e017      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003802:	0018      	movs	r0, r3
 8003804:	2300      	movs	r3, #0
 8003806:	0019      	movs	r1, r3
 8003808:	4a16      	ldr	r2, [pc, #88]	; (8003864 <HAL_RCC_GetSysClockFreq+0x140>)
 800380a:	2300      	movs	r3, #0
 800380c:	f7fc fd28 	bl	8000260 <__aeabi_lmul>
 8003810:	0002      	movs	r2, r0
 8003812:	000b      	movs	r3, r1
 8003814:	0010      	movs	r0, r2
 8003816:	0019      	movs	r1, r3
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	001c      	movs	r4, r3
 800381c:	2300      	movs	r3, #0
 800381e:	001d      	movs	r5, r3
 8003820:	0022      	movs	r2, r4
 8003822:	002b      	movs	r3, r5
 8003824:	f7fc fcfc 	bl	8000220 <__aeabi_uldivmod>
 8003828:	0002      	movs	r2, r0
 800382a:	000b      	movs	r3, r1
 800382c:	0013      	movs	r3, r2
 800382e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003832:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003834:	e00d      	b.n	8003852 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003836:	4b09      	ldr	r3, [pc, #36]	; (800385c <HAL_RCC_GetSysClockFreq+0x138>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	0b5b      	lsrs	r3, r3, #13
 800383c:	2207      	movs	r2, #7
 800383e:	4013      	ands	r3, r2
 8003840:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	3301      	adds	r3, #1
 8003846:	2280      	movs	r2, #128	; 0x80
 8003848:	0212      	lsls	r2, r2, #8
 800384a:	409a      	lsls	r2, r3
 800384c:	0013      	movs	r3, r2
 800384e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003850:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003854:	0018      	movs	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	b00e      	add	sp, #56	; 0x38
 800385a:	bdb0      	pop	{r4, r5, r7, pc}
 800385c:	40021000 	.word	0x40021000
 8003860:	003d0900 	.word	0x003d0900
 8003864:	00f42400 	.word	0x00f42400
 8003868:	007a1200 	.word	0x007a1200
 800386c:	08006ba0 	.word	0x08006ba0

08003870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003874:	4b02      	ldr	r3, [pc, #8]	; (8003880 <HAL_RCC_GetHCLKFreq+0x10>)
 8003876:	681b      	ldr	r3, [r3, #0]
}
 8003878:	0018      	movs	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	20000118 	.word	0x20000118

08003884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003888:	f7ff fff2 	bl	8003870 <HAL_RCC_GetHCLKFreq>
 800388c:	0001      	movs	r1, r0
 800388e:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	0a1b      	lsrs	r3, r3, #8
 8003894:	2207      	movs	r2, #7
 8003896:	4013      	ands	r3, r2
 8003898:	4a04      	ldr	r2, [pc, #16]	; (80038ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800389a:	5cd3      	ldrb	r3, [r2, r3]
 800389c:	40d9      	lsrs	r1, r3
 800389e:	000b      	movs	r3, r1
}
 80038a0:	0018      	movs	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	40021000 	.word	0x40021000
 80038ac:	08006b98 	.word	0x08006b98

080038b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038b4:	f7ff ffdc 	bl	8003870 <HAL_RCC_GetHCLKFreq>
 80038b8:	0001      	movs	r1, r0
 80038ba:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	0adb      	lsrs	r3, r3, #11
 80038c0:	2207      	movs	r2, #7
 80038c2:	4013      	ands	r3, r2
 80038c4:	4a04      	ldr	r2, [pc, #16]	; (80038d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038c6:	5cd3      	ldrb	r3, [r2, r3]
 80038c8:	40d9      	lsrs	r1, r3
 80038ca:	000b      	movs	r3, r1
}
 80038cc:	0018      	movs	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	40021000 	.word	0x40021000
 80038d8:	08006b98 	.word	0x08006b98

080038dc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80038e4:	2017      	movs	r0, #23
 80038e6:	183b      	adds	r3, r7, r0
 80038e8:	2200      	movs	r2, #0
 80038ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2220      	movs	r2, #32
 80038f2:	4013      	ands	r3, r2
 80038f4:	d100      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80038f6:	e0c7      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038f8:	4b84      	ldr	r3, [pc, #528]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038fc:	2380      	movs	r3, #128	; 0x80
 80038fe:	055b      	lsls	r3, r3, #21
 8003900:	4013      	ands	r3, r2
 8003902:	d109      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003904:	4b81      	ldr	r3, [pc, #516]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003908:	4b80      	ldr	r3, [pc, #512]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800390a:	2180      	movs	r1, #128	; 0x80
 800390c:	0549      	lsls	r1, r1, #21
 800390e:	430a      	orrs	r2, r1
 8003910:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003912:	183b      	adds	r3, r7, r0
 8003914:	2201      	movs	r2, #1
 8003916:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003918:	4b7d      	ldr	r3, [pc, #500]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	2380      	movs	r3, #128	; 0x80
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	4013      	ands	r3, r2
 8003922:	d11a      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003924:	4b7a      	ldr	r3, [pc, #488]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	4b79      	ldr	r3, [pc, #484]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800392a:	2180      	movs	r1, #128	; 0x80
 800392c:	0049      	lsls	r1, r1, #1
 800392e:	430a      	orrs	r2, r1
 8003930:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003932:	f7fe f9cb 	bl	8001ccc <HAL_GetTick>
 8003936:	0003      	movs	r3, r0
 8003938:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393a:	e008      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800393c:	f7fe f9c6 	bl	8001ccc <HAL_GetTick>
 8003940:	0002      	movs	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b64      	cmp	r3, #100	; 0x64
 8003948:	d901      	bls.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e0d9      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394e:	4b70      	ldr	r3, [pc, #448]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	2380      	movs	r3, #128	; 0x80
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	4013      	ands	r3, r2
 8003958:	d0f0      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800395a:	4b6c      	ldr	r3, [pc, #432]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	23c0      	movs	r3, #192	; 0xc0
 8003960:	039b      	lsls	r3, r3, #14
 8003962:	4013      	ands	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	23c0      	movs	r3, #192	; 0xc0
 800396c:	039b      	lsls	r3, r3, #14
 800396e:	4013      	ands	r3, r2
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	429a      	cmp	r2, r3
 8003974:	d013      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	23c0      	movs	r3, #192	; 0xc0
 800397c:	029b      	lsls	r3, r3, #10
 800397e:	401a      	ands	r2, r3
 8003980:	23c0      	movs	r3, #192	; 0xc0
 8003982:	029b      	lsls	r3, r3, #10
 8003984:	429a      	cmp	r2, r3
 8003986:	d10a      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003988:	4b60      	ldr	r3, [pc, #384]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	2380      	movs	r3, #128	; 0x80
 800398e:	029b      	lsls	r3, r3, #10
 8003990:	401a      	ands	r2, r3
 8003992:	2380      	movs	r3, #128	; 0x80
 8003994:	029b      	lsls	r3, r3, #10
 8003996:	429a      	cmp	r2, r3
 8003998:	d101      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e0b1      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800399e:	4b5b      	ldr	r3, [pc, #364]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039a2:	23c0      	movs	r3, #192	; 0xc0
 80039a4:	029b      	lsls	r3, r3, #10
 80039a6:	4013      	ands	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d03b      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	23c0      	movs	r3, #192	; 0xc0
 80039b6:	029b      	lsls	r3, r3, #10
 80039b8:	4013      	ands	r3, r2
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d033      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2220      	movs	r2, #32
 80039c6:	4013      	ands	r3, r2
 80039c8:	d02e      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80039ca:	4b50      	ldr	r3, [pc, #320]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ce:	4a51      	ldr	r2, [pc, #324]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039d4:	4b4d      	ldr	r3, [pc, #308]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039d8:	4b4c      	ldr	r3, [pc, #304]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039da:	2180      	movs	r1, #128	; 0x80
 80039dc:	0309      	lsls	r1, r1, #12
 80039de:	430a      	orrs	r2, r1
 80039e0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039e2:	4b4a      	ldr	r3, [pc, #296]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039e6:	4b49      	ldr	r3, [pc, #292]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039e8:	494b      	ldr	r1, [pc, #300]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80039ea:	400a      	ands	r2, r1
 80039ec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80039ee:	4b47      	ldr	r3, [pc, #284]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	2380      	movs	r3, #128	; 0x80
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	4013      	ands	r3, r2
 80039fc:	d014      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fe:	f7fe f965 	bl	8001ccc <HAL_GetTick>
 8003a02:	0003      	movs	r3, r0
 8003a04:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a06:	e009      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a08:	f7fe f960 	bl	8001ccc <HAL_GetTick>
 8003a0c:	0002      	movs	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	4a42      	ldr	r2, [pc, #264]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e072      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a1c:	4b3b      	ldr	r3, [pc, #236]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a20:	2380      	movs	r3, #128	; 0x80
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4013      	ands	r3, r2
 8003a26:	d0ef      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	4013      	ands	r3, r2
 8003a30:	d01f      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	23c0      	movs	r3, #192	; 0xc0
 8003a38:	029b      	lsls	r3, r3, #10
 8003a3a:	401a      	ands	r2, r3
 8003a3c:	23c0      	movs	r3, #192	; 0xc0
 8003a3e:	029b      	lsls	r3, r3, #10
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d10c      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003a44:	4b31      	ldr	r3, [pc, #196]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a35      	ldr	r2, [pc, #212]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	0019      	movs	r1, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	23c0      	movs	r3, #192	; 0xc0
 8003a54:	039b      	lsls	r3, r3, #14
 8003a56:	401a      	ands	r2, r3
 8003a58:	4b2c      	ldr	r3, [pc, #176]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	4b2b      	ldr	r3, [pc, #172]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a60:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	23c0      	movs	r3, #192	; 0xc0
 8003a68:	029b      	lsls	r3, r3, #10
 8003a6a:	401a      	ands	r2, r3
 8003a6c:	4b27      	ldr	r3, [pc, #156]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a72:	2317      	movs	r3, #23
 8003a74:	18fb      	adds	r3, r7, r3
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d105      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a7c:	4b23      	ldr	r3, [pc, #140]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a80:	4b22      	ldr	r3, [pc, #136]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a82:	4928      	ldr	r1, [pc, #160]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a84:	400a      	ands	r2, r1
 8003a86:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d009      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a92:	4b1e      	ldr	r3, [pc, #120]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a96:	220c      	movs	r2, #12
 8003a98:	4393      	bics	r3, r2
 8003a9a:	0019      	movs	r1, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2204      	movs	r2, #4
 8003aac:	4013      	ands	r3, r2
 8003aae:	d009      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ab0:	4b16      	ldr	r3, [pc, #88]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab4:	4a1c      	ldr	r2, [pc, #112]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	0019      	movs	r1, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	4b13      	ldr	r3, [pc, #76]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2208      	movs	r2, #8
 8003aca:	4013      	ands	r3, r2
 8003acc:	d009      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ace:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad2:	4a16      	ldr	r2, [pc, #88]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	0019      	movs	r1, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2280      	movs	r2, #128	; 0x80
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d009      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003aec:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af0:	4a0f      	ldr	r2, [pc, #60]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003af2:	4013      	ands	r3, r2
 8003af4:	0019      	movs	r1, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695a      	ldr	r2, [r3, #20]
 8003afa:	4b04      	ldr	r3, [pc, #16]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003afc:	430a      	orrs	r2, r1
 8003afe:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	0018      	movs	r0, r3
 8003b04:	46bd      	mov	sp, r7
 8003b06:	b006      	add	sp, #24
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	40007000 	.word	0x40007000
 8003b14:	fffcffff 	.word	0xfffcffff
 8003b18:	fff7ffff 	.word	0xfff7ffff
 8003b1c:	00001388 	.word	0x00001388
 8003b20:	ffcfffff 	.word	0xffcfffff
 8003b24:	efffffff 	.word	0xefffffff
 8003b28:	fffff3ff 	.word	0xfffff3ff
 8003b2c:	ffffcfff 	.word	0xffffcfff
 8003b30:	fff3ffff 	.word	0xfff3ffff

08003b34 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003b34:	b5b0      	push	{r4, r5, r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b3c:	230f      	movs	r3, #15
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	2201      	movs	r2, #1
 8003b42:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e088      	b.n	8003c60 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2221      	movs	r2, #33	; 0x21
 8003b52:	5c9b      	ldrb	r3, [r3, r2]
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d107      	bne.n	8003b6a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	2100      	movs	r1, #0
 8003b60:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	0018      	movs	r0, r3
 8003b66:	f7fd ff3f 	bl	80019e8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2221      	movs	r2, #33	; 0x21
 8003b6e:	2102      	movs	r1, #2
 8003b70:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	2210      	movs	r2, #16
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b10      	cmp	r3, #16
 8003b7e:	d05f      	beq.n	8003c40 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	22ca      	movs	r2, #202	; 0xca
 8003b86:	625a      	str	r2, [r3, #36]	; 0x24
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2253      	movs	r2, #83	; 0x53
 8003b8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003b90:	250f      	movs	r5, #15
 8003b92:	197c      	adds	r4, r7, r5
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	0018      	movs	r0, r3
 8003b98:	f000 f93e 	bl	8003e18 <RTC_EnterInitMode>
 8003b9c:	0003      	movs	r3, r0
 8003b9e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8003ba0:	0028      	movs	r0, r5
 8003ba2:	183b      	adds	r3, r7, r0
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d12c      	bne.n	8003c04 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	492c      	ldr	r1, [pc, #176]	; (8003c68 <HAL_RTC_Init+0x134>)
 8003bb6:	400a      	ands	r2, r1
 8003bb8:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6899      	ldr	r1, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	68d2      	ldr	r2, [r2, #12]
 8003be0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6919      	ldr	r1, [r3, #16]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	041a      	lsls	r2, r3, #16
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003bf6:	183c      	adds	r4, r7, r0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f000 f950 	bl	8003ea0 <RTC_ExitInitMode>
 8003c00:	0003      	movs	r3, r0
 8003c02:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8003c04:	230f      	movs	r3, #15
 8003c06:	18fb      	adds	r3, r7, r3
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d113      	bne.n	8003c36 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2103      	movs	r1, #3
 8003c1a:	438a      	bics	r2, r1
 8003c1c:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69da      	ldr	r2, [r3, #28]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	22ff      	movs	r2, #255	; 0xff
 8003c3c:	625a      	str	r2, [r3, #36]	; 0x24
 8003c3e:	e003      	b.n	8003c48 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003c40:	230f      	movs	r3, #15
 8003c42:	18fb      	adds	r3, r7, r3
 8003c44:	2200      	movs	r2, #0
 8003c46:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8003c48:	230f      	movs	r3, #15
 8003c4a:	18fb      	adds	r3, r7, r3
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d103      	bne.n	8003c5a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2221      	movs	r2, #33	; 0x21
 8003c56:	2101      	movs	r1, #1
 8003c58:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003c5a:	230f      	movs	r3, #15
 8003c5c:	18fb      	adds	r3, r7, r3
 8003c5e:	781b      	ldrb	r3, [r3, #0]
}
 8003c60:	0018      	movs	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	b004      	add	sp, #16
 8003c66:	bdb0      	pop	{r4, r5, r7, pc}
 8003c68:	ff8fffbf 	.word	0xff8fffbf

08003c6c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	045b      	lsls	r3, r3, #17
 8003c8e:	0c5a      	lsrs	r2, r3, #17
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a22      	ldr	r2, [pc, #136]	; (8003d24 <HAL_RTC_GetTime+0xb8>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	0c1b      	lsrs	r3, r3, #16
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	223f      	movs	r2, #63	; 0x3f
 8003ca8:	4013      	ands	r3, r2
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	0a1b      	lsrs	r3, r3, #8
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	227f      	movs	r2, #127	; 0x7f
 8003cb8:	4013      	ands	r3, r2
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	227f      	movs	r2, #127	; 0x7f
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	0d9b      	lsrs	r3, r3, #22
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d11a      	bne.n	8003d1a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f000 f903 	bl	8003ef4 <RTC_Bcd2ToByte>
 8003cee:	0003      	movs	r3, r0
 8003cf0:	001a      	movs	r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	785b      	ldrb	r3, [r3, #1]
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	f000 f8fa 	bl	8003ef4 <RTC_Bcd2ToByte>
 8003d00:	0003      	movs	r3, r0
 8003d02:	001a      	movs	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	789b      	ldrb	r3, [r3, #2]
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f000 f8f1 	bl	8003ef4 <RTC_Bcd2ToByte>
 8003d12:	0003      	movs	r3, r0
 8003d14:	001a      	movs	r2, r3
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	b006      	add	sp, #24
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	007f7f7f 	.word	0x007f7f7f

08003d28 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	4a21      	ldr	r2, [pc, #132]	; (8003dc4 <HAL_RTC_GetDate+0x9c>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	0c1b      	lsrs	r3, r3, #16
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	0a1b      	lsrs	r3, r3, #8
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	221f      	movs	r2, #31
 8003d56:	4013      	ands	r3, r2
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	223f      	movs	r2, #63	; 0x3f
 8003d64:	4013      	ands	r3, r2
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	0b5b      	lsrs	r3, r3, #13
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2207      	movs	r2, #7
 8003d74:	4013      	ands	r3, r2
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d11a      	bne.n	8003db8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	78db      	ldrb	r3, [r3, #3]
 8003d86:	0018      	movs	r0, r3
 8003d88:	f000 f8b4 	bl	8003ef4 <RTC_Bcd2ToByte>
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	001a      	movs	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	785b      	ldrb	r3, [r3, #1]
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f000 f8ab 	bl	8003ef4 <RTC_Bcd2ToByte>
 8003d9e:	0003      	movs	r3, r0
 8003da0:	001a      	movs	r2, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	789b      	ldrb	r3, [r3, #2]
 8003daa:	0018      	movs	r0, r3
 8003dac:	f000 f8a2 	bl	8003ef4 <RTC_Bcd2ToByte>
 8003db0:	0003      	movs	r3, r0
 8003db2:	001a      	movs	r2, r3
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	0018      	movs	r0, r3
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	b006      	add	sp, #24
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	00ffff3f 	.word	0x00ffff3f

08003dc8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a0e      	ldr	r2, [pc, #56]	; (8003e14 <HAL_RTC_WaitForSynchro+0x4c>)
 8003dda:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ddc:	f7fd ff76 	bl	8001ccc <HAL_GetTick>
 8003de0:	0003      	movs	r3, r0
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003de4:	e00a      	b.n	8003dfc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003de6:	f7fd ff71 	bl	8001ccc <HAL_GetTick>
 8003dea:	0002      	movs	r2, r0
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	1ad2      	subs	r2, r2, r3
 8003df0:	23fa      	movs	r3, #250	; 0xfa
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d901      	bls.n	8003dfc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e006      	b.n	8003e0a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	4013      	ands	r3, r2
 8003e06:	d0ee      	beq.n	8003de6 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	b004      	add	sp, #16
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	0001ff5f 	.word	0x0001ff5f

08003e18 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003e24:	230f      	movs	r3, #15
 8003e26:	18fb      	adds	r3, r7, r3
 8003e28:	2200      	movs	r2, #0
 8003e2a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	2240      	movs	r2, #64	; 0x40
 8003e34:	4013      	ands	r3, r2
 8003e36:	d12c      	bne.n	8003e92 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2180      	movs	r1, #128	; 0x80
 8003e44:	430a      	orrs	r2, r1
 8003e46:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e48:	f7fd ff40 	bl	8001ccc <HAL_GetTick>
 8003e4c:	0003      	movs	r3, r0
 8003e4e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003e50:	e014      	b.n	8003e7c <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003e52:	f7fd ff3b 	bl	8001ccc <HAL_GetTick>
 8003e56:	0002      	movs	r2, r0
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	1ad2      	subs	r2, r2, r3
 8003e5c:	200f      	movs	r0, #15
 8003e5e:	183b      	adds	r3, r7, r0
 8003e60:	1839      	adds	r1, r7, r0
 8003e62:	7809      	ldrb	r1, [r1, #0]
 8003e64:	7019      	strb	r1, [r3, #0]
 8003e66:	23fa      	movs	r3, #250	; 0xfa
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d906      	bls.n	8003e7c <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2221      	movs	r2, #33	; 0x21
 8003e72:	2104      	movs	r1, #4
 8003e74:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8003e76:	183b      	adds	r3, r7, r0
 8003e78:	2201      	movs	r2, #1
 8003e7a:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	2240      	movs	r2, #64	; 0x40
 8003e84:	4013      	ands	r3, r2
 8003e86:	d104      	bne.n	8003e92 <RTC_EnterInitMode+0x7a>
 8003e88:	230f      	movs	r3, #15
 8003e8a:	18fb      	adds	r3, r7, r3
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d1df      	bne.n	8003e52 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8003e92:	230f      	movs	r3, #15
 8003e94:	18fb      	adds	r3, r7, r3
 8003e96:	781b      	ldrb	r3, [r3, #0]
}
 8003e98:	0018      	movs	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b004      	add	sp, #16
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ea0:	b590      	push	{r4, r7, lr}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea8:	240f      	movs	r4, #15
 8003eaa:	193b      	adds	r3, r7, r4
 8003eac:	2200      	movs	r2, #0
 8003eae:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2180      	movs	r1, #128	; 0x80
 8003ebc:	438a      	bics	r2, r1
 8003ebe:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	4013      	ands	r3, r2
 8003eca:	d10c      	bne.n	8003ee6 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f7ff ff7a 	bl	8003dc8 <HAL_RTC_WaitForSynchro>
 8003ed4:	1e03      	subs	r3, r0, #0
 8003ed6:	d006      	beq.n	8003ee6 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2221      	movs	r2, #33	; 0x21
 8003edc:	2104      	movs	r1, #4
 8003ede:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8003ee0:	193b      	adds	r3, r7, r4
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003ee6:	230f      	movs	r3, #15
 8003ee8:	18fb      	adds	r3, r7, r3
 8003eea:	781b      	ldrb	r3, [r3, #0]
}
 8003eec:	0018      	movs	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b005      	add	sp, #20
 8003ef2:	bd90      	pop	{r4, r7, pc}

08003ef4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	0002      	movs	r2, r0
 8003efc:	1dfb      	adds	r3, r7, #7
 8003efe:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003f04:	1dfb      	adds	r3, r7, #7
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	091b      	lsrs	r3, r3, #4
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	001a      	movs	r2, r3
 8003f0e:	0013      	movs	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	189b      	adds	r3, r3, r2
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	1dfb      	adds	r3, r7, #7
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	210f      	movs	r1, #15
 8003f22:	400b      	ands	r3, r1
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	18d3      	adds	r3, r2, r3
 8003f28:	b2db      	uxtb	r3, r3
}
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	b004      	add	sp, #16
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b082      	sub	sp, #8
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e032      	b.n	8003faa <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2239      	movs	r2, #57	; 0x39
 8003f48:	5c9b      	ldrb	r3, [r3, r2]
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d107      	bne.n	8003f60 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2238      	movs	r2, #56	; 0x38
 8003f54:	2100      	movs	r1, #0
 8003f56:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f7fd fd5c 	bl	8001a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2239      	movs	r2, #57	; 0x39
 8003f64:	2102      	movs	r1, #2
 8003f66:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	0019      	movs	r1, r3
 8003f72:	0010      	movs	r0, r2
 8003f74:	f000 fa00 	bl	8004378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	223e      	movs	r2, #62	; 0x3e
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	223a      	movs	r2, #58	; 0x3a
 8003f84:	2101      	movs	r1, #1
 8003f86:	5499      	strb	r1, [r3, r2]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	223b      	movs	r2, #59	; 0x3b
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	5499      	strb	r1, [r3, r2]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	223c      	movs	r2, #60	; 0x3c
 8003f94:	2101      	movs	r1, #1
 8003f96:	5499      	strb	r1, [r3, r2]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	223d      	movs	r2, #61	; 0x3d
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2239      	movs	r2, #57	; 0x39
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	0018      	movs	r0, r3
 8003fac:	46bd      	mov	sp, r7
 8003fae:	b002      	add	sp, #8
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e032      	b.n	800402a <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2239      	movs	r2, #57	; 0x39
 8003fc8:	5c9b      	ldrb	r3, [r3, r2]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d107      	bne.n	8003fe0 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2238      	movs	r2, #56	; 0x38
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f000 f829 	bl	8004032 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2239      	movs	r2, #57	; 0x39
 8003fe4:	2102      	movs	r1, #2
 8003fe6:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	0019      	movs	r1, r3
 8003ff2:	0010      	movs	r0, r2
 8003ff4:	f000 f9c0 	bl	8004378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	223e      	movs	r2, #62	; 0x3e
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	223a      	movs	r2, #58	; 0x3a
 8004004:	2101      	movs	r1, #1
 8004006:	5499      	strb	r1, [r3, r2]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	223b      	movs	r2, #59	; 0x3b
 800400c:	2101      	movs	r1, #1
 800400e:	5499      	strb	r1, [r3, r2]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	223c      	movs	r2, #60	; 0x3c
 8004014:	2101      	movs	r1, #1
 8004016:	5499      	strb	r1, [r3, r2]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	223d      	movs	r2, #61	; 0x3d
 800401c:	2101      	movs	r1, #1
 800401e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2239      	movs	r2, #57	; 0x39
 8004024:	2101      	movs	r1, #1
 8004026:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	0018      	movs	r0, r3
 800402c:	46bd      	mov	sp, r7
 800402e:	b002      	add	sp, #8
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b082      	sub	sp, #8
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	46bd      	mov	sp, r7
 800403e:	b002      	add	sp, #8
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004050:	2317      	movs	r3, #23
 8004052:	18fb      	adds	r3, r7, r3
 8004054:	2200      	movs	r2, #0
 8004056:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2238      	movs	r2, #56	; 0x38
 800405c:	5c9b      	ldrb	r3, [r3, r2]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d101      	bne.n	8004066 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004062:	2302      	movs	r3, #2
 8004064:	e0ad      	b.n	80041c2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2238      	movs	r2, #56	; 0x38
 800406a:	2101      	movs	r1, #1
 800406c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b0c      	cmp	r3, #12
 8004072:	d100      	bne.n	8004076 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004074:	e076      	b.n	8004164 <HAL_TIM_PWM_ConfigChannel+0x120>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b0c      	cmp	r3, #12
 800407a:	d900      	bls.n	800407e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800407c:	e095      	b.n	80041aa <HAL_TIM_PWM_ConfigChannel+0x166>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b08      	cmp	r3, #8
 8004082:	d04e      	beq.n	8004122 <HAL_TIM_PWM_ConfigChannel+0xde>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b08      	cmp	r3, #8
 8004088:	d900      	bls.n	800408c <HAL_TIM_PWM_ConfigChannel+0x48>
 800408a:	e08e      	b.n	80041aa <HAL_TIM_PWM_ConfigChannel+0x166>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_TIM_PWM_ConfigChannel+0x56>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b04      	cmp	r3, #4
 8004096:	d021      	beq.n	80040dc <HAL_TIM_PWM_ConfigChannel+0x98>
 8004098:	e087      	b.n	80041aa <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	0011      	movs	r1, r2
 80040a2:	0018      	movs	r0, r3
 80040a4:	f000 f9b2 	bl	800440c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	699a      	ldr	r2, [r3, #24]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2108      	movs	r1, #8
 80040b4:	430a      	orrs	r2, r1
 80040b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2104      	movs	r1, #4
 80040c4:	438a      	bics	r2, r1
 80040c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6999      	ldr	r1, [r3, #24]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	619a      	str	r2, [r3, #24]
      break;
 80040da:	e06b      	b.n	80041b4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	0011      	movs	r1, r2
 80040e4:	0018      	movs	r0, r3
 80040e6:	f000 f9cd 	bl	8004484 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	699a      	ldr	r2, [r3, #24]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2180      	movs	r1, #128	; 0x80
 80040f6:	0109      	lsls	r1, r1, #4
 80040f8:	430a      	orrs	r2, r1
 80040fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699a      	ldr	r2, [r3, #24]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4931      	ldr	r1, [pc, #196]	; (80041cc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004108:	400a      	ands	r2, r1
 800410a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6999      	ldr	r1, [r3, #24]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	021a      	lsls	r2, r3, #8
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	619a      	str	r2, [r3, #24]
      break;
 8004120:	e048      	b.n	80041b4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	0011      	movs	r1, r2
 800412a:	0018      	movs	r0, r3
 800412c:	f000 f9ec 	bl	8004508 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	69da      	ldr	r2, [r3, #28]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2108      	movs	r1, #8
 800413c:	430a      	orrs	r2, r1
 800413e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69da      	ldr	r2, [r3, #28]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2104      	movs	r1, #4
 800414c:	438a      	bics	r2, r1
 800414e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	69d9      	ldr	r1, [r3, #28]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	61da      	str	r2, [r3, #28]
      break;
 8004162:	e027      	b.n	80041b4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	0011      	movs	r1, r2
 800416c:	0018      	movs	r0, r3
 800416e:	f000 fa0b 	bl	8004588 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	69da      	ldr	r2, [r3, #28]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2180      	movs	r1, #128	; 0x80
 800417e:	0109      	lsls	r1, r1, #4
 8004180:	430a      	orrs	r2, r1
 8004182:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69da      	ldr	r2, [r3, #28]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	490f      	ldr	r1, [pc, #60]	; (80041cc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004190:	400a      	ands	r2, r1
 8004192:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	69d9      	ldr	r1, [r3, #28]
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	021a      	lsls	r2, r3, #8
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	61da      	str	r2, [r3, #28]
      break;
 80041a8:	e004      	b.n	80041b4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80041aa:	2317      	movs	r3, #23
 80041ac:	18fb      	adds	r3, r7, r3
 80041ae:	2201      	movs	r2, #1
 80041b0:	701a      	strb	r2, [r3, #0]
      break;
 80041b2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2238      	movs	r2, #56	; 0x38
 80041b8:	2100      	movs	r1, #0
 80041ba:	5499      	strb	r1, [r3, r2]

  return status;
 80041bc:	2317      	movs	r3, #23
 80041be:	18fb      	adds	r3, r7, r3
 80041c0:	781b      	ldrb	r3, [r3, #0]
}
 80041c2:	0018      	movs	r0, r3
 80041c4:	46bd      	mov	sp, r7
 80041c6:	b006      	add	sp, #24
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	fffffbff 	.word	0xfffffbff

080041d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041da:	230f      	movs	r3, #15
 80041dc:	18fb      	adds	r3, r7, r3
 80041de:	2200      	movs	r2, #0
 80041e0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2238      	movs	r2, #56	; 0x38
 80041e6:	5c9b      	ldrb	r3, [r3, r2]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <HAL_TIM_ConfigClockSource+0x20>
 80041ec:	2302      	movs	r3, #2
 80041ee:	e0bc      	b.n	800436a <HAL_TIM_ConfigClockSource+0x19a>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2238      	movs	r2, #56	; 0x38
 80041f4:	2101      	movs	r1, #1
 80041f6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2239      	movs	r2, #57	; 0x39
 80041fc:	2102      	movs	r1, #2
 80041fe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2277      	movs	r2, #119	; 0x77
 800420c:	4393      	bics	r3, r2
 800420e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4a58      	ldr	r2, [pc, #352]	; (8004374 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004214:	4013      	ands	r3, r2
 8004216:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2280      	movs	r2, #128	; 0x80
 8004226:	0192      	lsls	r2, r2, #6
 8004228:	4293      	cmp	r3, r2
 800422a:	d040      	beq.n	80042ae <HAL_TIM_ConfigClockSource+0xde>
 800422c:	2280      	movs	r2, #128	; 0x80
 800422e:	0192      	lsls	r2, r2, #6
 8004230:	4293      	cmp	r3, r2
 8004232:	d900      	bls.n	8004236 <HAL_TIM_ConfigClockSource+0x66>
 8004234:	e088      	b.n	8004348 <HAL_TIM_ConfigClockSource+0x178>
 8004236:	2280      	movs	r2, #128	; 0x80
 8004238:	0152      	lsls	r2, r2, #5
 800423a:	4293      	cmp	r3, r2
 800423c:	d100      	bne.n	8004240 <HAL_TIM_ConfigClockSource+0x70>
 800423e:	e088      	b.n	8004352 <HAL_TIM_ConfigClockSource+0x182>
 8004240:	2280      	movs	r2, #128	; 0x80
 8004242:	0152      	lsls	r2, r2, #5
 8004244:	4293      	cmp	r3, r2
 8004246:	d900      	bls.n	800424a <HAL_TIM_ConfigClockSource+0x7a>
 8004248:	e07e      	b.n	8004348 <HAL_TIM_ConfigClockSource+0x178>
 800424a:	2b70      	cmp	r3, #112	; 0x70
 800424c:	d018      	beq.n	8004280 <HAL_TIM_ConfigClockSource+0xb0>
 800424e:	d900      	bls.n	8004252 <HAL_TIM_ConfigClockSource+0x82>
 8004250:	e07a      	b.n	8004348 <HAL_TIM_ConfigClockSource+0x178>
 8004252:	2b60      	cmp	r3, #96	; 0x60
 8004254:	d04f      	beq.n	80042f6 <HAL_TIM_ConfigClockSource+0x126>
 8004256:	d900      	bls.n	800425a <HAL_TIM_ConfigClockSource+0x8a>
 8004258:	e076      	b.n	8004348 <HAL_TIM_ConfigClockSource+0x178>
 800425a:	2b50      	cmp	r3, #80	; 0x50
 800425c:	d03b      	beq.n	80042d6 <HAL_TIM_ConfigClockSource+0x106>
 800425e:	d900      	bls.n	8004262 <HAL_TIM_ConfigClockSource+0x92>
 8004260:	e072      	b.n	8004348 <HAL_TIM_ConfigClockSource+0x178>
 8004262:	2b40      	cmp	r3, #64	; 0x40
 8004264:	d057      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x146>
 8004266:	d900      	bls.n	800426a <HAL_TIM_ConfigClockSource+0x9a>
 8004268:	e06e      	b.n	8004348 <HAL_TIM_ConfigClockSource+0x178>
 800426a:	2b30      	cmp	r3, #48	; 0x30
 800426c:	d063      	beq.n	8004336 <HAL_TIM_ConfigClockSource+0x166>
 800426e:	d86b      	bhi.n	8004348 <HAL_TIM_ConfigClockSource+0x178>
 8004270:	2b20      	cmp	r3, #32
 8004272:	d060      	beq.n	8004336 <HAL_TIM_ConfigClockSource+0x166>
 8004274:	d868      	bhi.n	8004348 <HAL_TIM_ConfigClockSource+0x178>
 8004276:	2b00      	cmp	r3, #0
 8004278:	d05d      	beq.n	8004336 <HAL_TIM_ConfigClockSource+0x166>
 800427a:	2b10      	cmp	r3, #16
 800427c:	d05b      	beq.n	8004336 <HAL_TIM_ConfigClockSource+0x166>
 800427e:	e063      	b.n	8004348 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004290:	f000 fa3a 	bl	8004708 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2277      	movs	r2, #119	; 0x77
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	609a      	str	r2, [r3, #8]
      break;
 80042ac:	e052      	b.n	8004354 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042be:	f000 fa23 	bl	8004708 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2180      	movs	r1, #128	; 0x80
 80042ce:	01c9      	lsls	r1, r1, #7
 80042d0:	430a      	orrs	r2, r1
 80042d2:	609a      	str	r2, [r3, #8]
      break;
 80042d4:	e03e      	b.n	8004354 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042e2:	001a      	movs	r2, r3
 80042e4:	f000 f996 	bl	8004614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2150      	movs	r1, #80	; 0x50
 80042ee:	0018      	movs	r0, r3
 80042f0:	f000 f9f0 	bl	80046d4 <TIM_ITRx_SetConfig>
      break;
 80042f4:	e02e      	b.n	8004354 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004302:	001a      	movs	r2, r3
 8004304:	f000 f9b4 	bl	8004670 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2160      	movs	r1, #96	; 0x60
 800430e:	0018      	movs	r0, r3
 8004310:	f000 f9e0 	bl	80046d4 <TIM_ITRx_SetConfig>
      break;
 8004314:	e01e      	b.n	8004354 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004322:	001a      	movs	r2, r3
 8004324:	f000 f976 	bl	8004614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2140      	movs	r1, #64	; 0x40
 800432e:	0018      	movs	r0, r3
 8004330:	f000 f9d0 	bl	80046d4 <TIM_ITRx_SetConfig>
      break;
 8004334:	e00e      	b.n	8004354 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	0019      	movs	r1, r3
 8004340:	0010      	movs	r0, r2
 8004342:	f000 f9c7 	bl	80046d4 <TIM_ITRx_SetConfig>
      break;
 8004346:	e005      	b.n	8004354 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004348:	230f      	movs	r3, #15
 800434a:	18fb      	adds	r3, r7, r3
 800434c:	2201      	movs	r2, #1
 800434e:	701a      	strb	r2, [r3, #0]
      break;
 8004350:	e000      	b.n	8004354 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004352:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2239      	movs	r2, #57	; 0x39
 8004358:	2101      	movs	r1, #1
 800435a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2238      	movs	r2, #56	; 0x38
 8004360:	2100      	movs	r1, #0
 8004362:	5499      	strb	r1, [r3, r2]

  return status;
 8004364:	230f      	movs	r3, #15
 8004366:	18fb      	adds	r3, r7, r3
 8004368:	781b      	ldrb	r3, [r3, #0]
}
 800436a:	0018      	movs	r0, r3
 800436c:	46bd      	mov	sp, r7
 800436e:	b004      	add	sp, #16
 8004370:	bd80      	pop	{r7, pc}
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	ffff00ff 	.word	0xffff00ff

08004378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	2380      	movs	r3, #128	; 0x80
 800438c:	05db      	lsls	r3, r3, #23
 800438e:	429a      	cmp	r2, r3
 8004390:	d003      	beq.n	800439a <TIM_Base_SetConfig+0x22>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a1b      	ldr	r2, [pc, #108]	; (8004404 <TIM_Base_SetConfig+0x8c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d108      	bne.n	80043ac <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2270      	movs	r2, #112	; 0x70
 800439e:	4393      	bics	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	2380      	movs	r3, #128	; 0x80
 80043b0:	05db      	lsls	r3, r3, #23
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d003      	beq.n	80043be <TIM_Base_SetConfig+0x46>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a12      	ldr	r2, [pc, #72]	; (8004404 <TIM_Base_SetConfig+0x8c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d108      	bne.n	80043d0 <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4a11      	ldr	r2, [pc, #68]	; (8004408 <TIM_Base_SetConfig+0x90>)
 80043c2:	4013      	ands	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2280      	movs	r2, #128	; 0x80
 80043d4:	4393      	bics	r3, r2
 80043d6:	001a      	movs	r2, r3
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	689a      	ldr	r2, [r3, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	615a      	str	r2, [r3, #20]
}
 80043fc:	46c0      	nop			; (mov r8, r8)
 80043fe:	46bd      	mov	sp, r7
 8004400:	b004      	add	sp, #16
 8004402:	bd80      	pop	{r7, pc}
 8004404:	40010800 	.word	0x40010800
 8004408:	fffffcff 	.word	0xfffffcff

0800440c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	2201      	movs	r2, #1
 800441c:	4393      	bics	r3, r2
 800441e:	001a      	movs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2270      	movs	r2, #112	; 0x70
 800443a:	4393      	bics	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2203      	movs	r2, #3
 8004442:	4393      	bics	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4313      	orrs	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2202      	movs	r2, #2
 8004454:	4393      	bics	r3, r2
 8004456:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	621a      	str	r2, [r3, #32]
}
 800447c:	46c0      	nop			; (mov r8, r8)
 800447e:	46bd      	mov	sp, r7
 8004480:	b006      	add	sp, #24
 8004482:	bd80      	pop	{r7, pc}

08004484 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	2210      	movs	r2, #16
 8004494:	4393      	bics	r3, r2
 8004496:	001a      	movs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4a13      	ldr	r2, [pc, #76]	; (8004500 <TIM_OC2_SetConfig+0x7c>)
 80044b2:	4013      	ands	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	4a12      	ldr	r2, [pc, #72]	; (8004504 <TIM_OC2_SetConfig+0x80>)
 80044ba:	4013      	ands	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	021b      	lsls	r3, r3, #8
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2220      	movs	r2, #32
 80044ce:	4393      	bics	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4313      	orrs	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	621a      	str	r2, [r3, #32]
}
 80044f8:	46c0      	nop			; (mov r8, r8)
 80044fa:	46bd      	mov	sp, r7
 80044fc:	b006      	add	sp, #24
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	ffff8fff 	.word	0xffff8fff
 8004504:	fffffcff 	.word	0xfffffcff

08004508 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	4a1a      	ldr	r2, [pc, #104]	; (8004580 <TIM_OC3_SetConfig+0x78>)
 8004518:	401a      	ands	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2270      	movs	r2, #112	; 0x70
 8004534:	4393      	bics	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2203      	movs	r2, #3
 800453c:	4393      	bics	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	4a0d      	ldr	r2, [pc, #52]	; (8004584 <TIM_OC3_SetConfig+0x7c>)
 800454e:	4013      	ands	r3, r2
 8004550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	021b      	lsls	r3, r3, #8
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	4313      	orrs	r3, r2
 800455c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	621a      	str	r2, [r3, #32]
}
 8004578:	46c0      	nop			; (mov r8, r8)
 800457a:	46bd      	mov	sp, r7
 800457c:	b006      	add	sp, #24
 800457e:	bd80      	pop	{r7, pc}
 8004580:	fffffeff 	.word	0xfffffeff
 8004584:	fffffdff 	.word	0xfffffdff

08004588 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	4a1b      	ldr	r2, [pc, #108]	; (8004604 <TIM_OC4_SetConfig+0x7c>)
 8004598:	401a      	ands	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4a15      	ldr	r2, [pc, #84]	; (8004608 <TIM_OC4_SetConfig+0x80>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4a14      	ldr	r2, [pc, #80]	; (800460c <TIM_OC4_SetConfig+0x84>)
 80045bc:	4013      	ands	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	021b      	lsls	r3, r3, #8
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	4a10      	ldr	r2, [pc, #64]	; (8004610 <TIM_OC4_SetConfig+0x88>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	031b      	lsls	r3, r3, #12
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	621a      	str	r2, [r3, #32]
}
 80045fa:	46c0      	nop			; (mov r8, r8)
 80045fc:	46bd      	mov	sp, r7
 80045fe:	b006      	add	sp, #24
 8004600:	bd80      	pop	{r7, pc}
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	ffffefff 	.word	0xffffefff
 8004608:	ffff8fff 	.word	0xffff8fff
 800460c:	fffffcff 	.word	0xfffffcff
 8004610:	ffffdfff 	.word	0xffffdfff

08004614 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	2201      	movs	r2, #1
 800462c:	4393      	bics	r3, r2
 800462e:	001a      	movs	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	22f0      	movs	r2, #240	; 0xf0
 800463e:	4393      	bics	r3, r2
 8004640:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	011b      	lsls	r3, r3, #4
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4313      	orrs	r3, r2
 800464a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	220a      	movs	r2, #10
 8004650:	4393      	bics	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	4313      	orrs	r3, r2
 800465a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	621a      	str	r2, [r3, #32]
}
 8004668:	46c0      	nop			; (mov r8, r8)
 800466a:	46bd      	mov	sp, r7
 800466c:	b006      	add	sp, #24
 800466e:	bd80      	pop	{r7, pc}

08004670 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	2210      	movs	r2, #16
 8004682:	4393      	bics	r3, r2
 8004684:	001a      	movs	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	4a0d      	ldr	r2, [pc, #52]	; (80046d0 <TIM_TI2_ConfigInputStage+0x60>)
 800469a:	4013      	ands	r3, r2
 800469c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	031b      	lsls	r3, r3, #12
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	22a0      	movs	r2, #160	; 0xa0
 80046ac:	4393      	bics	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	621a      	str	r2, [r3, #32]
}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b006      	add	sp, #24
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	ffff0fff 	.word	0xffff0fff

080046d4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2270      	movs	r2, #112	; 0x70
 80046e8:	4393      	bics	r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	2207      	movs	r2, #7
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	609a      	str	r2, [r3, #8]
}
 80046fe:	46c0      	nop			; (mov r8, r8)
 8004700:	46bd      	mov	sp, r7
 8004702:	b004      	add	sp, #16
 8004704:	bd80      	pop	{r7, pc}
	...

08004708 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	4a09      	ldr	r2, [pc, #36]	; (8004744 <TIM_ETR_SetConfig+0x3c>)
 8004720:	4013      	ands	r3, r2
 8004722:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	021a      	lsls	r2, r3, #8
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	431a      	orrs	r2, r3
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4313      	orrs	r3, r2
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	4313      	orrs	r3, r2
 8004734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	609a      	str	r2, [r3, #8]
}
 800473c:	46c0      	nop			; (mov r8, r8)
 800473e:	46bd      	mov	sp, r7
 8004740:	b006      	add	sp, #24
 8004742:	bd80      	pop	{r7, pc}
 8004744:	ffff00ff 	.word	0xffff00ff

08004748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2238      	movs	r2, #56	; 0x38
 8004756:	5c9b      	ldrb	r3, [r3, r2]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800475c:	2302      	movs	r3, #2
 800475e:	e03d      	b.n	80047dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2238      	movs	r2, #56	; 0x38
 8004764:	2101      	movs	r1, #1
 8004766:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2239      	movs	r2, #57	; 0x39
 800476c:	2102      	movs	r1, #2
 800476e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2270      	movs	r2, #112	; 0x70
 8004784:	4393      	bics	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	2380      	movs	r3, #128	; 0x80
 80047a0:	05db      	lsls	r3, r3, #23
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d004      	beq.n	80047b0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a0e      	ldr	r2, [pc, #56]	; (80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d10c      	bne.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2280      	movs	r2, #128	; 0x80
 80047b4:	4393      	bics	r3, r2
 80047b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2239      	movs	r2, #57	; 0x39
 80047ce:	2101      	movs	r1, #1
 80047d0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2238      	movs	r2, #56	; 0x38
 80047d6:	2100      	movs	r1, #0
 80047d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	0018      	movs	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	b004      	add	sp, #16
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40010800 	.word	0x40010800

080047e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e044      	b.n	8004884 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d107      	bne.n	8004812 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2278      	movs	r2, #120	; 0x78
 8004806:	2100      	movs	r1, #0
 8004808:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	0018      	movs	r0, r3
 800480e:	f7fd f957 	bl	8001ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2224      	movs	r2, #36	; 0x24
 8004816:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2101      	movs	r1, #1
 8004824:	438a      	bics	r2, r1
 8004826:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	0018      	movs	r0, r3
 800482c:	f000 f830 	bl	8004890 <UART_SetConfig>
 8004830:	0003      	movs	r3, r0
 8004832:	2b01      	cmp	r3, #1
 8004834:	d101      	bne.n	800483a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e024      	b.n	8004884 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	0018      	movs	r0, r3
 8004846:	f000 fa6d 	bl	8004d24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	490d      	ldr	r1, [pc, #52]	; (800488c <HAL_UART_Init+0xa4>)
 8004856:	400a      	ands	r2, r1
 8004858:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	212a      	movs	r1, #42	; 0x2a
 8004866:	438a      	bics	r2, r1
 8004868:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2101      	movs	r1, #1
 8004876:	430a      	orrs	r2, r1
 8004878:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	0018      	movs	r0, r3
 800487e:	f000 fb05 	bl	8004e8c <UART_CheckIdleState>
 8004882:	0003      	movs	r3, r0
}
 8004884:	0018      	movs	r0, r3
 8004886:	46bd      	mov	sp, r7
 8004888:	b002      	add	sp, #8
 800488a:	bd80      	pop	{r7, pc}
 800488c:	ffffb7ff 	.word	0xffffb7ff

08004890 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004890:	b5b0      	push	{r4, r5, r7, lr}
 8004892:	b08e      	sub	sp, #56	; 0x38
 8004894:	af00      	add	r7, sp, #0
 8004896:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004898:	231a      	movs	r3, #26
 800489a:	2218      	movs	r2, #24
 800489c:	189b      	adds	r3, r3, r2
 800489e:	19db      	adds	r3, r3, r7
 80048a0:	2200      	movs	r2, #0
 80048a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	431a      	orrs	r2, r3
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	431a      	orrs	r2, r3
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4ab4      	ldr	r2, [pc, #720]	; (8004b94 <UART_SetConfig+0x304>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	0019      	movs	r1, r3
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048ce:	430a      	orrs	r2, r1
 80048d0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	4aaf      	ldr	r2, [pc, #700]	; (8004b98 <UART_SetConfig+0x308>)
 80048da:	4013      	ands	r3, r2
 80048dc:	0019      	movs	r1, r3
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4aa9      	ldr	r2, [pc, #676]	; (8004b9c <UART_SetConfig+0x30c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d004      	beq.n	8004904 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004900:	4313      	orrs	r3, r2
 8004902:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	4aa5      	ldr	r2, [pc, #660]	; (8004ba0 <UART_SetConfig+0x310>)
 800490c:	4013      	ands	r3, r2
 800490e:	0019      	movs	r1, r3
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004916:	430a      	orrs	r2, r1
 8004918:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4aa1      	ldr	r2, [pc, #644]	; (8004ba4 <UART_SetConfig+0x314>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d131      	bne.n	8004988 <UART_SetConfig+0xf8>
 8004924:	4ba0      	ldr	r3, [pc, #640]	; (8004ba8 <UART_SetConfig+0x318>)
 8004926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004928:	220c      	movs	r2, #12
 800492a:	4013      	ands	r3, r2
 800492c:	2b0c      	cmp	r3, #12
 800492e:	d01d      	beq.n	800496c <UART_SetConfig+0xdc>
 8004930:	d823      	bhi.n	800497a <UART_SetConfig+0xea>
 8004932:	2b08      	cmp	r3, #8
 8004934:	d00c      	beq.n	8004950 <UART_SetConfig+0xc0>
 8004936:	d820      	bhi.n	800497a <UART_SetConfig+0xea>
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <UART_SetConfig+0xb2>
 800493c:	2b04      	cmp	r3, #4
 800493e:	d00e      	beq.n	800495e <UART_SetConfig+0xce>
 8004940:	e01b      	b.n	800497a <UART_SetConfig+0xea>
 8004942:	231b      	movs	r3, #27
 8004944:	2218      	movs	r2, #24
 8004946:	189b      	adds	r3, r3, r2
 8004948:	19db      	adds	r3, r3, r7
 800494a:	2200      	movs	r2, #0
 800494c:	701a      	strb	r2, [r3, #0]
 800494e:	e065      	b.n	8004a1c <UART_SetConfig+0x18c>
 8004950:	231b      	movs	r3, #27
 8004952:	2218      	movs	r2, #24
 8004954:	189b      	adds	r3, r3, r2
 8004956:	19db      	adds	r3, r3, r7
 8004958:	2202      	movs	r2, #2
 800495a:	701a      	strb	r2, [r3, #0]
 800495c:	e05e      	b.n	8004a1c <UART_SetConfig+0x18c>
 800495e:	231b      	movs	r3, #27
 8004960:	2218      	movs	r2, #24
 8004962:	189b      	adds	r3, r3, r2
 8004964:	19db      	adds	r3, r3, r7
 8004966:	2204      	movs	r2, #4
 8004968:	701a      	strb	r2, [r3, #0]
 800496a:	e057      	b.n	8004a1c <UART_SetConfig+0x18c>
 800496c:	231b      	movs	r3, #27
 800496e:	2218      	movs	r2, #24
 8004970:	189b      	adds	r3, r3, r2
 8004972:	19db      	adds	r3, r3, r7
 8004974:	2208      	movs	r2, #8
 8004976:	701a      	strb	r2, [r3, #0]
 8004978:	e050      	b.n	8004a1c <UART_SetConfig+0x18c>
 800497a:	231b      	movs	r3, #27
 800497c:	2218      	movs	r2, #24
 800497e:	189b      	adds	r3, r3, r2
 8004980:	19db      	adds	r3, r3, r7
 8004982:	2210      	movs	r2, #16
 8004984:	701a      	strb	r2, [r3, #0]
 8004986:	e049      	b.n	8004a1c <UART_SetConfig+0x18c>
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a83      	ldr	r2, [pc, #524]	; (8004b9c <UART_SetConfig+0x30c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d13e      	bne.n	8004a10 <UART_SetConfig+0x180>
 8004992:	4b85      	ldr	r3, [pc, #532]	; (8004ba8 <UART_SetConfig+0x318>)
 8004994:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004996:	23c0      	movs	r3, #192	; 0xc0
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	4013      	ands	r3, r2
 800499c:	22c0      	movs	r2, #192	; 0xc0
 800499e:	0112      	lsls	r2, r2, #4
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d027      	beq.n	80049f4 <UART_SetConfig+0x164>
 80049a4:	22c0      	movs	r2, #192	; 0xc0
 80049a6:	0112      	lsls	r2, r2, #4
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d82a      	bhi.n	8004a02 <UART_SetConfig+0x172>
 80049ac:	2280      	movs	r2, #128	; 0x80
 80049ae:	0112      	lsls	r2, r2, #4
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d011      	beq.n	80049d8 <UART_SetConfig+0x148>
 80049b4:	2280      	movs	r2, #128	; 0x80
 80049b6:	0112      	lsls	r2, r2, #4
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d822      	bhi.n	8004a02 <UART_SetConfig+0x172>
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d004      	beq.n	80049ca <UART_SetConfig+0x13a>
 80049c0:	2280      	movs	r2, #128	; 0x80
 80049c2:	00d2      	lsls	r2, r2, #3
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d00e      	beq.n	80049e6 <UART_SetConfig+0x156>
 80049c8:	e01b      	b.n	8004a02 <UART_SetConfig+0x172>
 80049ca:	231b      	movs	r3, #27
 80049cc:	2218      	movs	r2, #24
 80049ce:	189b      	adds	r3, r3, r2
 80049d0:	19db      	adds	r3, r3, r7
 80049d2:	2200      	movs	r2, #0
 80049d4:	701a      	strb	r2, [r3, #0]
 80049d6:	e021      	b.n	8004a1c <UART_SetConfig+0x18c>
 80049d8:	231b      	movs	r3, #27
 80049da:	2218      	movs	r2, #24
 80049dc:	189b      	adds	r3, r3, r2
 80049de:	19db      	adds	r3, r3, r7
 80049e0:	2202      	movs	r2, #2
 80049e2:	701a      	strb	r2, [r3, #0]
 80049e4:	e01a      	b.n	8004a1c <UART_SetConfig+0x18c>
 80049e6:	231b      	movs	r3, #27
 80049e8:	2218      	movs	r2, #24
 80049ea:	189b      	adds	r3, r3, r2
 80049ec:	19db      	adds	r3, r3, r7
 80049ee:	2204      	movs	r2, #4
 80049f0:	701a      	strb	r2, [r3, #0]
 80049f2:	e013      	b.n	8004a1c <UART_SetConfig+0x18c>
 80049f4:	231b      	movs	r3, #27
 80049f6:	2218      	movs	r2, #24
 80049f8:	189b      	adds	r3, r3, r2
 80049fa:	19db      	adds	r3, r3, r7
 80049fc:	2208      	movs	r2, #8
 80049fe:	701a      	strb	r2, [r3, #0]
 8004a00:	e00c      	b.n	8004a1c <UART_SetConfig+0x18c>
 8004a02:	231b      	movs	r3, #27
 8004a04:	2218      	movs	r2, #24
 8004a06:	189b      	adds	r3, r3, r2
 8004a08:	19db      	adds	r3, r3, r7
 8004a0a:	2210      	movs	r2, #16
 8004a0c:	701a      	strb	r2, [r3, #0]
 8004a0e:	e005      	b.n	8004a1c <UART_SetConfig+0x18c>
 8004a10:	231b      	movs	r3, #27
 8004a12:	2218      	movs	r2, #24
 8004a14:	189b      	adds	r3, r3, r2
 8004a16:	19db      	adds	r3, r3, r7
 8004a18:	2210      	movs	r2, #16
 8004a1a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a5e      	ldr	r2, [pc, #376]	; (8004b9c <UART_SetConfig+0x30c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d000      	beq.n	8004a28 <UART_SetConfig+0x198>
 8004a26:	e084      	b.n	8004b32 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a28:	231b      	movs	r3, #27
 8004a2a:	2218      	movs	r2, #24
 8004a2c:	189b      	adds	r3, r3, r2
 8004a2e:	19db      	adds	r3, r3, r7
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d01d      	beq.n	8004a72 <UART_SetConfig+0x1e2>
 8004a36:	dc20      	bgt.n	8004a7a <UART_SetConfig+0x1ea>
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d015      	beq.n	8004a68 <UART_SetConfig+0x1d8>
 8004a3c:	dc1d      	bgt.n	8004a7a <UART_SetConfig+0x1ea>
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d002      	beq.n	8004a48 <UART_SetConfig+0x1b8>
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d005      	beq.n	8004a52 <UART_SetConfig+0x1c2>
 8004a46:	e018      	b.n	8004a7a <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a48:	f7fe ff1c 	bl	8003884 <HAL_RCC_GetPCLK1Freq>
 8004a4c:	0003      	movs	r3, r0
 8004a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a50:	e01c      	b.n	8004a8c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a52:	4b55      	ldr	r3, [pc, #340]	; (8004ba8 <UART_SetConfig+0x318>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2210      	movs	r2, #16
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d002      	beq.n	8004a62 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004a5c:	4b53      	ldr	r3, [pc, #332]	; (8004bac <UART_SetConfig+0x31c>)
 8004a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a60:	e014      	b.n	8004a8c <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8004a62:	4b53      	ldr	r3, [pc, #332]	; (8004bb0 <UART_SetConfig+0x320>)
 8004a64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a66:	e011      	b.n	8004a8c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a68:	f7fe fe5c 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 8004a6c:	0003      	movs	r3, r0
 8004a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a70:	e00c      	b.n	8004a8c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a72:	2380      	movs	r3, #128	; 0x80
 8004a74:	021b      	lsls	r3, r3, #8
 8004a76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a78:	e008      	b.n	8004a8c <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004a7e:	231a      	movs	r3, #26
 8004a80:	2218      	movs	r2, #24
 8004a82:	189b      	adds	r3, r3, r2
 8004a84:	19db      	adds	r3, r3, r7
 8004a86:	2201      	movs	r2, #1
 8004a88:	701a      	strb	r2, [r3, #0]
        break;
 8004a8a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d100      	bne.n	8004a94 <UART_SetConfig+0x204>
 8004a92:	e12f      	b.n	8004cf4 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	0013      	movs	r3, r2
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	189b      	adds	r3, r3, r2
 8004a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d305      	bcc.n	8004ab0 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d906      	bls.n	8004abe <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8004ab0:	231a      	movs	r3, #26
 8004ab2:	2218      	movs	r2, #24
 8004ab4:	189b      	adds	r3, r3, r2
 8004ab6:	19db      	adds	r3, r3, r7
 8004ab8:	2201      	movs	r2, #1
 8004aba:	701a      	strb	r2, [r3, #0]
 8004abc:	e11a      	b.n	8004cf4 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	6939      	ldr	r1, [r7, #16]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	000b      	movs	r3, r1
 8004acc:	0e1b      	lsrs	r3, r3, #24
 8004ace:	0010      	movs	r0, r2
 8004ad0:	0205      	lsls	r5, r0, #8
 8004ad2:	431d      	orrs	r5, r3
 8004ad4:	000b      	movs	r3, r1
 8004ad6:	021c      	lsls	r4, r3, #8
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	085b      	lsrs	r3, r3, #1
 8004ade:	60bb      	str	r3, [r7, #8]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	68b8      	ldr	r0, [r7, #8]
 8004ae6:	68f9      	ldr	r1, [r7, #12]
 8004ae8:	1900      	adds	r0, r0, r4
 8004aea:	4169      	adcs	r1, r5
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	603b      	str	r3, [r7, #0]
 8004af2:	2300      	movs	r3, #0
 8004af4:	607b      	str	r3, [r7, #4]
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f7fb fb91 	bl	8000220 <__aeabi_uldivmod>
 8004afe:	0002      	movs	r2, r0
 8004b00:	000b      	movs	r3, r1
 8004b02:	0013      	movs	r3, r2
 8004b04:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b08:	23c0      	movs	r3, #192	; 0xc0
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d309      	bcc.n	8004b24 <UART_SetConfig+0x294>
 8004b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b12:	2380      	movs	r3, #128	; 0x80
 8004b14:	035b      	lsls	r3, r3, #13
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d204      	bcs.n	8004b24 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b20:	60da      	str	r2, [r3, #12]
 8004b22:	e0e7      	b.n	8004cf4 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8004b24:	231a      	movs	r3, #26
 8004b26:	2218      	movs	r2, #24
 8004b28:	189b      	adds	r3, r3, r2
 8004b2a:	19db      	adds	r3, r3, r7
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	701a      	strb	r2, [r3, #0]
 8004b30:	e0e0      	b.n	8004cf4 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	69da      	ldr	r2, [r3, #28]
 8004b36:	2380      	movs	r3, #128	; 0x80
 8004b38:	021b      	lsls	r3, r3, #8
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d000      	beq.n	8004b40 <UART_SetConfig+0x2b0>
 8004b3e:	e082      	b.n	8004c46 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8004b40:	231b      	movs	r3, #27
 8004b42:	2218      	movs	r2, #24
 8004b44:	189b      	adds	r3, r3, r2
 8004b46:	19db      	adds	r3, r3, r7
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d834      	bhi.n	8004bb8 <UART_SetConfig+0x328>
 8004b4e:	009a      	lsls	r2, r3, #2
 8004b50:	4b18      	ldr	r3, [pc, #96]	; (8004bb4 <UART_SetConfig+0x324>)
 8004b52:	18d3      	adds	r3, r2, r3
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b58:	f7fe fe94 	bl	8003884 <HAL_RCC_GetPCLK1Freq>
 8004b5c:	0003      	movs	r3, r0
 8004b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b60:	e033      	b.n	8004bca <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b62:	f7fe fea5 	bl	80038b0 <HAL_RCC_GetPCLK2Freq>
 8004b66:	0003      	movs	r3, r0
 8004b68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b6a:	e02e      	b.n	8004bca <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ba8 <UART_SetConfig+0x318>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2210      	movs	r2, #16
 8004b72:	4013      	ands	r3, r2
 8004b74:	d002      	beq.n	8004b7c <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004b76:	4b0d      	ldr	r3, [pc, #52]	; (8004bac <UART_SetConfig+0x31c>)
 8004b78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b7a:	e026      	b.n	8004bca <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8004b7c:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <UART_SetConfig+0x320>)
 8004b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b80:	e023      	b.n	8004bca <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b82:	f7fe fdcf 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 8004b86:	0003      	movs	r3, r0
 8004b88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b8a:	e01e      	b.n	8004bca <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b8c:	2380      	movs	r3, #128	; 0x80
 8004b8e:	021b      	lsls	r3, r3, #8
 8004b90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b92:	e01a      	b.n	8004bca <UART_SetConfig+0x33a>
 8004b94:	efff69f3 	.word	0xefff69f3
 8004b98:	ffffcfff 	.word	0xffffcfff
 8004b9c:	40004800 	.word	0x40004800
 8004ba0:	fffff4ff 	.word	0xfffff4ff
 8004ba4:	40004400 	.word	0x40004400
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	003d0900 	.word	0x003d0900
 8004bb0:	00f42400 	.word	0x00f42400
 8004bb4:	08006bac 	.word	0x08006bac
      default:
        pclk = 0U;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004bbc:	231a      	movs	r3, #26
 8004bbe:	2218      	movs	r2, #24
 8004bc0:	189b      	adds	r3, r3, r2
 8004bc2:	19db      	adds	r3, r3, r7
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	701a      	strb	r2, [r3, #0]
        break;
 8004bc8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d100      	bne.n	8004bd2 <UART_SetConfig+0x342>
 8004bd0:	e090      	b.n	8004cf4 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd4:	005a      	lsls	r2, r3, #1
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	085b      	lsrs	r3, r3, #1
 8004bdc:	18d2      	adds	r2, r2, r3
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	0019      	movs	r1, r3
 8004be4:	0010      	movs	r0, r2
 8004be6:	f7fb fa8f 	bl	8000108 <__udivsi3>
 8004bea:	0003      	movs	r3, r0
 8004bec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf0:	2b0f      	cmp	r3, #15
 8004bf2:	d921      	bls.n	8004c38 <UART_SetConfig+0x3a8>
 8004bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bf6:	2380      	movs	r3, #128	; 0x80
 8004bf8:	025b      	lsls	r3, r3, #9
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d21c      	bcs.n	8004c38 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	200e      	movs	r0, #14
 8004c04:	2418      	movs	r4, #24
 8004c06:	1903      	adds	r3, r0, r4
 8004c08:	19db      	adds	r3, r3, r7
 8004c0a:	210f      	movs	r1, #15
 8004c0c:	438a      	bics	r2, r1
 8004c0e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c12:	085b      	lsrs	r3, r3, #1
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	2207      	movs	r2, #7
 8004c18:	4013      	ands	r3, r2
 8004c1a:	b299      	uxth	r1, r3
 8004c1c:	1903      	adds	r3, r0, r4
 8004c1e:	19db      	adds	r3, r3, r7
 8004c20:	1902      	adds	r2, r0, r4
 8004c22:	19d2      	adds	r2, r2, r7
 8004c24:	8812      	ldrh	r2, [r2, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	1902      	adds	r2, r0, r4
 8004c30:	19d2      	adds	r2, r2, r7
 8004c32:	8812      	ldrh	r2, [r2, #0]
 8004c34:	60da      	str	r2, [r3, #12]
 8004c36:	e05d      	b.n	8004cf4 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8004c38:	231a      	movs	r3, #26
 8004c3a:	2218      	movs	r2, #24
 8004c3c:	189b      	adds	r3, r3, r2
 8004c3e:	19db      	adds	r3, r3, r7
 8004c40:	2201      	movs	r2, #1
 8004c42:	701a      	strb	r2, [r3, #0]
 8004c44:	e056      	b.n	8004cf4 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c46:	231b      	movs	r3, #27
 8004c48:	2218      	movs	r2, #24
 8004c4a:	189b      	adds	r3, r3, r2
 8004c4c:	19db      	adds	r3, r3, r7
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d822      	bhi.n	8004c9a <UART_SetConfig+0x40a>
 8004c54:	009a      	lsls	r2, r3, #2
 8004c56:	4b2f      	ldr	r3, [pc, #188]	; (8004d14 <UART_SetConfig+0x484>)
 8004c58:	18d3      	adds	r3, r2, r3
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c5e:	f7fe fe11 	bl	8003884 <HAL_RCC_GetPCLK1Freq>
 8004c62:	0003      	movs	r3, r0
 8004c64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c66:	e021      	b.n	8004cac <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c68:	f7fe fe22 	bl	80038b0 <HAL_RCC_GetPCLK2Freq>
 8004c6c:	0003      	movs	r3, r0
 8004c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c70:	e01c      	b.n	8004cac <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c72:	4b29      	ldr	r3, [pc, #164]	; (8004d18 <UART_SetConfig+0x488>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2210      	movs	r2, #16
 8004c78:	4013      	ands	r3, r2
 8004c7a:	d002      	beq.n	8004c82 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004c7c:	4b27      	ldr	r3, [pc, #156]	; (8004d1c <UART_SetConfig+0x48c>)
 8004c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c80:	e014      	b.n	8004cac <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8004c82:	4b27      	ldr	r3, [pc, #156]	; (8004d20 <UART_SetConfig+0x490>)
 8004c84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c86:	e011      	b.n	8004cac <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c88:	f7fe fd4c 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 8004c8c:	0003      	movs	r3, r0
 8004c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c90:	e00c      	b.n	8004cac <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c92:	2380      	movs	r3, #128	; 0x80
 8004c94:	021b      	lsls	r3, r3, #8
 8004c96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c98:	e008      	b.n	8004cac <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004c9e:	231a      	movs	r3, #26
 8004ca0:	2218      	movs	r2, #24
 8004ca2:	189b      	adds	r3, r3, r2
 8004ca4:	19db      	adds	r3, r3, r7
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	701a      	strb	r2, [r3, #0]
        break;
 8004caa:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d020      	beq.n	8004cf4 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	085a      	lsrs	r2, r3, #1
 8004cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cba:	18d2      	adds	r2, r2, r3
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	0019      	movs	r1, r3
 8004cc2:	0010      	movs	r0, r2
 8004cc4:	f7fb fa20 	bl	8000108 <__udivsi3>
 8004cc8:	0003      	movs	r3, r0
 8004cca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cce:	2b0f      	cmp	r3, #15
 8004cd0:	d90a      	bls.n	8004ce8 <UART_SetConfig+0x458>
 8004cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cd4:	2380      	movs	r3, #128	; 0x80
 8004cd6:	025b      	lsls	r3, r3, #9
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d205      	bcs.n	8004ce8 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	60da      	str	r2, [r3, #12]
 8004ce6:	e005      	b.n	8004cf4 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8004ce8:	231a      	movs	r3, #26
 8004cea:	2218      	movs	r2, #24
 8004cec:	189b      	adds	r3, r3, r2
 8004cee:	19db      	adds	r3, r3, r7
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004d00:	231a      	movs	r3, #26
 8004d02:	2218      	movs	r2, #24
 8004d04:	189b      	adds	r3, r3, r2
 8004d06:	19db      	adds	r3, r3, r7
 8004d08:	781b      	ldrb	r3, [r3, #0]
}
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	b00e      	add	sp, #56	; 0x38
 8004d10:	bdb0      	pop	{r4, r5, r7, pc}
 8004d12:	46c0      	nop			; (mov r8, r8)
 8004d14:	08006bd0 	.word	0x08006bd0
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	003d0900 	.word	0x003d0900
 8004d20:	00f42400 	.word	0x00f42400

08004d24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	2201      	movs	r2, #1
 8004d32:	4013      	ands	r3, r2
 8004d34:	d00b      	beq.n	8004d4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4a4a      	ldr	r2, [pc, #296]	; (8004e68 <UART_AdvFeatureConfig+0x144>)
 8004d3e:	4013      	ands	r3, r2
 8004d40:	0019      	movs	r1, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	2202      	movs	r2, #2
 8004d54:	4013      	ands	r3, r2
 8004d56:	d00b      	beq.n	8004d70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	4a43      	ldr	r2, [pc, #268]	; (8004e6c <UART_AdvFeatureConfig+0x148>)
 8004d60:	4013      	ands	r3, r2
 8004d62:	0019      	movs	r1, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	2204      	movs	r2, #4
 8004d76:	4013      	ands	r3, r2
 8004d78:	d00b      	beq.n	8004d92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	4a3b      	ldr	r2, [pc, #236]	; (8004e70 <UART_AdvFeatureConfig+0x14c>)
 8004d82:	4013      	ands	r3, r2
 8004d84:	0019      	movs	r1, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	2208      	movs	r2, #8
 8004d98:	4013      	ands	r3, r2
 8004d9a:	d00b      	beq.n	8004db4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	4a34      	ldr	r2, [pc, #208]	; (8004e74 <UART_AdvFeatureConfig+0x150>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	0019      	movs	r1, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	2210      	movs	r2, #16
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d00b      	beq.n	8004dd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	4a2c      	ldr	r2, [pc, #176]	; (8004e78 <UART_AdvFeatureConfig+0x154>)
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	0019      	movs	r1, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	2220      	movs	r2, #32
 8004ddc:	4013      	ands	r3, r2
 8004dde:	d00b      	beq.n	8004df8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	4a25      	ldr	r2, [pc, #148]	; (8004e7c <UART_AdvFeatureConfig+0x158>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	0019      	movs	r1, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	2240      	movs	r2, #64	; 0x40
 8004dfe:	4013      	ands	r3, r2
 8004e00:	d01d      	beq.n	8004e3e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	4a1d      	ldr	r2, [pc, #116]	; (8004e80 <UART_AdvFeatureConfig+0x15c>)
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	0019      	movs	r1, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e1e:	2380      	movs	r3, #128	; 0x80
 8004e20:	035b      	lsls	r3, r3, #13
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d10b      	bne.n	8004e3e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	4a15      	ldr	r2, [pc, #84]	; (8004e84 <UART_AdvFeatureConfig+0x160>)
 8004e2e:	4013      	ands	r3, r2
 8004e30:	0019      	movs	r1, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	2280      	movs	r2, #128	; 0x80
 8004e44:	4013      	ands	r3, r2
 8004e46:	d00b      	beq.n	8004e60 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	4a0e      	ldr	r2, [pc, #56]	; (8004e88 <UART_AdvFeatureConfig+0x164>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	0019      	movs	r1, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	605a      	str	r2, [r3, #4]
  }
}
 8004e60:	46c0      	nop			; (mov r8, r8)
 8004e62:	46bd      	mov	sp, r7
 8004e64:	b002      	add	sp, #8
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	fffdffff 	.word	0xfffdffff
 8004e6c:	fffeffff 	.word	0xfffeffff
 8004e70:	fffbffff 	.word	0xfffbffff
 8004e74:	ffff7fff 	.word	0xffff7fff
 8004e78:	ffffefff 	.word	0xffffefff
 8004e7c:	ffffdfff 	.word	0xffffdfff
 8004e80:	ffefffff 	.word	0xffefffff
 8004e84:	ff9fffff 	.word	0xff9fffff
 8004e88:	fff7ffff 	.word	0xfff7ffff

08004e8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b092      	sub	sp, #72	; 0x48
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2284      	movs	r2, #132	; 0x84
 8004e98:	2100      	movs	r1, #0
 8004e9a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e9c:	f7fc ff16 	bl	8001ccc <HAL_GetTick>
 8004ea0:	0003      	movs	r3, r0
 8004ea2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2208      	movs	r2, #8
 8004eac:	4013      	ands	r3, r2
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d12c      	bne.n	8004f0c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eb4:	2280      	movs	r2, #128	; 0x80
 8004eb6:	0391      	lsls	r1, r2, #14
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	4a46      	ldr	r2, [pc, #280]	; (8004fd4 <UART_CheckIdleState+0x148>)
 8004ebc:	9200      	str	r2, [sp, #0]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f000 f88c 	bl	8004fdc <UART_WaitOnFlagUntilTimeout>
 8004ec4:	1e03      	subs	r3, r0, #0
 8004ec6:	d021      	beq.n	8004f0c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ed0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed8:	f383 8810 	msr	PRIMASK, r3
}
 8004edc:	46c0      	nop			; (mov r8, r8)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2180      	movs	r1, #128	; 0x80
 8004eea:	438a      	bics	r2, r1
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef4:	f383 8810 	msr	PRIMASK, r3
}
 8004ef8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2220      	movs	r2, #32
 8004efe:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2278      	movs	r2, #120	; 0x78
 8004f04:	2100      	movs	r1, #0
 8004f06:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e05f      	b.n	8004fcc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2204      	movs	r2, #4
 8004f14:	4013      	ands	r3, r2
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d146      	bne.n	8004fa8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f1c:	2280      	movs	r2, #128	; 0x80
 8004f1e:	03d1      	lsls	r1, r2, #15
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	4a2c      	ldr	r2, [pc, #176]	; (8004fd4 <UART_CheckIdleState+0x148>)
 8004f24:	9200      	str	r2, [sp, #0]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f000 f858 	bl	8004fdc <UART_WaitOnFlagUntilTimeout>
 8004f2c:	1e03      	subs	r3, r0, #0
 8004f2e:	d03b      	beq.n	8004fa8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f30:	f3ef 8310 	mrs	r3, PRIMASK
 8004f34:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f36:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f38:	637b      	str	r3, [r7, #52]	; 0x34
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f383 8810 	msr	PRIMASK, r3
}
 8004f44:	46c0      	nop			; (mov r8, r8)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4921      	ldr	r1, [pc, #132]	; (8004fd8 <UART_CheckIdleState+0x14c>)
 8004f52:	400a      	ands	r2, r1
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f383 8810 	msr	PRIMASK, r3
}
 8004f60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f62:	f3ef 8310 	mrs	r3, PRIMASK
 8004f66:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f68:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f6a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	f383 8810 	msr	PRIMASK, r3
}
 8004f76:	46c0      	nop			; (mov r8, r8)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689a      	ldr	r2, [r3, #8]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2101      	movs	r1, #1
 8004f84:	438a      	bics	r2, r1
 8004f86:	609a      	str	r2, [r3, #8]
 8004f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	f383 8810 	msr	PRIMASK, r3
}
 8004f92:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2280      	movs	r2, #128	; 0x80
 8004f98:	2120      	movs	r1, #32
 8004f9a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2278      	movs	r2, #120	; 0x78
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e011      	b.n	8004fcc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2220      	movs	r2, #32
 8004fac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2280      	movs	r2, #128	; 0x80
 8004fb2:	2120      	movs	r1, #32
 8004fb4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2278      	movs	r2, #120	; 0x78
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	0018      	movs	r0, r3
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	b010      	add	sp, #64	; 0x40
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	01ffffff 	.word	0x01ffffff
 8004fd8:	fffffedf 	.word	0xfffffedf

08004fdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	603b      	str	r3, [r7, #0]
 8004fe8:	1dfb      	adds	r3, r7, #7
 8004fea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fec:	e04b      	b.n	8005086 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	d048      	beq.n	8005086 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ff4:	f7fc fe6a 	bl	8001ccc <HAL_GetTick>
 8004ff8:	0002      	movs	r2, r0
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	429a      	cmp	r2, r3
 8005002:	d302      	bcc.n	800500a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e04b      	b.n	80050a6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2204      	movs	r2, #4
 8005016:	4013      	ands	r3, r2
 8005018:	d035      	beq.n	8005086 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	2208      	movs	r2, #8
 8005022:	4013      	ands	r3, r2
 8005024:	2b08      	cmp	r3, #8
 8005026:	d111      	bne.n	800504c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2208      	movs	r2, #8
 800502e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	0018      	movs	r0, r3
 8005034:	f000 f83c 	bl	80050b0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2284      	movs	r2, #132	; 0x84
 800503c:	2108      	movs	r1, #8
 800503e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2278      	movs	r2, #120	; 0x78
 8005044:	2100      	movs	r1, #0
 8005046:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e02c      	b.n	80050a6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	69da      	ldr	r2, [r3, #28]
 8005052:	2380      	movs	r3, #128	; 0x80
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	401a      	ands	r2, r3
 8005058:	2380      	movs	r3, #128	; 0x80
 800505a:	011b      	lsls	r3, r3, #4
 800505c:	429a      	cmp	r2, r3
 800505e:	d112      	bne.n	8005086 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2280      	movs	r2, #128	; 0x80
 8005066:	0112      	lsls	r2, r2, #4
 8005068:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	0018      	movs	r0, r3
 800506e:	f000 f81f 	bl	80050b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2284      	movs	r2, #132	; 0x84
 8005076:	2120      	movs	r1, #32
 8005078:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2278      	movs	r2, #120	; 0x78
 800507e:	2100      	movs	r1, #0
 8005080:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e00f      	b.n	80050a6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	4013      	ands	r3, r2
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	425a      	negs	r2, r3
 8005096:	4153      	adcs	r3, r2
 8005098:	b2db      	uxtb	r3, r3
 800509a:	001a      	movs	r2, r3
 800509c:	1dfb      	adds	r3, r7, #7
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d0a4      	beq.n	8004fee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	0018      	movs	r0, r3
 80050a8:	46bd      	mov	sp, r7
 80050aa:	b004      	add	sp, #16
 80050ac:	bd80      	pop	{r7, pc}
	...

080050b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08e      	sub	sp, #56	; 0x38
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050b8:	f3ef 8310 	mrs	r3, PRIMASK
 80050bc:	617b      	str	r3, [r7, #20]
  return(result);
 80050be:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050c0:	637b      	str	r3, [r7, #52]	; 0x34
 80050c2:	2301      	movs	r3, #1
 80050c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	f383 8810 	msr	PRIMASK, r3
}
 80050cc:	46c0      	nop			; (mov r8, r8)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4926      	ldr	r1, [pc, #152]	; (8005174 <UART_EndRxTransfer+0xc4>)
 80050da:	400a      	ands	r2, r1
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	f383 8810 	msr	PRIMASK, r3
}
 80050e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ea:	f3ef 8310 	mrs	r3, PRIMASK
 80050ee:	623b      	str	r3, [r7, #32]
  return(result);
 80050f0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f2:	633b      	str	r3, [r7, #48]	; 0x30
 80050f4:	2301      	movs	r3, #1
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	f383 8810 	msr	PRIMASK, r3
}
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2101      	movs	r1, #1
 800510c:	438a      	bics	r2, r1
 800510e:	609a      	str	r2, [r3, #8]
 8005110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005112:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005116:	f383 8810 	msr	PRIMASK, r3
}
 800511a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005120:	2b01      	cmp	r3, #1
 8005122:	d118      	bne.n	8005156 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005124:	f3ef 8310 	mrs	r3, PRIMASK
 8005128:	60bb      	str	r3, [r7, #8]
  return(result);
 800512a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800512c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800512e:	2301      	movs	r3, #1
 8005130:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f383 8810 	msr	PRIMASK, r3
}
 8005138:	46c0      	nop			; (mov r8, r8)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2110      	movs	r1, #16
 8005146:	438a      	bics	r2, r1
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f383 8810 	msr	PRIMASK, r3
}
 8005154:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2280      	movs	r2, #128	; 0x80
 800515a:	2120      	movs	r1, #32
 800515c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	669a      	str	r2, [r3, #104]	; 0x68
}
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	46bd      	mov	sp, r7
 800516e:	b00e      	add	sp, #56	; 0x38
 8005170:	bd80      	pop	{r7, pc}
 8005172:	46c0      	nop			; (mov r8, r8)
 8005174:	fffffedf 	.word	0xfffffedf

08005178 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	0002      	movs	r2, r0
 8005180:	1dbb      	adds	r3, r7, #6
 8005182:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005184:	2300      	movs	r3, #0
 8005186:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005188:	1dbb      	adds	r3, r7, #6
 800518a:	2200      	movs	r2, #0
 800518c:	5e9b      	ldrsh	r3, [r3, r2]
 800518e:	2b84      	cmp	r3, #132	; 0x84
 8005190:	d006      	beq.n	80051a0 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8005192:	1dbb      	adds	r3, r7, #6
 8005194:	2200      	movs	r2, #0
 8005196:	5e9a      	ldrsh	r2, [r3, r2]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	18d3      	adds	r3, r2, r3
 800519c:	3303      	adds	r3, #3
 800519e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80051a0:	68fb      	ldr	r3, [r7, #12]
}
 80051a2:	0018      	movs	r0, r3
 80051a4:	46bd      	mov	sp, r7
 80051a6:	b004      	add	sp, #16
 80051a8:	bd80      	pop	{r7, pc}

080051aa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80051ae:	f000 fcfd 	bl	8005bac <vTaskStartScheduler>
  
  return osOK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	0018      	movs	r0, r3
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80051ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051bc:	b089      	sub	sp, #36	; 0x24
 80051be:	af04      	add	r7, sp, #16
 80051c0:	6078      	str	r0, [r7, #4]
 80051c2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d020      	beq.n	800520e <osThreadCreate+0x54>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d01c      	beq.n	800520e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685c      	ldr	r4, [r3, #4]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691e      	ldr	r6, [r3, #16]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2208      	movs	r2, #8
 80051e4:	5e9b      	ldrsh	r3, [r3, r2]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051e6:	0018      	movs	r0, r3
 80051e8:	f7ff ffc6 	bl	8005178 <makeFreeRtosPriority>
              thread_def->buffer, thread_def->controlblock);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	695a      	ldr	r2, [r3, #20]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051f4:	6839      	ldr	r1, [r7, #0]
 80051f6:	9302      	str	r3, [sp, #8]
 80051f8:	9201      	str	r2, [sp, #4]
 80051fa:	9000      	str	r0, [sp, #0]
 80051fc:	000b      	movs	r3, r1
 80051fe:	0032      	movs	r2, r6
 8005200:	0029      	movs	r1, r5
 8005202:	0020      	movs	r0, r4
 8005204:	f000 fb36 	bl	8005874 <xTaskCreateStatic>
 8005208:	0003      	movs	r3, r0
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	e01d      	b.n	800524a <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685c      	ldr	r4, [r3, #4]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800521a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2208      	movs	r2, #8
 8005220:	5e9b      	ldrsh	r3, [r3, r2]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005222:	0018      	movs	r0, r3
 8005224:	f7ff ffa8 	bl	8005178 <makeFreeRtosPriority>
 8005228:	0001      	movs	r1, r0
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	230c      	movs	r3, #12
 800522e:	18fb      	adds	r3, r7, r3
 8005230:	9301      	str	r3, [sp, #4]
 8005232:	9100      	str	r1, [sp, #0]
 8005234:	0013      	movs	r3, r2
 8005236:	0032      	movs	r2, r6
 8005238:	0029      	movs	r1, r5
 800523a:	0020      	movs	r0, r4
 800523c:	f000 fb5e 	bl	80058fc <xTaskCreate>
 8005240:	0003      	movs	r3, r0
 8005242:	2b01      	cmp	r3, #1
 8005244:	d001      	beq.n	800524a <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8005246:	2300      	movs	r3, #0
 8005248:	e000      	b.n	800524c <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800524a:	68fb      	ldr	r3, [r7, #12]
}
 800524c:	0018      	movs	r0, r3
 800524e:	46bd      	mov	sp, r7
 8005250:	b005      	add	sp, #20
 8005252:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005254 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <osDelay+0x16>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	e000      	b.n	800526c <osDelay+0x18>
 800526a:	2301      	movs	r3, #1
 800526c:	0018      	movs	r0, r3
 800526e:	f000 fc77 	bl	8005b60 <vTaskDelay>
  
  return osOK;
 8005272:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005274:	0018      	movs	r0, r3
 8005276:	46bd      	mov	sp, r7
 8005278:	b004      	add	sp, #16
 800527a:	bd80      	pop	{r7, pc}

0800527c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3308      	adds	r3, #8
 8005288:	001a      	movs	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	4252      	negs	r2, r2
 8005294:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3308      	adds	r3, #8
 800529a:	001a      	movs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3308      	adds	r3, #8
 80052a4:	001a      	movs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052b0:	46c0      	nop			; (mov r8, r8)
 80052b2:	46bd      	mov	sp, r7
 80052b4:	b002      	add	sp, #8
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	46bd      	mov	sp, r7
 80052ca:	b002      	add	sp, #8
 80052cc:	bd80      	pop	{r7, pc}

080052ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	601a      	str	r2, [r3, #0]
}
 800530a:	46c0      	nop			; (mov r8, r8)
 800530c:	46bd      	mov	sp, r7
 800530e:	b004      	add	sp, #16
 8005310:	bd80      	pop	{r7, pc}

08005312 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	3301      	adds	r3, #1
 8005326:	d103      	bne.n	8005330 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	e00c      	b.n	800534a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3308      	adds	r3, #8
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	e002      	b.n	800533e <vListInsert+0x2c>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	429a      	cmp	r2, r3
 8005348:	d2f6      	bcs.n	8005338 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	601a      	str	r2, [r3, #0]
}
 8005376:	46c0      	nop			; (mov r8, r8)
 8005378:	46bd      	mov	sp, r7
 800537a:	b004      	add	sp, #16
 800537c:	bd80      	pop	{r7, pc}

0800537e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b084      	sub	sp, #16
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6892      	ldr	r2, [r2, #8]
 8005394:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6852      	ldr	r2, [r2, #4]
 800539e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d103      	bne.n	80053b2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689a      	ldr	r2, [r3, #8]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	1e5a      	subs	r2, r3, #1
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
}
 80053c6:	0018      	movs	r0, r3
 80053c8:	46bd      	mov	sp, r7
 80053ca:	b004      	add	sp, #16
 80053cc:	bd80      	pop	{r7, pc}

080053ce <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b084      	sub	sp, #16
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <xQueueGenericReset+0x18>
 80053e2:	b672      	cpsid	i
 80053e4:	e7fe      	b.n	80053e4 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80053e6:	f001 f8e3 	bl	80065b0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	434b      	muls	r3, r1
 80053f8:	18d2      	adds	r2, r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005414:	1e59      	subs	r1, r3, #1
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	434b      	muls	r3, r1
 800541c:	18d2      	adds	r2, r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2244      	movs	r2, #68	; 0x44
 8005426:	21ff      	movs	r1, #255	; 0xff
 8005428:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2245      	movs	r2, #69	; 0x45
 800542e:	21ff      	movs	r1, #255	; 0xff
 8005430:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10d      	bne.n	8005454 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d013      	beq.n	8005468 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	3310      	adds	r3, #16
 8005444:	0018      	movs	r0, r3
 8005446:	f000 fdb7 	bl	8005fb8 <xTaskRemoveFromEventList>
 800544a:	1e03      	subs	r3, r0, #0
 800544c:	d00c      	beq.n	8005468 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800544e:	f001 f89f 	bl	8006590 <vPortYield>
 8005452:	e009      	b.n	8005468 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	3310      	adds	r3, #16
 8005458:	0018      	movs	r0, r3
 800545a:	f7ff ff0f 	bl	800527c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	3324      	adds	r3, #36	; 0x24
 8005462:	0018      	movs	r0, r3
 8005464:	f7ff ff0a 	bl	800527c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005468:	f001 f8b4 	bl	80065d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800546c:	2301      	movs	r3, #1
}
 800546e:	0018      	movs	r0, r3
 8005470:	46bd      	mov	sp, r7
 8005472:	b004      	add	sp, #16
 8005474:	bd80      	pop	{r7, pc}

08005476 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005476:	b590      	push	{r4, r7, lr}
 8005478:	b08b      	sub	sp, #44	; 0x2c
 800547a:	af02      	add	r7, sp, #8
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	1dfb      	adds	r3, r7, #7
 8005482:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <xQueueGenericCreate+0x18>
 800548a:	b672      	cpsid	i
 800548c:	e7fe      	b.n	800548c <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d102      	bne.n	800549a <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005494:	2300      	movs	r3, #0
 8005496:	61fb      	str	r3, [r7, #28]
 8005498:	e003      	b.n	80054a2 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	4353      	muls	r3, r2
 80054a0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	3348      	adds	r3, #72	; 0x48
 80054a6:	0018      	movs	r0, r3
 80054a8:	f001 f91a 	bl	80066e0 <pvPortMalloc>
 80054ac:	0003      	movs	r3, r0
 80054ae:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d012      	beq.n	80054dc <xQueueGenericCreate+0x66>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	3348      	adds	r3, #72	; 0x48
 80054be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	2246      	movs	r2, #70	; 0x46
 80054c4:	2100      	movs	r1, #0
 80054c6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054c8:	1dfb      	adds	r3, r7, #7
 80054ca:	781c      	ldrb	r4, [r3, #0]
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	0023      	movs	r3, r4
 80054d8:	f000 f805 	bl	80054e6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80054dc:	69bb      	ldr	r3, [r7, #24]
	}
 80054de:	0018      	movs	r0, r3
 80054e0:	46bd      	mov	sp, r7
 80054e2:	b009      	add	sp, #36	; 0x24
 80054e4:	bd90      	pop	{r4, r7, pc}

080054e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	607a      	str	r2, [r7, #4]
 80054f2:	001a      	movs	r2, r3
 80054f4:	1cfb      	adds	r3, r7, #3
 80054f6:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d103      	bne.n	8005506 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	e002      	b.n	800550c <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	2101      	movs	r1, #1
 800551c:	0018      	movs	r0, r3
 800551e:	f7ff ff56 	bl	80053ce <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005522:	46c0      	nop			; (mov r8, r8)
 8005524:	46bd      	mov	sp, r7
 8005526:	b004      	add	sp, #16
 8005528:	bd80      	pop	{r7, pc}

0800552a <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b08a      	sub	sp, #40	; 0x28
 800552e:	af00      	add	r7, sp, #0
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	607a      	str	r2, [r7, #4]
 8005536:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005538:	2300      	movs	r3, #0
 800553a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005540:	6a3b      	ldr	r3, [r7, #32]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <xQueueGenericSend+0x20>
 8005546:	b672      	cpsid	i
 8005548:	e7fe      	b.n	8005548 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d103      	bne.n	8005558 <xQueueGenericSend+0x2e>
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <xQueueGenericSend+0x32>
 8005558:	2301      	movs	r3, #1
 800555a:	e000      	b.n	800555e <xQueueGenericSend+0x34>
 800555c:	2300      	movs	r3, #0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <xQueueGenericSend+0x3c>
 8005562:	b672      	cpsid	i
 8005564:	e7fe      	b.n	8005564 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b02      	cmp	r3, #2
 800556a:	d103      	bne.n	8005574 <xQueueGenericSend+0x4a>
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005570:	2b01      	cmp	r3, #1
 8005572:	d101      	bne.n	8005578 <xQueueGenericSend+0x4e>
 8005574:	2301      	movs	r3, #1
 8005576:	e000      	b.n	800557a <xQueueGenericSend+0x50>
 8005578:	2300      	movs	r3, #0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <xQueueGenericSend+0x58>
 800557e:	b672      	cpsid	i
 8005580:	e7fe      	b.n	8005580 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005582:	f000 feab 	bl	80062dc <xTaskGetSchedulerState>
 8005586:	1e03      	subs	r3, r0, #0
 8005588:	d102      	bne.n	8005590 <xQueueGenericSend+0x66>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <xQueueGenericSend+0x6a>
 8005590:	2301      	movs	r3, #1
 8005592:	e000      	b.n	8005596 <xQueueGenericSend+0x6c>
 8005594:	2300      	movs	r3, #0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <xQueueGenericSend+0x74>
 800559a:	b672      	cpsid	i
 800559c:	e7fe      	b.n	800559c <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800559e:	f001 f807 	bl	80065b0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d302      	bcc.n	80055b4 <xQueueGenericSend+0x8a>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d11e      	bne.n	80055f2 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	68b9      	ldr	r1, [r7, #8]
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	0018      	movs	r0, r3
 80055bc:	f000 f879 	bl	80056b2 <prvCopyDataToQueue>
 80055c0:	0003      	movs	r3, r0
 80055c2:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d009      	beq.n	80055e0 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	3324      	adds	r3, #36	; 0x24
 80055d0:	0018      	movs	r0, r3
 80055d2:	f000 fcf1 	bl	8005fb8 <xTaskRemoveFromEventList>
 80055d6:	1e03      	subs	r3, r0, #0
 80055d8:	d007      	beq.n	80055ea <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80055da:	f000 ffd9 	bl	8006590 <vPortYield>
 80055de:	e004      	b.n	80055ea <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80055e6:	f000 ffd3 	bl	8006590 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80055ea:	f000 fff3 	bl	80065d4 <vPortExitCritical>
				return pdPASS;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e05b      	b.n	80056aa <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d103      	bne.n	8005600 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055f8:	f000 ffec 	bl	80065d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80055fc:	2300      	movs	r3, #0
 80055fe:	e054      	b.n	80056aa <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	2b00      	cmp	r3, #0
 8005604:	d106      	bne.n	8005614 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005606:	2314      	movs	r3, #20
 8005608:	18fb      	adds	r3, r7, r3
 800560a:	0018      	movs	r0, r3
 800560c:	f000 fd30 	bl	8006070 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005610:	2301      	movs	r3, #1
 8005612:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005614:	f000 ffde 	bl	80065d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005618:	f000 fb16 	bl	8005c48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800561c:	f000 ffc8 	bl	80065b0 <vPortEnterCritical>
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	2244      	movs	r2, #68	; 0x44
 8005624:	5c9b      	ldrb	r3, [r3, r2]
 8005626:	b25b      	sxtb	r3, r3
 8005628:	3301      	adds	r3, #1
 800562a:	d103      	bne.n	8005634 <xQueueGenericSend+0x10a>
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	2244      	movs	r2, #68	; 0x44
 8005630:	2100      	movs	r1, #0
 8005632:	5499      	strb	r1, [r3, r2]
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	2245      	movs	r2, #69	; 0x45
 8005638:	5c9b      	ldrb	r3, [r3, r2]
 800563a:	b25b      	sxtb	r3, r3
 800563c:	3301      	adds	r3, #1
 800563e:	d103      	bne.n	8005648 <xQueueGenericSend+0x11e>
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	2245      	movs	r2, #69	; 0x45
 8005644:	2100      	movs	r1, #0
 8005646:	5499      	strb	r1, [r3, r2]
 8005648:	f000 ffc4 	bl	80065d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800564c:	1d3a      	adds	r2, r7, #4
 800564e:	2314      	movs	r3, #20
 8005650:	18fb      	adds	r3, r7, r3
 8005652:	0011      	movs	r1, r2
 8005654:	0018      	movs	r0, r3
 8005656:	f000 fd1f 	bl	8006098 <xTaskCheckForTimeOut>
 800565a:	1e03      	subs	r3, r0, #0
 800565c:	d11e      	bne.n	800569c <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	0018      	movs	r0, r3
 8005662:	f000 f8ef 	bl	8005844 <prvIsQueueFull>
 8005666:	1e03      	subs	r3, r0, #0
 8005668:	d011      	beq.n	800568e <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800566a:	6a3b      	ldr	r3, [r7, #32]
 800566c:	3310      	adds	r3, #16
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	0011      	movs	r1, r2
 8005672:	0018      	movs	r0, r3
 8005674:	f000 fc82 	bl	8005f7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	0018      	movs	r0, r3
 800567c:	f000 f884 	bl	8005788 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005680:	f000 faee 	bl	8005c60 <xTaskResumeAll>
 8005684:	1e03      	subs	r3, r0, #0
 8005686:	d18a      	bne.n	800559e <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8005688:	f000 ff82 	bl	8006590 <vPortYield>
 800568c:	e787      	b.n	800559e <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	0018      	movs	r0, r3
 8005692:	f000 f879 	bl	8005788 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005696:	f000 fae3 	bl	8005c60 <xTaskResumeAll>
 800569a:	e780      	b.n	800559e <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	0018      	movs	r0, r3
 80056a0:	f000 f872 	bl	8005788 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056a4:	f000 fadc 	bl	8005c60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80056a8:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80056aa:	0018      	movs	r0, r3
 80056ac:	46bd      	mov	sp, r7
 80056ae:	b00a      	add	sp, #40	; 0x28
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b086      	sub	sp, #24
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	60f8      	str	r0, [r7, #12]
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80056be:	2300      	movs	r3, #0
 80056c0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10e      	bne.n	80056ee <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d14e      	bne.n	8005776 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	0018      	movs	r0, r3
 80056de:	f000 fe19 	bl	8006314 <xTaskPriorityDisinherit>
 80056e2:	0003      	movs	r3, r0
 80056e4:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	609a      	str	r2, [r3, #8]
 80056ec:	e043      	b.n	8005776 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d119      	bne.n	8005728 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6858      	ldr	r0, [r3, #4]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	0019      	movs	r1, r3
 8005700:	f001 f9c0 	bl	8006a84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570c:	18d2      	adds	r2, r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	429a      	cmp	r2, r3
 800571c:	d32b      	bcc.n	8005776 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	605a      	str	r2, [r3, #4]
 8005726:	e026      	b.n	8005776 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	68d8      	ldr	r0, [r3, #12]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	0019      	movs	r1, r3
 8005734:	f001 f9a6 	bl	8006a84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	68da      	ldr	r2, [r3, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005740:	425b      	negs	r3, r3
 8005742:	18d2      	adds	r2, r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	429a      	cmp	r2, r3
 8005752:	d207      	bcs.n	8005764 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575c:	425b      	negs	r3, r3
 800575e:	18d2      	adds	r2, r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b02      	cmp	r3, #2
 8005768:	d105      	bne.n	8005776 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	3b01      	subs	r3, #1
 8005774:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1c5a      	adds	r2, r3, #1
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800577e:	697b      	ldr	r3, [r7, #20]
}
 8005780:	0018      	movs	r0, r3
 8005782:	46bd      	mov	sp, r7
 8005784:	b006      	add	sp, #24
 8005786:	bd80      	pop	{r7, pc}

08005788 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005790:	f000 ff0e 	bl	80065b0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005794:	230f      	movs	r3, #15
 8005796:	18fb      	adds	r3, r7, r3
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	2145      	movs	r1, #69	; 0x45
 800579c:	5c52      	ldrb	r2, [r2, r1]
 800579e:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057a0:	e013      	b.n	80057ca <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d016      	beq.n	80057d8 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	3324      	adds	r3, #36	; 0x24
 80057ae:	0018      	movs	r0, r3
 80057b0:	f000 fc02 	bl	8005fb8 <xTaskRemoveFromEventList>
 80057b4:	1e03      	subs	r3, r0, #0
 80057b6:	d001      	beq.n	80057bc <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80057b8:	f000 fcbe 	bl	8006138 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80057bc:	210f      	movs	r1, #15
 80057be:	187b      	adds	r3, r7, r1
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	3b01      	subs	r3, #1
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	187b      	adds	r3, r7, r1
 80057c8:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057ca:	230f      	movs	r3, #15
 80057cc:	18fb      	adds	r3, r7, r3
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	b25b      	sxtb	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	dce5      	bgt.n	80057a2 <prvUnlockQueue+0x1a>
 80057d6:	e000      	b.n	80057da <prvUnlockQueue+0x52>
					break;
 80057d8:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2245      	movs	r2, #69	; 0x45
 80057de:	21ff      	movs	r1, #255	; 0xff
 80057e0:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80057e2:	f000 fef7 	bl	80065d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80057e6:	f000 fee3 	bl	80065b0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80057ea:	230e      	movs	r3, #14
 80057ec:	18fb      	adds	r3, r7, r3
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	2144      	movs	r1, #68	; 0x44
 80057f2:	5c52      	ldrb	r2, [r2, r1]
 80057f4:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057f6:	e013      	b.n	8005820 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d016      	beq.n	800582e <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3310      	adds	r3, #16
 8005804:	0018      	movs	r0, r3
 8005806:	f000 fbd7 	bl	8005fb8 <xTaskRemoveFromEventList>
 800580a:	1e03      	subs	r3, r0, #0
 800580c:	d001      	beq.n	8005812 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800580e:	f000 fc93 	bl	8006138 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005812:	210e      	movs	r1, #14
 8005814:	187b      	adds	r3, r7, r1
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	3b01      	subs	r3, #1
 800581a:	b2da      	uxtb	r2, r3
 800581c:	187b      	adds	r3, r7, r1
 800581e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005820:	230e      	movs	r3, #14
 8005822:	18fb      	adds	r3, r7, r3
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	b25b      	sxtb	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	dce5      	bgt.n	80057f8 <prvUnlockQueue+0x70>
 800582c:	e000      	b.n	8005830 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800582e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2244      	movs	r2, #68	; 0x44
 8005834:	21ff      	movs	r1, #255	; 0xff
 8005836:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005838:	f000 fecc 	bl	80065d4 <vPortExitCritical>
}
 800583c:	46c0      	nop			; (mov r8, r8)
 800583e:	46bd      	mov	sp, r7
 8005840:	b004      	add	sp, #16
 8005842:	bd80      	pop	{r7, pc}

08005844 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800584c:	f000 feb0 	bl	80065b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005858:	429a      	cmp	r2, r3
 800585a:	d102      	bne.n	8005862 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800585c:	2301      	movs	r3, #1
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	e001      	b.n	8005866 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005862:	2300      	movs	r3, #0
 8005864:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005866:	f000 feb5 	bl	80065d4 <vPortExitCritical>

	return xReturn;
 800586a:	68fb      	ldr	r3, [r7, #12]
}
 800586c:	0018      	movs	r0, r3
 800586e:	46bd      	mov	sp, r7
 8005870:	b004      	add	sp, #16
 8005872:	bd80      	pop	{r7, pc}

08005874 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005874:	b590      	push	{r4, r7, lr}
 8005876:	b08d      	sub	sp, #52	; 0x34
 8005878:	af04      	add	r7, sp, #16
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <xTaskCreateStatic+0x18>
 8005888:	b672      	cpsid	i
 800588a:	e7fe      	b.n	800588a <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800588c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <xTaskCreateStatic+0x22>
 8005892:	b672      	cpsid	i
 8005894:	e7fe      	b.n	8005894 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005896:	2354      	movs	r3, #84	; 0x54
 8005898:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2b54      	cmp	r3, #84	; 0x54
 800589e:	d001      	beq.n	80058a4 <xTaskCreateStatic+0x30>
 80058a0:	b672      	cpsid	i
 80058a2:	e7fe      	b.n	80058a2 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80058a4:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d020      	beq.n	80058ee <xTaskCreateStatic+0x7a>
 80058ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d01d      	beq.n	80058ee <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b4:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058ba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	2251      	movs	r2, #81	; 0x51
 80058c0:	2102      	movs	r1, #2
 80058c2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058c4:	683c      	ldr	r4, [r7, #0]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	68b9      	ldr	r1, [r7, #8]
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	2300      	movs	r3, #0
 80058ce:	9303      	str	r3, [sp, #12]
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	9302      	str	r3, [sp, #8]
 80058d4:	2318      	movs	r3, #24
 80058d6:	18fb      	adds	r3, r7, r3
 80058d8:	9301      	str	r3, [sp, #4]
 80058da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	0023      	movs	r3, r4
 80058e0:	f000 f858 	bl	8005994 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	0018      	movs	r0, r3
 80058e8:	f000 f8d6 	bl	8005a98 <prvAddNewTaskToReadyList>
 80058ec:	e001      	b.n	80058f2 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 80058ee:	2300      	movs	r3, #0
 80058f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80058f2:	69bb      	ldr	r3, [r7, #24]
	}
 80058f4:	0018      	movs	r0, r3
 80058f6:	46bd      	mov	sp, r7
 80058f8:	b009      	add	sp, #36	; 0x24
 80058fa:	bd90      	pop	{r4, r7, pc}

080058fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80058fc:	b590      	push	{r4, r7, lr}
 80058fe:	b08d      	sub	sp, #52	; 0x34
 8005900:	af04      	add	r7, sp, #16
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	603b      	str	r3, [r7, #0]
 8005908:	1dbb      	adds	r3, r7, #6
 800590a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800590c:	1dbb      	adds	r3, r7, #6
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	0018      	movs	r0, r3
 8005914:	f000 fee4 	bl	80066e0 <pvPortMalloc>
 8005918:	0003      	movs	r3, r0
 800591a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d010      	beq.n	8005944 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005922:	2054      	movs	r0, #84	; 0x54
 8005924:	f000 fedc 	bl	80066e0 <pvPortMalloc>
 8005928:	0003      	movs	r3, r0
 800592a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	631a      	str	r2, [r3, #48]	; 0x30
 8005938:	e006      	b.n	8005948 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	0018      	movs	r0, r3
 800593e:	f000 ff75 	bl	800682c <vPortFree>
 8005942:	e001      	b.n	8005948 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005944:	2300      	movs	r3, #0
 8005946:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d01a      	beq.n	8005984 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	2251      	movs	r2, #81	; 0x51
 8005952:	2100      	movs	r1, #0
 8005954:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005956:	1dbb      	adds	r3, r7, #6
 8005958:	881a      	ldrh	r2, [r3, #0]
 800595a:	683c      	ldr	r4, [r7, #0]
 800595c:	68b9      	ldr	r1, [r7, #8]
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	2300      	movs	r3, #0
 8005962:	9303      	str	r3, [sp, #12]
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	9302      	str	r3, [sp, #8]
 8005968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596a:	9301      	str	r3, [sp, #4]
 800596c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	0023      	movs	r3, r4
 8005972:	f000 f80f 	bl	8005994 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	0018      	movs	r0, r3
 800597a:	f000 f88d 	bl	8005a98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800597e:	2301      	movs	r3, #1
 8005980:	61bb      	str	r3, [r7, #24]
 8005982:	e002      	b.n	800598a <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005984:	2301      	movs	r3, #1
 8005986:	425b      	negs	r3, r3
 8005988:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800598a:	69bb      	ldr	r3, [r7, #24]
	}
 800598c:	0018      	movs	r0, r3
 800598e:	46bd      	mov	sp, r7
 8005990:	b009      	add	sp, #36	; 0x24
 8005992:	bd90      	pop	{r4, r7, pc}

08005994 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80059a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	493a      	ldr	r1, [pc, #232]	; (8005a94 <prvInitialiseNewTask+0x100>)
 80059aa:	468c      	mov	ip, r1
 80059ac:	4463      	add	r3, ip
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	18d3      	adds	r3, r2, r3
 80059b2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	2207      	movs	r2, #7
 80059b8:	4393      	bics	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	2207      	movs	r2, #7
 80059c0:	4013      	ands	r3, r2
 80059c2:	d001      	beq.n	80059c8 <prvInitialiseNewTask+0x34>
 80059c4:	b672      	cpsid	i
 80059c6:	e7fe      	b.n	80059c6 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d020      	beq.n	8005a10 <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059ce:	2300      	movs	r3, #0
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	e013      	b.n	80059fc <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	18d3      	adds	r3, r2, r3
 80059da:	7818      	ldrb	r0, [r3, #0]
 80059dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059de:	2134      	movs	r1, #52	; 0x34
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	18d3      	adds	r3, r2, r3
 80059e4:	185b      	adds	r3, r3, r1
 80059e6:	1c02      	adds	r2, r0, #0
 80059e8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	18d3      	adds	r3, r2, r3
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d006      	beq.n	8005a04 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	3301      	adds	r3, #1
 80059fa:	617b      	str	r3, [r7, #20]
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	2b0f      	cmp	r3, #15
 8005a00:	d9e8      	bls.n	80059d4 <prvInitialiseNewTask+0x40>
 8005a02:	e000      	b.n	8005a06 <prvInitialiseNewTask+0x72>
			{
				break;
 8005a04:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a08:	2243      	movs	r2, #67	; 0x43
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	5499      	strb	r1, [r3, r2]
 8005a0e:	e003      	b.n	8005a18 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a12:	2234      	movs	r2, #52	; 0x34
 8005a14:	2100      	movs	r1, #0
 8005a16:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	2b06      	cmp	r3, #6
 8005a1c:	d901      	bls.n	8005a22 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a1e:	2306      	movs	r3, #6
 8005a20:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a24:	6a3a      	ldr	r2, [r7, #32]
 8005a26:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	6a3a      	ldr	r2, [r7, #32]
 8005a2c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a30:	2200      	movs	r2, #0
 8005a32:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a36:	3304      	adds	r3, #4
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f7ff fc3d 	bl	80052b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a40:	3318      	adds	r3, #24
 8005a42:	0018      	movs	r0, r3
 8005a44:	f7ff fc38 	bl	80052b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	2207      	movs	r2, #7
 8005a52:	1ad2      	subs	r2, r2, r3
 8005a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a5c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	2200      	movs	r2, #0
 8005a62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a66:	2250      	movs	r2, #80	; 0x50
 8005a68:	2100      	movs	r1, #0
 8005a6a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	68f9      	ldr	r1, [r7, #12]
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	0018      	movs	r0, r3
 8005a74:	f000 fcfe 	bl	8006474 <pxPortInitialiseStack>
 8005a78:	0002      	movs	r2, r0
 8005a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a8a:	46c0      	nop			; (mov r8, r8)
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	b006      	add	sp, #24
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	46c0      	nop			; (mov r8, r8)
 8005a94:	3fffffff 	.word	0x3fffffff

08005a98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005aa0:	f000 fd86 	bl	80065b0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005aa4:	4b28      	ldr	r3, [pc, #160]	; (8005b48 <prvAddNewTaskToReadyList+0xb0>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	4b27      	ldr	r3, [pc, #156]	; (8005b48 <prvAddNewTaskToReadyList+0xb0>)
 8005aac:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005aae:	4b27      	ldr	r3, [pc, #156]	; (8005b4c <prvAddNewTaskToReadyList+0xb4>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d109      	bne.n	8005aca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ab6:	4b25      	ldr	r3, [pc, #148]	; (8005b4c <prvAddNewTaskToReadyList+0xb4>)
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005abc:	4b22      	ldr	r3, [pc, #136]	; (8005b48 <prvAddNewTaskToReadyList+0xb0>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d110      	bne.n	8005ae6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ac4:	f000 fb52 	bl	800616c <prvInitialiseTaskLists>
 8005ac8:	e00d      	b.n	8005ae6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005aca:	4b21      	ldr	r3, [pc, #132]	; (8005b50 <prvAddNewTaskToReadyList+0xb8>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d109      	bne.n	8005ae6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ad2:	4b1e      	ldr	r3, [pc, #120]	; (8005b4c <prvAddNewTaskToReadyList+0xb4>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d802      	bhi.n	8005ae6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ae0:	4b1a      	ldr	r3, [pc, #104]	; (8005b4c <prvAddNewTaskToReadyList+0xb4>)
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ae6:	4b1b      	ldr	r3, [pc, #108]	; (8005b54 <prvAddNewTaskToReadyList+0xbc>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	4b19      	ldr	r3, [pc, #100]	; (8005b54 <prvAddNewTaskToReadyList+0xbc>)
 8005aee:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af4:	4b18      	ldr	r3, [pc, #96]	; (8005b58 <prvAddNewTaskToReadyList+0xc0>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d903      	bls.n	8005b04 <prvAddNewTaskToReadyList+0x6c>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b00:	4b15      	ldr	r3, [pc, #84]	; (8005b58 <prvAddNewTaskToReadyList+0xc0>)
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b08:	0013      	movs	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	189b      	adds	r3, r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4a12      	ldr	r2, [pc, #72]	; (8005b5c <prvAddNewTaskToReadyList+0xc4>)
 8005b12:	189a      	adds	r2, r3, r2
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3304      	adds	r3, #4
 8005b18:	0019      	movs	r1, r3
 8005b1a:	0010      	movs	r0, r2
 8005b1c:	f7ff fbd7 	bl	80052ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b20:	f000 fd58 	bl	80065d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b24:	4b0a      	ldr	r3, [pc, #40]	; (8005b50 <prvAddNewTaskToReadyList+0xb8>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d008      	beq.n	8005b3e <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b2c:	4b07      	ldr	r3, [pc, #28]	; (8005b4c <prvAddNewTaskToReadyList+0xb4>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d201      	bcs.n	8005b3e <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b3a:	f000 fd29 	bl	8006590 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b3e:	46c0      	nop			; (mov r8, r8)
 8005b40:	46bd      	mov	sp, r7
 8005b42:	b002      	add	sp, #8
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	46c0      	nop			; (mov r8, r8)
 8005b48:	200005ec 	.word	0x200005ec
 8005b4c:	200004ec 	.word	0x200004ec
 8005b50:	200005f8 	.word	0x200005f8
 8005b54:	20000608 	.word	0x20000608
 8005b58:	200005f4 	.word	0x200005f4
 8005b5c:	200004f0 	.word	0x200004f0

08005b60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d010      	beq.n	8005b94 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b72:	4b0d      	ldr	r3, [pc, #52]	; (8005ba8 <vTaskDelay+0x48>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <vTaskDelay+0x1e>
 8005b7a:	b672      	cpsid	i
 8005b7c:	e7fe      	b.n	8005b7c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005b7e:	f000 f863 	bl	8005c48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2100      	movs	r1, #0
 8005b86:	0018      	movs	r0, r3
 8005b88:	f000 fc20 	bl	80063cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b8c:	f000 f868 	bl	8005c60 <xTaskResumeAll>
 8005b90:	0003      	movs	r3, r0
 8005b92:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8005b9a:	f000 fcf9 	bl	8006590 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b9e:	46c0      	nop			; (mov r8, r8)
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	b004      	add	sp, #16
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	46c0      	nop			; (mov r8, r8)
 8005ba8:	20000614 	.word	0x20000614

08005bac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005bac:	b590      	push	{r4, r7, lr}
 8005bae:	b089      	sub	sp, #36	; 0x24
 8005bb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005bba:	003a      	movs	r2, r7
 8005bbc:	1d39      	adds	r1, r7, #4
 8005bbe:	2308      	movs	r3, #8
 8005bc0:	18fb      	adds	r3, r7, r3
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	f7fb fbfa 	bl	80013bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005bc8:	683c      	ldr	r4, [r7, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	4918      	ldr	r1, [pc, #96]	; (8005c30 <vTaskStartScheduler+0x84>)
 8005bd0:	4818      	ldr	r0, [pc, #96]	; (8005c34 <vTaskStartScheduler+0x88>)
 8005bd2:	9202      	str	r2, [sp, #8]
 8005bd4:	9301      	str	r3, [sp, #4]
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	2300      	movs	r3, #0
 8005bdc:	0022      	movs	r2, r4
 8005bde:	f7ff fe49 	bl	8005874 <xTaskCreateStatic>
 8005be2:	0002      	movs	r2, r0
 8005be4:	4b14      	ldr	r3, [pc, #80]	; (8005c38 <vTaskStartScheduler+0x8c>)
 8005be6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005be8:	4b13      	ldr	r3, [pc, #76]	; (8005c38 <vTaskStartScheduler+0x8c>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d002      	beq.n	8005bf6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	e001      	b.n	8005bfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d10d      	bne.n	8005c1c <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8005c00:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c02:	4b0e      	ldr	r3, [pc, #56]	; (8005c3c <vTaskStartScheduler+0x90>)
 8005c04:	2201      	movs	r2, #1
 8005c06:	4252      	negs	r2, r2
 8005c08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c0a:	4b0d      	ldr	r3, [pc, #52]	; (8005c40 <vTaskStartScheduler+0x94>)
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c10:	4b0c      	ldr	r3, [pc, #48]	; (8005c44 <vTaskStartScheduler+0x98>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c16:	f000 fc97 	bl	8006548 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c1a:	e004      	b.n	8005c26 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	d101      	bne.n	8005c26 <vTaskStartScheduler+0x7a>
 8005c22:	b672      	cpsid	i
 8005c24:	e7fe      	b.n	8005c24 <vTaskStartScheduler+0x78>
}
 8005c26:	46c0      	nop			; (mov r8, r8)
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	b005      	add	sp, #20
 8005c2c:	bd90      	pop	{r4, r7, pc}
 8005c2e:	46c0      	nop			; (mov r8, r8)
 8005c30:	08006b00 	.word	0x08006b00
 8005c34:	0800614d 	.word	0x0800614d
 8005c38:	20000610 	.word	0x20000610
 8005c3c:	2000060c 	.word	0x2000060c
 8005c40:	200005f8 	.word	0x200005f8
 8005c44:	200005f0 	.word	0x200005f0

08005c48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005c4c:	4b03      	ldr	r3, [pc, #12]	; (8005c5c <vTaskSuspendAll+0x14>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	1c5a      	adds	r2, r3, #1
 8005c52:	4b02      	ldr	r3, [pc, #8]	; (8005c5c <vTaskSuspendAll+0x14>)
 8005c54:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	20000614 	.word	0x20000614

08005c60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c6e:	4b3a      	ldr	r3, [pc, #232]	; (8005d58 <xTaskResumeAll+0xf8>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <xTaskResumeAll+0x1a>
 8005c76:	b672      	cpsid	i
 8005c78:	e7fe      	b.n	8005c78 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c7a:	f000 fc99 	bl	80065b0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c7e:	4b36      	ldr	r3, [pc, #216]	; (8005d58 <xTaskResumeAll+0xf8>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	1e5a      	subs	r2, r3, #1
 8005c84:	4b34      	ldr	r3, [pc, #208]	; (8005d58 <xTaskResumeAll+0xf8>)
 8005c86:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c88:	4b33      	ldr	r3, [pc, #204]	; (8005d58 <xTaskResumeAll+0xf8>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d15b      	bne.n	8005d48 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c90:	4b32      	ldr	r3, [pc, #200]	; (8005d5c <xTaskResumeAll+0xfc>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d057      	beq.n	8005d48 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c98:	e02f      	b.n	8005cfa <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c9a:	4b31      	ldr	r3, [pc, #196]	; (8005d60 <xTaskResumeAll+0x100>)
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3318      	adds	r3, #24
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	f7ff fb69 	bl	800537e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	3304      	adds	r3, #4
 8005cb0:	0018      	movs	r0, r3
 8005cb2:	f7ff fb64 	bl	800537e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cba:	4b2a      	ldr	r3, [pc, #168]	; (8005d64 <xTaskResumeAll+0x104>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d903      	bls.n	8005cca <xTaskResumeAll+0x6a>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc6:	4b27      	ldr	r3, [pc, #156]	; (8005d64 <xTaskResumeAll+0x104>)
 8005cc8:	601a      	str	r2, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cce:	0013      	movs	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	189b      	adds	r3, r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4a24      	ldr	r2, [pc, #144]	; (8005d68 <xTaskResumeAll+0x108>)
 8005cd8:	189a      	adds	r2, r3, r2
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	0019      	movs	r1, r3
 8005ce0:	0010      	movs	r0, r2
 8005ce2:	f7ff faf4 	bl	80052ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cea:	4b20      	ldr	r3, [pc, #128]	; (8005d6c <xTaskResumeAll+0x10c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d302      	bcc.n	8005cfa <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8005cf4:	4b1e      	ldr	r3, [pc, #120]	; (8005d70 <xTaskResumeAll+0x110>)
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cfa:	4b19      	ldr	r3, [pc, #100]	; (8005d60 <xTaskResumeAll+0x100>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1cb      	bne.n	8005c9a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d08:	f000 faca 	bl	80062a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005d0c:	4b19      	ldr	r3, [pc, #100]	; (8005d74 <xTaskResumeAll+0x114>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00f      	beq.n	8005d38 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d18:	f000 f82e 	bl	8005d78 <xTaskIncrementTick>
 8005d1c:	1e03      	subs	r3, r0, #0
 8005d1e:	d002      	beq.n	8005d26 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8005d20:	4b13      	ldr	r3, [pc, #76]	; (8005d70 <xTaskResumeAll+0x110>)
 8005d22:	2201      	movs	r2, #1
 8005d24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1f2      	bne.n	8005d18 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8005d32:	4b10      	ldr	r3, [pc, #64]	; (8005d74 <xTaskResumeAll+0x114>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d38:	4b0d      	ldr	r3, [pc, #52]	; (8005d70 <xTaskResumeAll+0x110>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d40:	2301      	movs	r3, #1
 8005d42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d44:	f000 fc24 	bl	8006590 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d48:	f000 fc44 	bl	80065d4 <vPortExitCritical>

	return xAlreadyYielded;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
}
 8005d4e:	0018      	movs	r0, r3
 8005d50:	46bd      	mov	sp, r7
 8005d52:	b004      	add	sp, #16
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	46c0      	nop			; (mov r8, r8)
 8005d58:	20000614 	.word	0x20000614
 8005d5c:	200005ec 	.word	0x200005ec
 8005d60:	200005ac 	.word	0x200005ac
 8005d64:	200005f4 	.word	0x200005f4
 8005d68:	200004f0 	.word	0x200004f0
 8005d6c:	200004ec 	.word	0x200004ec
 8005d70:	20000600 	.word	0x20000600
 8005d74:	200005fc 	.word	0x200005fc

08005d78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d82:	4b4a      	ldr	r3, [pc, #296]	; (8005eac <xTaskIncrementTick+0x134>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d000      	beq.n	8005d8c <xTaskIncrementTick+0x14>
 8005d8a:	e07e      	b.n	8005e8a <xTaskIncrementTick+0x112>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d8c:	4b48      	ldr	r3, [pc, #288]	; (8005eb0 <xTaskIncrementTick+0x138>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3301      	adds	r3, #1
 8005d92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d94:	4b46      	ldr	r3, [pc, #280]	; (8005eb0 <xTaskIncrementTick+0x138>)
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d117      	bne.n	8005dd0 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8005da0:	4b44      	ldr	r3, [pc, #272]	; (8005eb4 <xTaskIncrementTick+0x13c>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <xTaskIncrementTick+0x36>
 8005daa:	b672      	cpsid	i
 8005dac:	e7fe      	b.n	8005dac <xTaskIncrementTick+0x34>
 8005dae:	4b41      	ldr	r3, [pc, #260]	; (8005eb4 <xTaskIncrementTick+0x13c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	4b40      	ldr	r3, [pc, #256]	; (8005eb8 <xTaskIncrementTick+0x140>)
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	4b3e      	ldr	r3, [pc, #248]	; (8005eb4 <xTaskIncrementTick+0x13c>)
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	4b3e      	ldr	r3, [pc, #248]	; (8005eb8 <xTaskIncrementTick+0x140>)
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	4b3e      	ldr	r3, [pc, #248]	; (8005ebc <xTaskIncrementTick+0x144>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	4b3c      	ldr	r3, [pc, #240]	; (8005ebc <xTaskIncrementTick+0x144>)
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	f000 fa68 	bl	80062a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005dd0:	4b3b      	ldr	r3, [pc, #236]	; (8005ec0 <xTaskIncrementTick+0x148>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d349      	bcc.n	8005e6e <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dda:	4b36      	ldr	r3, [pc, #216]	; (8005eb4 <xTaskIncrementTick+0x13c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d104      	bne.n	8005dee <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005de4:	4b36      	ldr	r3, [pc, #216]	; (8005ec0 <xTaskIncrementTick+0x148>)
 8005de6:	2201      	movs	r2, #1
 8005de8:	4252      	negs	r2, r2
 8005dea:	601a      	str	r2, [r3, #0]
					break;
 8005dec:	e03f      	b.n	8005e6e <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dee:	4b31      	ldr	r3, [pc, #196]	; (8005eb4 <xTaskIncrementTick+0x13c>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d203      	bcs.n	8005e0e <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e06:	4b2e      	ldr	r3, [pc, #184]	; (8005ec0 <xTaskIncrementTick+0x148>)
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e0c:	e02f      	b.n	8005e6e <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	3304      	adds	r3, #4
 8005e12:	0018      	movs	r0, r3
 8005e14:	f7ff fab3 	bl	800537e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d004      	beq.n	8005e2a <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	3318      	adds	r3, #24
 8005e24:	0018      	movs	r0, r3
 8005e26:	f7ff faaa 	bl	800537e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2e:	4b25      	ldr	r3, [pc, #148]	; (8005ec4 <xTaskIncrementTick+0x14c>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d903      	bls.n	8005e3e <xTaskIncrementTick+0xc6>
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e3a:	4b22      	ldr	r3, [pc, #136]	; (8005ec4 <xTaskIncrementTick+0x14c>)
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e42:	0013      	movs	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	189b      	adds	r3, r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4a1f      	ldr	r2, [pc, #124]	; (8005ec8 <xTaskIncrementTick+0x150>)
 8005e4c:	189a      	adds	r2, r3, r2
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	3304      	adds	r3, #4
 8005e52:	0019      	movs	r1, r3
 8005e54:	0010      	movs	r0, r2
 8005e56:	f7ff fa3a 	bl	80052ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5e:	4b1b      	ldr	r3, [pc, #108]	; (8005ecc <xTaskIncrementTick+0x154>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d3b8      	bcc.n	8005dda <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e6c:	e7b5      	b.n	8005dda <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e6e:	4b17      	ldr	r3, [pc, #92]	; (8005ecc <xTaskIncrementTick+0x154>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e74:	4914      	ldr	r1, [pc, #80]	; (8005ec8 <xTaskIncrementTick+0x150>)
 8005e76:	0013      	movs	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	189b      	adds	r3, r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	585b      	ldr	r3, [r3, r1]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d907      	bls.n	8005e94 <xTaskIncrementTick+0x11c>
			{
				xSwitchRequired = pdTRUE;
 8005e84:	2301      	movs	r3, #1
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	e004      	b.n	8005e94 <xTaskIncrementTick+0x11c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005e8a:	4b11      	ldr	r3, [pc, #68]	; (8005ed0 <xTaskIncrementTick+0x158>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	4b0f      	ldr	r3, [pc, #60]	; (8005ed0 <xTaskIncrementTick+0x158>)
 8005e92:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005e94:	4b0f      	ldr	r3, [pc, #60]	; (8005ed4 <xTaskIncrementTick+0x15c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <xTaskIncrementTick+0x128>
		{
			xSwitchRequired = pdTRUE;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005ea0:	697b      	ldr	r3, [r7, #20]
}
 8005ea2:	0018      	movs	r0, r3
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	b006      	add	sp, #24
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	46c0      	nop			; (mov r8, r8)
 8005eac:	20000614 	.word	0x20000614
 8005eb0:	200005f0 	.word	0x200005f0
 8005eb4:	200005a4 	.word	0x200005a4
 8005eb8:	200005a8 	.word	0x200005a8
 8005ebc:	20000604 	.word	0x20000604
 8005ec0:	2000060c 	.word	0x2000060c
 8005ec4:	200005f4 	.word	0x200005f4
 8005ec8:	200004f0 	.word	0x200004f0
 8005ecc:	200004ec 	.word	0x200004ec
 8005ed0:	200005fc 	.word	0x200005fc
 8005ed4:	20000600 	.word	0x20000600

08005ed8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ede:	4b22      	ldr	r3, [pc, #136]	; (8005f68 <vTaskSwitchContext+0x90>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ee6:	4b21      	ldr	r3, [pc, #132]	; (8005f6c <vTaskSwitchContext+0x94>)
 8005ee8:	2201      	movs	r2, #1
 8005eea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005eec:	e037      	b.n	8005f5e <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8005eee:	4b1f      	ldr	r3, [pc, #124]	; (8005f6c <vTaskSwitchContext+0x94>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ef4:	4b1e      	ldr	r3, [pc, #120]	; (8005f70 <vTaskSwitchContext+0x98>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	607b      	str	r3, [r7, #4]
 8005efa:	e007      	b.n	8005f0c <vTaskSwitchContext+0x34>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <vTaskSwitchContext+0x2e>
 8005f02:	b672      	cpsid	i
 8005f04:	e7fe      	b.n	8005f04 <vTaskSwitchContext+0x2c>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	607b      	str	r3, [r7, #4]
 8005f0c:	4919      	ldr	r1, [pc, #100]	; (8005f74 <vTaskSwitchContext+0x9c>)
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	0013      	movs	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	189b      	adds	r3, r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	585b      	ldr	r3, [r3, r1]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d0ee      	beq.n	8005efc <vTaskSwitchContext+0x24>
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	0013      	movs	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	189b      	adds	r3, r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4a12      	ldr	r2, [pc, #72]	; (8005f74 <vTaskSwitchContext+0x9c>)
 8005f2a:	189b      	adds	r3, r3, r2
 8005f2c:	603b      	str	r3, [r7, #0]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	605a      	str	r2, [r3, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	3308      	adds	r3, #8
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d104      	bne.n	8005f4e <vTaskSwitchContext+0x76>
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	605a      	str	r2, [r3, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	68da      	ldr	r2, [r3, #12]
 8005f54:	4b08      	ldr	r3, [pc, #32]	; (8005f78 <vTaskSwitchContext+0xa0>)
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	4b05      	ldr	r3, [pc, #20]	; (8005f70 <vTaskSwitchContext+0x98>)
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	601a      	str	r2, [r3, #0]
}
 8005f5e:	46c0      	nop			; (mov r8, r8)
 8005f60:	46bd      	mov	sp, r7
 8005f62:	b002      	add	sp, #8
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	46c0      	nop			; (mov r8, r8)
 8005f68:	20000614 	.word	0x20000614
 8005f6c:	20000600 	.word	0x20000600
 8005f70:	200005f4 	.word	0x200005f4
 8005f74:	200004f0 	.word	0x200004f0
 8005f78:	200004ec 	.word	0x200004ec

08005f7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <vTaskPlaceOnEventList+0x14>
 8005f8c:	b672      	cpsid	i
 8005f8e:	e7fe      	b.n	8005f8e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f90:	4b08      	ldr	r3, [pc, #32]	; (8005fb4 <vTaskPlaceOnEventList+0x38>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3318      	adds	r3, #24
 8005f96:	001a      	movs	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	0011      	movs	r1, r2
 8005f9c:	0018      	movs	r0, r3
 8005f9e:	f7ff f9b8 	bl	8005312 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	f000 fa10 	bl	80063cc <prvAddCurrentTaskToDelayedList>
}
 8005fac:	46c0      	nop			; (mov r8, r8)
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	b002      	add	sp, #8
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	200004ec 	.word	0x200004ec

08005fb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <xTaskRemoveFromEventList+0x1a>
 8005fce:	b672      	cpsid	i
 8005fd0:	e7fe      	b.n	8005fd0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	3318      	adds	r3, #24
 8005fd6:	0018      	movs	r0, r3
 8005fd8:	f7ff f9d1 	bl	800537e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fdc:	4b1e      	ldr	r3, [pc, #120]	; (8006058 <xTaskRemoveFromEventList+0xa0>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d11d      	bne.n	8006020 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	0018      	movs	r0, r3
 8005fea:	f7ff f9c8 	bl	800537e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff2:	4b1a      	ldr	r3, [pc, #104]	; (800605c <xTaskRemoveFromEventList+0xa4>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d903      	bls.n	8006002 <xTaskRemoveFromEventList+0x4a>
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffe:	4b17      	ldr	r3, [pc, #92]	; (800605c <xTaskRemoveFromEventList+0xa4>)
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006006:	0013      	movs	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	189b      	adds	r3, r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4a14      	ldr	r2, [pc, #80]	; (8006060 <xTaskRemoveFromEventList+0xa8>)
 8006010:	189a      	adds	r2, r3, r2
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	3304      	adds	r3, #4
 8006016:	0019      	movs	r1, r3
 8006018:	0010      	movs	r0, r2
 800601a:	f7ff f958 	bl	80052ce <vListInsertEnd>
 800601e:	e007      	b.n	8006030 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	3318      	adds	r3, #24
 8006024:	001a      	movs	r2, r3
 8006026:	4b0f      	ldr	r3, [pc, #60]	; (8006064 <xTaskRemoveFromEventList+0xac>)
 8006028:	0011      	movs	r1, r2
 800602a:	0018      	movs	r0, r3
 800602c:	f7ff f94f 	bl	80052ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006034:	4b0c      	ldr	r3, [pc, #48]	; (8006068 <xTaskRemoveFromEventList+0xb0>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603a:	429a      	cmp	r2, r3
 800603c:	d905      	bls.n	800604a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800603e:	2301      	movs	r3, #1
 8006040:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006042:	4b0a      	ldr	r3, [pc, #40]	; (800606c <xTaskRemoveFromEventList+0xb4>)
 8006044:	2201      	movs	r2, #1
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	e001      	b.n	800604e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800604a:	2300      	movs	r3, #0
 800604c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800604e:	68fb      	ldr	r3, [r7, #12]
}
 8006050:	0018      	movs	r0, r3
 8006052:	46bd      	mov	sp, r7
 8006054:	b004      	add	sp, #16
 8006056:	bd80      	pop	{r7, pc}
 8006058:	20000614 	.word	0x20000614
 800605c:	200005f4 	.word	0x200005f4
 8006060:	200004f0 	.word	0x200004f0
 8006064:	200005ac 	.word	0x200005ac
 8006068:	200004ec 	.word	0x200004ec
 800606c:	20000600 	.word	0x20000600

08006070 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006078:	4b05      	ldr	r3, [pc, #20]	; (8006090 <vTaskInternalSetTimeOutState+0x20>)
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006080:	4b04      	ldr	r3, [pc, #16]	; (8006094 <vTaskInternalSetTimeOutState+0x24>)
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	605a      	str	r2, [r3, #4]
}
 8006088:	46c0      	nop			; (mov r8, r8)
 800608a:	46bd      	mov	sp, r7
 800608c:	b002      	add	sp, #8
 800608e:	bd80      	pop	{r7, pc}
 8006090:	20000604 	.word	0x20000604
 8006094:	200005f0 	.word	0x200005f0

08006098 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <xTaskCheckForTimeOut+0x14>
 80060a8:	b672      	cpsid	i
 80060aa:	e7fe      	b.n	80060aa <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <xTaskCheckForTimeOut+0x1e>
 80060b2:	b672      	cpsid	i
 80060b4:	e7fe      	b.n	80060b4 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80060b6:	f000 fa7b 	bl	80065b0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80060ba:	4b1d      	ldr	r3, [pc, #116]	; (8006130 <xTaskCheckForTimeOut+0x98>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3301      	adds	r3, #1
 80060d0:	d102      	bne.n	80060d8 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80060d2:	2300      	movs	r3, #0
 80060d4:	617b      	str	r3, [r7, #20]
 80060d6:	e024      	b.n	8006122 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	4b15      	ldr	r3, [pc, #84]	; (8006134 <xTaskCheckForTimeOut+0x9c>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d007      	beq.n	80060f4 <xTaskCheckForTimeOut+0x5c>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d302      	bcc.n	80060f4 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80060ee:	2301      	movs	r3, #1
 80060f0:	617b      	str	r3, [r7, #20]
 80060f2:	e016      	b.n	8006122 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d20c      	bcs.n	8006118 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	1ad2      	subs	r2, r2, r3
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	0018      	movs	r0, r3
 800610e:	f7ff ffaf 	bl	8006070 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006112:	2300      	movs	r3, #0
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	e004      	b.n	8006122 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2200      	movs	r2, #0
 800611c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800611e:	2301      	movs	r3, #1
 8006120:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8006122:	f000 fa57 	bl	80065d4 <vPortExitCritical>

	return xReturn;
 8006126:	697b      	ldr	r3, [r7, #20]
}
 8006128:	0018      	movs	r0, r3
 800612a:	46bd      	mov	sp, r7
 800612c:	b006      	add	sp, #24
 800612e:	bd80      	pop	{r7, pc}
 8006130:	200005f0 	.word	0x200005f0
 8006134:	20000604 	.word	0x20000604

08006138 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800613c:	4b02      	ldr	r3, [pc, #8]	; (8006148 <vTaskMissedYield+0x10>)
 800613e:	2201      	movs	r2, #1
 8006140:	601a      	str	r2, [r3, #0]
}
 8006142:	46c0      	nop			; (mov r8, r8)
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	20000600 	.word	0x20000600

0800614c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006154:	f000 f84e 	bl	80061f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006158:	4b03      	ldr	r3, [pc, #12]	; (8006168 <prvIdleTask+0x1c>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d9f9      	bls.n	8006154 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006160:	f000 fa16 	bl	8006590 <vPortYield>
		prvCheckTasksWaitingTermination();
 8006164:	e7f6      	b.n	8006154 <prvIdleTask+0x8>
 8006166:	46c0      	nop			; (mov r8, r8)
 8006168:	200004f0 	.word	0x200004f0

0800616c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006172:	2300      	movs	r3, #0
 8006174:	607b      	str	r3, [r7, #4]
 8006176:	e00c      	b.n	8006192 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	0013      	movs	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	189b      	adds	r3, r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4a14      	ldr	r2, [pc, #80]	; (80061d4 <prvInitialiseTaskLists+0x68>)
 8006184:	189b      	adds	r3, r3, r2
 8006186:	0018      	movs	r0, r3
 8006188:	f7ff f878 	bl	800527c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3301      	adds	r3, #1
 8006190:	607b      	str	r3, [r7, #4]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b06      	cmp	r3, #6
 8006196:	d9ef      	bls.n	8006178 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006198:	4b0f      	ldr	r3, [pc, #60]	; (80061d8 <prvInitialiseTaskLists+0x6c>)
 800619a:	0018      	movs	r0, r3
 800619c:	f7ff f86e 	bl	800527c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061a0:	4b0e      	ldr	r3, [pc, #56]	; (80061dc <prvInitialiseTaskLists+0x70>)
 80061a2:	0018      	movs	r0, r3
 80061a4:	f7ff f86a 	bl	800527c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061a8:	4b0d      	ldr	r3, [pc, #52]	; (80061e0 <prvInitialiseTaskLists+0x74>)
 80061aa:	0018      	movs	r0, r3
 80061ac:	f7ff f866 	bl	800527c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061b0:	4b0c      	ldr	r3, [pc, #48]	; (80061e4 <prvInitialiseTaskLists+0x78>)
 80061b2:	0018      	movs	r0, r3
 80061b4:	f7ff f862 	bl	800527c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061b8:	4b0b      	ldr	r3, [pc, #44]	; (80061e8 <prvInitialiseTaskLists+0x7c>)
 80061ba:	0018      	movs	r0, r3
 80061bc:	f7ff f85e 	bl	800527c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061c0:	4b0a      	ldr	r3, [pc, #40]	; (80061ec <prvInitialiseTaskLists+0x80>)
 80061c2:	4a05      	ldr	r2, [pc, #20]	; (80061d8 <prvInitialiseTaskLists+0x6c>)
 80061c4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061c6:	4b0a      	ldr	r3, [pc, #40]	; (80061f0 <prvInitialiseTaskLists+0x84>)
 80061c8:	4a04      	ldr	r2, [pc, #16]	; (80061dc <prvInitialiseTaskLists+0x70>)
 80061ca:	601a      	str	r2, [r3, #0]
}
 80061cc:	46c0      	nop			; (mov r8, r8)
 80061ce:	46bd      	mov	sp, r7
 80061d0:	b002      	add	sp, #8
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	200004f0 	.word	0x200004f0
 80061d8:	2000057c 	.word	0x2000057c
 80061dc:	20000590 	.word	0x20000590
 80061e0:	200005ac 	.word	0x200005ac
 80061e4:	200005c0 	.word	0x200005c0
 80061e8:	200005d8 	.word	0x200005d8
 80061ec:	200005a4 	.word	0x200005a4
 80061f0:	200005a8 	.word	0x200005a8

080061f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061fa:	e01a      	b.n	8006232 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80061fc:	f000 f9d8 	bl	80065b0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006200:	4b10      	ldr	r3, [pc, #64]	; (8006244 <prvCheckTasksWaitingTermination+0x50>)
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3304      	adds	r3, #4
 800620c:	0018      	movs	r0, r3
 800620e:	f7ff f8b6 	bl	800537e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006212:	4b0d      	ldr	r3, [pc, #52]	; (8006248 <prvCheckTasksWaitingTermination+0x54>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	1e5a      	subs	r2, r3, #1
 8006218:	4b0b      	ldr	r3, [pc, #44]	; (8006248 <prvCheckTasksWaitingTermination+0x54>)
 800621a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800621c:	4b0b      	ldr	r3, [pc, #44]	; (800624c <prvCheckTasksWaitingTermination+0x58>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	1e5a      	subs	r2, r3, #1
 8006222:	4b0a      	ldr	r3, [pc, #40]	; (800624c <prvCheckTasksWaitingTermination+0x58>)
 8006224:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8006226:	f000 f9d5 	bl	80065d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	0018      	movs	r0, r3
 800622e:	f000 f80f 	bl	8006250 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006232:	4b06      	ldr	r3, [pc, #24]	; (800624c <prvCheckTasksWaitingTermination+0x58>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1e0      	bne.n	80061fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800623a:	46c0      	nop			; (mov r8, r8)
 800623c:	46c0      	nop			; (mov r8, r8)
 800623e:	46bd      	mov	sp, r7
 8006240:	b002      	add	sp, #8
 8006242:	bd80      	pop	{r7, pc}
 8006244:	200005c0 	.word	0x200005c0
 8006248:	200005ec 	.word	0x200005ec
 800624c:	200005d4 	.word	0x200005d4

08006250 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2251      	movs	r2, #81	; 0x51
 800625c:	5c9b      	ldrb	r3, [r3, r2]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d109      	bne.n	8006276 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006266:	0018      	movs	r0, r3
 8006268:	f000 fae0 	bl	800682c <vPortFree>
				vPortFree( pxTCB );
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	0018      	movs	r0, r3
 8006270:	f000 fadc 	bl	800682c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006274:	e010      	b.n	8006298 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2251      	movs	r2, #81	; 0x51
 800627a:	5c9b      	ldrb	r3, [r3, r2]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d104      	bne.n	800628a <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	0018      	movs	r0, r3
 8006284:	f000 fad2 	bl	800682c <vPortFree>
	}
 8006288:	e006      	b.n	8006298 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2251      	movs	r2, #81	; 0x51
 800628e:	5c9b      	ldrb	r3, [r3, r2]
 8006290:	2b02      	cmp	r3, #2
 8006292:	d001      	beq.n	8006298 <prvDeleteTCB+0x48>
 8006294:	b672      	cpsid	i
 8006296:	e7fe      	b.n	8006296 <prvDeleteTCB+0x46>
	}
 8006298:	46c0      	nop			; (mov r8, r8)
 800629a:	46bd      	mov	sp, r7
 800629c:	b002      	add	sp, #8
 800629e:	bd80      	pop	{r7, pc}

080062a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062a6:	4b0b      	ldr	r3, [pc, #44]	; (80062d4 <prvResetNextTaskUnblockTime+0x34>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d104      	bne.n	80062ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80062b0:	4b09      	ldr	r3, [pc, #36]	; (80062d8 <prvResetNextTaskUnblockTime+0x38>)
 80062b2:	2201      	movs	r2, #1
 80062b4:	4252      	negs	r2, r2
 80062b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80062b8:	e008      	b.n	80062cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062ba:	4b06      	ldr	r3, [pc, #24]	; (80062d4 <prvResetNextTaskUnblockTime+0x34>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	4b03      	ldr	r3, [pc, #12]	; (80062d8 <prvResetNextTaskUnblockTime+0x38>)
 80062ca:	601a      	str	r2, [r3, #0]
}
 80062cc:	46c0      	nop			; (mov r8, r8)
 80062ce:	46bd      	mov	sp, r7
 80062d0:	b002      	add	sp, #8
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	200005a4 	.word	0x200005a4
 80062d8:	2000060c 	.word	0x2000060c

080062dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80062e2:	4b0a      	ldr	r3, [pc, #40]	; (800630c <xTaskGetSchedulerState+0x30>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d102      	bne.n	80062f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80062ea:	2301      	movs	r3, #1
 80062ec:	607b      	str	r3, [r7, #4]
 80062ee:	e008      	b.n	8006302 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062f0:	4b07      	ldr	r3, [pc, #28]	; (8006310 <xTaskGetSchedulerState+0x34>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d102      	bne.n	80062fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062f8:	2302      	movs	r3, #2
 80062fa:	607b      	str	r3, [r7, #4]
 80062fc:	e001      	b.n	8006302 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062fe:	2300      	movs	r3, #0
 8006300:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006302:	687b      	ldr	r3, [r7, #4]
	}
 8006304:	0018      	movs	r0, r3
 8006306:	46bd      	mov	sp, r7
 8006308:	b002      	add	sp, #8
 800630a:	bd80      	pop	{r7, pc}
 800630c:	200005f8 	.word	0x200005f8
 8006310:	20000614 	.word	0x20000614

08006314 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006320:	2300      	movs	r3, #0
 8006322:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d044      	beq.n	80063b4 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800632a:	4b25      	ldr	r3, [pc, #148]	; (80063c0 <xTaskPriorityDisinherit+0xac>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	429a      	cmp	r2, r3
 8006332:	d001      	beq.n	8006338 <xTaskPriorityDisinherit+0x24>
 8006334:	b672      	cpsid	i
 8006336:	e7fe      	b.n	8006336 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <xTaskPriorityDisinherit+0x30>
 8006340:	b672      	cpsid	i
 8006342:	e7fe      	b.n	8006342 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006348:	1e5a      	subs	r2, r3, #1
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006356:	429a      	cmp	r2, r3
 8006358:	d02c      	beq.n	80063b4 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800635e:	2b00      	cmp	r3, #0
 8006360:	d128      	bne.n	80063b4 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	3304      	adds	r3, #4
 8006366:	0018      	movs	r0, r3
 8006368:	f7ff f809 	bl	800537e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006378:	2207      	movs	r2, #7
 800637a:	1ad2      	subs	r2, r2, r3
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006384:	4b0f      	ldr	r3, [pc, #60]	; (80063c4 <xTaskPriorityDisinherit+0xb0>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	429a      	cmp	r2, r3
 800638a:	d903      	bls.n	8006394 <xTaskPriorityDisinherit+0x80>
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006390:	4b0c      	ldr	r3, [pc, #48]	; (80063c4 <xTaskPriorityDisinherit+0xb0>)
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006398:	0013      	movs	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	189b      	adds	r3, r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4a09      	ldr	r2, [pc, #36]	; (80063c8 <xTaskPriorityDisinherit+0xb4>)
 80063a2:	189a      	adds	r2, r3, r2
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	3304      	adds	r3, #4
 80063a8:	0019      	movs	r1, r3
 80063aa:	0010      	movs	r0, r2
 80063ac:	f7fe ff8f 	bl	80052ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80063b0:	2301      	movs	r3, #1
 80063b2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063b4:	68fb      	ldr	r3, [r7, #12]
	}
 80063b6:	0018      	movs	r0, r3
 80063b8:	46bd      	mov	sp, r7
 80063ba:	b004      	add	sp, #16
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	46c0      	nop			; (mov r8, r8)
 80063c0:	200004ec 	.word	0x200004ec
 80063c4:	200005f4 	.word	0x200005f4
 80063c8:	200004f0 	.word	0x200004f0

080063cc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063d6:	4b21      	ldr	r3, [pc, #132]	; (800645c <prvAddCurrentTaskToDelayedList+0x90>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063dc:	4b20      	ldr	r3, [pc, #128]	; (8006460 <prvAddCurrentTaskToDelayedList+0x94>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3304      	adds	r3, #4
 80063e2:	0018      	movs	r0, r3
 80063e4:	f7fe ffcb 	bl	800537e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	3301      	adds	r3, #1
 80063ec:	d10b      	bne.n	8006406 <prvAddCurrentTaskToDelayedList+0x3a>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d008      	beq.n	8006406 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063f4:	4b1a      	ldr	r3, [pc, #104]	; (8006460 <prvAddCurrentTaskToDelayedList+0x94>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	1d1a      	adds	r2, r3, #4
 80063fa:	4b1a      	ldr	r3, [pc, #104]	; (8006464 <prvAddCurrentTaskToDelayedList+0x98>)
 80063fc:	0011      	movs	r1, r2
 80063fe:	0018      	movs	r0, r3
 8006400:	f7fe ff65 	bl	80052ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006404:	e026      	b.n	8006454 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	18d3      	adds	r3, r2, r3
 800640c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800640e:	4b14      	ldr	r3, [pc, #80]	; (8006460 <prvAddCurrentTaskToDelayedList+0x94>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	429a      	cmp	r2, r3
 800641c:	d209      	bcs.n	8006432 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800641e:	4b12      	ldr	r3, [pc, #72]	; (8006468 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	4b0f      	ldr	r3, [pc, #60]	; (8006460 <prvAddCurrentTaskToDelayedList+0x94>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3304      	adds	r3, #4
 8006428:	0019      	movs	r1, r3
 800642a:	0010      	movs	r0, r2
 800642c:	f7fe ff71 	bl	8005312 <vListInsert>
}
 8006430:	e010      	b.n	8006454 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006432:	4b0e      	ldr	r3, [pc, #56]	; (800646c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	4b0a      	ldr	r3, [pc, #40]	; (8006460 <prvAddCurrentTaskToDelayedList+0x94>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3304      	adds	r3, #4
 800643c:	0019      	movs	r1, r3
 800643e:	0010      	movs	r0, r2
 8006440:	f7fe ff67 	bl	8005312 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006444:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	429a      	cmp	r2, r3
 800644c:	d202      	bcs.n	8006454 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800644e:	4b08      	ldr	r3, [pc, #32]	; (8006470 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	601a      	str	r2, [r3, #0]
}
 8006454:	46c0      	nop			; (mov r8, r8)
 8006456:	46bd      	mov	sp, r7
 8006458:	b004      	add	sp, #16
 800645a:	bd80      	pop	{r7, pc}
 800645c:	200005f0 	.word	0x200005f0
 8006460:	200004ec 	.word	0x200004ec
 8006464:	200005d8 	.word	0x200005d8
 8006468:	200005a8 	.word	0x200005a8
 800646c:	200005a4 	.word	0x200005a4
 8006470:	2000060c 	.word	0x2000060c

08006474 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	3b04      	subs	r3, #4
 8006484:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2280      	movs	r2, #128	; 0x80
 800648a:	0452      	lsls	r2, r2, #17
 800648c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	3b04      	subs	r3, #4
 8006492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3b04      	subs	r3, #4
 800649e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064a0:	4a08      	ldr	r2, [pc, #32]	; (80064c4 <pxPortInitialiseStack+0x50>)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	3b14      	subs	r3, #20
 80064aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3b20      	subs	r3, #32
 80064b6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80064b8:	68fb      	ldr	r3, [r7, #12]
}
 80064ba:	0018      	movs	r0, r3
 80064bc:	46bd      	mov	sp, r7
 80064be:	b004      	add	sp, #16
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	46c0      	nop			; (mov r8, r8)
 80064c4:	080064c9 	.word	0x080064c9

080064c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80064ce:	2300      	movs	r3, #0
 80064d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064d2:	4b08      	ldr	r3, [pc, #32]	; (80064f4 <prvTaskExitError+0x2c>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	3301      	adds	r3, #1
 80064d8:	d001      	beq.n	80064de <prvTaskExitError+0x16>
 80064da:	b672      	cpsid	i
 80064dc:	e7fe      	b.n	80064dc <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80064de:	b672      	cpsid	i
	while( ulDummy == 0 )
 80064e0:	46c0      	nop			; (mov r8, r8)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d0fc      	beq.n	80064e2 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80064e8:	46c0      	nop			; (mov r8, r8)
 80064ea:	46c0      	nop			; (mov r8, r8)
 80064ec:	46bd      	mov	sp, r7
 80064ee:	b002      	add	sp, #8
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	46c0      	nop			; (mov r8, r8)
 80064f4:	20000124 	.word	0x20000124

080064f8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80064fc:	46c0      	nop			; (mov r8, r8)
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
	...

08006510 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006510:	4a0b      	ldr	r2, [pc, #44]	; (8006540 <pxCurrentTCBConst2>)
 8006512:	6813      	ldr	r3, [r2, #0]
 8006514:	6818      	ldr	r0, [r3, #0]
 8006516:	3020      	adds	r0, #32
 8006518:	f380 8809 	msr	PSP, r0
 800651c:	2002      	movs	r0, #2
 800651e:	f380 8814 	msr	CONTROL, r0
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8006528:	46ae      	mov	lr, r5
 800652a:	bc08      	pop	{r3}
 800652c:	bc04      	pop	{r2}
 800652e:	b662      	cpsie	i
 8006530:	4718      	bx	r3
 8006532:	46c0      	nop			; (mov r8, r8)
 8006534:	46c0      	nop			; (mov r8, r8)
 8006536:	46c0      	nop			; (mov r8, r8)
 8006538:	46c0      	nop			; (mov r8, r8)
 800653a:	46c0      	nop			; (mov r8, r8)
 800653c:	46c0      	nop			; (mov r8, r8)
 800653e:	46c0      	nop			; (mov r8, r8)

08006540 <pxCurrentTCBConst2>:
 8006540:	200004ec 	.word	0x200004ec
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8006544:	46c0      	nop			; (mov r8, r8)
 8006546:	46c0      	nop			; (mov r8, r8)

08006548 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800654c:	4b0e      	ldr	r3, [pc, #56]	; (8006588 <xPortStartScheduler+0x40>)
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	4b0d      	ldr	r3, [pc, #52]	; (8006588 <xPortStartScheduler+0x40>)
 8006552:	21ff      	movs	r1, #255	; 0xff
 8006554:	0409      	lsls	r1, r1, #16
 8006556:	430a      	orrs	r2, r1
 8006558:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800655a:	4b0b      	ldr	r3, [pc, #44]	; (8006588 <xPortStartScheduler+0x40>)
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	4b0a      	ldr	r3, [pc, #40]	; (8006588 <xPortStartScheduler+0x40>)
 8006560:	21ff      	movs	r1, #255	; 0xff
 8006562:	0609      	lsls	r1, r1, #24
 8006564:	430a      	orrs	r2, r1
 8006566:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8006568:	f000 f898 	bl	800669c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800656c:	4b07      	ldr	r3, [pc, #28]	; (800658c <xPortStartScheduler+0x44>)
 800656e:	2200      	movs	r2, #0
 8006570:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8006572:	f7ff ffcd 	bl	8006510 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006576:	f7ff fcaf 	bl	8005ed8 <vTaskSwitchContext>
	prvTaskExitError();
 800657a:	f7ff ffa5 	bl	80064c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800657e:	2300      	movs	r3, #0
}
 8006580:	0018      	movs	r0, r3
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	46c0      	nop			; (mov r8, r8)
 8006588:	e000ed20 	.word	0xe000ed20
 800658c:	20000124 	.word	0x20000124

08006590 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8006594:	4b05      	ldr	r3, [pc, #20]	; (80065ac <vPortYield+0x1c>)
 8006596:	2280      	movs	r2, #128	; 0x80
 8006598:	0552      	lsls	r2, r2, #21
 800659a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800659c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80065a0:	f3bf 8f6f 	isb	sy
}
 80065a4:	46c0      	nop			; (mov r8, r8)
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	46c0      	nop			; (mov r8, r8)
 80065ac:	e000ed04 	.word	0xe000ed04

080065b0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80065b4:	b672      	cpsid	i
    uxCriticalNesting++;
 80065b6:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <vPortEnterCritical+0x20>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	4b04      	ldr	r3, [pc, #16]	; (80065d0 <vPortEnterCritical+0x20>)
 80065be:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80065c0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80065c4:	f3bf 8f6f 	isb	sy
}
 80065c8:	46c0      	nop			; (mov r8, r8)
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	46c0      	nop			; (mov r8, r8)
 80065d0:	20000124 	.word	0x20000124

080065d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80065d8:	4b09      	ldr	r3, [pc, #36]	; (8006600 <vPortExitCritical+0x2c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <vPortExitCritical+0x10>
 80065e0:	b672      	cpsid	i
 80065e2:	e7fe      	b.n	80065e2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80065e4:	4b06      	ldr	r3, [pc, #24]	; (8006600 <vPortExitCritical+0x2c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	1e5a      	subs	r2, r3, #1
 80065ea:	4b05      	ldr	r3, [pc, #20]	; (8006600 <vPortExitCritical+0x2c>)
 80065ec:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80065ee:	4b04      	ldr	r3, [pc, #16]	; (8006600 <vPortExitCritical+0x2c>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d100      	bne.n	80065f8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80065f6:	b662      	cpsie	i
    }
}
 80065f8:	46c0      	nop			; (mov r8, r8)
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	46c0      	nop			; (mov r8, r8)
 8006600:	20000124 	.word	0x20000124

08006604 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8006604:	f3ef 8010 	mrs	r0, PRIMASK
 8006608:	b672      	cpsid	i
 800660a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800660c:	46c0      	nop			; (mov r8, r8)
 800660e:	0018      	movs	r0, r3

08006610 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8006610:	f380 8810 	msr	PRIMASK, r0
 8006614:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8006616:	46c0      	nop			; (mov r8, r8)
	...

08006620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006620:	f3ef 8009 	mrs	r0, PSP
 8006624:	4b0e      	ldr	r3, [pc, #56]	; (8006660 <pxCurrentTCBConst>)
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	3820      	subs	r0, #32
 800662a:	6010      	str	r0, [r2, #0]
 800662c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800662e:	4644      	mov	r4, r8
 8006630:	464d      	mov	r5, r9
 8006632:	4656      	mov	r6, sl
 8006634:	465f      	mov	r7, fp
 8006636:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006638:	b508      	push	{r3, lr}
 800663a:	b672      	cpsid	i
 800663c:	f7ff fc4c 	bl	8005ed8 <vTaskSwitchContext>
 8006640:	b662      	cpsie	i
 8006642:	bc0c      	pop	{r2, r3}
 8006644:	6811      	ldr	r1, [r2, #0]
 8006646:	6808      	ldr	r0, [r1, #0]
 8006648:	3010      	adds	r0, #16
 800664a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800664c:	46a0      	mov	r8, r4
 800664e:	46a9      	mov	r9, r5
 8006650:	46b2      	mov	sl, r6
 8006652:	46bb      	mov	fp, r7
 8006654:	f380 8809 	msr	PSP, r0
 8006658:	3820      	subs	r0, #32
 800665a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800665c:	4718      	bx	r3
 800665e:	46c0      	nop			; (mov r8, r8)

08006660 <pxCurrentTCBConst>:
 8006660:	200004ec 	.word	0x200004ec
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8006664:	46c0      	nop			; (mov r8, r8)
 8006666:	46c0      	nop			; (mov r8, r8)

08006668 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800666e:	f7ff ffc9 	bl	8006604 <ulSetInterruptMaskFromISR>
 8006672:	0003      	movs	r3, r0
 8006674:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006676:	f7ff fb7f 	bl	8005d78 <xTaskIncrementTick>
 800667a:	1e03      	subs	r3, r0, #0
 800667c:	d003      	beq.n	8006686 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800667e:	4b06      	ldr	r3, [pc, #24]	; (8006698 <xPortSysTickHandler+0x30>)
 8006680:	2280      	movs	r2, #128	; 0x80
 8006682:	0552      	lsls	r2, r2, #21
 8006684:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	0018      	movs	r0, r3
 800668a:	f7ff ffc1 	bl	8006610 <vClearInterruptMaskFromISR>
}
 800668e:	46c0      	nop			; (mov r8, r8)
 8006690:	46bd      	mov	sp, r7
 8006692:	b002      	add	sp, #8
 8006694:	bd80      	pop	{r7, pc}
 8006696:	46c0      	nop			; (mov r8, r8)
 8006698:	e000ed04 	.word	0xe000ed04

0800669c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80066a0:	4b0b      	ldr	r3, [pc, #44]	; (80066d0 <prvSetupTimerInterrupt+0x34>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80066a6:	4b0b      	ldr	r3, [pc, #44]	; (80066d4 <prvSetupTimerInterrupt+0x38>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066ac:	4b0a      	ldr	r3, [pc, #40]	; (80066d8 <prvSetupTimerInterrupt+0x3c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	22fa      	movs	r2, #250	; 0xfa
 80066b2:	0091      	lsls	r1, r2, #2
 80066b4:	0018      	movs	r0, r3
 80066b6:	f7f9 fd27 	bl	8000108 <__udivsi3>
 80066ba:	0003      	movs	r3, r0
 80066bc:	001a      	movs	r2, r3
 80066be:	4b07      	ldr	r3, [pc, #28]	; (80066dc <prvSetupTimerInterrupt+0x40>)
 80066c0:	3a01      	subs	r2, #1
 80066c2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80066c4:	4b02      	ldr	r3, [pc, #8]	; (80066d0 <prvSetupTimerInterrupt+0x34>)
 80066c6:	2207      	movs	r2, #7
 80066c8:	601a      	str	r2, [r3, #0]
}
 80066ca:	46c0      	nop			; (mov r8, r8)
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	e000e010 	.word	0xe000e010
 80066d4:	e000e018 	.word	0xe000e018
 80066d8:	20000118 	.word	0x20000118
 80066dc:	e000e014 	.word	0xe000e014

080066e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066e8:	2300      	movs	r3, #0
 80066ea:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80066ec:	f7ff faac 	bl	8005c48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066f0:	4b49      	ldr	r3, [pc, #292]	; (8006818 <pvPortMalloc+0x138>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066f8:	f000 f8e0 	bl	80068bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066fc:	4b47      	ldr	r3, [pc, #284]	; (800681c <pvPortMalloc+0x13c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	4013      	ands	r3, r2
 8006704:	d000      	beq.n	8006708 <pvPortMalloc+0x28>
 8006706:	e079      	b.n	80067fc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d012      	beq.n	8006734 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800670e:	2208      	movs	r2, #8
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	189b      	adds	r3, r3, r2
 8006714:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2207      	movs	r2, #7
 800671a:	4013      	ands	r3, r2
 800671c:	d00a      	beq.n	8006734 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2207      	movs	r2, #7
 8006722:	4393      	bics	r3, r2
 8006724:	3308      	adds	r3, #8
 8006726:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2207      	movs	r2, #7
 800672c:	4013      	ands	r3, r2
 800672e:	d001      	beq.n	8006734 <pvPortMalloc+0x54>
 8006730:	b672      	cpsid	i
 8006732:	e7fe      	b.n	8006732 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d060      	beq.n	80067fc <pvPortMalloc+0x11c>
 800673a:	4b39      	ldr	r3, [pc, #228]	; (8006820 <pvPortMalloc+0x140>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	429a      	cmp	r2, r3
 8006742:	d85b      	bhi.n	80067fc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006744:	4b37      	ldr	r3, [pc, #220]	; (8006824 <pvPortMalloc+0x144>)
 8006746:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8006748:	4b36      	ldr	r3, [pc, #216]	; (8006824 <pvPortMalloc+0x144>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800674e:	e004      	b.n	800675a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	429a      	cmp	r2, r3
 8006762:	d903      	bls.n	800676c <pvPortMalloc+0x8c>
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1f1      	bne.n	8006750 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800676c:	4b2a      	ldr	r3, [pc, #168]	; (8006818 <pvPortMalloc+0x138>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	429a      	cmp	r2, r3
 8006774:	d042      	beq.n	80067fc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2208      	movs	r2, #8
 800677c:	189b      	adds	r3, r3, r2
 800677e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	1ad2      	subs	r2, r2, r3
 8006790:	2308      	movs	r3, #8
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	429a      	cmp	r2, r3
 8006796:	d916      	bls.n	80067c6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	18d3      	adds	r3, r2, r3
 800679e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2207      	movs	r2, #7
 80067a4:	4013      	ands	r3, r2
 80067a6:	d001      	beq.n	80067ac <pvPortMalloc+0xcc>
 80067a8:	b672      	cpsid	i
 80067aa:	e7fe      	b.n	80067aa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	1ad2      	subs	r2, r2, r3
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	0018      	movs	r0, r3
 80067c2:	f000 f8db 	bl	800697c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067c6:	4b16      	ldr	r3, [pc, #88]	; (8006820 <pvPortMalloc+0x140>)
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	1ad2      	subs	r2, r2, r3
 80067d0:	4b13      	ldr	r3, [pc, #76]	; (8006820 <pvPortMalloc+0x140>)
 80067d2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067d4:	4b12      	ldr	r3, [pc, #72]	; (8006820 <pvPortMalloc+0x140>)
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	4b13      	ldr	r3, [pc, #76]	; (8006828 <pvPortMalloc+0x148>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d203      	bcs.n	80067e8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067e0:	4b0f      	ldr	r3, [pc, #60]	; (8006820 <pvPortMalloc+0x140>)
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	4b10      	ldr	r3, [pc, #64]	; (8006828 <pvPortMalloc+0x148>)
 80067e6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	4b0b      	ldr	r3, [pc, #44]	; (800681c <pvPortMalloc+0x13c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	431a      	orrs	r2, r3
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067fc:	f7ff fa30 	bl	8005c60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2207      	movs	r2, #7
 8006804:	4013      	ands	r3, r2
 8006806:	d001      	beq.n	800680c <pvPortMalloc+0x12c>
 8006808:	b672      	cpsid	i
 800680a:	e7fe      	b.n	800680a <pvPortMalloc+0x12a>
	return pvReturn;
 800680c:	68fb      	ldr	r3, [r7, #12]
}
 800680e:	0018      	movs	r0, r3
 8006810:	46bd      	mov	sp, r7
 8006812:	b006      	add	sp, #24
 8006814:	bd80      	pop	{r7, pc}
 8006816:	46c0      	nop			; (mov r8, r8)
 8006818:	20001220 	.word	0x20001220
 800681c:	2000122c 	.word	0x2000122c
 8006820:	20001224 	.word	0x20001224
 8006824:	20001218 	.word	0x20001218
 8006828:	20001228 	.word	0x20001228

0800682c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d035      	beq.n	80068aa <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800683e:	2308      	movs	r3, #8
 8006840:	425b      	negs	r3, r3
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	18d3      	adds	r3, r2, r3
 8006846:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	4b18      	ldr	r3, [pc, #96]	; (80068b4 <vPortFree+0x88>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4013      	ands	r3, r2
 8006856:	d101      	bne.n	800685c <vPortFree+0x30>
 8006858:	b672      	cpsid	i
 800685a:	e7fe      	b.n	800685a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d001      	beq.n	8006868 <vPortFree+0x3c>
 8006864:	b672      	cpsid	i
 8006866:	e7fe      	b.n	8006866 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	4b11      	ldr	r3, [pc, #68]	; (80068b4 <vPortFree+0x88>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4013      	ands	r3, r2
 8006872:	d01a      	beq.n	80068aa <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d116      	bne.n	80068aa <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	4b0c      	ldr	r3, [pc, #48]	; (80068b4 <vPortFree+0x88>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	43db      	mvns	r3, r3
 8006886:	401a      	ands	r2, r3
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800688c:	f7ff f9dc 	bl	8005c48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	4b08      	ldr	r3, [pc, #32]	; (80068b8 <vPortFree+0x8c>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	18d2      	adds	r2, r2, r3
 800689a:	4b07      	ldr	r3, [pc, #28]	; (80068b8 <vPortFree+0x8c>)
 800689c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	0018      	movs	r0, r3
 80068a2:	f000 f86b 	bl	800697c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80068a6:	f7ff f9db 	bl	8005c60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068aa:	46c0      	nop			; (mov r8, r8)
 80068ac:	46bd      	mov	sp, r7
 80068ae:	b004      	add	sp, #16
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	46c0      	nop			; (mov r8, r8)
 80068b4:	2000122c 	.word	0x2000122c
 80068b8:	20001224 	.word	0x20001224

080068bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068c2:	23c0      	movs	r3, #192	; 0xc0
 80068c4:	011b      	lsls	r3, r3, #4
 80068c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068c8:	4b26      	ldr	r3, [pc, #152]	; (8006964 <prvHeapInit+0xa8>)
 80068ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2207      	movs	r2, #7
 80068d0:	4013      	ands	r3, r2
 80068d2:	d00c      	beq.n	80068ee <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	3307      	adds	r3, #7
 80068d8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2207      	movs	r2, #7
 80068de:	4393      	bics	r3, r2
 80068e0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	1ad2      	subs	r2, r2, r3
 80068e8:	4b1e      	ldr	r3, [pc, #120]	; (8006964 <prvHeapInit+0xa8>)
 80068ea:	18d3      	adds	r3, r2, r3
 80068ec:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068f2:	4b1d      	ldr	r3, [pc, #116]	; (8006968 <prvHeapInit+0xac>)
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068f8:	4b1b      	ldr	r3, [pc, #108]	; (8006968 <prvHeapInit+0xac>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	18d3      	adds	r3, r2, r3
 8006904:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006906:	2208      	movs	r2, #8
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	1a9b      	subs	r3, r3, r2
 800690c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2207      	movs	r2, #7
 8006912:	4393      	bics	r3, r2
 8006914:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	4b14      	ldr	r3, [pc, #80]	; (800696c <prvHeapInit+0xb0>)
 800691a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800691c:	4b13      	ldr	r3, [pc, #76]	; (800696c <prvHeapInit+0xb0>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2200      	movs	r2, #0
 8006922:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006924:	4b11      	ldr	r3, [pc, #68]	; (800696c <prvHeapInit+0xb0>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	1ad2      	subs	r2, r2, r3
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800693a:	4b0c      	ldr	r3, [pc, #48]	; (800696c <prvHeapInit+0xb0>)
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	4b0a      	ldr	r3, [pc, #40]	; (8006970 <prvHeapInit+0xb4>)
 8006948:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	4b09      	ldr	r3, [pc, #36]	; (8006974 <prvHeapInit+0xb8>)
 8006950:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006952:	4b09      	ldr	r3, [pc, #36]	; (8006978 <prvHeapInit+0xbc>)
 8006954:	2280      	movs	r2, #128	; 0x80
 8006956:	0612      	lsls	r2, r2, #24
 8006958:	601a      	str	r2, [r3, #0]
}
 800695a:	46c0      	nop			; (mov r8, r8)
 800695c:	46bd      	mov	sp, r7
 800695e:	b004      	add	sp, #16
 8006960:	bd80      	pop	{r7, pc}
 8006962:	46c0      	nop			; (mov r8, r8)
 8006964:	20000618 	.word	0x20000618
 8006968:	20001218 	.word	0x20001218
 800696c:	20001220 	.word	0x20001220
 8006970:	20001228 	.word	0x20001228
 8006974:	20001224 	.word	0x20001224
 8006978:	2000122c 	.word	0x2000122c

0800697c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006984:	4b27      	ldr	r3, [pc, #156]	; (8006a24 <prvInsertBlockIntoFreeList+0xa8>)
 8006986:	60fb      	str	r3, [r7, #12]
 8006988:	e002      	b.n	8006990 <prvInsertBlockIntoFreeList+0x14>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	429a      	cmp	r2, r3
 8006998:	d8f7      	bhi.n	800698a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	18d3      	adds	r3, r2, r3
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d108      	bne.n	80069be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	18d2      	adds	r2, r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	18d2      	adds	r2, r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d118      	bne.n	8006a04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	4b14      	ldr	r3, [pc, #80]	; (8006a28 <prvInsertBlockIntoFreeList+0xac>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d00d      	beq.n	80069fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	18d2      	adds	r2, r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	e008      	b.n	8006a0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069fa:	4b0b      	ldr	r3, [pc, #44]	; (8006a28 <prvInsertBlockIntoFreeList+0xac>)
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	e003      	b.n	8006a0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d002      	beq.n	8006a1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a1a:	46c0      	nop			; (mov r8, r8)
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	b004      	add	sp, #16
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	46c0      	nop			; (mov r8, r8)
 8006a24:	20001218 	.word	0x20001218
 8006a28:	20001220 	.word	0x20001220

08006a2c <memset>:
 8006a2c:	0003      	movs	r3, r0
 8006a2e:	1882      	adds	r2, r0, r2
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d100      	bne.n	8006a36 <memset+0xa>
 8006a34:	4770      	bx	lr
 8006a36:	7019      	strb	r1, [r3, #0]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	e7f9      	b.n	8006a30 <memset+0x4>

08006a3c <__libc_init_array>:
 8006a3c:	b570      	push	{r4, r5, r6, lr}
 8006a3e:	2600      	movs	r6, #0
 8006a40:	4c0c      	ldr	r4, [pc, #48]	; (8006a74 <__libc_init_array+0x38>)
 8006a42:	4d0d      	ldr	r5, [pc, #52]	; (8006a78 <__libc_init_array+0x3c>)
 8006a44:	1b64      	subs	r4, r4, r5
 8006a46:	10a4      	asrs	r4, r4, #2
 8006a48:	42a6      	cmp	r6, r4
 8006a4a:	d109      	bne.n	8006a60 <__libc_init_array+0x24>
 8006a4c:	2600      	movs	r6, #0
 8006a4e:	f000 f823 	bl	8006a98 <_init>
 8006a52:	4c0a      	ldr	r4, [pc, #40]	; (8006a7c <__libc_init_array+0x40>)
 8006a54:	4d0a      	ldr	r5, [pc, #40]	; (8006a80 <__libc_init_array+0x44>)
 8006a56:	1b64      	subs	r4, r4, r5
 8006a58:	10a4      	asrs	r4, r4, #2
 8006a5a:	42a6      	cmp	r6, r4
 8006a5c:	d105      	bne.n	8006a6a <__libc_init_array+0x2e>
 8006a5e:	bd70      	pop	{r4, r5, r6, pc}
 8006a60:	00b3      	lsls	r3, r6, #2
 8006a62:	58eb      	ldr	r3, [r5, r3]
 8006a64:	4798      	blx	r3
 8006a66:	3601      	adds	r6, #1
 8006a68:	e7ee      	b.n	8006a48 <__libc_init_array+0xc>
 8006a6a:	00b3      	lsls	r3, r6, #2
 8006a6c:	58eb      	ldr	r3, [r5, r3]
 8006a6e:	4798      	blx	r3
 8006a70:	3601      	adds	r6, #1
 8006a72:	e7f2      	b.n	8006a5a <__libc_init_array+0x1e>
 8006a74:	08006bfc 	.word	0x08006bfc
 8006a78:	08006bfc 	.word	0x08006bfc
 8006a7c:	08006c00 	.word	0x08006c00
 8006a80:	08006bfc 	.word	0x08006bfc

08006a84 <memcpy>:
 8006a84:	2300      	movs	r3, #0
 8006a86:	b510      	push	{r4, lr}
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d100      	bne.n	8006a8e <memcpy+0xa>
 8006a8c:	bd10      	pop	{r4, pc}
 8006a8e:	5ccc      	ldrb	r4, [r1, r3]
 8006a90:	54c4      	strb	r4, [r0, r3]
 8006a92:	3301      	adds	r3, #1
 8006a94:	e7f8      	b.n	8006a88 <memcpy+0x4>
	...

08006a98 <_init>:
 8006a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9a:	46c0      	nop			; (mov r8, r8)
 8006a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a9e:	bc08      	pop	{r3}
 8006aa0:	469e      	mov	lr, r3
 8006aa2:	4770      	bx	lr

08006aa4 <_fini>:
 8006aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa6:	46c0      	nop			; (mov r8, r8)
 8006aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aaa:	bc08      	pop	{r3}
 8006aac:	469e      	mov	lr, r3
 8006aae:	4770      	bx	lr
