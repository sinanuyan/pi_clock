
pi_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ea8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002f68  08002f68  00012f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f8c  08002f8c  0002011c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f8c  08002f8c  00012f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f94  08002f94  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f94  08002f94  00012f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f98  08002f98  00012f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  08002f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000011c  080030b8  0002011c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  080030b8  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b28d  00000000  00000000  00020187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dc7  00000000  00000000  0002b414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c88  00000000  00000000  0002d1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009a7  00000000  00000000  0002de68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011265  00000000  00000000  0002e80f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f815  00000000  00000000  0003fa74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00069580  00000000  00000000  0004f289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002cdc  00000000  00000000  000b880c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000bb4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000011c 	.word	0x2000011c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002f50 	.word	0x08002f50

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000120 	.word	0x20000120
 8000104:	08002f50 	.word	0x08002f50

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <segment_write>:
		{ 1, 1, 0, 0, 0, 0, 0, 1 }, // U (30)
		{ 1, 0, 0, 1, 0, 0, 0, 1 }, // Y (31)
		{ 1, 0, 1, 0, 0, 1, 0, 0 }, // Z (32)
		{ 1, 1, 1, 1, 1, 1, 1, 1 }};// BLANK

void segment_write(uint8_t *data){
 80004a8:	b590      	push	{r4, r7, lr}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(CLEAR_GPIO_Port, CLEAR_Pin, 0);
 80004b0:	23a0      	movs	r3, #160	; 0xa0
 80004b2:	05db      	lsls	r3, r3, #23
 80004b4:	2200      	movs	r2, #0
 80004b6:	2101      	movs	r1, #1
 80004b8:	0018      	movs	r0, r3
 80004ba:	f000 fed3 	bl	8001264 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLEAR_GPIO_Port, CLEAR_Pin, 1);
 80004be:	23a0      	movs	r3, #160	; 0xa0
 80004c0:	05db      	lsls	r3, r3, #23
 80004c2:	2201      	movs	r2, #1
 80004c4:	2101      	movs	r1, #1
 80004c6:	0018      	movs	r0, r3
 80004c8:	f000 fecc 	bl	8001264 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 8; i++) {
 80004cc:	230f      	movs	r3, #15
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	2200      	movs	r2, #0
 80004d2:	701a      	strb	r2, [r3, #0]
 80004d4:	e075      	b.n	80005c2 <segment_write+0x11a>
		HAL_GPIO_WritePin(A_HT_GPIO_Port, A_HT_Pin, segment_data[data[0]][i]);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	001a      	movs	r2, r3
 80004dc:	240f      	movs	r4, #15
 80004de:	193b      	adds	r3, r7, r4
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	493d      	ldr	r1, [pc, #244]	; (80005d8 <segment_write+0x130>)
 80004e4:	00d2      	lsls	r2, r2, #3
 80004e6:	188a      	adds	r2, r1, r2
 80004e8:	5cd2      	ldrb	r2, [r2, r3]
 80004ea:	23a0      	movs	r3, #160	; 0xa0
 80004ec:	05db      	lsls	r3, r3, #23
 80004ee:	2102      	movs	r1, #2
 80004f0:	0018      	movs	r0, r3
 80004f2:	f000 feb7 	bl	8001264 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A_HO_GPIO_Port, A_HO_Pin, segment_data[data[1]][i]);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	3301      	adds	r3, #1
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	001a      	movs	r2, r3
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	4935      	ldr	r1, [pc, #212]	; (80005d8 <segment_write+0x130>)
 8000504:	00d2      	lsls	r2, r2, #3
 8000506:	188a      	adds	r2, r1, r2
 8000508:	5cd2      	ldrb	r2, [r2, r3]
 800050a:	23a0      	movs	r3, #160	; 0xa0
 800050c:	05db      	lsls	r3, r3, #23
 800050e:	2110      	movs	r1, #16
 8000510:	0018      	movs	r0, r3
 8000512:	f000 fea7 	bl	8001264 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(A_MT_GPIO_Port, A_MT_Pin, segment_data[data[2]][i]);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	3302      	adds	r3, #2
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	001a      	movs	r2, r3
 800051e:	193b      	adds	r3, r7, r4
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	492d      	ldr	r1, [pc, #180]	; (80005d8 <segment_write+0x130>)
 8000524:	00d2      	lsls	r2, r2, #3
 8000526:	188a      	adds	r2, r1, r2
 8000528:	5cd2      	ldrb	r2, [r2, r3]
 800052a:	23a0      	movs	r3, #160	; 0xa0
 800052c:	05db      	lsls	r3, r3, #23
 800052e:	2140      	movs	r1, #64	; 0x40
 8000530:	0018      	movs	r0, r3
 8000532:	f000 fe97 	bl	8001264 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A_MO_GPIO_Port, A_MO_Pin, segment_data[data[3]][i]);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	3303      	adds	r3, #3
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	001a      	movs	r2, r3
 800053e:	193b      	adds	r3, r7, r4
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	4925      	ldr	r1, [pc, #148]	; (80005d8 <segment_write+0x130>)
 8000544:	00d2      	lsls	r2, r2, #3
 8000546:	188a      	adds	r2, r1, r2
 8000548:	5cd2      	ldrb	r2, [r2, r3]
 800054a:	2380      	movs	r3, #128	; 0x80
 800054c:	0059      	lsls	r1, r3, #1
 800054e:	23a0      	movs	r3, #160	; 0xa0
 8000550:	05db      	lsls	r3, r3, #23
 8000552:	0018      	movs	r0, r3
 8000554:	f000 fe86 	bl	8001264 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(A_ST_GPIO_Port, A_ST_Pin, segment_data[data[4]][i]);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	3304      	adds	r3, #4
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	001a      	movs	r2, r3
 8000560:	193b      	adds	r3, r7, r4
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	491c      	ldr	r1, [pc, #112]	; (80005d8 <segment_write+0x130>)
 8000566:	00d2      	lsls	r2, r2, #3
 8000568:	188a      	adds	r2, r1, r2
 800056a:	5cd2      	ldrb	r2, [r2, r3]
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	00d9      	lsls	r1, r3, #3
 8000570:	23a0      	movs	r3, #160	; 0xa0
 8000572:	05db      	lsls	r3, r3, #23
 8000574:	0018      	movs	r0, r3
 8000576:	f000 fe75 	bl	8001264 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A_SO_GPIO_Port, A_SO_Pin, segment_data[data[5]][i]);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	3305      	adds	r3, #5
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	001a      	movs	r2, r3
 8000582:	193b      	adds	r3, r7, r4
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	4914      	ldr	r1, [pc, #80]	; (80005d8 <segment_write+0x130>)
 8000588:	00d2      	lsls	r2, r2, #3
 800058a:	188a      	adds	r2, r1, r2
 800058c:	5cd2      	ldrb	r2, [r2, r3]
 800058e:	2380      	movs	r3, #128	; 0x80
 8000590:	0159      	lsls	r1, r3, #5
 8000592:	23a0      	movs	r3, #160	; 0xa0
 8000594:	05db      	lsls	r3, r3, #23
 8000596:	0018      	movs	r0, r3
 8000598:	f000 fe64 	bl	8001264 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(CLOCK_GPIO_Port, CLOCK_Pin, 0);
 800059c:	23a0      	movs	r3, #160	; 0xa0
 800059e:	05db      	lsls	r3, r3, #23
 80005a0:	2200      	movs	r2, #0
 80005a2:	2108      	movs	r1, #8
 80005a4:	0018      	movs	r0, r3
 80005a6:	f000 fe5d 	bl	8001264 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CLOCK_GPIO_Port, CLOCK_Pin, 1);
 80005aa:	23a0      	movs	r3, #160	; 0xa0
 80005ac:	05db      	lsls	r3, r3, #23
 80005ae:	2201      	movs	r2, #1
 80005b0:	2108      	movs	r1, #8
 80005b2:	0018      	movs	r0, r3
 80005b4:	f000 fe56 	bl	8001264 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 8; i++) {
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	781a      	ldrb	r2, [r3, #0]
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	3201      	adds	r2, #1
 80005c0:	701a      	strb	r2, [r3, #0]
 80005c2:	230f      	movs	r3, #15
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b07      	cmp	r3, #7
 80005ca:	d984      	bls.n	80004d6 <segment_write+0x2e>
	}
}
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	b005      	add	sp, #20
 80005d4:	bd90      	pop	{r4, r7, pc}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	20000000 	.word	0x20000000

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b5b0      	push	{r4, r5, r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fbad 	bl	8000d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f881 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f9ed 	bl	80009c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ee:	f000 f901 	bl	80007f4 <MX_I2C1_Init>
  MX_RTC_Init();
 80005f2:	f000 f93f 	bl	8000874 <MX_RTC_Init>
  MX_TIM2_Init();
 80005f6:	f000 f967 	bl	80008c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


	uint8_t data[6] = {
 80005fa:	2018      	movs	r0, #24
 80005fc:	183b      	adds	r3, r7, r0
 80005fe:	4a39      	ldr	r2, [pc, #228]	; (80006e4 <main+0x108>)
 8000600:	6811      	ldr	r1, [r2, #0]
 8000602:	6019      	str	r1, [r3, #0]
 8000604:	8892      	ldrh	r2, [r2, #4]
 8000606:	809a      	strh	r2, [r3, #4]
			0, 0, 0, 0, 0,0
	};
	segment_write(data);
 8000608:	183b      	adds	r3, r7, r0
 800060a:	0018      	movs	r0, r3
 800060c:	f7ff ff4c 	bl	80004a8 <segment_write>

	RTC_TimeTypeDef sTimeStamp;
	RTC_DateTypeDef sTimeStampDate;

	uint8_t bcd;
	uint8_t old_sec = 15;
 8000610:	231f      	movs	r3, #31
 8000612:	18fb      	adds	r3, r7, r3
 8000614:	220f      	movs	r2, #15
 8000616:	701a      	strb	r2, [r3, #0]
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		HAL_RTC_GetDate(&hrtc, &sTimeStampDate, RTC_FORMAT_BIN);
 8000618:	0039      	movs	r1, r7
 800061a:	4b33      	ldr	r3, [pc, #204]	; (80006e8 <main+0x10c>)
 800061c:	2200      	movs	r2, #0
 800061e:	0018      	movs	r0, r3
 8000620:	f001 ff0a 	bl	8002438 <HAL_RTC_GetDate>
		HAL_RTC_GetTime(&hrtc, &sTimeStamp, RTC_FORMAT_BIN);
 8000624:	1d39      	adds	r1, r7, #4
 8000626:	4b30      	ldr	r3, [pc, #192]	; (80006e8 <main+0x10c>)
 8000628:	2200      	movs	r2, #0
 800062a:	0018      	movs	r0, r3
 800062c:	f001 fea6 	bl	800237c <HAL_RTC_GetTime>

		bcd = sTimeStamp.Seconds;
 8000630:	241e      	movs	r4, #30
 8000632:	193b      	adds	r3, r7, r4
 8000634:	1d3a      	adds	r2, r7, #4
 8000636:	7892      	ldrb	r2, [r2, #2]
 8000638:	701a      	strb	r2, [r3, #0]
		data[5] = bcd%10;
 800063a:	193b      	adds	r3, r7, r4
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	210a      	movs	r1, #10
 8000640:	0018      	movs	r0, r3
 8000642:	f7ff fde7 	bl	8000214 <__aeabi_uidivmod>
 8000646:	000b      	movs	r3, r1
 8000648:	b2da      	uxtb	r2, r3
 800064a:	2518      	movs	r5, #24
 800064c:	197b      	adds	r3, r7, r5
 800064e:	715a      	strb	r2, [r3, #5]
		data[4] = bcd/10;
 8000650:	193b      	adds	r3, r7, r4
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	210a      	movs	r1, #10
 8000656:	0018      	movs	r0, r3
 8000658:	f7ff fd56 	bl	8000108 <__udivsi3>
 800065c:	0003      	movs	r3, r0
 800065e:	b2da      	uxtb	r2, r3
 8000660:	197b      	adds	r3, r7, r5
 8000662:	711a      	strb	r2, [r3, #4]

		bcd = sTimeStamp.Minutes;
 8000664:	193b      	adds	r3, r7, r4
 8000666:	1d3a      	adds	r2, r7, #4
 8000668:	7852      	ldrb	r2, [r2, #1]
 800066a:	701a      	strb	r2, [r3, #0]
		data[3] = bcd%10;
 800066c:	193b      	adds	r3, r7, r4
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	210a      	movs	r1, #10
 8000672:	0018      	movs	r0, r3
 8000674:	f7ff fdce 	bl	8000214 <__aeabi_uidivmod>
 8000678:	000b      	movs	r3, r1
 800067a:	b2da      	uxtb	r2, r3
 800067c:	197b      	adds	r3, r7, r5
 800067e:	70da      	strb	r2, [r3, #3]
		data[2] = bcd/10;
 8000680:	193b      	adds	r3, r7, r4
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	210a      	movs	r1, #10
 8000686:	0018      	movs	r0, r3
 8000688:	f7ff fd3e 	bl	8000108 <__udivsi3>
 800068c:	0003      	movs	r3, r0
 800068e:	b2da      	uxtb	r2, r3
 8000690:	197b      	adds	r3, r7, r5
 8000692:	709a      	strb	r2, [r3, #2]

		bcd = sTimeStamp.Hours;
 8000694:	193b      	adds	r3, r7, r4
 8000696:	1d3a      	adds	r2, r7, #4
 8000698:	7812      	ldrb	r2, [r2, #0]
 800069a:	701a      	strb	r2, [r3, #0]
		data[1] = bcd%10;
 800069c:	193b      	adds	r3, r7, r4
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	210a      	movs	r1, #10
 80006a2:	0018      	movs	r0, r3
 80006a4:	f7ff fdb6 	bl	8000214 <__aeabi_uidivmod>
 80006a8:	000b      	movs	r3, r1
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	197b      	adds	r3, r7, r5
 80006ae:	705a      	strb	r2, [r3, #1]
		data[0] = bcd/10;
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	210a      	movs	r1, #10
 80006b6:	0018      	movs	r0, r3
 80006b8:	f7ff fd26 	bl	8000108 <__udivsi3>
 80006bc:	0003      	movs	r3, r0
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	197b      	adds	r3, r7, r5
 80006c2:	701a      	strb	r2, [r3, #0]

		if(old_sec != data[5]){
 80006c4:	197b      	adds	r3, r7, r5
 80006c6:	795b      	ldrb	r3, [r3, #5]
 80006c8:	241f      	movs	r4, #31
 80006ca:	193a      	adds	r2, r7, r4
 80006cc:	7812      	ldrb	r2, [r2, #0]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d0a2      	beq.n	8000618 <main+0x3c>
			segment_write(data);
 80006d2:	197b      	adds	r3, r7, r5
 80006d4:	0018      	movs	r0, r3
 80006d6:	f7ff fee7 	bl	80004a8 <segment_write>
			old_sec = data[5];
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	197a      	adds	r2, r7, r5
 80006de:	7952      	ldrb	r2, [r2, #5]
 80006e0:	701a      	strb	r2, [r3, #0]
		HAL_RTC_GetDate(&hrtc, &sTimeStampDate, RTC_FORMAT_BIN);
 80006e2:	e799      	b.n	8000618 <main+0x3c>
 80006e4:	08002f68 	.word	0x08002f68
 80006e8:	2000018c 	.word	0x2000018c

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b099      	sub	sp, #100	; 0x64
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	242c      	movs	r4, #44	; 0x2c
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	0018      	movs	r0, r3
 80006f8:	2334      	movs	r3, #52	; 0x34
 80006fa:	001a      	movs	r2, r3
 80006fc:	2100      	movs	r1, #0
 80006fe:	f002 fbfb 	bl	8002ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000702:	2318      	movs	r3, #24
 8000704:	18fb      	adds	r3, r7, r3
 8000706:	0018      	movs	r0, r3
 8000708:	2314      	movs	r3, #20
 800070a:	001a      	movs	r2, r3
 800070c:	2100      	movs	r1, #0
 800070e:	f002 fbf3 	bl	8002ef8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000712:	003b      	movs	r3, r7
 8000714:	0018      	movs	r0, r3
 8000716:	2318      	movs	r3, #24
 8000718:	001a      	movs	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	f002 fbec 	bl	8002ef8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000720:	4b31      	ldr	r3, [pc, #196]	; (80007e8 <SystemClock_Config+0xfc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a31      	ldr	r2, [pc, #196]	; (80007ec <SystemClock_Config+0x100>)
 8000726:	401a      	ands	r2, r3
 8000728:	4b2f      	ldr	r3, [pc, #188]	; (80007e8 <SystemClock_Config+0xfc>)
 800072a:	2180      	movs	r1, #128	; 0x80
 800072c:	0109      	lsls	r1, r1, #4
 800072e:	430a      	orrs	r2, r1
 8000730:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000732:	f000 fee3 	bl	80014fc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000736:	4b2e      	ldr	r3, [pc, #184]	; (80007f0 <SystemClock_Config+0x104>)
 8000738:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800073a:	4b2d      	ldr	r3, [pc, #180]	; (80007f0 <SystemClock_Config+0x104>)
 800073c:	492b      	ldr	r1, [pc, #172]	; (80007ec <SystemClock_Config+0x100>)
 800073e:	400a      	ands	r2, r1
 8000740:	651a      	str	r2, [r3, #80]	; 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2206      	movs	r2, #6
 8000746:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000748:	193b      	adds	r3, r7, r4
 800074a:	2280      	movs	r2, #128	; 0x80
 800074c:	0052      	lsls	r2, r2, #1
 800074e:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000750:	0021      	movs	r1, r4
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2201      	movs	r2, #1
 8000756:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2210      	movs	r2, #16
 800075c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2202      	movs	r2, #2
 8000762:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000764:	187b      	adds	r3, r7, r1
 8000766:	2200      	movs	r2, #0
 8000768:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2280      	movs	r2, #128	; 0x80
 800076e:	02d2      	lsls	r2, r2, #11
 8000770:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	03d2      	lsls	r2, r2, #15
 8000778:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077a:	187b      	adds	r3, r7, r1
 800077c:	0018      	movs	r0, r3
 800077e:	f000 fecb 	bl	8001518 <HAL_RCC_OscConfig>
 8000782:	1e03      	subs	r3, r0, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000786:	f000 f9b1 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	2118      	movs	r1, #24
 800078c:	187b      	adds	r3, r7, r1
 800078e:	220f      	movs	r2, #15
 8000790:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2203      	movs	r2, #3
 8000796:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2101      	movs	r1, #1
 80007ae:	0018      	movs	r0, r3
 80007b0:	f001 fa2e 	bl	8001c10 <HAL_RCC_ClockConfig>
 80007b4:	1e03      	subs	r3, r0, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007b8:	f000 f998 	bl	8000aec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 80007bc:	003b      	movs	r3, r7
 80007be:	2228      	movs	r2, #40	; 0x28
 80007c0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007c2:	003b      	movs	r3, r7
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80007c8:	003b      	movs	r3, r7
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	0252      	lsls	r2, r2, #9
 80007ce:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d0:	003b      	movs	r3, r7
 80007d2:	0018      	movs	r0, r3
 80007d4:	f001 fc0a 	bl	8001fec <HAL_RCCEx_PeriphCLKConfig>
 80007d8:	1e03      	subs	r3, r0, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80007dc:	f000 f986 	bl	8000aec <Error_Handler>
  }
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b019      	add	sp, #100	; 0x64
 80007e6:	bd90      	pop	{r4, r7, pc}
 80007e8:	40007000 	.word	0x40007000
 80007ec:	ffffe7ff 	.word	0xffffe7ff
 80007f0:	40021000 	.word	0x40021000

080007f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_I2C1_Init+0x74>)
 80007fa:	4a1c      	ldr	r2, [pc, #112]	; (800086c <MX_I2C1_Init+0x78>)
 80007fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_I2C1_Init+0x74>)
 8000800:	4a1b      	ldr	r2, [pc, #108]	; (8000870 <MX_I2C1_Init+0x7c>)
 8000802:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_I2C1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_I2C1_Init+0x74>)
 800080c:	2201      	movs	r2, #1
 800080e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_I2C1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_I2C1_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_I2C1_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_I2C1_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_I2C1_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_I2C1_Init+0x74>)
 8000830:	0018      	movs	r0, r3
 8000832:	f000 fd35 	bl	80012a0 <HAL_I2C_Init>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800083a:	f000 f957 	bl	8000aec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <MX_I2C1_Init+0x74>)
 8000840:	2100      	movs	r1, #0
 8000842:	0018      	movs	r0, r3
 8000844:	f000 fdc2 	bl	80013cc <HAL_I2CEx_ConfigAnalogFilter>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d001      	beq.n	8000850 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800084c:	f000 f94e 	bl	8000aec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <MX_I2C1_Init+0x74>)
 8000852:	2100      	movs	r1, #0
 8000854:	0018      	movs	r0, r3
 8000856:	f000 fe05 	bl	8001464 <HAL_I2CEx_ConfigDigitalFilter>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800085e:	f000 f945 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000138 	.word	0x20000138
 800086c:	40005400 	.word	0x40005400
 8000870:	00707cbb 	.word	0x00707cbb

08000874 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_RTC_Init+0x4c>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <MX_RTC_Init+0x50>)
 800087c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_RTC_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_RTC_Init+0x4c>)
 8000886:	227f      	movs	r2, #127	; 0x7f
 8000888:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <MX_RTC_Init+0x4c>)
 800088c:	22ff      	movs	r2, #255	; 0xff
 800088e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_RTC_Init+0x4c>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <MX_RTC_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_RTC_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <MX_RTC_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <MX_RTC_Init+0x4c>)
 80008aa:	0018      	movs	r0, r3
 80008ac:	f001 fcca 	bl	8002244 <HAL_RTC_Init>
 80008b0:	1e03      	subs	r3, r0, #0
 80008b2:	d001      	beq.n	80008b8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80008b4:	f000 f91a 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008b8:	46c0      	nop			; (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	2000018c 	.word	0x2000018c
 80008c4:	40002800 	.word	0x40002800

080008c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ce:	2318      	movs	r3, #24
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	0018      	movs	r0, r3
 80008d4:	2310      	movs	r3, #16
 80008d6:	001a      	movs	r2, r3
 80008d8:	2100      	movs	r1, #0
 80008da:	f002 fb0d 	bl	8002ef8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008de:	2310      	movs	r3, #16
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	0018      	movs	r0, r3
 80008e4:	2308      	movs	r3, #8
 80008e6:	001a      	movs	r2, r3
 80008e8:	2100      	movs	r1, #0
 80008ea:	f002 fb05 	bl	8002ef8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ee:	003b      	movs	r3, r7
 80008f0:	0018      	movs	r0, r3
 80008f2:	2310      	movs	r3, #16
 80008f4:	001a      	movs	r2, r3
 80008f6:	2100      	movs	r1, #0
 80008f8:	f002 fafe 	bl	8002ef8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008fc:	4b30      	ldr	r3, [pc, #192]	; (80009c0 <MX_TIM2_Init+0xf8>)
 80008fe:	2280      	movs	r2, #128	; 0x80
 8000900:	05d2      	lsls	r2, r2, #23
 8000902:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8000904:	4b2e      	ldr	r3, [pc, #184]	; (80009c0 <MX_TIM2_Init+0xf8>)
 8000906:	221f      	movs	r2, #31
 8000908:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090a:	4b2d      	ldr	r3, [pc, #180]	; (80009c0 <MX_TIM2_Init+0xf8>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000910:	4b2b      	ldr	r3, [pc, #172]	; (80009c0 <MX_TIM2_Init+0xf8>)
 8000912:	4a2c      	ldr	r2, [pc, #176]	; (80009c4 <MX_TIM2_Init+0xfc>)
 8000914:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000916:	4b2a      	ldr	r3, [pc, #168]	; (80009c0 <MX_TIM2_Init+0xf8>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800091c:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <MX_TIM2_Init+0xf8>)
 800091e:	2280      	movs	r2, #128	; 0x80
 8000920:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000922:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <MX_TIM2_Init+0xf8>)
 8000924:	0018      	movs	r0, r3
 8000926:	f001 fe8c 	bl	8002642 <HAL_TIM_Base_Init>
 800092a:	1e03      	subs	r3, r0, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800092e:	f000 f8dd 	bl	8000aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000932:	2118      	movs	r1, #24
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2280      	movs	r2, #128	; 0x80
 8000938:	0152      	lsls	r2, r2, #5
 800093a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800093c:	187a      	adds	r2, r7, r1
 800093e:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <MX_TIM2_Init+0xf8>)
 8000940:	0011      	movs	r1, r2
 8000942:	0018      	movs	r0, r3
 8000944:	f001 ffcc 	bl	80028e0 <HAL_TIM_ConfigClockSource>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800094c:	f000 f8ce 	bl	8000aec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_TIM2_Init+0xf8>)
 8000952:	0018      	movs	r0, r3
 8000954:	f001 feb5 	bl	80026c2 <HAL_TIM_PWM_Init>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800095c:	f000 f8c6 	bl	8000aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000960:	2110      	movs	r1, #16
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2200      	movs	r2, #0
 800096c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800096e:	187a      	adds	r2, r7, r1
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_TIM2_Init+0xf8>)
 8000972:	0011      	movs	r1, r2
 8000974:	0018      	movs	r0, r3
 8000976:	f002 fa6f 	bl	8002e58 <HAL_TIMEx_MasterConfigSynchronization>
 800097a:	1e03      	subs	r3, r0, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800097e:	f000 f8b5 	bl	8000aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000982:	003b      	movs	r3, r7
 8000984:	2260      	movs	r2, #96	; 0x60
 8000986:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 499;
 8000988:	003b      	movs	r3, r7
 800098a:	22f4      	movs	r2, #244	; 0xf4
 800098c:	32ff      	adds	r2, #255	; 0xff
 800098e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000990:	003b      	movs	r3, r7
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000996:	003b      	movs	r3, r7
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800099c:	0039      	movs	r1, r7
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_TIM2_Init+0xf8>)
 80009a0:	2208      	movs	r2, #8
 80009a2:	0018      	movs	r0, r3
 80009a4:	f001 fed6 	bl	8002754 <HAL_TIM_PWM_ConfigChannel>
 80009a8:	1e03      	subs	r3, r0, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80009ac:	f000 f89e 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009b0:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <MX_TIM2_Init+0xf8>)
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 f928 	bl	8000c08 <HAL_TIM_MspPostInit>

}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b00a      	add	sp, #40	; 0x28
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200001b0 	.word	0x200001b0
 80009c4:	000003e7 	.word	0x000003e7

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b089      	sub	sp, #36	; 0x24
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	240c      	movs	r4, #12
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	0018      	movs	r0, r3
 80009d4:	2314      	movs	r3, #20
 80009d6:	001a      	movs	r2, r3
 80009d8:	2100      	movs	r1, #0
 80009da:	f002 fa8d 	bl	8002ef8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4b3f      	ldr	r3, [pc, #252]	; (8000adc <MX_GPIO_Init+0x114>)
 80009e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009e2:	4b3e      	ldr	r3, [pc, #248]	; (8000adc <MX_GPIO_Init+0x114>)
 80009e4:	2104      	movs	r1, #4
 80009e6:	430a      	orrs	r2, r1
 80009e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80009ea:	4b3c      	ldr	r3, [pc, #240]	; (8000adc <MX_GPIO_Init+0x114>)
 80009ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ee:	2204      	movs	r2, #4
 80009f0:	4013      	ands	r3, r2
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4b39      	ldr	r3, [pc, #228]	; (8000adc <MX_GPIO_Init+0x114>)
 80009f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009fa:	4b38      	ldr	r3, [pc, #224]	; (8000adc <MX_GPIO_Init+0x114>)
 80009fc:	2101      	movs	r1, #1
 80009fe:	430a      	orrs	r2, r1
 8000a00:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a02:	4b36      	ldr	r3, [pc, #216]	; (8000adc <MX_GPIO_Init+0x114>)
 8000a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a06:	2201      	movs	r2, #1
 8000a08:	4013      	ands	r3, r2
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	4b33      	ldr	r3, [pc, #204]	; (8000adc <MX_GPIO_Init+0x114>)
 8000a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a12:	4b32      	ldr	r3, [pc, #200]	; (8000adc <MX_GPIO_Init+0x114>)
 8000a14:	2102      	movs	r1, #2
 8000a16:	430a      	orrs	r2, r1
 8000a18:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a1a:	4b30      	ldr	r3, [pc, #192]	; (8000adc <MX_GPIO_Init+0x114>)
 8000a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1e:	2202      	movs	r2, #2
 8000a20:	4013      	ands	r3, r2
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLEAR_Pin|A_HT_Pin|B_HT_Pin|CLOCK_Pin
 8000a26:	492e      	ldr	r1, [pc, #184]	; (8000ae0 <MX_GPIO_Init+0x118>)
 8000a28:	23a0      	movs	r3, #160	; 0xa0
 8000a2a:	05db      	lsls	r3, r3, #23
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f000 fc18 	bl	8001264 <HAL_GPIO_WritePin>
                          |A_HO_Pin|B_HO_Pin|A_MT_Pin|B_MT_Pin
                          |A_MO_Pin|B_MO_Pin|A_ST_Pin|B_ST_Pin
                          |A_SO_Pin|B_SO_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	011b      	lsls	r3, r3, #4
 8000a38:	482a      	ldr	r0, [pc, #168]	; (8000ae4 <MX_GPIO_Init+0x11c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	0019      	movs	r1, r3
 8000a3e:	f000 fc11 	bl	8001264 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CLEAR_Pin A_HT_Pin B_HT_Pin A_HO_Pin
                           B_HO_Pin A_MT_Pin B_MT_Pin A_MO_Pin
                           B_MO_Pin A_ST_Pin B_ST_Pin A_SO_Pin
                           B_SO_Pin */
  GPIO_InitStruct.Pin = CLEAR_Pin|A_HT_Pin|B_HT_Pin|A_HO_Pin
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	4a28      	ldr	r2, [pc, #160]	; (8000ae8 <MX_GPIO_Init+0x120>)
 8000a46:	601a      	str	r2, [r3, #0]
                          |B_HO_Pin|A_MT_Pin|B_MT_Pin|A_MO_Pin
                          |B_MO_Pin|A_ST_Pin|B_ST_Pin|A_SO_Pin
                          |B_SO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	2202      	movs	r2, #2
 8000a58:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	193a      	adds	r2, r7, r4
 8000a5c:	23a0      	movs	r3, #160	; 0xa0
 8000a5e:	05db      	lsls	r3, r3, #23
 8000a60:	0011      	movs	r1, r2
 8000a62:	0018      	movs	r0, r3
 8000a64:	f000 fa90 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLOCK_Pin */
  GPIO_InitStruct.Pin = CLOCK_Pin;
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	2208      	movs	r2, #8
 8000a6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	2201      	movs	r2, #1
 8000a72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	2203      	movs	r2, #3
 8000a7e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CLOCK_GPIO_Port, &GPIO_InitStruct);
 8000a80:	193a      	adds	r2, r7, r4
 8000a82:	23a0      	movs	r3, #160	; 0xa0
 8000a84:	05db      	lsls	r3, r3, #23
 8000a86:	0011      	movs	r1, r2
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f000 fa7d 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_UP_Pin BTN_DOWN_Pin BTN_LEFT_Pin BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_DOWN_Pin|BTN_LEFT_Pin|BTN_RIGHT_Pin;
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	220f      	movs	r2, #15
 8000a92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	2200      	movs	r2, #0
 8000a98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	4a10      	ldr	r2, [pc, #64]	; (8000ae4 <MX_GPIO_Init+0x11c>)
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	0010      	movs	r0, r2
 8000aa8:	f000 fa6e 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000aac:	0021      	movs	r1, r4
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2280      	movs	r2, #128	; 0x80
 8000ab2:	0112      	lsls	r2, r2, #4
 8000ab4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2201      	movs	r2, #1
 8000aba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	4a06      	ldr	r2, [pc, #24]	; (8000ae4 <MX_GPIO_Init+0x11c>)
 8000acc:	0019      	movs	r1, r3
 8000ace:	0010      	movs	r0, r2
 8000ad0:	f000 fa5a 	bl	8000f88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b009      	add	sp, #36	; 0x24
 8000ada:	bd90      	pop	{r4, r7, pc}
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	00009fff 	.word	0x00009fff
 8000ae4:	50000400 	.word	0x50000400
 8000ae8:	00009ff7 	.word	0x00009ff7

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000af4:	e7fe      	b.n	8000af4 <Error_Handler+0x8>
	...

08000af8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <HAL_MspInit+0x24>)
 8000afe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_MspInit+0x24>)
 8000b02:	2101      	movs	r1, #1
 8000b04:	430a      	orrs	r2, r1
 8000b06:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b08:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <HAL_MspInit+0x24>)
 8000b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <HAL_MspInit+0x24>)
 8000b0e:	2180      	movs	r1, #128	; 0x80
 8000b10:	0549      	lsls	r1, r1, #21
 8000b12:	430a      	orrs	r2, r1
 8000b14:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40021000 	.word	0x40021000

08000b20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b089      	sub	sp, #36	; 0x24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	240c      	movs	r4, #12
 8000b2a:	193b      	adds	r3, r7, r4
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	2314      	movs	r3, #20
 8000b30:	001a      	movs	r2, r3
 8000b32:	2100      	movs	r1, #0
 8000b34:	f002 f9e0 	bl	8002ef8 <memset>
  if(hi2c->Instance==I2C1)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a18      	ldr	r2, [pc, #96]	; (8000ba0 <HAL_I2C_MspInit+0x80>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d129      	bne.n	8000b96 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <HAL_I2C_MspInit+0x84>)
 8000b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <HAL_I2C_MspInit+0x84>)
 8000b48:	2102      	movs	r1, #2
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <HAL_I2C_MspInit+0x84>)
 8000b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b52:	2202      	movs	r2, #2
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	22c0      	movs	r2, #192	; 0xc0
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b62:	0021      	movs	r1, r4
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	2212      	movs	r2, #18
 8000b68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	2203      	movs	r2, #3
 8000b74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2204      	movs	r2, #4
 8000b7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <HAL_I2C_MspInit+0x88>)
 8000b80:	0019      	movs	r1, r3
 8000b82:	0010      	movs	r0, r2
 8000b84:	f000 fa00 	bl	8000f88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_I2C_MspInit+0x84>)
 8000b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <HAL_I2C_MspInit+0x84>)
 8000b8e:	2180      	movs	r1, #128	; 0x80
 8000b90:	0389      	lsls	r1, r1, #14
 8000b92:	430a      	orrs	r2, r1
 8000b94:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b009      	add	sp, #36	; 0x24
 8000b9c:	bd90      	pop	{r4, r7, pc}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	40005400 	.word	0x40005400
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	50000400 	.word	0x50000400

08000bac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a06      	ldr	r2, [pc, #24]	; (8000bd4 <HAL_RTC_MspInit+0x28>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d106      	bne.n	8000bcc <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_RTC_MspInit+0x2c>)
 8000bc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <HAL_RTC_MspInit+0x2c>)
 8000bc4:	2180      	movs	r1, #128	; 0x80
 8000bc6:	02c9      	lsls	r1, r1, #11
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b002      	add	sp, #8
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40002800 	.word	0x40002800
 8000bd8:	40021000 	.word	0x40021000

08000bdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	2380      	movs	r3, #128	; 0x80
 8000bea:	05db      	lsls	r3, r3, #23
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d105      	bne.n	8000bfc <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <HAL_TIM_Base_MspInit+0x28>)
 8000bf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <HAL_TIM_Base_MspInit+0x28>)
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b002      	add	sp, #8
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40021000 	.word	0x40021000

08000c08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	240c      	movs	r4, #12
 8000c12:	193b      	adds	r3, r7, r4
 8000c14:	0018      	movs	r0, r3
 8000c16:	2314      	movs	r3, #20
 8000c18:	001a      	movs	r2, r3
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	f002 f96c 	bl	8002ef8 <memset>
  if(htim->Instance==TIM2)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	2380      	movs	r3, #128	; 0x80
 8000c26:	05db      	lsls	r3, r3, #23
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d122      	bne.n	8000c72 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <HAL_TIM_MspPostInit+0x74>)
 8000c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_TIM_MspPostInit+0x74>)
 8000c32:	2102      	movs	r1, #2
 8000c34:	430a      	orrs	r2, r1
 8000c36:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c38:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <HAL_TIM_MspPostInit+0x74>)
 8000c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	4013      	ands	r3, r2
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c44:	193b      	adds	r3, r7, r4
 8000c46:	2280      	movs	r2, #128	; 0x80
 8000c48:	00d2      	lsls	r2, r2, #3
 8000c4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	0021      	movs	r1, r4
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	2202      	movs	r2, #2
 8000c52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2202      	movs	r2, #2
 8000c64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <HAL_TIM_MspPostInit+0x78>)
 8000c6a:	0019      	movs	r1, r3
 8000c6c:	0010      	movs	r0, r2
 8000c6e:	f000 f98b 	bl	8000f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b009      	add	sp, #36	; 0x24
 8000c78:	bd90      	pop	{r4, r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	50000400 	.word	0x50000400

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <NMI_Handler+0x4>

08000c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <HardFault_Handler+0x4>

08000c90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca8:	f000 f89e 	bl	8000de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000cbc:	4813      	ldr	r0, [pc, #76]	; (8000d0c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000cbe:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cc0:	f7ff fff7 	bl	8000cb2 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000cc4:	4812      	ldr	r0, [pc, #72]	; (8000d10 <LoopForever+0x6>)
    LDR R1, [R0]
 8000cc6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000cc8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000cca:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <LoopForever+0xa>)
    CMP R1, R2
 8000ccc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000cce:	d105      	bne.n	8000cdc <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000cd0:	4811      	ldr	r0, [pc, #68]	; (8000d18 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000cd2:	4912      	ldr	r1, [pc, #72]	; (8000d1c <LoopForever+0x12>)
    STR R1, [R0]
 8000cd4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000cd6:	4812      	ldr	r0, [pc, #72]	; (8000d20 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000cd8:	4912      	ldr	r1, [pc, #72]	; (8000d24 <LoopForever+0x1a>)
    STR R1, [R0]
 8000cda:	6001      	str	r1, [r0, #0]

08000cdc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cdc:	4812      	ldr	r0, [pc, #72]	; (8000d28 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000cde:	4913      	ldr	r1, [pc, #76]	; (8000d2c <LoopForever+0x22>)
  ldr r2, =_sidata
 8000ce0:	4a13      	ldr	r2, [pc, #76]	; (8000d30 <LoopForever+0x26>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce4:	e002      	b.n	8000cec <LoopCopyDataInit>

08000ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cea:	3304      	adds	r3, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf0:	d3f9      	bcc.n	8000ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf2:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000cf4:	4c10      	ldr	r4, [pc, #64]	; (8000d38 <LoopForever+0x2e>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf8:	e001      	b.n	8000cfe <LoopFillZerobss>

08000cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cfc:	3204      	adds	r2, #4

08000cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d00:	d3fb      	bcc.n	8000cfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d02:	f002 f901 	bl	8002f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d06:	f7ff fc69 	bl	80005dc <main>

08000d0a <LoopForever>:

LoopForever:
    b LoopForever
 8000d0a:	e7fe      	b.n	8000d0a <LoopForever>
   ldr   r0, =_estack
 8000d0c:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8000d10:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000d14:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000d18:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000d1c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000d20:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000d24:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d2c:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8000d30:	08002f9c 	.word	0x08002f9c
  ldr r2, =_sbss
 8000d34:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8000d38:	200001f4 	.word	0x200001f4

08000d3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d3c:	e7fe      	b.n	8000d3c <ADC1_IRQHandler>
	...

08000d40 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <HAL_Init+0x3c>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <HAL_Init+0x3c>)
 8000d52:	2140      	movs	r1, #64	; 0x40
 8000d54:	430a      	orrs	r2, r1
 8000d56:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f000 f811 	bl	8000d80 <HAL_InitTick>
 8000d5e:	1e03      	subs	r3, r0, #0
 8000d60:	d003      	beq.n	8000d6a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	2201      	movs	r2, #1
 8000d66:	701a      	strb	r2, [r3, #0]
 8000d68:	e001      	b.n	8000d6e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d6a:	f7ff fec5 	bl	8000af8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	781b      	ldrb	r3, [r3, #0]
}
 8000d72:	0018      	movs	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b002      	add	sp, #8
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	40022000 	.word	0x40022000

08000d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <HAL_InitTick+0x5c>)
 8000d8a:	681c      	ldr	r4, [r3, #0]
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <HAL_InitTick+0x60>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	0019      	movs	r1, r3
 8000d92:	23fa      	movs	r3, #250	; 0xfa
 8000d94:	0098      	lsls	r0, r3, #2
 8000d96:	f7ff f9b7 	bl	8000108 <__udivsi3>
 8000d9a:	0003      	movs	r3, r0
 8000d9c:	0019      	movs	r1, r3
 8000d9e:	0020      	movs	r0, r4
 8000da0:	f7ff f9b2 	bl	8000108 <__udivsi3>
 8000da4:	0003      	movs	r3, r0
 8000da6:	0018      	movs	r0, r3
 8000da8:	f000 f8e1 	bl	8000f6e <HAL_SYSTICK_Config>
 8000dac:	1e03      	subs	r3, r0, #0
 8000dae:	d001      	beq.n	8000db4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	e00f      	b.n	8000dd4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2b03      	cmp	r3, #3
 8000db8:	d80b      	bhi.n	8000dd2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	425b      	negs	r3, r3
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f000 f8be 	bl	8000f44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_InitTick+0x64>)
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e000      	b.n	8000dd4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
}
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b003      	add	sp, #12
 8000dda:	bd90      	pop	{r4, r7, pc}
 8000ddc:	20000110 	.word	0x20000110
 8000de0:	20000118 	.word	0x20000118
 8000de4:	20000114 	.word	0x20000114

08000de8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <HAL_IncTick+0x1c>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	001a      	movs	r2, r3
 8000df2:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_IncTick+0x20>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	18d2      	adds	r2, r2, r3
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <HAL_IncTick+0x20>)
 8000dfa:	601a      	str	r2, [r3, #0]
}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	20000118 	.word	0x20000118
 8000e08:	200001f0 	.word	0x200001f0

08000e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b02      	ldr	r3, [pc, #8]	; (8000e1c <HAL_GetTick+0x10>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	0018      	movs	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	200001f0 	.word	0x200001f0

08000e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	0002      	movs	r2, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	1dfb      	adds	r3, r7, #7
 8000e2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e2e:	1dfb      	adds	r3, r7, #7
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b7f      	cmp	r3, #127	; 0x7f
 8000e34:	d828      	bhi.n	8000e88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e36:	4a2f      	ldr	r2, [pc, #188]	; (8000ef4 <__NVIC_SetPriority+0xd4>)
 8000e38:	1dfb      	adds	r3, r7, #7
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	b25b      	sxtb	r3, r3
 8000e3e:	089b      	lsrs	r3, r3, #2
 8000e40:	33c0      	adds	r3, #192	; 0xc0
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	589b      	ldr	r3, [r3, r2]
 8000e46:	1dfa      	adds	r2, r7, #7
 8000e48:	7812      	ldrb	r2, [r2, #0]
 8000e4a:	0011      	movs	r1, r2
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	400a      	ands	r2, r1
 8000e50:	00d2      	lsls	r2, r2, #3
 8000e52:	21ff      	movs	r1, #255	; 0xff
 8000e54:	4091      	lsls	r1, r2
 8000e56:	000a      	movs	r2, r1
 8000e58:	43d2      	mvns	r2, r2
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	019b      	lsls	r3, r3, #6
 8000e62:	22ff      	movs	r2, #255	; 0xff
 8000e64:	401a      	ands	r2, r3
 8000e66:	1dfb      	adds	r3, r7, #7
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	4003      	ands	r3, r0
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e74:	481f      	ldr	r0, [pc, #124]	; (8000ef4 <__NVIC_SetPriority+0xd4>)
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	b25b      	sxtb	r3, r3
 8000e7c:	089b      	lsrs	r3, r3, #2
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	33c0      	adds	r3, #192	; 0xc0
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e86:	e031      	b.n	8000eec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e88:	4a1b      	ldr	r2, [pc, #108]	; (8000ef8 <__NVIC_SetPriority+0xd8>)
 8000e8a:	1dfb      	adds	r3, r7, #7
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	0019      	movs	r1, r3
 8000e90:	230f      	movs	r3, #15
 8000e92:	400b      	ands	r3, r1
 8000e94:	3b08      	subs	r3, #8
 8000e96:	089b      	lsrs	r3, r3, #2
 8000e98:	3306      	adds	r3, #6
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	18d3      	adds	r3, r2, r3
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	1dfa      	adds	r2, r7, #7
 8000ea4:	7812      	ldrb	r2, [r2, #0]
 8000ea6:	0011      	movs	r1, r2
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	400a      	ands	r2, r1
 8000eac:	00d2      	lsls	r2, r2, #3
 8000eae:	21ff      	movs	r1, #255	; 0xff
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	000a      	movs	r2, r1
 8000eb4:	43d2      	mvns	r2, r2
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	019b      	lsls	r3, r3, #6
 8000ebe:	22ff      	movs	r2, #255	; 0xff
 8000ec0:	401a      	ands	r2, r3
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	2303      	movs	r3, #3
 8000eca:	4003      	ands	r3, r0
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed0:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <__NVIC_SetPriority+0xd8>)
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	001c      	movs	r4, r3
 8000ed8:	230f      	movs	r3, #15
 8000eda:	4023      	ands	r3, r4
 8000edc:	3b08      	subs	r3, #8
 8000ede:	089b      	lsrs	r3, r3, #2
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	3306      	adds	r3, #6
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	18c3      	adds	r3, r0, r3
 8000ee8:	3304      	adds	r3, #4
 8000eea:	601a      	str	r2, [r3, #0]
}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b003      	add	sp, #12
 8000ef2:	bd90      	pop	{r4, r7, pc}
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	1e5a      	subs	r2, r3, #1
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	045b      	lsls	r3, r3, #17
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d301      	bcc.n	8000f14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f10:	2301      	movs	r3, #1
 8000f12:	e010      	b.n	8000f36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f14:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <SysTick_Config+0x44>)
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	3a01      	subs	r2, #1
 8000f1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	425b      	negs	r3, r3
 8000f20:	2103      	movs	r1, #3
 8000f22:	0018      	movs	r0, r3
 8000f24:	f7ff ff7c 	bl	8000e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <SysTick_Config+0x44>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <SysTick_Config+0x44>)
 8000f30:	2207      	movs	r2, #7
 8000f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	0018      	movs	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b002      	add	sp, #8
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	e000e010 	.word	0xe000e010

08000f44 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	210f      	movs	r1, #15
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	1c02      	adds	r2, r0, #0
 8000f54:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	b25b      	sxtb	r3, r3
 8000f5e:	0011      	movs	r1, r2
 8000f60:	0018      	movs	r0, r3
 8000f62:	f7ff ff5d 	bl	8000e20 <__NVIC_SetPriority>
}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b004      	add	sp, #16
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f7ff ffbf 	bl	8000efc <SysTick_Config>
 8000f7e:	0003      	movs	r3, r0
}
 8000f80:	0018      	movs	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b002      	add	sp, #8
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f9e:	e149      	b.n	8001234 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	4091      	lsls	r1, r2
 8000faa:	000a      	movs	r2, r1
 8000fac:	4013      	ands	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d100      	bne.n	8000fb8 <HAL_GPIO_Init+0x30>
 8000fb6:	e13a      	b.n	800122e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d005      	beq.n	8000fd0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2203      	movs	r2, #3
 8000fca:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d130      	bne.n	8001032 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	409a      	lsls	r2, r3
 8000fde:	0013      	movs	r3, r2
 8000fe0:	43da      	mvns	r2, r3
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	68da      	ldr	r2, [r3, #12]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	409a      	lsls	r2, r3
 8000ff2:	0013      	movs	r3, r2
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001006:	2201      	movs	r2, #1
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	409a      	lsls	r2, r3
 800100c:	0013      	movs	r3, r2
 800100e:	43da      	mvns	r2, r3
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	091b      	lsrs	r3, r3, #4
 800101c:	2201      	movs	r2, #1
 800101e:	401a      	ands	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	409a      	lsls	r2, r3
 8001024:	0013      	movs	r3, r2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2203      	movs	r2, #3
 8001038:	4013      	ands	r3, r2
 800103a:	2b03      	cmp	r3, #3
 800103c:	d017      	beq.n	800106e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2203      	movs	r2, #3
 800104a:	409a      	lsls	r2, r3
 800104c:	0013      	movs	r3, r2
 800104e:	43da      	mvns	r2, r3
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	409a      	lsls	r2, r3
 8001060:	0013      	movs	r3, r2
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2203      	movs	r2, #3
 8001074:	4013      	ands	r3, r2
 8001076:	2b02      	cmp	r3, #2
 8001078:	d123      	bne.n	80010c2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	08da      	lsrs	r2, r3, #3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3208      	adds	r2, #8
 8001082:	0092      	lsls	r2, r2, #2
 8001084:	58d3      	ldr	r3, [r2, r3]
 8001086:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	2207      	movs	r2, #7
 800108c:	4013      	ands	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	220f      	movs	r2, #15
 8001092:	409a      	lsls	r2, r3
 8001094:	0013      	movs	r3, r2
 8001096:	43da      	mvns	r2, r3
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	691a      	ldr	r2, [r3, #16]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	2107      	movs	r1, #7
 80010a6:	400b      	ands	r3, r1
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	409a      	lsls	r2, r3
 80010ac:	0013      	movs	r3, r2
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	08da      	lsrs	r2, r3, #3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3208      	adds	r2, #8
 80010bc:	0092      	lsls	r2, r2, #2
 80010be:	6939      	ldr	r1, [r7, #16]
 80010c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	2203      	movs	r2, #3
 80010ce:	409a      	lsls	r2, r3
 80010d0:	0013      	movs	r3, r2
 80010d2:	43da      	mvns	r2, r3
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2203      	movs	r2, #3
 80010e0:	401a      	ands	r2, r3
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	409a      	lsls	r2, r3
 80010e8:	0013      	movs	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	23c0      	movs	r3, #192	; 0xc0
 80010fc:	029b      	lsls	r3, r3, #10
 80010fe:	4013      	ands	r3, r2
 8001100:	d100      	bne.n	8001104 <HAL_GPIO_Init+0x17c>
 8001102:	e094      	b.n	800122e <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001104:	4b51      	ldr	r3, [pc, #324]	; (800124c <HAL_GPIO_Init+0x2c4>)
 8001106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001108:	4b50      	ldr	r3, [pc, #320]	; (800124c <HAL_GPIO_Init+0x2c4>)
 800110a:	2101      	movs	r1, #1
 800110c:	430a      	orrs	r2, r1
 800110e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001110:	4a4f      	ldr	r2, [pc, #316]	; (8001250 <HAL_GPIO_Init+0x2c8>)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	3302      	adds	r3, #2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	589b      	ldr	r3, [r3, r2]
 800111c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	2203      	movs	r2, #3
 8001122:	4013      	ands	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	220f      	movs	r2, #15
 8001128:	409a      	lsls	r2, r3
 800112a:	0013      	movs	r3, r2
 800112c:	43da      	mvns	r2, r3
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	23a0      	movs	r3, #160	; 0xa0
 8001138:	05db      	lsls	r3, r3, #23
 800113a:	429a      	cmp	r2, r3
 800113c:	d013      	beq.n	8001166 <HAL_GPIO_Init+0x1de>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a44      	ldr	r2, [pc, #272]	; (8001254 <HAL_GPIO_Init+0x2cc>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d00d      	beq.n	8001162 <HAL_GPIO_Init+0x1da>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a43      	ldr	r2, [pc, #268]	; (8001258 <HAL_GPIO_Init+0x2d0>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d007      	beq.n	800115e <HAL_GPIO_Init+0x1d6>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a42      	ldr	r2, [pc, #264]	; (800125c <HAL_GPIO_Init+0x2d4>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d101      	bne.n	800115a <HAL_GPIO_Init+0x1d2>
 8001156:	2305      	movs	r3, #5
 8001158:	e006      	b.n	8001168 <HAL_GPIO_Init+0x1e0>
 800115a:	2306      	movs	r3, #6
 800115c:	e004      	b.n	8001168 <HAL_GPIO_Init+0x1e0>
 800115e:	2302      	movs	r3, #2
 8001160:	e002      	b.n	8001168 <HAL_GPIO_Init+0x1e0>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <HAL_GPIO_Init+0x1e0>
 8001166:	2300      	movs	r3, #0
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	2103      	movs	r1, #3
 800116c:	400a      	ands	r2, r1
 800116e:	0092      	lsls	r2, r2, #2
 8001170:	4093      	lsls	r3, r2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001178:	4935      	ldr	r1, [pc, #212]	; (8001250 <HAL_GPIO_Init+0x2c8>)
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	3302      	adds	r3, #2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001186:	4b36      	ldr	r3, [pc, #216]	; (8001260 <HAL_GPIO_Init+0x2d8>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	43da      	mvns	r2, r3
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	035b      	lsls	r3, r3, #13
 800119e:	4013      	ands	r3, r2
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011aa:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <HAL_GPIO_Init+0x2d8>)
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011b0:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <HAL_GPIO_Init+0x2d8>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	43da      	mvns	r2, r3
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	039b      	lsls	r3, r3, #14
 80011c8:	4013      	ands	r3, r2
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011d4:	4b22      	ldr	r3, [pc, #136]	; (8001260 <HAL_GPIO_Init+0x2d8>)
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80011da:	4b21      	ldr	r3, [pc, #132]	; (8001260 <HAL_GPIO_Init+0x2d8>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	43da      	mvns	r2, r3
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	029b      	lsls	r3, r3, #10
 80011f2:	4013      	ands	r3, r2
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <HAL_GPIO_Init+0x2d8>)
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001204:	4b16      	ldr	r3, [pc, #88]	; (8001260 <HAL_GPIO_Init+0x2d8>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	43da      	mvns	r2, r3
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	025b      	lsls	r3, r3, #9
 800121c:	4013      	ands	r3, r2
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001228:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <HAL_GPIO_Init+0x2d8>)
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	3301      	adds	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	40da      	lsrs	r2, r3
 800123c:	1e13      	subs	r3, r2, #0
 800123e:	d000      	beq.n	8001242 <HAL_GPIO_Init+0x2ba>
 8001240:	e6ae      	b.n	8000fa0 <HAL_GPIO_Init+0x18>
  }
}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	b006      	add	sp, #24
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40021000 	.word	0x40021000
 8001250:	40010000 	.word	0x40010000
 8001254:	50000400 	.word	0x50000400
 8001258:	50000800 	.word	0x50000800
 800125c:	50001c00 	.word	0x50001c00
 8001260:	40010400 	.word	0x40010400

08001264 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	0008      	movs	r0, r1
 800126e:	0011      	movs	r1, r2
 8001270:	1cbb      	adds	r3, r7, #2
 8001272:	1c02      	adds	r2, r0, #0
 8001274:	801a      	strh	r2, [r3, #0]
 8001276:	1c7b      	adds	r3, r7, #1
 8001278:	1c0a      	adds	r2, r1, #0
 800127a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800127c:	1c7b      	adds	r3, r7, #1
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d004      	beq.n	800128e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001284:	1cbb      	adds	r3, r7, #2
 8001286:	881a      	ldrh	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800128c:	e003      	b.n	8001296 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800128e:	1cbb      	adds	r3, r7, #2
 8001290:	881a      	ldrh	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	b002      	add	sp, #8
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e082      	b.n	80013b8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2241      	movs	r2, #65	; 0x41
 80012b6:	5c9b      	ldrb	r3, [r3, r2]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d107      	bne.n	80012ce <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2240      	movs	r2, #64	; 0x40
 80012c2:	2100      	movs	r1, #0
 80012c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	0018      	movs	r0, r3
 80012ca:	f7ff fc29 	bl	8000b20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2241      	movs	r2, #65	; 0x41
 80012d2:	2124      	movs	r1, #36	; 0x24
 80012d4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2101      	movs	r1, #1
 80012e2:	438a      	bics	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4934      	ldr	r1, [pc, #208]	; (80013c0 <HAL_I2C_Init+0x120>)
 80012f0:	400a      	ands	r2, r1
 80012f2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4931      	ldr	r1, [pc, #196]	; (80013c4 <HAL_I2C_Init+0x124>)
 8001300:	400a      	ands	r2, r1
 8001302:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d108      	bne.n	800131e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2180      	movs	r1, #128	; 0x80
 8001316:	0209      	lsls	r1, r1, #8
 8001318:	430a      	orrs	r2, r1
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	e007      	b.n	800132e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2184      	movs	r1, #132	; 0x84
 8001328:	0209      	lsls	r1, r1, #8
 800132a:	430a      	orrs	r2, r1
 800132c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d104      	bne.n	8001340 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2280      	movs	r2, #128	; 0x80
 800133c:	0112      	lsls	r2, r2, #4
 800133e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	491f      	ldr	r1, [pc, #124]	; (80013c8 <HAL_I2C_Init+0x128>)
 800134c:	430a      	orrs	r2, r1
 800134e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	491a      	ldr	r1, [pc, #104]	; (80013c4 <HAL_I2C_Init+0x124>)
 800135c:	400a      	ands	r2, r1
 800135e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	431a      	orrs	r2, r3
 800136a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69d9      	ldr	r1, [r3, #28]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a1a      	ldr	r2, [r3, #32]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	430a      	orrs	r2, r1
 8001388:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2101      	movs	r1, #1
 8001396:	430a      	orrs	r2, r1
 8001398:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2241      	movs	r2, #65	; 0x41
 80013a4:	2120      	movs	r1, #32
 80013a6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2242      	movs	r2, #66	; 0x42
 80013b2:	2100      	movs	r1, #0
 80013b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	0018      	movs	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b002      	add	sp, #8
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	f0ffffff 	.word	0xf0ffffff
 80013c4:	ffff7fff 	.word	0xffff7fff
 80013c8:	02008000 	.word	0x02008000

080013cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2241      	movs	r2, #65	; 0x41
 80013da:	5c9b      	ldrb	r3, [r3, r2]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b20      	cmp	r3, #32
 80013e0:	d138      	bne.n	8001454 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2240      	movs	r2, #64	; 0x40
 80013e6:	5c9b      	ldrb	r3, [r3, r2]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d101      	bne.n	80013f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e032      	b.n	8001456 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2240      	movs	r2, #64	; 0x40
 80013f4:	2101      	movs	r1, #1
 80013f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2241      	movs	r2, #65	; 0x41
 80013fc:	2124      	movs	r1, #36	; 0x24
 80013fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2101      	movs	r1, #1
 800140c:	438a      	bics	r2, r1
 800140e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4911      	ldr	r1, [pc, #68]	; (8001460 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800141c:	400a      	ands	r2, r1
 800141e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6819      	ldr	r1, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	430a      	orrs	r2, r1
 800142e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2101      	movs	r1, #1
 800143c:	430a      	orrs	r2, r1
 800143e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2241      	movs	r2, #65	; 0x41
 8001444:	2120      	movs	r1, #32
 8001446:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2240      	movs	r2, #64	; 0x40
 800144c:	2100      	movs	r1, #0
 800144e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	e000      	b.n	8001456 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001454:	2302      	movs	r3, #2
  }
}
 8001456:	0018      	movs	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	b002      	add	sp, #8
 800145c:	bd80      	pop	{r7, pc}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	ffffefff 	.word	0xffffefff

08001464 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2241      	movs	r2, #65	; 0x41
 8001472:	5c9b      	ldrb	r3, [r3, r2]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b20      	cmp	r3, #32
 8001478:	d139      	bne.n	80014ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2240      	movs	r2, #64	; 0x40
 800147e:	5c9b      	ldrb	r3, [r3, r2]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d101      	bne.n	8001488 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001484:	2302      	movs	r3, #2
 8001486:	e033      	b.n	80014f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2240      	movs	r2, #64	; 0x40
 800148c:	2101      	movs	r1, #1
 800148e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2241      	movs	r2, #65	; 0x41
 8001494:	2124      	movs	r1, #36	; 0x24
 8001496:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2101      	movs	r1, #1
 80014a4:	438a      	bics	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a11      	ldr	r2, [pc, #68]	; (80014f8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	4313      	orrs	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2101      	movs	r1, #1
 80014d6:	430a      	orrs	r2, r1
 80014d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2241      	movs	r2, #65	; 0x41
 80014de:	2120      	movs	r1, #32
 80014e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2240      	movs	r2, #64	; 0x40
 80014e6:	2100      	movs	r1, #0
 80014e8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80014ee:	2302      	movs	r3, #2
  }
}
 80014f0:	0018      	movs	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b004      	add	sp, #16
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	fffff0ff 	.word	0xfffff0ff

080014fc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001506:	2180      	movs	r1, #128	; 0x80
 8001508:	0049      	lsls	r1, r1, #1
 800150a:	430a      	orrs	r2, r1
 800150c:	601a      	str	r2, [r3, #0]
}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40007000 	.word	0x40007000

08001518 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d102      	bne.n	800152c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	f000 fb6c 	bl	8001c04 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800152c:	4bc8      	ldr	r3, [pc, #800]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	220c      	movs	r2, #12
 8001532:	4013      	ands	r3, r2
 8001534:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001536:	4bc6      	ldr	r3, [pc, #792]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 8001538:	68da      	ldr	r2, [r3, #12]
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	025b      	lsls	r3, r3, #9
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2201      	movs	r2, #1
 8001548:	4013      	ands	r3, r2
 800154a:	d100      	bne.n	800154e <HAL_RCC_OscConfig+0x36>
 800154c:	e07d      	b.n	800164a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	2b08      	cmp	r3, #8
 8001552:	d007      	beq.n	8001564 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	2b0c      	cmp	r3, #12
 8001558:	d112      	bne.n	8001580 <HAL_RCC_OscConfig+0x68>
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	025b      	lsls	r3, r3, #9
 8001560:	429a      	cmp	r2, r3
 8001562:	d10d      	bne.n	8001580 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001564:	4bba      	ldr	r3, [pc, #744]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	2380      	movs	r3, #128	; 0x80
 800156a:	029b      	lsls	r3, r3, #10
 800156c:	4013      	ands	r3, r2
 800156e:	d100      	bne.n	8001572 <HAL_RCC_OscConfig+0x5a>
 8001570:	e06a      	b.n	8001648 <HAL_RCC_OscConfig+0x130>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d166      	bne.n	8001648 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	f000 fb42 	bl	8001c04 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	025b      	lsls	r3, r3, #9
 8001588:	429a      	cmp	r2, r3
 800158a:	d107      	bne.n	800159c <HAL_RCC_OscConfig+0x84>
 800158c:	4bb0      	ldr	r3, [pc, #704]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4baf      	ldr	r3, [pc, #700]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 8001592:	2180      	movs	r1, #128	; 0x80
 8001594:	0249      	lsls	r1, r1, #9
 8001596:	430a      	orrs	r2, r1
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	e027      	b.n	80015ec <HAL_RCC_OscConfig+0xd4>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	23a0      	movs	r3, #160	; 0xa0
 80015a2:	02db      	lsls	r3, r3, #11
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d10e      	bne.n	80015c6 <HAL_RCC_OscConfig+0xae>
 80015a8:	4ba9      	ldr	r3, [pc, #676]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4ba8      	ldr	r3, [pc, #672]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80015ae:	2180      	movs	r1, #128	; 0x80
 80015b0:	02c9      	lsls	r1, r1, #11
 80015b2:	430a      	orrs	r2, r1
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	4ba6      	ldr	r3, [pc, #664]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	4ba5      	ldr	r3, [pc, #660]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80015bc:	2180      	movs	r1, #128	; 0x80
 80015be:	0249      	lsls	r1, r1, #9
 80015c0:	430a      	orrs	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	e012      	b.n	80015ec <HAL_RCC_OscConfig+0xd4>
 80015c6:	4ba2      	ldr	r3, [pc, #648]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4ba1      	ldr	r3, [pc, #644]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80015cc:	49a1      	ldr	r1, [pc, #644]	; (8001854 <HAL_RCC_OscConfig+0x33c>)
 80015ce:	400a      	ands	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	4b9f      	ldr	r3, [pc, #636]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	025b      	lsls	r3, r3, #9
 80015da:	4013      	ands	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4b9b      	ldr	r3, [pc, #620]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b9a      	ldr	r3, [pc, #616]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80015e6:	499c      	ldr	r1, [pc, #624]	; (8001858 <HAL_RCC_OscConfig+0x340>)
 80015e8:	400a      	ands	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d014      	beq.n	800161e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fc0a 	bl	8000e0c <HAL_GetTick>
 80015f8:	0003      	movs	r3, r0
 80015fa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015fe:	f7ff fc05 	bl	8000e0c <HAL_GetTick>
 8001602:	0002      	movs	r2, r0
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b64      	cmp	r3, #100	; 0x64
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e2f9      	b.n	8001c04 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001610:	4b8f      	ldr	r3, [pc, #572]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	029b      	lsls	r3, r3, #10
 8001618:	4013      	ands	r3, r2
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0xe6>
 800161c:	e015      	b.n	800164a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161e:	f7ff fbf5 	bl	8000e0c <HAL_GetTick>
 8001622:	0003      	movs	r3, r0
 8001624:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001628:	f7ff fbf0 	bl	8000e0c <HAL_GetTick>
 800162c:	0002      	movs	r2, r0
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b64      	cmp	r3, #100	; 0x64
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e2e4      	b.n	8001c04 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800163a:	4b85      	ldr	r3, [pc, #532]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	2380      	movs	r3, #128	; 0x80
 8001640:	029b      	lsls	r3, r3, #10
 8001642:	4013      	ands	r3, r2
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x110>
 8001646:	e000      	b.n	800164a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001648:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2202      	movs	r2, #2
 8001650:	4013      	ands	r3, r2
 8001652:	d100      	bne.n	8001656 <HAL_RCC_OscConfig+0x13e>
 8001654:	e099      	b.n	800178a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	2220      	movs	r2, #32
 8001660:	4013      	ands	r3, r2
 8001662:	d009      	beq.n	8001678 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001664:	4b7a      	ldr	r3, [pc, #488]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b79      	ldr	r3, [pc, #484]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 800166a:	2120      	movs	r1, #32
 800166c:	430a      	orrs	r2, r1
 800166e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	2220      	movs	r2, #32
 8001674:	4393      	bics	r3, r2
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	2b04      	cmp	r3, #4
 800167c:	d005      	beq.n	800168a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	2b0c      	cmp	r3, #12
 8001682:	d13e      	bne.n	8001702 <HAL_RCC_OscConfig+0x1ea>
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d13b      	bne.n	8001702 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800168a:	4b71      	ldr	r3, [pc, #452]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2204      	movs	r2, #4
 8001690:	4013      	ands	r3, r2
 8001692:	d004      	beq.n	800169e <HAL_RCC_OscConfig+0x186>
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e2b2      	b.n	8001c04 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169e:	4b6c      	ldr	r3, [pc, #432]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	4a6e      	ldr	r2, [pc, #440]	; (800185c <HAL_RCC_OscConfig+0x344>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	0019      	movs	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	021a      	lsls	r2, r3, #8
 80016ae:	4b68      	ldr	r3, [pc, #416]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80016b0:	430a      	orrs	r2, r1
 80016b2:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80016b4:	4b66      	ldr	r3, [pc, #408]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2209      	movs	r2, #9
 80016ba:	4393      	bics	r3, r2
 80016bc:	0019      	movs	r1, r3
 80016be:	4b64      	ldr	r3, [pc, #400]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80016c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c2:	430a      	orrs	r2, r1
 80016c4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016c6:	f000 fbeb 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 80016ca:	0001      	movs	r1, r0
 80016cc:	4b60      	ldr	r3, [pc, #384]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	091b      	lsrs	r3, r3, #4
 80016d2:	220f      	movs	r2, #15
 80016d4:	4013      	ands	r3, r2
 80016d6:	4a62      	ldr	r2, [pc, #392]	; (8001860 <HAL_RCC_OscConfig+0x348>)
 80016d8:	5cd3      	ldrb	r3, [r2, r3]
 80016da:	000a      	movs	r2, r1
 80016dc:	40da      	lsrs	r2, r3
 80016de:	4b61      	ldr	r3, [pc, #388]	; (8001864 <HAL_RCC_OscConfig+0x34c>)
 80016e0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80016e2:	4b61      	ldr	r3, [pc, #388]	; (8001868 <HAL_RCC_OscConfig+0x350>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2513      	movs	r5, #19
 80016e8:	197c      	adds	r4, r7, r5
 80016ea:	0018      	movs	r0, r3
 80016ec:	f7ff fb48 	bl	8000d80 <HAL_InitTick>
 80016f0:	0003      	movs	r3, r0
 80016f2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80016f4:	197b      	adds	r3, r7, r5
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d046      	beq.n	800178a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80016fc:	197b      	adds	r3, r7, r5
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	e280      	b.n	8001c04 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	2b00      	cmp	r3, #0
 8001706:	d027      	beq.n	8001758 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001708:	4b51      	ldr	r3, [pc, #324]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2209      	movs	r2, #9
 800170e:	4393      	bics	r3, r2
 8001710:	0019      	movs	r1, r3
 8001712:	4b4f      	ldr	r3, [pc, #316]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 8001714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001716:	430a      	orrs	r2, r1
 8001718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171a:	f7ff fb77 	bl	8000e0c <HAL_GetTick>
 800171e:	0003      	movs	r3, r0
 8001720:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001724:	f7ff fb72 	bl	8000e0c <HAL_GetTick>
 8001728:	0002      	movs	r2, r0
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e266      	b.n	8001c04 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001736:	4b46      	ldr	r3, [pc, #280]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2204      	movs	r2, #4
 800173c:	4013      	ands	r3, r2
 800173e:	d0f1      	beq.n	8001724 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001740:	4b43      	ldr	r3, [pc, #268]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	4a45      	ldr	r2, [pc, #276]	; (800185c <HAL_RCC_OscConfig+0x344>)
 8001746:	4013      	ands	r3, r2
 8001748:	0019      	movs	r1, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	021a      	lsls	r2, r3, #8
 8001750:	4b3f      	ldr	r3, [pc, #252]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 8001752:	430a      	orrs	r2, r1
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	e018      	b.n	800178a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001758:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b3c      	ldr	r3, [pc, #240]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 800175e:	2101      	movs	r1, #1
 8001760:	438a      	bics	r2, r1
 8001762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff fb52 	bl	8000e0c <HAL_GetTick>
 8001768:	0003      	movs	r3, r0
 800176a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800176e:	f7ff fb4d 	bl	8000e0c <HAL_GetTick>
 8001772:	0002      	movs	r2, r0
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e241      	b.n	8001c04 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001780:	4b33      	ldr	r3, [pc, #204]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2204      	movs	r2, #4
 8001786:	4013      	ands	r3, r2
 8001788:	d1f1      	bne.n	800176e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2210      	movs	r2, #16
 8001790:	4013      	ands	r3, r2
 8001792:	d100      	bne.n	8001796 <HAL_RCC_OscConfig+0x27e>
 8001794:	e0a1      	b.n	80018da <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d140      	bne.n	800181e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800179c:	4b2c      	ldr	r3, [pc, #176]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4013      	ands	r3, r2
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_OscConfig+0x29c>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e227      	b.n	8001c04 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017b4:	4b26      	ldr	r3, [pc, #152]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4a2c      	ldr	r2, [pc, #176]	; (800186c <HAL_RCC_OscConfig+0x354>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	0019      	movs	r1, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1a      	ldr	r2, [r3, #32]
 80017c2:	4b23      	ldr	r3, [pc, #140]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80017c4:	430a      	orrs	r2, r1
 80017c6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017c8:	4b21      	ldr	r3, [pc, #132]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	0a19      	lsrs	r1, r3, #8
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	061a      	lsls	r2, r3, #24
 80017d6:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80017d8:	430a      	orrs	r2, r1
 80017da:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	0b5b      	lsrs	r3, r3, #13
 80017e2:	3301      	adds	r3, #1
 80017e4:	2280      	movs	r2, #128	; 0x80
 80017e6:	0212      	lsls	r2, r2, #8
 80017e8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80017ea:	4b19      	ldr	r3, [pc, #100]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	091b      	lsrs	r3, r3, #4
 80017f0:	210f      	movs	r1, #15
 80017f2:	400b      	ands	r3, r1
 80017f4:	491a      	ldr	r1, [pc, #104]	; (8001860 <HAL_RCC_OscConfig+0x348>)
 80017f6:	5ccb      	ldrb	r3, [r1, r3]
 80017f8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80017fa:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <HAL_RCC_OscConfig+0x34c>)
 80017fc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80017fe:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <HAL_RCC_OscConfig+0x350>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2513      	movs	r5, #19
 8001804:	197c      	adds	r4, r7, r5
 8001806:	0018      	movs	r0, r3
 8001808:	f7ff faba 	bl	8000d80 <HAL_InitTick>
 800180c:	0003      	movs	r3, r0
 800180e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001810:	197b      	adds	r3, r7, r5
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d060      	beq.n	80018da <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001818:	197b      	adds	r3, r7, r5
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	e1f2      	b.n	8001c04 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d03f      	beq.n	80018a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001826:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 800182c:	2180      	movs	r1, #128	; 0x80
 800182e:	0049      	lsls	r1, r1, #1
 8001830:	430a      	orrs	r2, r1
 8001832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7ff faea 	bl	8000e0c <HAL_GetTick>
 8001838:	0003      	movs	r3, r0
 800183a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800183c:	e018      	b.n	8001870 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800183e:	f7ff fae5 	bl	8000e0c <HAL_GetTick>
 8001842:	0002      	movs	r2, r0
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d911      	bls.n	8001870 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e1d9      	b.n	8001c04 <HAL_RCC_OscConfig+0x6ec>
 8001850:	40021000 	.word	0x40021000
 8001854:	fffeffff 	.word	0xfffeffff
 8001858:	fffbffff 	.word	0xfffbffff
 800185c:	ffffe0ff 	.word	0xffffe0ff
 8001860:	08002f70 	.word	0x08002f70
 8001864:	20000110 	.word	0x20000110
 8001868:	20000114 	.word	0x20000114
 800186c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001870:	4bc9      	ldr	r3, [pc, #804]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4013      	ands	r3, r2
 800187a:	d0e0      	beq.n	800183e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800187c:	4bc6      	ldr	r3, [pc, #792]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	4ac6      	ldr	r2, [pc, #792]	; (8001b9c <HAL_RCC_OscConfig+0x684>)
 8001882:	4013      	ands	r3, r2
 8001884:	0019      	movs	r1, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a1a      	ldr	r2, [r3, #32]
 800188a:	4bc3      	ldr	r3, [pc, #780]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 800188c:	430a      	orrs	r2, r1
 800188e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001890:	4bc1      	ldr	r3, [pc, #772]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	021b      	lsls	r3, r3, #8
 8001896:	0a19      	lsrs	r1, r3, #8
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	061a      	lsls	r2, r3, #24
 800189e:	4bbe      	ldr	r3, [pc, #760]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 80018a0:	430a      	orrs	r2, r1
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	e019      	b.n	80018da <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018a6:	4bbc      	ldr	r3, [pc, #752]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	4bbb      	ldr	r3, [pc, #748]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 80018ac:	49bc      	ldr	r1, [pc, #752]	; (8001ba0 <HAL_RCC_OscConfig+0x688>)
 80018ae:	400a      	ands	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b2:	f7ff faab 	bl	8000e0c <HAL_GetTick>
 80018b6:	0003      	movs	r3, r0
 80018b8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018bc:	f7ff faa6 	bl	8000e0c <HAL_GetTick>
 80018c0:	0002      	movs	r2, r0
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e19a      	b.n	8001c04 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80018ce:	4bb2      	ldr	r3, [pc, #712]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4013      	ands	r3, r2
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2208      	movs	r2, #8
 80018e0:	4013      	ands	r3, r2
 80018e2:	d036      	beq.n	8001952 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d019      	beq.n	8001920 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ec:	4baa      	ldr	r3, [pc, #680]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 80018ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018f0:	4ba9      	ldr	r3, [pc, #676]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 80018f2:	2101      	movs	r1, #1
 80018f4:	430a      	orrs	r2, r1
 80018f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f8:	f7ff fa88 	bl	8000e0c <HAL_GetTick>
 80018fc:	0003      	movs	r3, r0
 80018fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001902:	f7ff fa83 	bl	8000e0c <HAL_GetTick>
 8001906:	0002      	movs	r2, r0
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e177      	b.n	8001c04 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001914:	4ba0      	ldr	r3, [pc, #640]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001918:	2202      	movs	r2, #2
 800191a:	4013      	ands	r3, r2
 800191c:	d0f1      	beq.n	8001902 <HAL_RCC_OscConfig+0x3ea>
 800191e:	e018      	b.n	8001952 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001920:	4b9d      	ldr	r3, [pc, #628]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001922:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001924:	4b9c      	ldr	r3, [pc, #624]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001926:	2101      	movs	r1, #1
 8001928:	438a      	bics	r2, r1
 800192a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192c:	f7ff fa6e 	bl	8000e0c <HAL_GetTick>
 8001930:	0003      	movs	r3, r0
 8001932:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001936:	f7ff fa69 	bl	8000e0c <HAL_GetTick>
 800193a:	0002      	movs	r2, r0
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e15d      	b.n	8001c04 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001948:	4b93      	ldr	r3, [pc, #588]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 800194a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800194c:	2202      	movs	r2, #2
 800194e:	4013      	ands	r3, r2
 8001950:	d1f1      	bne.n	8001936 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2204      	movs	r2, #4
 8001958:	4013      	ands	r3, r2
 800195a:	d100      	bne.n	800195e <HAL_RCC_OscConfig+0x446>
 800195c:	e0ae      	b.n	8001abc <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800195e:	2023      	movs	r0, #35	; 0x23
 8001960:	183b      	adds	r3, r7, r0
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001966:	4b8c      	ldr	r3, [pc, #560]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	055b      	lsls	r3, r3, #21
 800196e:	4013      	ands	r3, r2
 8001970:	d109      	bne.n	8001986 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	4b89      	ldr	r3, [pc, #548]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001976:	4b88      	ldr	r3, [pc, #544]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001978:	2180      	movs	r1, #128	; 0x80
 800197a:	0549      	lsls	r1, r1, #21
 800197c:	430a      	orrs	r2, r1
 800197e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001980:	183b      	adds	r3, r7, r0
 8001982:	2201      	movs	r2, #1
 8001984:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001986:	4b87      	ldr	r3, [pc, #540]	; (8001ba4 <HAL_RCC_OscConfig+0x68c>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	2380      	movs	r3, #128	; 0x80
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4013      	ands	r3, r2
 8001990:	d11a      	bne.n	80019c8 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001992:	4b84      	ldr	r3, [pc, #528]	; (8001ba4 <HAL_RCC_OscConfig+0x68c>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	4b83      	ldr	r3, [pc, #524]	; (8001ba4 <HAL_RCC_OscConfig+0x68c>)
 8001998:	2180      	movs	r1, #128	; 0x80
 800199a:	0049      	lsls	r1, r1, #1
 800199c:	430a      	orrs	r2, r1
 800199e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a0:	f7ff fa34 	bl	8000e0c <HAL_GetTick>
 80019a4:	0003      	movs	r3, r0
 80019a6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019aa:	f7ff fa2f 	bl	8000e0c <HAL_GetTick>
 80019ae:	0002      	movs	r2, r0
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b64      	cmp	r3, #100	; 0x64
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e123      	b.n	8001c04 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019bc:	4b79      	ldr	r3, [pc, #484]	; (8001ba4 <HAL_RCC_OscConfig+0x68c>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4013      	ands	r3, r2
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d107      	bne.n	80019e4 <HAL_RCC_OscConfig+0x4cc>
 80019d4:	4b70      	ldr	r3, [pc, #448]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 80019d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019d8:	4b6f      	ldr	r3, [pc, #444]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 80019da:	2180      	movs	r1, #128	; 0x80
 80019dc:	0049      	lsls	r1, r1, #1
 80019de:	430a      	orrs	r2, r1
 80019e0:	651a      	str	r2, [r3, #80]	; 0x50
 80019e2:	e031      	b.n	8001a48 <HAL_RCC_OscConfig+0x530>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d10c      	bne.n	8001a06 <HAL_RCC_OscConfig+0x4ee>
 80019ec:	4b6a      	ldr	r3, [pc, #424]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 80019ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019f0:	4b69      	ldr	r3, [pc, #420]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 80019f2:	496b      	ldr	r1, [pc, #428]	; (8001ba0 <HAL_RCC_OscConfig+0x688>)
 80019f4:	400a      	ands	r2, r1
 80019f6:	651a      	str	r2, [r3, #80]	; 0x50
 80019f8:	4b67      	ldr	r3, [pc, #412]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 80019fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019fc:	4b66      	ldr	r3, [pc, #408]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 80019fe:	496a      	ldr	r1, [pc, #424]	; (8001ba8 <HAL_RCC_OscConfig+0x690>)
 8001a00:	400a      	ands	r2, r1
 8001a02:	651a      	str	r2, [r3, #80]	; 0x50
 8001a04:	e020      	b.n	8001a48 <HAL_RCC_OscConfig+0x530>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	23a0      	movs	r3, #160	; 0xa0
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d10e      	bne.n	8001a30 <HAL_RCC_OscConfig+0x518>
 8001a12:	4b61      	ldr	r3, [pc, #388]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001a14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a16:	4b60      	ldr	r3, [pc, #384]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001a18:	2180      	movs	r1, #128	; 0x80
 8001a1a:	00c9      	lsls	r1, r1, #3
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	651a      	str	r2, [r3, #80]	; 0x50
 8001a20:	4b5d      	ldr	r3, [pc, #372]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001a22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a24:	4b5c      	ldr	r3, [pc, #368]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001a26:	2180      	movs	r1, #128	; 0x80
 8001a28:	0049      	lsls	r1, r1, #1
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	651a      	str	r2, [r3, #80]	; 0x50
 8001a2e:	e00b      	b.n	8001a48 <HAL_RCC_OscConfig+0x530>
 8001a30:	4b59      	ldr	r3, [pc, #356]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001a32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a34:	4b58      	ldr	r3, [pc, #352]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001a36:	495a      	ldr	r1, [pc, #360]	; (8001ba0 <HAL_RCC_OscConfig+0x688>)
 8001a38:	400a      	ands	r2, r1
 8001a3a:	651a      	str	r2, [r3, #80]	; 0x50
 8001a3c:	4b56      	ldr	r3, [pc, #344]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001a3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a40:	4b55      	ldr	r3, [pc, #340]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001a42:	4959      	ldr	r1, [pc, #356]	; (8001ba8 <HAL_RCC_OscConfig+0x690>)
 8001a44:	400a      	ands	r2, r1
 8001a46:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d015      	beq.n	8001a7c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a50:	f7ff f9dc 	bl	8000e0c <HAL_GetTick>
 8001a54:	0003      	movs	r3, r0
 8001a56:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a58:	e009      	b.n	8001a6e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a5a:	f7ff f9d7 	bl	8000e0c <HAL_GetTick>
 8001a5e:	0002      	movs	r2, r0
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	4a51      	ldr	r2, [pc, #324]	; (8001bac <HAL_RCC_OscConfig+0x694>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e0ca      	b.n	8001c04 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a6e:	4b4a      	ldr	r3, [pc, #296]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001a70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4013      	ands	r3, r2
 8001a78:	d0ef      	beq.n	8001a5a <HAL_RCC_OscConfig+0x542>
 8001a7a:	e014      	b.n	8001aa6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7c:	f7ff f9c6 	bl	8000e0c <HAL_GetTick>
 8001a80:	0003      	movs	r3, r0
 8001a82:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a84:	e009      	b.n	8001a9a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a86:	f7ff f9c1 	bl	8000e0c <HAL_GetTick>
 8001a8a:	0002      	movs	r2, r0
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	4a46      	ldr	r2, [pc, #280]	; (8001bac <HAL_RCC_OscConfig+0x694>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e0b4      	b.n	8001c04 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a9a:	4b3f      	ldr	r3, [pc, #252]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001a9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d1ef      	bne.n	8001a86 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001aa6:	2323      	movs	r3, #35	; 0x23
 8001aa8:	18fb      	adds	r3, r7, r3
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d105      	bne.n	8001abc <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab0:	4b39      	ldr	r3, [pc, #228]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ab4:	4b38      	ldr	r3, [pc, #224]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001ab6:	493e      	ldr	r1, [pc, #248]	; (8001bb0 <HAL_RCC_OscConfig+0x698>)
 8001ab8:	400a      	ands	r2, r1
 8001aba:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d100      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x5ae>
 8001ac4:	e09d      	b.n	8001c02 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	2b0c      	cmp	r3, #12
 8001aca:	d100      	bne.n	8001ace <HAL_RCC_OscConfig+0x5b6>
 8001acc:	e076      	b.n	8001bbc <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d145      	bne.n	8001b62 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad6:	4b30      	ldr	r3, [pc, #192]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	4b2f      	ldr	r3, [pc, #188]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001adc:	4935      	ldr	r1, [pc, #212]	; (8001bb4 <HAL_RCC_OscConfig+0x69c>)
 8001ade:	400a      	ands	r2, r1
 8001ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae2:	f7ff f993 	bl	8000e0c <HAL_GetTick>
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aec:	f7ff f98e 	bl	8000e0c <HAL_GetTick>
 8001af0:	0002      	movs	r2, r0
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e082      	b.n	8001c04 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001afe:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	049b      	lsls	r3, r3, #18
 8001b06:	4013      	ands	r3, r2
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b0a:	4b23      	ldr	r3, [pc, #140]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	4a2a      	ldr	r2, [pc, #168]	; (8001bb8 <HAL_RCC_OscConfig+0x6a0>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	0019      	movs	r1, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	431a      	orrs	r2, r3
 8001b24:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001b26:	430a      	orrs	r2, r1
 8001b28:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b2a:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001b30:	2180      	movs	r1, #128	; 0x80
 8001b32:	0449      	lsls	r1, r1, #17
 8001b34:	430a      	orrs	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7ff f968 	bl	8000e0c <HAL_GetTick>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b42:	f7ff f963 	bl	8000e0c <HAL_GetTick>
 8001b46:	0002      	movs	r2, r0
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e057      	b.n	8001c04 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b54:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	049b      	lsls	r3, r3, #18
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x62a>
 8001b60:	e04f      	b.n	8001c02 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b62:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001b68:	4912      	ldr	r1, [pc, #72]	; (8001bb4 <HAL_RCC_OscConfig+0x69c>)
 8001b6a:	400a      	ands	r2, r1
 8001b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6e:	f7ff f94d 	bl	8000e0c <HAL_GetTick>
 8001b72:	0003      	movs	r3, r0
 8001b74:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b78:	f7ff f948 	bl	8000e0c <HAL_GetTick>
 8001b7c:	0002      	movs	r2, r0
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e03c      	b.n	8001c04 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b8a:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	049b      	lsls	r3, r3, #18
 8001b92:	4013      	ands	r3, r2
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x660>
 8001b96:	e034      	b.n	8001c02 <HAL_RCC_OscConfig+0x6ea>
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	ffff1fff 	.word	0xffff1fff
 8001ba0:	fffffeff 	.word	0xfffffeff
 8001ba4:	40007000 	.word	0x40007000
 8001ba8:	fffffbff 	.word	0xfffffbff
 8001bac:	00001388 	.word	0x00001388
 8001bb0:	efffffff 	.word	0xefffffff
 8001bb4:	feffffff 	.word	0xfeffffff
 8001bb8:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e01d      	b.n	8001c04 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bc8:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <HAL_RCC_OscConfig+0x6f4>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	025b      	lsls	r3, r3, #9
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d10f      	bne.n	8001bfe <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	23f0      	movs	r3, #240	; 0xf0
 8001be2:	039b      	lsls	r3, r3, #14
 8001be4:	401a      	ands	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d107      	bne.n	8001bfe <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	23c0      	movs	r3, #192	; 0xc0
 8001bf2:	041b      	lsls	r3, r3, #16
 8001bf4:	401a      	ands	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d001      	beq.n	8001c02 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	0018      	movs	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b00a      	add	sp, #40	; 0x28
 8001c0a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c0c:	40021000 	.word	0x40021000

08001c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c10:	b5b0      	push	{r4, r5, r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e128      	b.n	8001e76 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c24:	4b96      	ldr	r3, [pc, #600]	; (8001e80 <HAL_RCC_ClockConfig+0x270>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d91e      	bls.n	8001c70 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c32:	4b93      	ldr	r3, [pc, #588]	; (8001e80 <HAL_RCC_ClockConfig+0x270>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2201      	movs	r2, #1
 8001c38:	4393      	bics	r3, r2
 8001c3a:	0019      	movs	r1, r3
 8001c3c:	4b90      	ldr	r3, [pc, #576]	; (8001e80 <HAL_RCC_ClockConfig+0x270>)
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c44:	f7ff f8e2 	bl	8000e0c <HAL_GetTick>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4c:	e009      	b.n	8001c62 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c4e:	f7ff f8dd 	bl	8000e0c <HAL_GetTick>
 8001c52:	0002      	movs	r2, r0
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	4a8a      	ldr	r2, [pc, #552]	; (8001e84 <HAL_RCC_ClockConfig+0x274>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e109      	b.n	8001e76 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c62:	4b87      	ldr	r3, [pc, #540]	; (8001e80 <HAL_RCC_ClockConfig+0x270>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2201      	movs	r2, #1
 8001c68:	4013      	ands	r3, r2
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d1ee      	bne.n	8001c4e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2202      	movs	r2, #2
 8001c76:	4013      	ands	r3, r2
 8001c78:	d009      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c7a:	4b83      	ldr	r3, [pc, #524]	; (8001e88 <HAL_RCC_ClockConfig+0x278>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	22f0      	movs	r2, #240	; 0xf0
 8001c80:	4393      	bics	r3, r2
 8001c82:	0019      	movs	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	4b7f      	ldr	r3, [pc, #508]	; (8001e88 <HAL_RCC_ClockConfig+0x278>)
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2201      	movs	r2, #1
 8001c94:	4013      	ands	r3, r2
 8001c96:	d100      	bne.n	8001c9a <HAL_RCC_ClockConfig+0x8a>
 8001c98:	e089      	b.n	8001dae <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d107      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ca2:	4b79      	ldr	r3, [pc, #484]	; (8001e88 <HAL_RCC_ClockConfig+0x278>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	029b      	lsls	r3, r3, #10
 8001caa:	4013      	ands	r3, r2
 8001cac:	d120      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e0e1      	b.n	8001e76 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d107      	bne.n	8001cca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cba:	4b73      	ldr	r3, [pc, #460]	; (8001e88 <HAL_RCC_ClockConfig+0x278>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	049b      	lsls	r3, r3, #18
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d114      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e0d5      	b.n	8001e76 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d106      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cd2:	4b6d      	ldr	r3, [pc, #436]	; (8001e88 <HAL_RCC_ClockConfig+0x278>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d109      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e0ca      	b.n	8001e76 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ce0:	4b69      	ldr	r3, [pc, #420]	; (8001e88 <HAL_RCC_ClockConfig+0x278>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d101      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e0c2      	b.n	8001e76 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cf0:	4b65      	ldr	r3, [pc, #404]	; (8001e88 <HAL_RCC_ClockConfig+0x278>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	4393      	bics	r3, r2
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	4b62      	ldr	r3, [pc, #392]	; (8001e88 <HAL_RCC_ClockConfig+0x278>)
 8001d00:	430a      	orrs	r2, r1
 8001d02:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d04:	f7ff f882 	bl	8000e0c <HAL_GetTick>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d111      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d14:	e009      	b.n	8001d2a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d16:	f7ff f879 	bl	8000e0c <HAL_GetTick>
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	4a58      	ldr	r2, [pc, #352]	; (8001e84 <HAL_RCC_ClockConfig+0x274>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e0a5      	b.n	8001e76 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d2a:	4b57      	ldr	r3, [pc, #348]	; (8001e88 <HAL_RCC_ClockConfig+0x278>)
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	220c      	movs	r2, #12
 8001d30:	4013      	ands	r3, r2
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d1ef      	bne.n	8001d16 <HAL_RCC_ClockConfig+0x106>
 8001d36:	e03a      	b.n	8001dae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b03      	cmp	r3, #3
 8001d3e:	d111      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d40:	e009      	b.n	8001d56 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d42:	f7ff f863 	bl	8000e0c <HAL_GetTick>
 8001d46:	0002      	movs	r2, r0
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	4a4d      	ldr	r2, [pc, #308]	; (8001e84 <HAL_RCC_ClockConfig+0x274>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e08f      	b.n	8001e76 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d56:	4b4c      	ldr	r3, [pc, #304]	; (8001e88 <HAL_RCC_ClockConfig+0x278>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2b0c      	cmp	r3, #12
 8001d60:	d1ef      	bne.n	8001d42 <HAL_RCC_ClockConfig+0x132>
 8001d62:	e024      	b.n	8001dae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d11b      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d6c:	e009      	b.n	8001d82 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6e:	f7ff f84d 	bl	8000e0c <HAL_GetTick>
 8001d72:	0002      	movs	r2, r0
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	4a42      	ldr	r2, [pc, #264]	; (8001e84 <HAL_RCC_ClockConfig+0x274>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e079      	b.n	8001e76 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d82:	4b41      	ldr	r3, [pc, #260]	; (8001e88 <HAL_RCC_ClockConfig+0x278>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	220c      	movs	r2, #12
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d1ef      	bne.n	8001d6e <HAL_RCC_ClockConfig+0x15e>
 8001d8e:	e00e      	b.n	8001dae <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d90:	f7ff f83c 	bl	8000e0c <HAL_GetTick>
 8001d94:	0002      	movs	r2, r0
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	4a3a      	ldr	r2, [pc, #232]	; (8001e84 <HAL_RCC_ClockConfig+0x274>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e068      	b.n	8001e76 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001da4:	4b38      	ldr	r3, [pc, #224]	; (8001e88 <HAL_RCC_ClockConfig+0x278>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	220c      	movs	r2, #12
 8001daa:	4013      	ands	r3, r2
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dae:	4b34      	ldr	r3, [pc, #208]	; (8001e80 <HAL_RCC_ClockConfig+0x270>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2201      	movs	r2, #1
 8001db4:	4013      	ands	r3, r2
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d21e      	bcs.n	8001dfa <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dbc:	4b30      	ldr	r3, [pc, #192]	; (8001e80 <HAL_RCC_ClockConfig+0x270>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	4393      	bics	r3, r2
 8001dc4:	0019      	movs	r1, r3
 8001dc6:	4b2e      	ldr	r3, [pc, #184]	; (8001e80 <HAL_RCC_ClockConfig+0x270>)
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001dce:	f7ff f81d 	bl	8000e0c <HAL_GetTick>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd6:	e009      	b.n	8001dec <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd8:	f7ff f818 	bl	8000e0c <HAL_GetTick>
 8001ddc:	0002      	movs	r2, r0
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	4a28      	ldr	r2, [pc, #160]	; (8001e84 <HAL_RCC_ClockConfig+0x274>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e044      	b.n	8001e76 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dec:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <HAL_RCC_ClockConfig+0x270>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2201      	movs	r2, #1
 8001df2:	4013      	ands	r3, r2
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d1ee      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2204      	movs	r2, #4
 8001e00:	4013      	ands	r3, r2
 8001e02:	d009      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e04:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <HAL_RCC_ClockConfig+0x278>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	4a20      	ldr	r2, [pc, #128]	; (8001e8c <HAL_RCC_ClockConfig+0x27c>)
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <HAL_RCC_ClockConfig+0x278>)
 8001e14:	430a      	orrs	r2, r1
 8001e16:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2208      	movs	r2, #8
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d00a      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e22:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <HAL_RCC_ClockConfig+0x278>)
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	4a1a      	ldr	r2, [pc, #104]	; (8001e90 <HAL_RCC_ClockConfig+0x280>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	00da      	lsls	r2, r3, #3
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <HAL_RCC_ClockConfig+0x278>)
 8001e34:	430a      	orrs	r2, r1
 8001e36:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e38:	f000 f832 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8001e3c:	0001      	movs	r1, r0
 8001e3e:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_RCC_ClockConfig+0x278>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	091b      	lsrs	r3, r3, #4
 8001e44:	220f      	movs	r2, #15
 8001e46:	4013      	ands	r3, r2
 8001e48:	4a12      	ldr	r2, [pc, #72]	; (8001e94 <HAL_RCC_ClockConfig+0x284>)
 8001e4a:	5cd3      	ldrb	r3, [r2, r3]
 8001e4c:	000a      	movs	r2, r1
 8001e4e:	40da      	lsrs	r2, r3
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <HAL_RCC_ClockConfig+0x288>)
 8001e52:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <HAL_RCC_ClockConfig+0x28c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	250b      	movs	r5, #11
 8001e5a:	197c      	adds	r4, r7, r5
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f7fe ff8f 	bl	8000d80 <HAL_InitTick>
 8001e62:	0003      	movs	r3, r0
 8001e64:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001e66:	197b      	adds	r3, r7, r5
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d002      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001e6e:	197b      	adds	r3, r7, r5
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	e000      	b.n	8001e76 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	0018      	movs	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	b004      	add	sp, #16
 8001e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	40022000 	.word	0x40022000
 8001e84:	00001388 	.word	0x00001388
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	fffff8ff 	.word	0xfffff8ff
 8001e90:	ffffc7ff 	.word	0xffffc7ff
 8001e94:	08002f70 	.word	0x08002f70
 8001e98:	20000110 	.word	0x20000110
 8001e9c:	20000114 	.word	0x20000114

08001ea0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea0:	b5b0      	push	{r4, r5, r7, lr}
 8001ea2:	b08e      	sub	sp, #56	; 0x38
 8001ea4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001ea6:	4b4c      	ldr	r3, [pc, #304]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eae:	230c      	movs	r3, #12
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b0c      	cmp	r3, #12
 8001eb4:	d014      	beq.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x40>
 8001eb6:	d900      	bls.n	8001eba <HAL_RCC_GetSysClockFreq+0x1a>
 8001eb8:	e07b      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x112>
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d002      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x24>
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d00b      	beq.n	8001eda <HAL_RCC_GetSysClockFreq+0x3a>
 8001ec2:	e076      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ec4:	4b44      	ldr	r3, [pc, #272]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2210      	movs	r2, #16
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d002      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001ece:	4b43      	ldr	r3, [pc, #268]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ed0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001ed2:	e07c      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001ed4:	4b42      	ldr	r3, [pc, #264]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x140>)
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ed8:	e079      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001eda:	4b42      	ldr	r3, [pc, #264]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x144>)
 8001edc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ede:	e076      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee2:	0c9a      	lsrs	r2, r3, #18
 8001ee4:	230f      	movs	r3, #15
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	4b3f      	ldr	r3, [pc, #252]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x148>)
 8001eea:	5c9b      	ldrb	r3, [r3, r2]
 8001eec:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef0:	0d9a      	lsrs	r2, r3, #22
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001efa:	4b37      	ldr	r3, [pc, #220]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	025b      	lsls	r3, r3, #9
 8001f02:	4013      	ands	r3, r2
 8001f04:	d01a      	beq.n	8001f3c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
 8001f0e:	4a35      	ldr	r2, [pc, #212]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x144>)
 8001f10:	2300      	movs	r3, #0
 8001f12:	69b8      	ldr	r0, [r7, #24]
 8001f14:	69f9      	ldr	r1, [r7, #28]
 8001f16:	f7fe f9a3 	bl	8000260 <__aeabi_lmul>
 8001f1a:	0002      	movs	r2, r0
 8001f1c:	000b      	movs	r3, r1
 8001f1e:	0010      	movs	r0, r2
 8001f20:	0019      	movs	r1, r3
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f7fe f977 	bl	8000220 <__aeabi_uldivmod>
 8001f32:	0002      	movs	r2, r0
 8001f34:	000b      	movs	r3, r1
 8001f36:	0013      	movs	r3, r2
 8001f38:	637b      	str	r3, [r7, #52]	; 0x34
 8001f3a:	e037      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f3c:	4b26      	ldr	r3, [pc, #152]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2210      	movs	r2, #16
 8001f42:	4013      	ands	r3, r2
 8001f44:	d01a      	beq.n	8001f7c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	4a23      	ldr	r2, [pc, #140]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f50:	2300      	movs	r3, #0
 8001f52:	68b8      	ldr	r0, [r7, #8]
 8001f54:	68f9      	ldr	r1, [r7, #12]
 8001f56:	f7fe f983 	bl	8000260 <__aeabi_lmul>
 8001f5a:	0002      	movs	r2, r0
 8001f5c:	000b      	movs	r3, r1
 8001f5e:	0010      	movs	r0, r2
 8001f60:	0019      	movs	r1, r3
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	603b      	str	r3, [r7, #0]
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f7fe f957 	bl	8000220 <__aeabi_uldivmod>
 8001f72:	0002      	movs	r2, r0
 8001f74:	000b      	movs	r3, r1
 8001f76:	0013      	movs	r3, r2
 8001f78:	637b      	str	r3, [r7, #52]	; 0x34
 8001f7a:	e017      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7e:	0018      	movs	r0, r3
 8001f80:	2300      	movs	r3, #0
 8001f82:	0019      	movs	r1, r3
 8001f84:	4a16      	ldr	r2, [pc, #88]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x140>)
 8001f86:	2300      	movs	r3, #0
 8001f88:	f7fe f96a 	bl	8000260 <__aeabi_lmul>
 8001f8c:	0002      	movs	r2, r0
 8001f8e:	000b      	movs	r3, r1
 8001f90:	0010      	movs	r0, r2
 8001f92:	0019      	movs	r1, r3
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	001c      	movs	r4, r3
 8001f98:	2300      	movs	r3, #0
 8001f9a:	001d      	movs	r5, r3
 8001f9c:	0022      	movs	r2, r4
 8001f9e:	002b      	movs	r3, r5
 8001fa0:	f7fe f93e 	bl	8000220 <__aeabi_uldivmod>
 8001fa4:	0002      	movs	r2, r0
 8001fa6:	000b      	movs	r3, r1
 8001fa8:	0013      	movs	r3, r2
 8001faa:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fb0:	e00d      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	0b5b      	lsrs	r3, r3, #13
 8001fb8:	2207      	movs	r2, #7
 8001fba:	4013      	ands	r3, r2
 8001fbc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	2280      	movs	r2, #128	; 0x80
 8001fc4:	0212      	lsls	r2, r2, #8
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	0013      	movs	r3, r2
 8001fca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fcc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	b00e      	add	sp, #56	; 0x38
 8001fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	003d0900 	.word	0x003d0900
 8001fe0:	00f42400 	.word	0x00f42400
 8001fe4:	007a1200 	.word	0x007a1200
 8001fe8:	08002f80 	.word	0x08002f80

08001fec <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001ff4:	2017      	movs	r0, #23
 8001ff6:	183b      	adds	r3, r7, r0
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2220      	movs	r2, #32
 8002002:	4013      	ands	r3, r2
 8002004:	d100      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002006:	e0c7      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002008:	4b84      	ldr	r3, [pc, #528]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800200a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800200c:	2380      	movs	r3, #128	; 0x80
 800200e:	055b      	lsls	r3, r3, #21
 8002010:	4013      	ands	r3, r2
 8002012:	d109      	bne.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002014:	4b81      	ldr	r3, [pc, #516]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002018:	4b80      	ldr	r3, [pc, #512]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800201a:	2180      	movs	r1, #128	; 0x80
 800201c:	0549      	lsls	r1, r1, #21
 800201e:	430a      	orrs	r2, r1
 8002020:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002022:	183b      	adds	r3, r7, r0
 8002024:	2201      	movs	r2, #1
 8002026:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002028:	4b7d      	ldr	r3, [pc, #500]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4013      	ands	r3, r2
 8002032:	d11a      	bne.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002034:	4b7a      	ldr	r3, [pc, #488]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b79      	ldr	r3, [pc, #484]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800203a:	2180      	movs	r1, #128	; 0x80
 800203c:	0049      	lsls	r1, r1, #1
 800203e:	430a      	orrs	r2, r1
 8002040:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002042:	f7fe fee3 	bl	8000e0c <HAL_GetTick>
 8002046:	0003      	movs	r3, r0
 8002048:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204a:	e008      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800204c:	f7fe fede 	bl	8000e0c <HAL_GetTick>
 8002050:	0002      	movs	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	; 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e0d9      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205e:	4b70      	ldr	r3, [pc, #448]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	2380      	movs	r3, #128	; 0x80
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4013      	ands	r3, r2
 8002068:	d0f0      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800206a:	4b6c      	ldr	r3, [pc, #432]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	23c0      	movs	r3, #192	; 0xc0
 8002070:	039b      	lsls	r3, r3, #14
 8002072:	4013      	ands	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	23c0      	movs	r3, #192	; 0xc0
 800207c:	039b      	lsls	r3, r3, #14
 800207e:	4013      	ands	r3, r2
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	429a      	cmp	r2, r3
 8002084:	d013      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	23c0      	movs	r3, #192	; 0xc0
 800208c:	029b      	lsls	r3, r3, #10
 800208e:	401a      	ands	r2, r3
 8002090:	23c0      	movs	r3, #192	; 0xc0
 8002092:	029b      	lsls	r3, r3, #10
 8002094:	429a      	cmp	r2, r3
 8002096:	d10a      	bne.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002098:	4b60      	ldr	r3, [pc, #384]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	029b      	lsls	r3, r3, #10
 80020a0:	401a      	ands	r2, r3
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	029b      	lsls	r3, r3, #10
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d101      	bne.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e0b1      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80020ae:	4b5b      	ldr	r3, [pc, #364]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020b2:	23c0      	movs	r3, #192	; 0xc0
 80020b4:	029b      	lsls	r3, r3, #10
 80020b6:	4013      	ands	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d03b      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	23c0      	movs	r3, #192	; 0xc0
 80020c6:	029b      	lsls	r3, r3, #10
 80020c8:	4013      	ands	r3, r2
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d033      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2220      	movs	r2, #32
 80020d6:	4013      	ands	r3, r2
 80020d8:	d02e      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80020da:	4b50      	ldr	r3, [pc, #320]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020de:	4a51      	ldr	r2, [pc, #324]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020e4:	4b4d      	ldr	r3, [pc, #308]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020e8:	4b4c      	ldr	r3, [pc, #304]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020ea:	2180      	movs	r1, #128	; 0x80
 80020ec:	0309      	lsls	r1, r1, #12
 80020ee:	430a      	orrs	r2, r1
 80020f0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020f2:	4b4a      	ldr	r3, [pc, #296]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020f6:	4b49      	ldr	r3, [pc, #292]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020f8:	494b      	ldr	r1, [pc, #300]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80020fa:	400a      	ands	r2, r1
 80020fc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80020fe:	4b47      	ldr	r3, [pc, #284]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4013      	ands	r3, r2
 800210c:	d014      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210e:	f7fe fe7d 	bl	8000e0c <HAL_GetTick>
 8002112:	0003      	movs	r3, r0
 8002114:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002116:	e009      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002118:	f7fe fe78 	bl	8000e0c <HAL_GetTick>
 800211c:	0002      	movs	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	4a42      	ldr	r2, [pc, #264]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d901      	bls.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e072      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800212c:	4b3b      	ldr	r3, [pc, #236]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800212e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4013      	ands	r3, r2
 8002136:	d0ef      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2220      	movs	r2, #32
 800213e:	4013      	ands	r3, r2
 8002140:	d01f      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	23c0      	movs	r3, #192	; 0xc0
 8002148:	029b      	lsls	r3, r3, #10
 800214a:	401a      	ands	r2, r3
 800214c:	23c0      	movs	r3, #192	; 0xc0
 800214e:	029b      	lsls	r3, r3, #10
 8002150:	429a      	cmp	r2, r3
 8002152:	d10c      	bne.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002154:	4b31      	ldr	r3, [pc, #196]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a35      	ldr	r2, [pc, #212]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800215a:	4013      	ands	r3, r2
 800215c:	0019      	movs	r1, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	23c0      	movs	r3, #192	; 0xc0
 8002164:	039b      	lsls	r3, r3, #14
 8002166:	401a      	ands	r2, r3
 8002168:	4b2c      	ldr	r3, [pc, #176]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800216a:	430a      	orrs	r2, r1
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	4b2b      	ldr	r3, [pc, #172]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002170:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	23c0      	movs	r3, #192	; 0xc0
 8002178:	029b      	lsls	r3, r3, #10
 800217a:	401a      	ands	r2, r3
 800217c:	4b27      	ldr	r3, [pc, #156]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800217e:	430a      	orrs	r2, r1
 8002180:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002182:	2317      	movs	r3, #23
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d105      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218c:	4b23      	ldr	r3, [pc, #140]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800218e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002190:	4b22      	ldr	r3, [pc, #136]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002192:	4928      	ldr	r1, [pc, #160]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002194:	400a      	ands	r2, r1
 8002196:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2202      	movs	r2, #2
 800219e:	4013      	ands	r3, r2
 80021a0:	d009      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021a2:	4b1e      	ldr	r3, [pc, #120]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a6:	220c      	movs	r2, #12
 80021a8:	4393      	bics	r3, r2
 80021aa:	0019      	movs	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	4b1a      	ldr	r3, [pc, #104]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021b2:	430a      	orrs	r2, r1
 80021b4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2204      	movs	r2, #4
 80021bc:	4013      	ands	r3, r2
 80021be:	d009      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021c0:	4b16      	ldr	r3, [pc, #88]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c4:	4a1c      	ldr	r2, [pc, #112]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	0019      	movs	r1, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	4b13      	ldr	r3, [pc, #76]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021d0:	430a      	orrs	r2, r1
 80021d2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2208      	movs	r2, #8
 80021da:	4013      	ands	r3, r2
 80021dc:	d009      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021de:	4b0f      	ldr	r3, [pc, #60]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e2:	4a16      	ldr	r2, [pc, #88]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	0019      	movs	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021ee:	430a      	orrs	r2, r1
 80021f0:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2280      	movs	r2, #128	; 0x80
 80021f8:	4013      	ands	r3, r2
 80021fa:	d009      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80021fc:	4b07      	ldr	r3, [pc, #28]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002200:	4a0f      	ldr	r2, [pc, #60]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002202:	4013      	ands	r3, r2
 8002204:	0019      	movs	r1, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	4b04      	ldr	r3, [pc, #16]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800220c:	430a      	orrs	r2, r1
 800220e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	0018      	movs	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	b006      	add	sp, #24
 8002218:	bd80      	pop	{r7, pc}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	40021000 	.word	0x40021000
 8002220:	40007000 	.word	0x40007000
 8002224:	fffcffff 	.word	0xfffcffff
 8002228:	fff7ffff 	.word	0xfff7ffff
 800222c:	00001388 	.word	0x00001388
 8002230:	ffcfffff 	.word	0xffcfffff
 8002234:	efffffff 	.word	0xefffffff
 8002238:	fffff3ff 	.word	0xfffff3ff
 800223c:	ffffcfff 	.word	0xffffcfff
 8002240:	fff3ffff 	.word	0xfff3ffff

08002244 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002244:	b5b0      	push	{r4, r5, r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800224c:	230f      	movs	r3, #15
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	2201      	movs	r2, #1
 8002252:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e088      	b.n	8002370 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2221      	movs	r2, #33	; 0x21
 8002262:	5c9b      	ldrb	r3, [r3, r2]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d107      	bne.n	800227a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2220      	movs	r2, #32
 800226e:	2100      	movs	r1, #0
 8002270:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	0018      	movs	r0, r3
 8002276:	f7fe fc99 	bl	8000bac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2221      	movs	r2, #33	; 0x21
 800227e:	2102      	movs	r1, #2
 8002280:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	2210      	movs	r2, #16
 800228a:	4013      	ands	r3, r2
 800228c:	2b10      	cmp	r3, #16
 800228e:	d05f      	beq.n	8002350 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	22ca      	movs	r2, #202	; 0xca
 8002296:	625a      	str	r2, [r3, #36]	; 0x24
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2253      	movs	r2, #83	; 0x53
 800229e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80022a0:	250f      	movs	r5, #15
 80022a2:	197c      	adds	r4, r7, r5
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	0018      	movs	r0, r3
 80022a8:	f000 f93e 	bl	8002528 <RTC_EnterInitMode>
 80022ac:	0003      	movs	r3, r0
 80022ae:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80022b0:	0028      	movs	r0, r5
 80022b2:	183b      	adds	r3, r7, r0
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d12c      	bne.n	8002314 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	492c      	ldr	r1, [pc, #176]	; (8002378 <HAL_RTC_Init+0x134>)
 80022c6:	400a      	ands	r2, r1
 80022c8:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6899      	ldr	r1, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	68d2      	ldr	r2, [r2, #12]
 80022f0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6919      	ldr	r1, [r3, #16]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	041a      	lsls	r2, r3, #16
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002306:	183c      	adds	r4, r7, r0
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	0018      	movs	r0, r3
 800230c:	f000 f950 	bl	80025b0 <RTC_ExitInitMode>
 8002310:	0003      	movs	r3, r0
 8002312:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002314:	230f      	movs	r3, #15
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d113      	bne.n	8002346 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2103      	movs	r1, #3
 800232a:	438a      	bics	r2, r1
 800232c:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69da      	ldr	r2, [r3, #28]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	22ff      	movs	r2, #255	; 0xff
 800234c:	625a      	str	r2, [r3, #36]	; 0x24
 800234e:	e003      	b.n	8002358 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002350:	230f      	movs	r3, #15
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002358:	230f      	movs	r3, #15
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d103      	bne.n	800236a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2221      	movs	r2, #33	; 0x21
 8002366:	2101      	movs	r1, #1
 8002368:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800236a:	230f      	movs	r3, #15
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	781b      	ldrb	r3, [r3, #0]
}
 8002370:	0018      	movs	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	b004      	add	sp, #16
 8002376:	bdb0      	pop	{r4, r5, r7, pc}
 8002378:	ff8fffbf 	.word	0xff8fffbf

0800237c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	045b      	lsls	r3, r3, #17
 800239e:	0c5a      	lsrs	r2, r3, #17
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a22      	ldr	r2, [pc, #136]	; (8002434 <HAL_RTC_GetTime+0xb8>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	0c1b      	lsrs	r3, r3, #16
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	223f      	movs	r2, #63	; 0x3f
 80023b8:	4013      	ands	r3, r2
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	0a1b      	lsrs	r3, r3, #8
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	227f      	movs	r2, #127	; 0x7f
 80023c8:	4013      	ands	r3, r2
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	227f      	movs	r2, #127	; 0x7f
 80023d6:	4013      	ands	r3, r2
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	0d9b      	lsrs	r3, r3, #22
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2201      	movs	r2, #1
 80023e6:	4013      	ands	r3, r2
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d11a      	bne.n	800242a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	0018      	movs	r0, r3
 80023fa:	f000 f903 	bl	8002604 <RTC_Bcd2ToByte>
 80023fe:	0003      	movs	r3, r0
 8002400:	001a      	movs	r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	785b      	ldrb	r3, [r3, #1]
 800240a:	0018      	movs	r0, r3
 800240c:	f000 f8fa 	bl	8002604 <RTC_Bcd2ToByte>
 8002410:	0003      	movs	r3, r0
 8002412:	001a      	movs	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	789b      	ldrb	r3, [r3, #2]
 800241c:	0018      	movs	r0, r3
 800241e:	f000 f8f1 	bl	8002604 <RTC_Bcd2ToByte>
 8002422:	0003      	movs	r3, r0
 8002424:	001a      	movs	r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	0018      	movs	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	b006      	add	sp, #24
 8002432:	bd80      	pop	{r7, pc}
 8002434:	007f7f7f 	.word	0x007f7f7f

08002438 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	4a21      	ldr	r2, [pc, #132]	; (80024d4 <HAL_RTC_GetDate+0x9c>)
 8002450:	4013      	ands	r3, r2
 8002452:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	0c1b      	lsrs	r3, r3, #16
 8002458:	b2da      	uxtb	r2, r3
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	b2db      	uxtb	r3, r3
 8002464:	221f      	movs	r2, #31
 8002466:	4013      	ands	r3, r2
 8002468:	b2da      	uxtb	r2, r3
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	223f      	movs	r2, #63	; 0x3f
 8002474:	4013      	ands	r3, r2
 8002476:	b2da      	uxtb	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	0b5b      	lsrs	r3, r3, #13
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2207      	movs	r2, #7
 8002484:	4013      	ands	r3, r2
 8002486:	b2da      	uxtb	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d11a      	bne.n	80024c8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	78db      	ldrb	r3, [r3, #3]
 8002496:	0018      	movs	r0, r3
 8002498:	f000 f8b4 	bl	8002604 <RTC_Bcd2ToByte>
 800249c:	0003      	movs	r3, r0
 800249e:	001a      	movs	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	785b      	ldrb	r3, [r3, #1]
 80024a8:	0018      	movs	r0, r3
 80024aa:	f000 f8ab 	bl	8002604 <RTC_Bcd2ToByte>
 80024ae:	0003      	movs	r3, r0
 80024b0:	001a      	movs	r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	789b      	ldrb	r3, [r3, #2]
 80024ba:	0018      	movs	r0, r3
 80024bc:	f000 f8a2 	bl	8002604 <RTC_Bcd2ToByte>
 80024c0:	0003      	movs	r3, r0
 80024c2:	001a      	movs	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	0018      	movs	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b006      	add	sp, #24
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	00ffff3f 	.word	0x00ffff3f

080024d8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a0e      	ldr	r2, [pc, #56]	; (8002524 <HAL_RTC_WaitForSynchro+0x4c>)
 80024ea:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024ec:	f7fe fc8e 	bl	8000e0c <HAL_GetTick>
 80024f0:	0003      	movs	r3, r0
 80024f2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80024f4:	e00a      	b.n	800250c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80024f6:	f7fe fc89 	bl	8000e0c <HAL_GetTick>
 80024fa:	0002      	movs	r2, r0
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1ad2      	subs	r2, r2, r3
 8002500:	23fa      	movs	r3, #250	; 0xfa
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	429a      	cmp	r2, r3
 8002506:	d901      	bls.n	800250c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e006      	b.n	800251a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	2220      	movs	r2, #32
 8002514:	4013      	ands	r3, r2
 8002516:	d0ee      	beq.n	80024f6 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	0018      	movs	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	b004      	add	sp, #16
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	0001ff5f 	.word	0x0001ff5f

08002528 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002534:	230f      	movs	r3, #15
 8002536:	18fb      	adds	r3, r7, r3
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2240      	movs	r2, #64	; 0x40
 8002544:	4013      	ands	r3, r2
 8002546:	d12c      	bne.n	80025a2 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2180      	movs	r1, #128	; 0x80
 8002554:	430a      	orrs	r2, r1
 8002556:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002558:	f7fe fc58 	bl	8000e0c <HAL_GetTick>
 800255c:	0003      	movs	r3, r0
 800255e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002560:	e014      	b.n	800258c <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002562:	f7fe fc53 	bl	8000e0c <HAL_GetTick>
 8002566:	0002      	movs	r2, r0
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	1ad2      	subs	r2, r2, r3
 800256c:	200f      	movs	r0, #15
 800256e:	183b      	adds	r3, r7, r0
 8002570:	1839      	adds	r1, r7, r0
 8002572:	7809      	ldrb	r1, [r1, #0]
 8002574:	7019      	strb	r1, [r3, #0]
 8002576:	23fa      	movs	r3, #250	; 0xfa
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	429a      	cmp	r2, r3
 800257c:	d906      	bls.n	800258c <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2221      	movs	r2, #33	; 0x21
 8002582:	2104      	movs	r1, #4
 8002584:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8002586:	183b      	adds	r3, r7, r0
 8002588:	2201      	movs	r2, #1
 800258a:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2240      	movs	r2, #64	; 0x40
 8002594:	4013      	ands	r3, r2
 8002596:	d104      	bne.n	80025a2 <RTC_EnterInitMode+0x7a>
 8002598:	230f      	movs	r3, #15
 800259a:	18fb      	adds	r3, r7, r3
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d1df      	bne.n	8002562 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80025a2:	230f      	movs	r3, #15
 80025a4:	18fb      	adds	r3, r7, r3
 80025a6:	781b      	ldrb	r3, [r3, #0]
}
 80025a8:	0018      	movs	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b004      	add	sp, #16
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80025b0:	b590      	push	{r4, r7, lr}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025b8:	240f      	movs	r4, #15
 80025ba:	193b      	adds	r3, r7, r4
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2180      	movs	r1, #128	; 0x80
 80025cc:	438a      	bics	r2, r1
 80025ce:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2220      	movs	r2, #32
 80025d8:	4013      	ands	r3, r2
 80025da:	d10c      	bne.n	80025f6 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	0018      	movs	r0, r3
 80025e0:	f7ff ff7a 	bl	80024d8 <HAL_RTC_WaitForSynchro>
 80025e4:	1e03      	subs	r3, r0, #0
 80025e6:	d006      	beq.n	80025f6 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2221      	movs	r2, #33	; 0x21
 80025ec:	2104      	movs	r1, #4
 80025ee:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80025f0:	193b      	adds	r3, r7, r4
 80025f2:	2201      	movs	r2, #1
 80025f4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80025f6:	230f      	movs	r3, #15
 80025f8:	18fb      	adds	r3, r7, r3
 80025fa:	781b      	ldrb	r3, [r3, #0]
}
 80025fc:	0018      	movs	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	b005      	add	sp, #20
 8002602:	bd90      	pop	{r4, r7, pc}

08002604 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	0002      	movs	r2, r0
 800260c:	1dfb      	adds	r3, r7, #7
 800260e:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002614:	1dfb      	adds	r3, r7, #7
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	091b      	lsrs	r3, r3, #4
 800261a:	b2db      	uxtb	r3, r3
 800261c:	001a      	movs	r2, r3
 800261e:	0013      	movs	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	189b      	adds	r3, r3, r2
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	b2da      	uxtb	r2, r3
 800262c:	1dfb      	adds	r3, r7, #7
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	210f      	movs	r1, #15
 8002632:	400b      	ands	r3, r1
 8002634:	b2db      	uxtb	r3, r3
 8002636:	18d3      	adds	r3, r2, r3
 8002638:	b2db      	uxtb	r3, r3
}
 800263a:	0018      	movs	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	b004      	add	sp, #16
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e032      	b.n	80026ba <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2239      	movs	r2, #57	; 0x39
 8002658:	5c9b      	ldrb	r3, [r3, r2]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d107      	bne.n	8002670 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2238      	movs	r2, #56	; 0x38
 8002664:	2100      	movs	r1, #0
 8002666:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	0018      	movs	r0, r3
 800266c:	f7fe fab6 	bl	8000bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2239      	movs	r2, #57	; 0x39
 8002674:	2102      	movs	r1, #2
 8002676:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3304      	adds	r3, #4
 8002680:	0019      	movs	r1, r3
 8002682:	0010      	movs	r0, r2
 8002684:	f000 fa00 	bl	8002a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	223e      	movs	r2, #62	; 0x3e
 800268c:	2101      	movs	r1, #1
 800268e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	223a      	movs	r2, #58	; 0x3a
 8002694:	2101      	movs	r1, #1
 8002696:	5499      	strb	r1, [r3, r2]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	223b      	movs	r2, #59	; 0x3b
 800269c:	2101      	movs	r1, #1
 800269e:	5499      	strb	r1, [r3, r2]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	223c      	movs	r2, #60	; 0x3c
 80026a4:	2101      	movs	r1, #1
 80026a6:	5499      	strb	r1, [r3, r2]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	223d      	movs	r2, #61	; 0x3d
 80026ac:	2101      	movs	r1, #1
 80026ae:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2239      	movs	r2, #57	; 0x39
 80026b4:	2101      	movs	r1, #1
 80026b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	0018      	movs	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	b002      	add	sp, #8
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e032      	b.n	800273a <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2239      	movs	r2, #57	; 0x39
 80026d8:	5c9b      	ldrb	r3, [r3, r2]
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d107      	bne.n	80026f0 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2238      	movs	r2, #56	; 0x38
 80026e4:	2100      	movs	r1, #0
 80026e6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	0018      	movs	r0, r3
 80026ec:	f000 f829 	bl	8002742 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2239      	movs	r2, #57	; 0x39
 80026f4:	2102      	movs	r1, #2
 80026f6:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3304      	adds	r3, #4
 8002700:	0019      	movs	r1, r3
 8002702:	0010      	movs	r0, r2
 8002704:	f000 f9c0 	bl	8002a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	223e      	movs	r2, #62	; 0x3e
 800270c:	2101      	movs	r1, #1
 800270e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	223a      	movs	r2, #58	; 0x3a
 8002714:	2101      	movs	r1, #1
 8002716:	5499      	strb	r1, [r3, r2]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	223b      	movs	r2, #59	; 0x3b
 800271c:	2101      	movs	r1, #1
 800271e:	5499      	strb	r1, [r3, r2]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	223c      	movs	r2, #60	; 0x3c
 8002724:	2101      	movs	r1, #1
 8002726:	5499      	strb	r1, [r3, r2]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	223d      	movs	r2, #61	; 0x3d
 800272c:	2101      	movs	r1, #1
 800272e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2239      	movs	r2, #57	; 0x39
 8002734:	2101      	movs	r1, #1
 8002736:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	0018      	movs	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	b002      	add	sp, #8
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	46bd      	mov	sp, r7
 800274e:	b002      	add	sp, #8
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002760:	2317      	movs	r3, #23
 8002762:	18fb      	adds	r3, r7, r3
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2238      	movs	r2, #56	; 0x38
 800276c:	5c9b      	ldrb	r3, [r3, r2]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002772:	2302      	movs	r3, #2
 8002774:	e0ad      	b.n	80028d2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2238      	movs	r2, #56	; 0x38
 800277a:	2101      	movs	r1, #1
 800277c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b0c      	cmp	r3, #12
 8002782:	d100      	bne.n	8002786 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002784:	e076      	b.n	8002874 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b0c      	cmp	r3, #12
 800278a:	d900      	bls.n	800278e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800278c:	e095      	b.n	80028ba <HAL_TIM_PWM_ConfigChannel+0x166>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b08      	cmp	r3, #8
 8002792:	d04e      	beq.n	8002832 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b08      	cmp	r3, #8
 8002798:	d900      	bls.n	800279c <HAL_TIM_PWM_ConfigChannel+0x48>
 800279a:	e08e      	b.n	80028ba <HAL_TIM_PWM_ConfigChannel+0x166>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_TIM_PWM_ConfigChannel+0x56>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	d021      	beq.n	80027ec <HAL_TIM_PWM_ConfigChannel+0x98>
 80027a8:	e087      	b.n	80028ba <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	0011      	movs	r1, r2
 80027b2:	0018      	movs	r0, r3
 80027b4:	f000 f9b2 	bl	8002b1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699a      	ldr	r2, [r3, #24]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2108      	movs	r1, #8
 80027c4:	430a      	orrs	r2, r1
 80027c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	699a      	ldr	r2, [r3, #24]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2104      	movs	r1, #4
 80027d4:	438a      	bics	r2, r1
 80027d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6999      	ldr	r1, [r3, #24]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	619a      	str	r2, [r3, #24]
      break;
 80027ea:	e06b      	b.n	80028c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	0011      	movs	r1, r2
 80027f4:	0018      	movs	r0, r3
 80027f6:	f000 f9cd 	bl	8002b94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699a      	ldr	r2, [r3, #24]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2180      	movs	r1, #128	; 0x80
 8002806:	0109      	lsls	r1, r1, #4
 8002808:	430a      	orrs	r2, r1
 800280a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	699a      	ldr	r2, [r3, #24]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4931      	ldr	r1, [pc, #196]	; (80028dc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002818:	400a      	ands	r2, r1
 800281a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6999      	ldr	r1, [r3, #24]
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	021a      	lsls	r2, r3, #8
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	619a      	str	r2, [r3, #24]
      break;
 8002830:	e048      	b.n	80028c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	0011      	movs	r1, r2
 800283a:	0018      	movs	r0, r3
 800283c:	f000 f9ec 	bl	8002c18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	69da      	ldr	r2, [r3, #28]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2108      	movs	r1, #8
 800284c:	430a      	orrs	r2, r1
 800284e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	69da      	ldr	r2, [r3, #28]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2104      	movs	r1, #4
 800285c:	438a      	bics	r2, r1
 800285e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69d9      	ldr	r1, [r3, #28]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	61da      	str	r2, [r3, #28]
      break;
 8002872:	e027      	b.n	80028c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	0011      	movs	r1, r2
 800287c:	0018      	movs	r0, r3
 800287e:	f000 fa0b 	bl	8002c98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	69da      	ldr	r2, [r3, #28]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2180      	movs	r1, #128	; 0x80
 800288e:	0109      	lsls	r1, r1, #4
 8002890:	430a      	orrs	r2, r1
 8002892:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	69da      	ldr	r2, [r3, #28]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	490f      	ldr	r1, [pc, #60]	; (80028dc <HAL_TIM_PWM_ConfigChannel+0x188>)
 80028a0:	400a      	ands	r2, r1
 80028a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	69d9      	ldr	r1, [r3, #28]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	021a      	lsls	r2, r3, #8
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	61da      	str	r2, [r3, #28]
      break;
 80028b8:	e004      	b.n	80028c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80028ba:	2317      	movs	r3, #23
 80028bc:	18fb      	adds	r3, r7, r3
 80028be:	2201      	movs	r2, #1
 80028c0:	701a      	strb	r2, [r3, #0]
      break;
 80028c2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2238      	movs	r2, #56	; 0x38
 80028c8:	2100      	movs	r1, #0
 80028ca:	5499      	strb	r1, [r3, r2]

  return status;
 80028cc:	2317      	movs	r3, #23
 80028ce:	18fb      	adds	r3, r7, r3
 80028d0:	781b      	ldrb	r3, [r3, #0]
}
 80028d2:	0018      	movs	r0, r3
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b006      	add	sp, #24
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	fffffbff 	.word	0xfffffbff

080028e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ea:	230f      	movs	r3, #15
 80028ec:	18fb      	adds	r3, r7, r3
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2238      	movs	r2, #56	; 0x38
 80028f6:	5c9b      	ldrb	r3, [r3, r2]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d101      	bne.n	8002900 <HAL_TIM_ConfigClockSource+0x20>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e0bc      	b.n	8002a7a <HAL_TIM_ConfigClockSource+0x19a>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2238      	movs	r2, #56	; 0x38
 8002904:	2101      	movs	r1, #1
 8002906:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2239      	movs	r2, #57	; 0x39
 800290c:	2102      	movs	r1, #2
 800290e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2277      	movs	r2, #119	; 0x77
 800291c:	4393      	bics	r3, r2
 800291e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	4a58      	ldr	r2, [pc, #352]	; (8002a84 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002924:	4013      	ands	r3, r2
 8002926:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2280      	movs	r2, #128	; 0x80
 8002936:	0192      	lsls	r2, r2, #6
 8002938:	4293      	cmp	r3, r2
 800293a:	d040      	beq.n	80029be <HAL_TIM_ConfigClockSource+0xde>
 800293c:	2280      	movs	r2, #128	; 0x80
 800293e:	0192      	lsls	r2, r2, #6
 8002940:	4293      	cmp	r3, r2
 8002942:	d900      	bls.n	8002946 <HAL_TIM_ConfigClockSource+0x66>
 8002944:	e088      	b.n	8002a58 <HAL_TIM_ConfigClockSource+0x178>
 8002946:	2280      	movs	r2, #128	; 0x80
 8002948:	0152      	lsls	r2, r2, #5
 800294a:	4293      	cmp	r3, r2
 800294c:	d100      	bne.n	8002950 <HAL_TIM_ConfigClockSource+0x70>
 800294e:	e088      	b.n	8002a62 <HAL_TIM_ConfigClockSource+0x182>
 8002950:	2280      	movs	r2, #128	; 0x80
 8002952:	0152      	lsls	r2, r2, #5
 8002954:	4293      	cmp	r3, r2
 8002956:	d900      	bls.n	800295a <HAL_TIM_ConfigClockSource+0x7a>
 8002958:	e07e      	b.n	8002a58 <HAL_TIM_ConfigClockSource+0x178>
 800295a:	2b70      	cmp	r3, #112	; 0x70
 800295c:	d018      	beq.n	8002990 <HAL_TIM_ConfigClockSource+0xb0>
 800295e:	d900      	bls.n	8002962 <HAL_TIM_ConfigClockSource+0x82>
 8002960:	e07a      	b.n	8002a58 <HAL_TIM_ConfigClockSource+0x178>
 8002962:	2b60      	cmp	r3, #96	; 0x60
 8002964:	d04f      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0x126>
 8002966:	d900      	bls.n	800296a <HAL_TIM_ConfigClockSource+0x8a>
 8002968:	e076      	b.n	8002a58 <HAL_TIM_ConfigClockSource+0x178>
 800296a:	2b50      	cmp	r3, #80	; 0x50
 800296c:	d03b      	beq.n	80029e6 <HAL_TIM_ConfigClockSource+0x106>
 800296e:	d900      	bls.n	8002972 <HAL_TIM_ConfigClockSource+0x92>
 8002970:	e072      	b.n	8002a58 <HAL_TIM_ConfigClockSource+0x178>
 8002972:	2b40      	cmp	r3, #64	; 0x40
 8002974:	d057      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0x146>
 8002976:	d900      	bls.n	800297a <HAL_TIM_ConfigClockSource+0x9a>
 8002978:	e06e      	b.n	8002a58 <HAL_TIM_ConfigClockSource+0x178>
 800297a:	2b30      	cmp	r3, #48	; 0x30
 800297c:	d063      	beq.n	8002a46 <HAL_TIM_ConfigClockSource+0x166>
 800297e:	d86b      	bhi.n	8002a58 <HAL_TIM_ConfigClockSource+0x178>
 8002980:	2b20      	cmp	r3, #32
 8002982:	d060      	beq.n	8002a46 <HAL_TIM_ConfigClockSource+0x166>
 8002984:	d868      	bhi.n	8002a58 <HAL_TIM_ConfigClockSource+0x178>
 8002986:	2b00      	cmp	r3, #0
 8002988:	d05d      	beq.n	8002a46 <HAL_TIM_ConfigClockSource+0x166>
 800298a:	2b10      	cmp	r3, #16
 800298c:	d05b      	beq.n	8002a46 <HAL_TIM_ConfigClockSource+0x166>
 800298e:	e063      	b.n	8002a58 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029a0:	f000 fa3a 	bl	8002e18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2277      	movs	r2, #119	; 0x77
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	609a      	str	r2, [r3, #8]
      break;
 80029bc:	e052      	b.n	8002a64 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029ce:	f000 fa23 	bl	8002e18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2180      	movs	r1, #128	; 0x80
 80029de:	01c9      	lsls	r1, r1, #7
 80029e0:	430a      	orrs	r2, r1
 80029e2:	609a      	str	r2, [r3, #8]
      break;
 80029e4:	e03e      	b.n	8002a64 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029f2:	001a      	movs	r2, r3
 80029f4:	f000 f996 	bl	8002d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2150      	movs	r1, #80	; 0x50
 80029fe:	0018      	movs	r0, r3
 8002a00:	f000 f9f0 	bl	8002de4 <TIM_ITRx_SetConfig>
      break;
 8002a04:	e02e      	b.n	8002a64 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a12:	001a      	movs	r2, r3
 8002a14:	f000 f9b4 	bl	8002d80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2160      	movs	r1, #96	; 0x60
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f000 f9e0 	bl	8002de4 <TIM_ITRx_SetConfig>
      break;
 8002a24:	e01e      	b.n	8002a64 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a32:	001a      	movs	r2, r3
 8002a34:	f000 f976 	bl	8002d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2140      	movs	r1, #64	; 0x40
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f000 f9d0 	bl	8002de4 <TIM_ITRx_SetConfig>
      break;
 8002a44:	e00e      	b.n	8002a64 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	0019      	movs	r1, r3
 8002a50:	0010      	movs	r0, r2
 8002a52:	f000 f9c7 	bl	8002de4 <TIM_ITRx_SetConfig>
      break;
 8002a56:	e005      	b.n	8002a64 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002a58:	230f      	movs	r3, #15
 8002a5a:	18fb      	adds	r3, r7, r3
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	701a      	strb	r2, [r3, #0]
      break;
 8002a60:	e000      	b.n	8002a64 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002a62:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2239      	movs	r2, #57	; 0x39
 8002a68:	2101      	movs	r1, #1
 8002a6a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2238      	movs	r2, #56	; 0x38
 8002a70:	2100      	movs	r1, #0
 8002a72:	5499      	strb	r1, [r3, r2]

  return status;
 8002a74:	230f      	movs	r3, #15
 8002a76:	18fb      	adds	r3, r7, r3
 8002a78:	781b      	ldrb	r3, [r3, #0]
}
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b004      	add	sp, #16
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	ffff00ff 	.word	0xffff00ff

08002a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	2380      	movs	r3, #128	; 0x80
 8002a9c:	05db      	lsls	r3, r3, #23
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d003      	beq.n	8002aaa <TIM_Base_SetConfig+0x22>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a1b      	ldr	r2, [pc, #108]	; (8002b14 <TIM_Base_SetConfig+0x8c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d108      	bne.n	8002abc <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2270      	movs	r2, #112	; 0x70
 8002aae:	4393      	bics	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	2380      	movs	r3, #128	; 0x80
 8002ac0:	05db      	lsls	r3, r3, #23
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d003      	beq.n	8002ace <TIM_Base_SetConfig+0x46>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a12      	ldr	r2, [pc, #72]	; (8002b14 <TIM_Base_SetConfig+0x8c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d108      	bne.n	8002ae0 <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4a11      	ldr	r2, [pc, #68]	; (8002b18 <TIM_Base_SetConfig+0x90>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2280      	movs	r2, #128	; 0x80
 8002ae4:	4393      	bics	r3, r2
 8002ae6:	001a      	movs	r2, r3
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	615a      	str	r2, [r3, #20]
}
 8002b0c:	46c0      	nop			; (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b004      	add	sp, #16
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40010800 	.word	0x40010800
 8002b18:	fffffcff 	.word	0xfffffcff

08002b1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	4393      	bics	r3, r2
 8002b2e:	001a      	movs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2270      	movs	r2, #112	; 0x70
 8002b4a:	4393      	bics	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2203      	movs	r2, #3
 8002b52:	4393      	bics	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2202      	movs	r2, #2
 8002b64:	4393      	bics	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	621a      	str	r2, [r3, #32]
}
 8002b8c:	46c0      	nop			; (mov r8, r8)
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b006      	add	sp, #24
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	2210      	movs	r2, #16
 8002ba4:	4393      	bics	r3, r2
 8002ba6:	001a      	movs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4a13      	ldr	r2, [pc, #76]	; (8002c10 <TIM_OC2_SetConfig+0x7c>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4a12      	ldr	r2, [pc, #72]	; (8002c14 <TIM_OC2_SetConfig+0x80>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	021b      	lsls	r3, r3, #8
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	4393      	bics	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	621a      	str	r2, [r3, #32]
}
 8002c08:	46c0      	nop			; (mov r8, r8)
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b006      	add	sp, #24
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	ffff8fff 	.word	0xffff8fff
 8002c14:	fffffcff 	.word	0xfffffcff

08002c18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	4a1a      	ldr	r2, [pc, #104]	; (8002c90 <TIM_OC3_SetConfig+0x78>)
 8002c28:	401a      	ands	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2270      	movs	r2, #112	; 0x70
 8002c44:	4393      	bics	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	4393      	bics	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	4a0d      	ldr	r2, [pc, #52]	; (8002c94 <TIM_OC3_SetConfig+0x7c>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	021b      	lsls	r3, r3, #8
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	621a      	str	r2, [r3, #32]
}
 8002c88:	46c0      	nop			; (mov r8, r8)
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b006      	add	sp, #24
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	fffffeff 	.word	0xfffffeff
 8002c94:	fffffdff 	.word	0xfffffdff

08002c98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	4a1b      	ldr	r2, [pc, #108]	; (8002d14 <TIM_OC4_SetConfig+0x7c>)
 8002ca8:	401a      	ands	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4a15      	ldr	r2, [pc, #84]	; (8002d18 <TIM_OC4_SetConfig+0x80>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <TIM_OC4_SetConfig+0x84>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	4a10      	ldr	r2, [pc, #64]	; (8002d20 <TIM_OC4_SetConfig+0x88>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	031b      	lsls	r3, r3, #12
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	621a      	str	r2, [r3, #32]
}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b006      	add	sp, #24
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	ffffefff 	.word	0xffffefff
 8002d18:	ffff8fff 	.word	0xffff8fff
 8002d1c:	fffffcff 	.word	0xfffffcff
 8002d20:	ffffdfff 	.word	0xffffdfff

08002d24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	4393      	bics	r3, r2
 8002d3e:	001a      	movs	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	22f0      	movs	r2, #240	; 0xf0
 8002d4e:	4393      	bics	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	220a      	movs	r2, #10
 8002d60:	4393      	bics	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	621a      	str	r2, [r3, #32]
}
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b006      	add	sp, #24
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	2210      	movs	r2, #16
 8002d92:	4393      	bics	r3, r2
 8002d94:	001a      	movs	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	4a0d      	ldr	r2, [pc, #52]	; (8002de0 <TIM_TI2_ConfigInputStage+0x60>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	031b      	lsls	r3, r3, #12
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	22a0      	movs	r2, #160	; 0xa0
 8002dbc:	4393      	bics	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	621a      	str	r2, [r3, #32]
}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b006      	add	sp, #24
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	ffff0fff 	.word	0xffff0fff

08002de4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2270      	movs	r2, #112	; 0x70
 8002df8:	4393      	bics	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	2207      	movs	r2, #7
 8002e04:	4313      	orrs	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	609a      	str	r2, [r3, #8]
}
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b004      	add	sp, #16
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	4a09      	ldr	r2, [pc, #36]	; (8002e54 <TIM_ETR_SetConfig+0x3c>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	021a      	lsls	r2, r3, #8
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	609a      	str	r2, [r3, #8]
}
 8002e4c:	46c0      	nop			; (mov r8, r8)
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b006      	add	sp, #24
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	ffff00ff 	.word	0xffff00ff

08002e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2238      	movs	r2, #56	; 0x38
 8002e66:	5c9b      	ldrb	r3, [r3, r2]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e03d      	b.n	8002eec <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2238      	movs	r2, #56	; 0x38
 8002e74:	2101      	movs	r1, #1
 8002e76:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2239      	movs	r2, #57	; 0x39
 8002e7c:	2102      	movs	r1, #2
 8002e7e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2270      	movs	r2, #112	; 0x70
 8002e94:	4393      	bics	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	05db      	lsls	r3, r3, #23
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d004      	beq.n	8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a0e      	ldr	r2, [pc, #56]	; (8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d10c      	bne.n	8002eda <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2280      	movs	r2, #128	; 0x80
 8002ec4:	4393      	bics	r3, r2
 8002ec6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2239      	movs	r2, #57	; 0x39
 8002ede:	2101      	movs	r1, #1
 8002ee0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2238      	movs	r2, #56	; 0x38
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	0018      	movs	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b004      	add	sp, #16
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40010800 	.word	0x40010800

08002ef8 <memset>:
 8002ef8:	0003      	movs	r3, r0
 8002efa:	1882      	adds	r2, r0, r2
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d100      	bne.n	8002f02 <memset+0xa>
 8002f00:	4770      	bx	lr
 8002f02:	7019      	strb	r1, [r3, #0]
 8002f04:	3301      	adds	r3, #1
 8002f06:	e7f9      	b.n	8002efc <memset+0x4>

08002f08 <__libc_init_array>:
 8002f08:	b570      	push	{r4, r5, r6, lr}
 8002f0a:	2600      	movs	r6, #0
 8002f0c:	4c0c      	ldr	r4, [pc, #48]	; (8002f40 <__libc_init_array+0x38>)
 8002f0e:	4d0d      	ldr	r5, [pc, #52]	; (8002f44 <__libc_init_array+0x3c>)
 8002f10:	1b64      	subs	r4, r4, r5
 8002f12:	10a4      	asrs	r4, r4, #2
 8002f14:	42a6      	cmp	r6, r4
 8002f16:	d109      	bne.n	8002f2c <__libc_init_array+0x24>
 8002f18:	2600      	movs	r6, #0
 8002f1a:	f000 f819 	bl	8002f50 <_init>
 8002f1e:	4c0a      	ldr	r4, [pc, #40]	; (8002f48 <__libc_init_array+0x40>)
 8002f20:	4d0a      	ldr	r5, [pc, #40]	; (8002f4c <__libc_init_array+0x44>)
 8002f22:	1b64      	subs	r4, r4, r5
 8002f24:	10a4      	asrs	r4, r4, #2
 8002f26:	42a6      	cmp	r6, r4
 8002f28:	d105      	bne.n	8002f36 <__libc_init_array+0x2e>
 8002f2a:	bd70      	pop	{r4, r5, r6, pc}
 8002f2c:	00b3      	lsls	r3, r6, #2
 8002f2e:	58eb      	ldr	r3, [r5, r3]
 8002f30:	4798      	blx	r3
 8002f32:	3601      	adds	r6, #1
 8002f34:	e7ee      	b.n	8002f14 <__libc_init_array+0xc>
 8002f36:	00b3      	lsls	r3, r6, #2
 8002f38:	58eb      	ldr	r3, [r5, r3]
 8002f3a:	4798      	blx	r3
 8002f3c:	3601      	adds	r6, #1
 8002f3e:	e7f2      	b.n	8002f26 <__libc_init_array+0x1e>
 8002f40:	08002f94 	.word	0x08002f94
 8002f44:	08002f94 	.word	0x08002f94
 8002f48:	08002f98 	.word	0x08002f98
 8002f4c:	08002f94 	.word	0x08002f94

08002f50 <_init>:
 8002f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f56:	bc08      	pop	{r3}
 8002f58:	469e      	mov	lr, r3
 8002f5a:	4770      	bx	lr

08002f5c <_fini>:
 8002f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f62:	bc08      	pop	{r3}
 8002f64:	469e      	mov	lr, r3
 8002f66:	4770      	bx	lr
