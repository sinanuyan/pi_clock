
pi_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040dc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800419c  0800419c  0001419c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004200  08004200  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  08004200  08004200  00014200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004208  08004208  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004208  08004208  00014208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800420c  0800420c  0001420c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  08004210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001078  20000120  08004330  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001198  08004330  00021198  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f72a  00000000  00000000  0002018b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b9c  00000000  00000000  0002f8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  00032458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d49  00000000  00000000  000335b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012de4  00000000  00000000  000342f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014c5b  00000000  00000000  000470dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007492d  00000000  00000000  0005bd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d5c  00000000  00000000  000d0668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000d43c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000120 	.word	0x20000120
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004184 	.word	0x08004184

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000124 	.word	0x20000124
 8000104:	08004184 	.word	0x08004184

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <segment_write>:
		{ 1, 1, 0, 0, 0, 0, 0, 1 }, // U (30)
		{ 1, 0, 0, 1, 0, 0, 0, 1 }, // Y (31)
		{ 1, 0, 1, 0, 0, 1, 0, 0 }, // Z (32)
		{ 1, 1, 1, 1, 1, 1, 1, 1 }};// BLANK

void segment_write(uint8_t *data){
 80004a8:	b590      	push	{r4, r7, lr}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(CLEAR_GPIO_Port, CLEAR_Pin, 0);
 80004b0:	23a0      	movs	r3, #160	; 0xa0
 80004b2:	05db      	lsls	r3, r3, #23
 80004b4:	2200      	movs	r2, #0
 80004b6:	2101      	movs	r1, #1
 80004b8:	0018      	movs	r0, r3
 80004ba:	f000 ff2f 	bl	800131c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLEAR_GPIO_Port, CLEAR_Pin, 1);
 80004be:	23a0      	movs	r3, #160	; 0xa0
 80004c0:	05db      	lsls	r3, r3, #23
 80004c2:	2201      	movs	r2, #1
 80004c4:	2101      	movs	r1, #1
 80004c6:	0018      	movs	r0, r3
 80004c8:	f000 ff28 	bl	800131c <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 8; i++) {
 80004cc:	230f      	movs	r3, #15
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	2200      	movs	r2, #0
 80004d2:	701a      	strb	r2, [r3, #0]
 80004d4:	e075      	b.n	80005c2 <segment_write+0x11a>
		HAL_GPIO_WritePin(A_HT_GPIO_Port, A_HT_Pin, segment_data[data[0]][i]);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	001a      	movs	r2, r3
 80004dc:	240f      	movs	r4, #15
 80004de:	193b      	adds	r3, r7, r4
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	493d      	ldr	r1, [pc, #244]	; (80005d8 <segment_write+0x130>)
 80004e4:	00d2      	lsls	r2, r2, #3
 80004e6:	188a      	adds	r2, r1, r2
 80004e8:	5cd2      	ldrb	r2, [r2, r3]
 80004ea:	23a0      	movs	r3, #160	; 0xa0
 80004ec:	05db      	lsls	r3, r3, #23
 80004ee:	2102      	movs	r1, #2
 80004f0:	0018      	movs	r0, r3
 80004f2:	f000 ff13 	bl	800131c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A_HO_GPIO_Port, A_HO_Pin, segment_data[data[1]][i]);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	3301      	adds	r3, #1
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	001a      	movs	r2, r3
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	4935      	ldr	r1, [pc, #212]	; (80005d8 <segment_write+0x130>)
 8000504:	00d2      	lsls	r2, r2, #3
 8000506:	188a      	adds	r2, r1, r2
 8000508:	5cd2      	ldrb	r2, [r2, r3]
 800050a:	23a0      	movs	r3, #160	; 0xa0
 800050c:	05db      	lsls	r3, r3, #23
 800050e:	2110      	movs	r1, #16
 8000510:	0018      	movs	r0, r3
 8000512:	f000 ff03 	bl	800131c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(A_MT_GPIO_Port, A_MT_Pin, segment_data[data[2]][i]);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	3302      	adds	r3, #2
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	001a      	movs	r2, r3
 800051e:	193b      	adds	r3, r7, r4
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	492d      	ldr	r1, [pc, #180]	; (80005d8 <segment_write+0x130>)
 8000524:	00d2      	lsls	r2, r2, #3
 8000526:	188a      	adds	r2, r1, r2
 8000528:	5cd2      	ldrb	r2, [r2, r3]
 800052a:	23a0      	movs	r3, #160	; 0xa0
 800052c:	05db      	lsls	r3, r3, #23
 800052e:	2140      	movs	r1, #64	; 0x40
 8000530:	0018      	movs	r0, r3
 8000532:	f000 fef3 	bl	800131c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A_MO_GPIO_Port, A_MO_Pin, segment_data[data[3]][i]);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	3303      	adds	r3, #3
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	001a      	movs	r2, r3
 800053e:	193b      	adds	r3, r7, r4
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	4925      	ldr	r1, [pc, #148]	; (80005d8 <segment_write+0x130>)
 8000544:	00d2      	lsls	r2, r2, #3
 8000546:	188a      	adds	r2, r1, r2
 8000548:	5cd2      	ldrb	r2, [r2, r3]
 800054a:	2380      	movs	r3, #128	; 0x80
 800054c:	0059      	lsls	r1, r3, #1
 800054e:	23a0      	movs	r3, #160	; 0xa0
 8000550:	05db      	lsls	r3, r3, #23
 8000552:	0018      	movs	r0, r3
 8000554:	f000 fee2 	bl	800131c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(A_ST_GPIO_Port, A_ST_Pin, segment_data[data[4]][i]);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	3304      	adds	r3, #4
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	001a      	movs	r2, r3
 8000560:	193b      	adds	r3, r7, r4
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	491c      	ldr	r1, [pc, #112]	; (80005d8 <segment_write+0x130>)
 8000566:	00d2      	lsls	r2, r2, #3
 8000568:	188a      	adds	r2, r1, r2
 800056a:	5cd2      	ldrb	r2, [r2, r3]
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	00d9      	lsls	r1, r3, #3
 8000570:	23a0      	movs	r3, #160	; 0xa0
 8000572:	05db      	lsls	r3, r3, #23
 8000574:	0018      	movs	r0, r3
 8000576:	f000 fed1 	bl	800131c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A_SO_GPIO_Port, A_SO_Pin, segment_data[data[5]][i]);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	3305      	adds	r3, #5
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	001a      	movs	r2, r3
 8000582:	193b      	adds	r3, r7, r4
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	4914      	ldr	r1, [pc, #80]	; (80005d8 <segment_write+0x130>)
 8000588:	00d2      	lsls	r2, r2, #3
 800058a:	188a      	adds	r2, r1, r2
 800058c:	5cd2      	ldrb	r2, [r2, r3]
 800058e:	2380      	movs	r3, #128	; 0x80
 8000590:	0159      	lsls	r1, r3, #5
 8000592:	23a0      	movs	r3, #160	; 0xa0
 8000594:	05db      	lsls	r3, r3, #23
 8000596:	0018      	movs	r0, r3
 8000598:	f000 fec0 	bl	800131c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(CLOCK_GPIO_Port, CLOCK_Pin, 0);
 800059c:	23a0      	movs	r3, #160	; 0xa0
 800059e:	05db      	lsls	r3, r3, #23
 80005a0:	2200      	movs	r2, #0
 80005a2:	2108      	movs	r1, #8
 80005a4:	0018      	movs	r0, r3
 80005a6:	f000 feb9 	bl	800131c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CLOCK_GPIO_Port, CLOCK_Pin, 1);
 80005aa:	23a0      	movs	r3, #160	; 0xa0
 80005ac:	05db      	lsls	r3, r3, #23
 80005ae:	2201      	movs	r2, #1
 80005b0:	2108      	movs	r1, #8
 80005b2:	0018      	movs	r0, r3
 80005b4:	f000 feb2 	bl	800131c <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 8; i++) {
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	781a      	ldrb	r2, [r3, #0]
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	3201      	adds	r2, #1
 80005c0:	701a      	strb	r2, [r3, #0]
 80005c2:	230f      	movs	r3, #15
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b07      	cmp	r3, #7
 80005ca:	d984      	bls.n	80004d6 <segment_write+0x2e>
	}
}
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	b005      	add	sp, #20
 80005d4:	bd90      	pop	{r4, r7, pc}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	20000000 	.word	0x20000000

080005dc <clock_thread>:
#include "7_segment.h"
#include "main.h"

extern RTC_HandleTypeDef hrtc;

void clock_thread(void *pvParameters) {
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005de:	b08d      	sub	sp, #52	; 0x34
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	/* Just to remove compiler warning. */
	(void) pvParameters;

	const TickType_t delay_100_ms = pdMS_TO_TICKS(100UL);
 80005e4:	2364      	movs	r3, #100	; 0x64
 80005e6:	62bb      	str	r3, [r7, #40]	; 0x28

	uint8_t data[6] = {
 80005e8:	2020      	movs	r0, #32
 80005ea:	183b      	adds	r3, r7, r0
 80005ec:	4a3c      	ldr	r2, [pc, #240]	; (80006e0 <clock_thread+0x104>)
 80005ee:	6811      	ldr	r1, [r2, #0]
 80005f0:	6019      	str	r1, [r3, #0]
 80005f2:	8892      	ldrh	r2, [r2, #4]
 80005f4:	809a      	strh	r2, [r3, #4]
			0, 0, 0, 0, 0,0
	};
	segment_write(data);
 80005f6:	183b      	adds	r3, r7, r0
 80005f8:	0018      	movs	r0, r3
 80005fa:	f7ff ff55 	bl	80004a8 <segment_write>

	RTC_TimeTypeDef sTimeStamp;
	RTC_DateTypeDef sTimeStampDate;

	uint8_t bcd;
	uint8_t old_sec = 15;
 80005fe:	232f      	movs	r3, #47	; 0x2f
 8000600:	18fb      	adds	r3, r7, r3
 8000602:	220f      	movs	r2, #15
 8000604:	701a      	strb	r2, [r3, #0]

	while(1){

		HAL_RTC_GetDate(&hrtc, &sTimeStampDate, RTC_FORMAT_BIN);
 8000606:	2308      	movs	r3, #8
 8000608:	18f9      	adds	r1, r7, r3
 800060a:	4b36      	ldr	r3, [pc, #216]	; (80006e4 <clock_thread+0x108>)
 800060c:	2200      	movs	r2, #0
 800060e:	0018      	movs	r0, r3
 8000610:	f001 ff6e 	bl	80024f0 <HAL_RTC_GetDate>
		HAL_RTC_GetTime(&hrtc, &sTimeStamp, RTC_FORMAT_BIN);
 8000614:	260c      	movs	r6, #12
 8000616:	19b9      	adds	r1, r7, r6
 8000618:	4b32      	ldr	r3, [pc, #200]	; (80006e4 <clock_thread+0x108>)
 800061a:	2200      	movs	r2, #0
 800061c:	0018      	movs	r0, r3
 800061e:	f001 ff09 	bl	8002434 <HAL_RTC_GetTime>

		bcd = sTimeStamp.Seconds;
 8000622:	2427      	movs	r4, #39	; 0x27
 8000624:	193b      	adds	r3, r7, r4
 8000626:	19ba      	adds	r2, r7, r6
 8000628:	7892      	ldrb	r2, [r2, #2]
 800062a:	701a      	strb	r2, [r3, #0]
		data[5] = bcd%10;
 800062c:	193b      	adds	r3, r7, r4
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	210a      	movs	r1, #10
 8000632:	0018      	movs	r0, r3
 8000634:	f7ff fdee 	bl	8000214 <__aeabi_uidivmod>
 8000638:	000b      	movs	r3, r1
 800063a:	b2da      	uxtb	r2, r3
 800063c:	2520      	movs	r5, #32
 800063e:	197b      	adds	r3, r7, r5
 8000640:	715a      	strb	r2, [r3, #5]
		data[4] = bcd/10;
 8000642:	193b      	adds	r3, r7, r4
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	210a      	movs	r1, #10
 8000648:	0018      	movs	r0, r3
 800064a:	f7ff fd5d 	bl	8000108 <__udivsi3>
 800064e:	0003      	movs	r3, r0
 8000650:	b2da      	uxtb	r2, r3
 8000652:	197b      	adds	r3, r7, r5
 8000654:	711a      	strb	r2, [r3, #4]

		bcd = sTimeStamp.Minutes;
 8000656:	193b      	adds	r3, r7, r4
 8000658:	19ba      	adds	r2, r7, r6
 800065a:	7852      	ldrb	r2, [r2, #1]
 800065c:	701a      	strb	r2, [r3, #0]
		data[3] = bcd%10;
 800065e:	193b      	adds	r3, r7, r4
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	210a      	movs	r1, #10
 8000664:	0018      	movs	r0, r3
 8000666:	f7ff fdd5 	bl	8000214 <__aeabi_uidivmod>
 800066a:	000b      	movs	r3, r1
 800066c:	b2da      	uxtb	r2, r3
 800066e:	197b      	adds	r3, r7, r5
 8000670:	70da      	strb	r2, [r3, #3]
		data[2] = bcd/10;
 8000672:	193b      	adds	r3, r7, r4
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	210a      	movs	r1, #10
 8000678:	0018      	movs	r0, r3
 800067a:	f7ff fd45 	bl	8000108 <__udivsi3>
 800067e:	0003      	movs	r3, r0
 8000680:	b2da      	uxtb	r2, r3
 8000682:	197b      	adds	r3, r7, r5
 8000684:	709a      	strb	r2, [r3, #2]

		bcd = sTimeStamp.Hours;
 8000686:	193b      	adds	r3, r7, r4
 8000688:	19ba      	adds	r2, r7, r6
 800068a:	7812      	ldrb	r2, [r2, #0]
 800068c:	701a      	strb	r2, [r3, #0]
		data[1] = bcd%10;
 800068e:	193b      	adds	r3, r7, r4
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	210a      	movs	r1, #10
 8000694:	0018      	movs	r0, r3
 8000696:	f7ff fdbd 	bl	8000214 <__aeabi_uidivmod>
 800069a:	000b      	movs	r3, r1
 800069c:	b2da      	uxtb	r2, r3
 800069e:	197b      	adds	r3, r7, r5
 80006a0:	705a      	strb	r2, [r3, #1]
		data[0] = bcd/10;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	210a      	movs	r1, #10
 80006a8:	0018      	movs	r0, r3
 80006aa:	f7ff fd2d 	bl	8000108 <__udivsi3>
 80006ae:	0003      	movs	r3, r0
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	197b      	adds	r3, r7, r5
 80006b4:	701a      	strb	r2, [r3, #0]

		if(old_sec != data[5]){
 80006b6:	197b      	adds	r3, r7, r5
 80006b8:	795b      	ldrb	r3, [r3, #5]
 80006ba:	242f      	movs	r4, #47	; 0x2f
 80006bc:	193a      	adds	r2, r7, r4
 80006be:	7812      	ldrb	r2, [r2, #0]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d007      	beq.n	80006d4 <clock_thread+0xf8>
			segment_write(data);
 80006c4:	197b      	adds	r3, r7, r5
 80006c6:	0018      	movs	r0, r3
 80006c8:	f7ff feee 	bl	80004a8 <segment_write>
			old_sec = data[5];
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	197a      	adds	r2, r7, r5
 80006d0:	7952      	ldrb	r2, [r2, #5]
 80006d2:	701a      	strb	r2, [r3, #0]
		}
		vTaskDelay(delay_100_ms);
 80006d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d6:	0018      	movs	r0, r3
 80006d8:	f002 ff0c 	bl	80034f4 <vTaskDelay>
		HAL_RTC_GetDate(&hrtc, &sTimeStampDate, RTC_FORMAT_BIN);
 80006dc:	e793      	b.n	8000606 <clock_thread+0x2a>
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	0800419c 	.word	0x0800419c
 80006e4:	200003e4 	.word	0x200003e4

080006e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	4a06      	ldr	r2, [pc, #24]	; (8000710 <vApplicationGetIdleTaskMemory+0x28>)
 80006f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	4a05      	ldr	r2, [pc, #20]	; (8000714 <vApplicationGetIdleTaskMemory+0x2c>)
 80006fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2280      	movs	r2, #128	; 0x80
 8000704:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	b004      	add	sp, #16
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	2000013c 	.word	0x2000013c
 8000714:	20000190 	.word	0x20000190

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b08b      	sub	sp, #44	; 0x2c
 800071c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071e:	f000 fb6b 	bl	8000df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000722:	f000 f831 	bl	8000788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000726:	f000 f99d 	bl	8000a64 <MX_GPIO_Init>
  MX_I2C1_Init();
 800072a:	f000 f8b1 	bl	8000890 <MX_I2C1_Init>
  MX_RTC_Init();
 800072e:	f000 f8ef 	bl	8000910 <MX_RTC_Init>
  MX_TIM2_Init();
 8000732:	f000 f917 	bl	8000964 <MX_TIM2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <main+0x5c>)
 800073a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800073c:	c313      	stmia	r3!, {r0, r1, r4}
 800073e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000740:	c313      	stmia	r3!, {r0, r1, r4}
 8000742:	6812      	ldr	r2, [r2, #0]
 8000744:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2100      	movs	r1, #0
 800074a:	0018      	movs	r0, r3
 800074c:	f002 fc51 	bl	8002ff2 <osThreadCreate>
 8000750:	0002      	movs	r2, r0
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <main+0x60>)
 8000754:	601a      	str	r2, [r3, #0]


  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(clock_thread, "clock_thread", configMINIMAL_STACK_SIZE, NULL, 1, &clock_thread_handle);
 8000756:	4909      	ldr	r1, [pc, #36]	; (800077c <main+0x64>)
 8000758:	4809      	ldr	r0, [pc, #36]	; (8000780 <main+0x68>)
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <main+0x6c>)
 800075c:	9301      	str	r3, [sp, #4]
 800075e:	2301      	movs	r3, #1
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2300      	movs	r3, #0
 8000764:	2280      	movs	r2, #128	; 0x80
 8000766:	f002 fd92 	bl	800328e <xTaskCreate>
  //xTaskCreate(backlight_thread, "back_light", configMINIMAL_STACK_SIZE, NULL, 1, &backlight_thread_handle);

  vTaskStartScheduler();
 800076a:	f002 fee9 	bl	8003540 <vTaskStartScheduler>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800076e:	f002 fc38 	bl	8002fe2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000772:	e7fe      	b.n	8000772 <main+0x5a>
 8000774:	080041c0 	.word	0x080041c0
 8000778:	20000448 	.word	0x20000448
 800077c:	080041a4 	.word	0x080041a4
 8000780:	080005dd 	.word	0x080005dd
 8000784:	2000044c 	.word	0x2000044c

08000788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b099      	sub	sp, #100	; 0x64
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	242c      	movs	r4, #44	; 0x2c
 8000790:	193b      	adds	r3, r7, r4
 8000792:	0018      	movs	r0, r3
 8000794:	2334      	movs	r3, #52	; 0x34
 8000796:	001a      	movs	r2, r3
 8000798:	2100      	movs	r1, #0
 800079a:	f003 fcc7 	bl	800412c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079e:	2318      	movs	r3, #24
 80007a0:	18fb      	adds	r3, r7, r3
 80007a2:	0018      	movs	r0, r3
 80007a4:	2314      	movs	r3, #20
 80007a6:	001a      	movs	r2, r3
 80007a8:	2100      	movs	r1, #0
 80007aa:	f003 fcbf 	bl	800412c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ae:	003b      	movs	r3, r7
 80007b0:	0018      	movs	r0, r3
 80007b2:	2318      	movs	r3, #24
 80007b4:	001a      	movs	r2, r3
 80007b6:	2100      	movs	r1, #0
 80007b8:	f003 fcb8 	bl	800412c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007bc:	4b31      	ldr	r3, [pc, #196]	; (8000884 <SystemClock_Config+0xfc>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a31      	ldr	r2, [pc, #196]	; (8000888 <SystemClock_Config+0x100>)
 80007c2:	401a      	ands	r2, r3
 80007c4:	4b2f      	ldr	r3, [pc, #188]	; (8000884 <SystemClock_Config+0xfc>)
 80007c6:	2180      	movs	r1, #128	; 0x80
 80007c8:	0109      	lsls	r1, r1, #4
 80007ca:	430a      	orrs	r2, r1
 80007cc:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007ce:	f000 fef1 	bl	80015b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007d2:	4b2e      	ldr	r3, [pc, #184]	; (800088c <SystemClock_Config+0x104>)
 80007d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80007d6:	4b2d      	ldr	r3, [pc, #180]	; (800088c <SystemClock_Config+0x104>)
 80007d8:	492b      	ldr	r1, [pc, #172]	; (8000888 <SystemClock_Config+0x100>)
 80007da:	400a      	ands	r2, r1
 80007dc:	651a      	str	r2, [r3, #80]	; 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	2206      	movs	r2, #6
 80007e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	0052      	lsls	r2, r2, #1
 80007ea:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ec:	0021      	movs	r1, r4
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2201      	movs	r2, #1
 80007f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2210      	movs	r2, #16
 80007f8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2202      	movs	r2, #2
 80007fe:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2200      	movs	r2, #0
 8000804:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	02d2      	lsls	r2, r2, #11
 800080c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2280      	movs	r2, #128	; 0x80
 8000812:	03d2      	lsls	r2, r2, #15
 8000814:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000816:	187b      	adds	r3, r7, r1
 8000818:	0018      	movs	r0, r3
 800081a:	f000 fed9 	bl	80015d0 <HAL_RCC_OscConfig>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000822:	f000 f9b9 	bl	8000b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000826:	2118      	movs	r1, #24
 8000828:	187b      	adds	r3, r7, r1
 800082a:	220f      	movs	r2, #15
 800082c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2203      	movs	r2, #3
 8000832:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2101      	movs	r1, #1
 800084a:	0018      	movs	r0, r3
 800084c:	f001 fa3c 	bl	8001cc8 <HAL_RCC_ClockConfig>
 8000850:	1e03      	subs	r3, r0, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000854:	f000 f9a0 	bl	8000b98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 8000858:	003b      	movs	r3, r7
 800085a:	2228      	movs	r2, #40	; 0x28
 800085c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800085e:	003b      	movs	r3, r7
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000864:	003b      	movs	r3, r7
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	0252      	lsls	r2, r2, #9
 800086a:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800086c:	003b      	movs	r3, r7
 800086e:	0018      	movs	r0, r3
 8000870:	f001 fc18 	bl	80020a4 <HAL_RCCEx_PeriphCLKConfig>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000878:	f000 f98e 	bl	8000b98 <Error_Handler>
  }
}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	b019      	add	sp, #100	; 0x64
 8000882:	bd90      	pop	{r4, r7, pc}
 8000884:	40007000 	.word	0x40007000
 8000888:	ffffe7ff 	.word	0xffffe7ff
 800088c:	40021000 	.word	0x40021000

08000890 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_I2C1_Init+0x74>)
 8000896:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <MX_I2C1_Init+0x78>)
 8000898:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_I2C1_Init+0x74>)
 800089c:	4a1b      	ldr	r2, [pc, #108]	; (800090c <MX_I2C1_Init+0x7c>)
 800089e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_I2C1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_I2C1_Init+0x74>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_I2C1_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_I2C1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_I2C1_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_I2C1_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_I2C1_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_I2C1_Init+0x74>)
 80008cc:	0018      	movs	r0, r3
 80008ce:	f000 fd43 	bl	8001358 <HAL_I2C_Init>
 80008d2:	1e03      	subs	r3, r0, #0
 80008d4:	d001      	beq.n	80008da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008d6:	f000 f95f 	bl	8000b98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008da:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <MX_I2C1_Init+0x74>)
 80008dc:	2100      	movs	r1, #0
 80008de:	0018      	movs	r0, r3
 80008e0:	f000 fdd0 	bl	8001484 <HAL_I2CEx_ConfigAnalogFilter>
 80008e4:	1e03      	subs	r3, r0, #0
 80008e6:	d001      	beq.n	80008ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008e8:	f000 f956 	bl	8000b98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <MX_I2C1_Init+0x74>)
 80008ee:	2100      	movs	r1, #0
 80008f0:	0018      	movs	r0, r3
 80008f2:	f000 fe13 	bl	800151c <HAL_I2CEx_ConfigDigitalFilter>
 80008f6:	1e03      	subs	r3, r0, #0
 80008f8:	d001      	beq.n	80008fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008fa:	f000 f94d 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000390 	.word	0x20000390
 8000908:	40005400 	.word	0x40005400
 800090c:	00707cbb 	.word	0x00707cbb

08000910 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_RTC_Init+0x4c>)
 8000916:	4a12      	ldr	r2, [pc, #72]	; (8000960 <MX_RTC_Init+0x50>)
 8000918:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <MX_RTC_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_RTC_Init+0x4c>)
 8000922:	227f      	movs	r2, #127	; 0x7f
 8000924:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <MX_RTC_Init+0x4c>)
 8000928:	22ff      	movs	r2, #255	; 0xff
 800092a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800092c:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_RTC_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <MX_RTC_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_RTC_Init+0x4c>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <MX_RTC_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <MX_RTC_Init+0x4c>)
 8000946:	0018      	movs	r0, r3
 8000948:	f001 fcd8 	bl	80022fc <HAL_RTC_Init>
 800094c:	1e03      	subs	r3, r0, #0
 800094e:	d001      	beq.n	8000954 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000950:	f000 f922 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	200003e4 	.word	0x200003e4
 8000960:	40002800 	.word	0x40002800

08000964 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096a:	2318      	movs	r3, #24
 800096c:	18fb      	adds	r3, r7, r3
 800096e:	0018      	movs	r0, r3
 8000970:	2310      	movs	r3, #16
 8000972:	001a      	movs	r2, r3
 8000974:	2100      	movs	r1, #0
 8000976:	f003 fbd9 	bl	800412c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097a:	2310      	movs	r3, #16
 800097c:	18fb      	adds	r3, r7, r3
 800097e:	0018      	movs	r0, r3
 8000980:	2308      	movs	r3, #8
 8000982:	001a      	movs	r2, r3
 8000984:	2100      	movs	r1, #0
 8000986:	f003 fbd1 	bl	800412c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800098a:	003b      	movs	r3, r7
 800098c:	0018      	movs	r0, r3
 800098e:	2310      	movs	r3, #16
 8000990:	001a      	movs	r2, r3
 8000992:	2100      	movs	r1, #0
 8000994:	f003 fbca 	bl	800412c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000998:	4b30      	ldr	r3, [pc, #192]	; (8000a5c <MX_TIM2_Init+0xf8>)
 800099a:	2280      	movs	r2, #128	; 0x80
 800099c:	05d2      	lsls	r2, r2, #23
 800099e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 80009a0:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <MX_TIM2_Init+0xf8>)
 80009a2:	221f      	movs	r2, #31
 80009a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a6:	4b2d      	ldr	r3, [pc, #180]	; (8000a5c <MX_TIM2_Init+0xf8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80009ac:	4b2b      	ldr	r3, [pc, #172]	; (8000a5c <MX_TIM2_Init+0xf8>)
 80009ae:	4a2c      	ldr	r2, [pc, #176]	; (8000a60 <MX_TIM2_Init+0xfc>)
 80009b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b2:	4b2a      	ldr	r3, [pc, #168]	; (8000a5c <MX_TIM2_Init+0xf8>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009b8:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <MX_TIM2_Init+0xf8>)
 80009ba:	2280      	movs	r2, #128	; 0x80
 80009bc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009be:	4b27      	ldr	r3, [pc, #156]	; (8000a5c <MX_TIM2_Init+0xf8>)
 80009c0:	0018      	movs	r0, r3
 80009c2:	f001 fe9a 	bl	80026fa <HAL_TIM_Base_Init>
 80009c6:	1e03      	subs	r3, r0, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80009ca:	f000 f8e5 	bl	8000b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ce:	2118      	movs	r1, #24
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2280      	movs	r2, #128	; 0x80
 80009d4:	0152      	lsls	r2, r2, #5
 80009d6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009d8:	187a      	adds	r2, r7, r1
 80009da:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <MX_TIM2_Init+0xf8>)
 80009dc:	0011      	movs	r1, r2
 80009de:	0018      	movs	r0, r3
 80009e0:	f001 ffda 	bl	8002998 <HAL_TIM_ConfigClockSource>
 80009e4:	1e03      	subs	r3, r0, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80009e8:	f000 f8d6 	bl	8000b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <MX_TIM2_Init+0xf8>)
 80009ee:	0018      	movs	r0, r3
 80009f0:	f001 fec3 	bl	800277a <HAL_TIM_PWM_Init>
 80009f4:	1e03      	subs	r3, r0, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80009f8:	f000 f8ce 	bl	8000b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009fc:	2110      	movs	r1, #16
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2200      	movs	r2, #0
 8000a08:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a0a:	187a      	adds	r2, r7, r1
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <MX_TIM2_Init+0xf8>)
 8000a0e:	0011      	movs	r1, r2
 8000a10:	0018      	movs	r0, r3
 8000a12:	f002 fa7d 	bl	8002f10 <HAL_TIMEx_MasterConfigSynchronization>
 8000a16:	1e03      	subs	r3, r0, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000a1a:	f000 f8bd 	bl	8000b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a1e:	003b      	movs	r3, r7
 8000a20:	2260      	movs	r2, #96	; 0x60
 8000a22:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 499;
 8000a24:	003b      	movs	r3, r7
 8000a26:	22f4      	movs	r2, #244	; 0xf4
 8000a28:	32ff      	adds	r2, #255	; 0xff
 8000a2a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a2c:	003b      	movs	r3, r7
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a32:	003b      	movs	r3, r7
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a38:	0039      	movs	r1, r7
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <MX_TIM2_Init+0xf8>)
 8000a3c:	2208      	movs	r2, #8
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f001 fee4 	bl	800280c <HAL_TIM_PWM_ConfigChannel>
 8000a44:	1e03      	subs	r3, r0, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000a48:	f000 f8a6 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <MX_TIM2_Init+0xf8>)
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f000 f938 	bl	8000cc4 <HAL_TIM_MspPostInit>

}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b00a      	add	sp, #40	; 0x28
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000408 	.word	0x20000408
 8000a60:	000003e7 	.word	0x000003e7

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b089      	sub	sp, #36	; 0x24
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	240c      	movs	r4, #12
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	0018      	movs	r0, r3
 8000a70:	2314      	movs	r3, #20
 8000a72:	001a      	movs	r2, r3
 8000a74:	2100      	movs	r1, #0
 8000a76:	f003 fb59 	bl	800412c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7a:	4b3f      	ldr	r3, [pc, #252]	; (8000b78 <MX_GPIO_Init+0x114>)
 8000a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a7e:	4b3e      	ldr	r3, [pc, #248]	; (8000b78 <MX_GPIO_Init+0x114>)
 8000a80:	2104      	movs	r1, #4
 8000a82:	430a      	orrs	r2, r1
 8000a84:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a86:	4b3c      	ldr	r3, [pc, #240]	; (8000b78 <MX_GPIO_Init+0x114>)
 8000a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <MX_GPIO_Init+0x114>)
 8000a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a96:	4b38      	ldr	r3, [pc, #224]	; (8000b78 <MX_GPIO_Init+0x114>)
 8000a98:	2101      	movs	r1, #1
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a9e:	4b36      	ldr	r3, [pc, #216]	; (8000b78 <MX_GPIO_Init+0x114>)
 8000aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	4b33      	ldr	r3, [pc, #204]	; (8000b78 <MX_GPIO_Init+0x114>)
 8000aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aae:	4b32      	ldr	r3, [pc, #200]	; (8000b78 <MX_GPIO_Init+0x114>)
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ab6:	4b30      	ldr	r3, [pc, #192]	; (8000b78 <MX_GPIO_Init+0x114>)
 8000ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aba:	2202      	movs	r2, #2
 8000abc:	4013      	ands	r3, r2
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLEAR_Pin|A_HT_Pin|B_HT_Pin|CLOCK_Pin
 8000ac2:	492e      	ldr	r1, [pc, #184]	; (8000b7c <MX_GPIO_Init+0x118>)
 8000ac4:	23a0      	movs	r3, #160	; 0xa0
 8000ac6:	05db      	lsls	r3, r3, #23
 8000ac8:	2201      	movs	r2, #1
 8000aca:	0018      	movs	r0, r3
 8000acc:	f000 fc26 	bl	800131c <HAL_GPIO_WritePin>
                          |A_HO_Pin|B_HO_Pin|A_MT_Pin|B_MT_Pin
                          |A_MO_Pin|B_MO_Pin|A_ST_Pin|B_ST_Pin
                          |A_SO_Pin|B_SO_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000ad0:	2380      	movs	r3, #128	; 0x80
 8000ad2:	011b      	lsls	r3, r3, #4
 8000ad4:	482a      	ldr	r0, [pc, #168]	; (8000b80 <MX_GPIO_Init+0x11c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	0019      	movs	r1, r3
 8000ada:	f000 fc1f 	bl	800131c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CLEAR_Pin A_HT_Pin B_HT_Pin A_HO_Pin
                           B_HO_Pin A_MT_Pin B_MT_Pin A_MO_Pin
                           B_MO_Pin A_ST_Pin B_ST_Pin A_SO_Pin
                           B_SO_Pin */
  GPIO_InitStruct.Pin = CLEAR_Pin|A_HT_Pin|B_HT_Pin|A_HO_Pin
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	4a28      	ldr	r2, [pc, #160]	; (8000b84 <MX_GPIO_Init+0x120>)
 8000ae2:	601a      	str	r2, [r3, #0]
                          |B_HO_Pin|A_MT_Pin|B_MT_Pin|A_MO_Pin
                          |B_MO_Pin|A_ST_Pin|B_ST_Pin|A_SO_Pin
                          |B_SO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	2202      	movs	r2, #2
 8000af4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	193a      	adds	r2, r7, r4
 8000af8:	23a0      	movs	r3, #160	; 0xa0
 8000afa:	05db      	lsls	r3, r3, #23
 8000afc:	0011      	movs	r1, r2
 8000afe:	0018      	movs	r0, r3
 8000b00:	f000 fa9e 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLOCK_Pin */
  GPIO_InitStruct.Pin = CLOCK_Pin;
 8000b04:	193b      	adds	r3, r7, r4
 8000b06:	2208      	movs	r2, #8
 8000b08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	193b      	adds	r3, r7, r4
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	2203      	movs	r2, #3
 8000b1a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CLOCK_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	193a      	adds	r2, r7, r4
 8000b1e:	23a0      	movs	r3, #160	; 0xa0
 8000b20:	05db      	lsls	r3, r3, #23
 8000b22:	0011      	movs	r1, r2
 8000b24:	0018      	movs	r0, r3
 8000b26:	f000 fa8b 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_UP_Pin BTN_DOWN_Pin BTN_LEFT_Pin BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_DOWN_Pin|BTN_LEFT_Pin|BTN_RIGHT_Pin;
 8000b2a:	193b      	adds	r3, r7, r4
 8000b2c:	220f      	movs	r2, #15
 8000b2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b30:	193b      	adds	r3, r7, r4
 8000b32:	2200      	movs	r2, #0
 8000b34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	4a10      	ldr	r2, [pc, #64]	; (8000b80 <MX_GPIO_Init+0x11c>)
 8000b40:	0019      	movs	r1, r3
 8000b42:	0010      	movs	r0, r2
 8000b44:	f000 fa7c 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b48:	0021      	movs	r1, r4
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	2280      	movs	r2, #128	; 0x80
 8000b4e:	0112      	lsls	r2, r2, #4
 8000b50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	2201      	movs	r2, #1
 8000b56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <MX_GPIO_Init+0x11c>)
 8000b68:	0019      	movs	r1, r3
 8000b6a:	0010      	movs	r0, r2
 8000b6c:	f000 fa68 	bl	8001040 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b009      	add	sp, #36	; 0x24
 8000b76:	bd90      	pop	{r4, r7, pc}
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	00009fff 	.word	0x00009fff
 8000b80:	50000400 	.word	0x50000400
 8000b84:	00009ff7 	.word	0x00009ff7

08000b88 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f002 fa7b 	bl	800308c <osDelay>
 8000b96:	e7fb      	b.n	8000b90 <StartDefaultTask+0x8>

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ba0:	e7fe      	b.n	8000ba0 <Error_Handler+0x8>
	...

08000ba4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <HAL_MspInit+0x34>)
 8000baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <HAL_MspInit+0x34>)
 8000bae:	2101      	movs	r1, #1
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <HAL_MspInit+0x34>)
 8000bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <HAL_MspInit+0x34>)
 8000bba:	2180      	movs	r1, #128	; 0x80
 8000bbc:	0549      	lsls	r1, r1, #21
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	425b      	negs	r3, r3
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2103      	movs	r1, #3
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f000 fa16 	bl	8000ffc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	40021000 	.word	0x40021000

08000bdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b089      	sub	sp, #36	; 0x24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	240c      	movs	r4, #12
 8000be6:	193b      	adds	r3, r7, r4
 8000be8:	0018      	movs	r0, r3
 8000bea:	2314      	movs	r3, #20
 8000bec:	001a      	movs	r2, r3
 8000bee:	2100      	movs	r1, #0
 8000bf0:	f003 fa9c 	bl	800412c <memset>
  if(hi2c->Instance==I2C1)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a18      	ldr	r2, [pc, #96]	; (8000c5c <HAL_I2C_MspInit+0x80>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d129      	bne.n	8000c52 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfe:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <HAL_I2C_MspInit+0x84>)
 8000c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c02:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <HAL_I2C_MspInit+0x84>)
 8000c04:	2102      	movs	r1, #2
 8000c06:	430a      	orrs	r2, r1
 8000c08:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_I2C_MspInit+0x84>)
 8000c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c0e:	2202      	movs	r2, #2
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	22c0      	movs	r2, #192	; 0xc0
 8000c1a:	0092      	lsls	r2, r2, #2
 8000c1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c1e:	0021      	movs	r1, r4
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	2212      	movs	r2, #18
 8000c24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	2203      	movs	r2, #3
 8000c30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	2204      	movs	r2, #4
 8000c36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <HAL_I2C_MspInit+0x88>)
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	0010      	movs	r0, r2
 8000c40:	f000 f9fe 	bl	8001040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_I2C_MspInit+0x84>)
 8000c46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <HAL_I2C_MspInit+0x84>)
 8000c4a:	2180      	movs	r1, #128	; 0x80
 8000c4c:	0389      	lsls	r1, r1, #14
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b009      	add	sp, #36	; 0x24
 8000c58:	bd90      	pop	{r4, r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	40005400 	.word	0x40005400
 8000c60:	40021000 	.word	0x40021000
 8000c64:	50000400 	.word	0x50000400

08000c68 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a06      	ldr	r2, [pc, #24]	; (8000c90 <HAL_RTC_MspInit+0x28>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d106      	bne.n	8000c88 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_RTC_MspInit+0x2c>)
 8000c7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000c7e:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_RTC_MspInit+0x2c>)
 8000c80:	2180      	movs	r1, #128	; 0x80
 8000c82:	02c9      	lsls	r1, r1, #11
 8000c84:	430a      	orrs	r2, r1
 8000c86:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b002      	add	sp, #8
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40002800 	.word	0x40002800
 8000c94:	40021000 	.word	0x40021000

08000c98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	05db      	lsls	r3, r3, #23
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d105      	bne.n	8000cb8 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <HAL_TIM_Base_MspInit+0x28>)
 8000cae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <HAL_TIM_Base_MspInit+0x28>)
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b002      	add	sp, #8
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	240c      	movs	r4, #12
 8000cce:	193b      	adds	r3, r7, r4
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	2314      	movs	r3, #20
 8000cd4:	001a      	movs	r2, r3
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	f003 fa28 	bl	800412c <memset>
  if(htim->Instance==TIM2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	2380      	movs	r3, #128	; 0x80
 8000ce2:	05db      	lsls	r3, r3, #23
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d122      	bne.n	8000d2e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <HAL_TIM_MspPostInit+0x74>)
 8000cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_TIM_MspPostInit+0x74>)
 8000cee:	2102      	movs	r1, #2
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cf4:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <HAL_TIM_MspPostInit+0x74>)
 8000cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d00:	193b      	adds	r3, r7, r4
 8000d02:	2280      	movs	r2, #128	; 0x80
 8000d04:	00d2      	lsls	r2, r2, #3
 8000d06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	0021      	movs	r1, r4
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	2202      	movs	r2, #2
 8000d20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d22:	187b      	adds	r3, r7, r1
 8000d24:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <HAL_TIM_MspPostInit+0x78>)
 8000d26:	0019      	movs	r1, r3
 8000d28:	0010      	movs	r0, r2
 8000d2a:	f000 f989 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b009      	add	sp, #36	; 0x24
 8000d34:	bd90      	pop	{r4, r7, pc}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	50000400 	.word	0x50000400

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <NMI_Handler+0x4>

08000d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <HardFault_Handler+0x4>

08000d4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d50:	f000 f8a6 	bl	8000ea0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d54:	f002 fea4 	bl	8003aa0 <xTaskGetSchedulerState>
 8000d58:	0003      	movs	r3, r0
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d001      	beq.n	8000d62 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d5e:	f003 f803 	bl	8003d68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d6c:	46c0      	nop			; (mov r8, r8)
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000d74:	4813      	ldr	r0, [pc, #76]	; (8000dc4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000d76:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d78:	f7ff fff6 	bl	8000d68 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000d7c:	4812      	ldr	r0, [pc, #72]	; (8000dc8 <LoopForever+0x6>)
    LDR R1, [R0]
 8000d7e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000d80:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000d82:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <LoopForever+0xa>)
    CMP R1, R2
 8000d84:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000d86:	d105      	bne.n	8000d94 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000d88:	4811      	ldr	r0, [pc, #68]	; (8000dd0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000d8a:	4912      	ldr	r1, [pc, #72]	; (8000dd4 <LoopForever+0x12>)
    STR R1, [R0]
 8000d8c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000d8e:	4812      	ldr	r0, [pc, #72]	; (8000dd8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000d90:	4912      	ldr	r1, [pc, #72]	; (8000ddc <LoopForever+0x1a>)
    STR R1, [R0]
 8000d92:	6001      	str	r1, [r0, #0]

08000d94 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d94:	4812      	ldr	r0, [pc, #72]	; (8000de0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000d96:	4913      	ldr	r1, [pc, #76]	; (8000de4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000d98:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <LoopForever+0x26>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a10      	ldr	r2, [pc, #64]	; (8000dec <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000dac:	4c10      	ldr	r4, [pc, #64]	; (8000df0 <LoopForever+0x2e>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dba:	f003 f9bf 	bl	800413c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dbe:	f7ff fcab 	bl	8000718 <main>

08000dc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000dc2:	e7fe      	b.n	8000dc2 <LoopForever>
   ldr   r0, =_estack
 8000dc4:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8000dc8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000dcc:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000dd0:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000dd4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000dd8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000ddc:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de4:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8000de8:	08004210 	.word	0x08004210
  ldr r2, =_sbss
 8000dec:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8000df0:	20001198 	.word	0x20001198

08000df4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC1_IRQHandler>
	...

08000df8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000e04:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <HAL_Init+0x3c>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_Init+0x3c>)
 8000e0a:	2140      	movs	r1, #64	; 0x40
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f811 	bl	8000e38 <HAL_InitTick>
 8000e16:	1e03      	subs	r3, r0, #0
 8000e18:	d003      	beq.n	8000e22 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
 8000e20:	e001      	b.n	8000e26 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e22:	f7ff febf 	bl	8000ba4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e26:	1dfb      	adds	r3, r7, #7
 8000e28:	781b      	ldrb	r3, [r3, #0]
}
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b002      	add	sp, #8
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	40022000 	.word	0x40022000

08000e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e40:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <HAL_InitTick+0x5c>)
 8000e42:	681c      	ldr	r4, [r3, #0]
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <HAL_InitTick+0x60>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	0019      	movs	r1, r3
 8000e4a:	23fa      	movs	r3, #250	; 0xfa
 8000e4c:	0098      	lsls	r0, r3, #2
 8000e4e:	f7ff f95b 	bl	8000108 <__udivsi3>
 8000e52:	0003      	movs	r3, r0
 8000e54:	0019      	movs	r1, r3
 8000e56:	0020      	movs	r0, r4
 8000e58:	f7ff f956 	bl	8000108 <__udivsi3>
 8000e5c:	0003      	movs	r3, r0
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f000 f8e1 	bl	8001026 <HAL_SYSTICK_Config>
 8000e64:	1e03      	subs	r3, r0, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e00f      	b.n	8000e8c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	d80b      	bhi.n	8000e8a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	2301      	movs	r3, #1
 8000e76:	425b      	negs	r3, r3
 8000e78:	2200      	movs	r2, #0
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f000 f8be 	bl	8000ffc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_InitTick+0x64>)
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
 8000e88:	e000      	b.n	8000e8c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b003      	add	sp, #12
 8000e92:	bd90      	pop	{r4, r7, pc}
 8000e94:	20000110 	.word	0x20000110
 8000e98:	20000118 	.word	0x20000118
 8000e9c:	20000114 	.word	0x20000114

08000ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <HAL_IncTick+0x1c>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	001a      	movs	r2, r3
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_IncTick+0x20>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	18d2      	adds	r2, r2, r3
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_IncTick+0x20>)
 8000eb2:	601a      	str	r2, [r3, #0]
}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	20000118 	.word	0x20000118
 8000ec0:	20000450 	.word	0x20000450

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b02      	ldr	r3, [pc, #8]	; (8000ed4 <HAL_GetTick+0x10>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	20000450 	.word	0x20000450

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	0002      	movs	r2, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b7f      	cmp	r3, #127	; 0x7f
 8000eec:	d828      	bhi.n	8000f40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eee:	4a2f      	ldr	r2, [pc, #188]	; (8000fac <__NVIC_SetPriority+0xd4>)
 8000ef0:	1dfb      	adds	r3, r7, #7
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	b25b      	sxtb	r3, r3
 8000ef6:	089b      	lsrs	r3, r3, #2
 8000ef8:	33c0      	adds	r3, #192	; 0xc0
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	589b      	ldr	r3, [r3, r2]
 8000efe:	1dfa      	adds	r2, r7, #7
 8000f00:	7812      	ldrb	r2, [r2, #0]
 8000f02:	0011      	movs	r1, r2
 8000f04:	2203      	movs	r2, #3
 8000f06:	400a      	ands	r2, r1
 8000f08:	00d2      	lsls	r2, r2, #3
 8000f0a:	21ff      	movs	r1, #255	; 0xff
 8000f0c:	4091      	lsls	r1, r2
 8000f0e:	000a      	movs	r2, r1
 8000f10:	43d2      	mvns	r2, r2
 8000f12:	401a      	ands	r2, r3
 8000f14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	019b      	lsls	r3, r3, #6
 8000f1a:	22ff      	movs	r2, #255	; 0xff
 8000f1c:	401a      	ands	r2, r3
 8000f1e:	1dfb      	adds	r3, r7, #7
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	0018      	movs	r0, r3
 8000f24:	2303      	movs	r3, #3
 8000f26:	4003      	ands	r3, r0
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f2c:	481f      	ldr	r0, [pc, #124]	; (8000fac <__NVIC_SetPriority+0xd4>)
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	089b      	lsrs	r3, r3, #2
 8000f36:	430a      	orrs	r2, r1
 8000f38:	33c0      	adds	r3, #192	; 0xc0
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f3e:	e031      	b.n	8000fa4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f40:	4a1b      	ldr	r2, [pc, #108]	; (8000fb0 <__NVIC_SetPriority+0xd8>)
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	0019      	movs	r1, r3
 8000f48:	230f      	movs	r3, #15
 8000f4a:	400b      	ands	r3, r1
 8000f4c:	3b08      	subs	r3, #8
 8000f4e:	089b      	lsrs	r3, r3, #2
 8000f50:	3306      	adds	r3, #6
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	18d3      	adds	r3, r2, r3
 8000f56:	3304      	adds	r3, #4
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	1dfa      	adds	r2, r7, #7
 8000f5c:	7812      	ldrb	r2, [r2, #0]
 8000f5e:	0011      	movs	r1, r2
 8000f60:	2203      	movs	r2, #3
 8000f62:	400a      	ands	r2, r1
 8000f64:	00d2      	lsls	r2, r2, #3
 8000f66:	21ff      	movs	r1, #255	; 0xff
 8000f68:	4091      	lsls	r1, r2
 8000f6a:	000a      	movs	r2, r1
 8000f6c:	43d2      	mvns	r2, r2
 8000f6e:	401a      	ands	r2, r3
 8000f70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	019b      	lsls	r3, r3, #6
 8000f76:	22ff      	movs	r2, #255	; 0xff
 8000f78:	401a      	ands	r2, r3
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	0018      	movs	r0, r3
 8000f80:	2303      	movs	r3, #3
 8000f82:	4003      	ands	r3, r0
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f88:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <__NVIC_SetPriority+0xd8>)
 8000f8a:	1dfb      	adds	r3, r7, #7
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	001c      	movs	r4, r3
 8000f90:	230f      	movs	r3, #15
 8000f92:	4023      	ands	r3, r4
 8000f94:	3b08      	subs	r3, #8
 8000f96:	089b      	lsrs	r3, r3, #2
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	3306      	adds	r3, #6
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	18c3      	adds	r3, r0, r3
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	601a      	str	r2, [r3, #0]
}
 8000fa4:	46c0      	nop			; (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b003      	add	sp, #12
 8000faa:	bd90      	pop	{r4, r7, pc}
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	1e5a      	subs	r2, r3, #1
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	045b      	lsls	r3, r3, #17
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d301      	bcc.n	8000fcc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e010      	b.n	8000fee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <SysTick_Config+0x44>)
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	3a01      	subs	r2, #1
 8000fd2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	425b      	negs	r3, r3
 8000fd8:	2103      	movs	r1, #3
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f7ff ff7c 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <SysTick_Config+0x44>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe6:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <SysTick_Config+0x44>)
 8000fe8:	2207      	movs	r2, #7
 8000fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	0018      	movs	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b002      	add	sp, #8
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	e000e010 	.word	0xe000e010

08000ffc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	210f      	movs	r1, #15
 8001008:	187b      	adds	r3, r7, r1
 800100a:	1c02      	adds	r2, r0, #0
 800100c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	187b      	adds	r3, r7, r1
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b25b      	sxtb	r3, r3
 8001016:	0011      	movs	r1, r2
 8001018:	0018      	movs	r0, r3
 800101a:	f7ff ff5d 	bl	8000ed8 <__NVIC_SetPriority>
}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	b004      	add	sp, #16
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	0018      	movs	r0, r3
 8001032:	f7ff ffbf 	bl	8000fb4 <SysTick_Config>
 8001036:	0003      	movs	r3, r0
}
 8001038:	0018      	movs	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	b002      	add	sp, #8
 800103e:	bd80      	pop	{r7, pc}

08001040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001056:	e149      	b.n	80012ec <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2101      	movs	r1, #1
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	4091      	lsls	r1, r2
 8001062:	000a      	movs	r2, r1
 8001064:	4013      	ands	r3, r2
 8001066:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d100      	bne.n	8001070 <HAL_GPIO_Init+0x30>
 800106e:	e13a      	b.n	80012e6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2203      	movs	r2, #3
 8001076:	4013      	ands	r3, r2
 8001078:	2b01      	cmp	r3, #1
 800107a:	d005      	beq.n	8001088 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2203      	movs	r2, #3
 8001082:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001084:	2b02      	cmp	r3, #2
 8001086:	d130      	bne.n	80010ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	2203      	movs	r2, #3
 8001094:	409a      	lsls	r2, r3
 8001096:	0013      	movs	r3, r2
 8001098:	43da      	mvns	r2, r3
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	68da      	ldr	r2, [r3, #12]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	409a      	lsls	r2, r3
 80010aa:	0013      	movs	r3, r2
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010be:	2201      	movs	r2, #1
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	409a      	lsls	r2, r3
 80010c4:	0013      	movs	r3, r2
 80010c6:	43da      	mvns	r2, r3
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	091b      	lsrs	r3, r3, #4
 80010d4:	2201      	movs	r2, #1
 80010d6:	401a      	ands	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	409a      	lsls	r2, r3
 80010dc:	0013      	movs	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2203      	movs	r2, #3
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b03      	cmp	r3, #3
 80010f4:	d017      	beq.n	8001126 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	2203      	movs	r2, #3
 8001102:	409a      	lsls	r2, r3
 8001104:	0013      	movs	r3, r2
 8001106:	43da      	mvns	r2, r3
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	409a      	lsls	r2, r3
 8001118:	0013      	movs	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2203      	movs	r2, #3
 800112c:	4013      	ands	r3, r2
 800112e:	2b02      	cmp	r3, #2
 8001130:	d123      	bne.n	800117a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	08da      	lsrs	r2, r3, #3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3208      	adds	r2, #8
 800113a:	0092      	lsls	r2, r2, #2
 800113c:	58d3      	ldr	r3, [r2, r3]
 800113e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	2207      	movs	r2, #7
 8001144:	4013      	ands	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	220f      	movs	r2, #15
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	43da      	mvns	r2, r3
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	691a      	ldr	r2, [r3, #16]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2107      	movs	r1, #7
 800115e:	400b      	ands	r3, r1
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	409a      	lsls	r2, r3
 8001164:	0013      	movs	r3, r2
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	08da      	lsrs	r2, r3, #3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3208      	adds	r2, #8
 8001174:	0092      	lsls	r2, r2, #2
 8001176:	6939      	ldr	r1, [r7, #16]
 8001178:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	2203      	movs	r2, #3
 8001186:	409a      	lsls	r2, r3
 8001188:	0013      	movs	r3, r2
 800118a:	43da      	mvns	r2, r3
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2203      	movs	r2, #3
 8001198:	401a      	ands	r2, r3
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	409a      	lsls	r2, r3
 80011a0:	0013      	movs	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	23c0      	movs	r3, #192	; 0xc0
 80011b4:	029b      	lsls	r3, r3, #10
 80011b6:	4013      	ands	r3, r2
 80011b8:	d100      	bne.n	80011bc <HAL_GPIO_Init+0x17c>
 80011ba:	e094      	b.n	80012e6 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011bc:	4b51      	ldr	r3, [pc, #324]	; (8001304 <HAL_GPIO_Init+0x2c4>)
 80011be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011c0:	4b50      	ldr	r3, [pc, #320]	; (8001304 <HAL_GPIO_Init+0x2c4>)
 80011c2:	2101      	movs	r1, #1
 80011c4:	430a      	orrs	r2, r1
 80011c6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80011c8:	4a4f      	ldr	r2, [pc, #316]	; (8001308 <HAL_GPIO_Init+0x2c8>)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	3302      	adds	r3, #2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	589b      	ldr	r3, [r3, r2]
 80011d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	2203      	movs	r2, #3
 80011da:	4013      	ands	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	220f      	movs	r2, #15
 80011e0:	409a      	lsls	r2, r3
 80011e2:	0013      	movs	r3, r2
 80011e4:	43da      	mvns	r2, r3
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	23a0      	movs	r3, #160	; 0xa0
 80011f0:	05db      	lsls	r3, r3, #23
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d013      	beq.n	800121e <HAL_GPIO_Init+0x1de>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a44      	ldr	r2, [pc, #272]	; (800130c <HAL_GPIO_Init+0x2cc>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d00d      	beq.n	800121a <HAL_GPIO_Init+0x1da>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a43      	ldr	r2, [pc, #268]	; (8001310 <HAL_GPIO_Init+0x2d0>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d007      	beq.n	8001216 <HAL_GPIO_Init+0x1d6>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a42      	ldr	r2, [pc, #264]	; (8001314 <HAL_GPIO_Init+0x2d4>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d101      	bne.n	8001212 <HAL_GPIO_Init+0x1d2>
 800120e:	2305      	movs	r3, #5
 8001210:	e006      	b.n	8001220 <HAL_GPIO_Init+0x1e0>
 8001212:	2306      	movs	r3, #6
 8001214:	e004      	b.n	8001220 <HAL_GPIO_Init+0x1e0>
 8001216:	2302      	movs	r3, #2
 8001218:	e002      	b.n	8001220 <HAL_GPIO_Init+0x1e0>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <HAL_GPIO_Init+0x1e0>
 800121e:	2300      	movs	r3, #0
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	2103      	movs	r1, #3
 8001224:	400a      	ands	r2, r1
 8001226:	0092      	lsls	r2, r2, #2
 8001228:	4093      	lsls	r3, r2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001230:	4935      	ldr	r1, [pc, #212]	; (8001308 <HAL_GPIO_Init+0x2c8>)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3302      	adds	r3, #2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800123e:	4b36      	ldr	r3, [pc, #216]	; (8001318 <HAL_GPIO_Init+0x2d8>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	43da      	mvns	r2, r3
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	035b      	lsls	r3, r3, #13
 8001256:	4013      	ands	r3, r2
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001262:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <HAL_GPIO_Init+0x2d8>)
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001268:	4b2b      	ldr	r3, [pc, #172]	; (8001318 <HAL_GPIO_Init+0x2d8>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	43da      	mvns	r2, r3
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	039b      	lsls	r3, r3, #14
 8001280:	4013      	ands	r3, r2
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800128c:	4b22      	ldr	r3, [pc, #136]	; (8001318 <HAL_GPIO_Init+0x2d8>)
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001292:	4b21      	ldr	r3, [pc, #132]	; (8001318 <HAL_GPIO_Init+0x2d8>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	43da      	mvns	r2, r3
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	029b      	lsls	r3, r3, #10
 80012aa:	4013      	ands	r3, r2
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <HAL_GPIO_Init+0x2d8>)
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <HAL_GPIO_Init+0x2d8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	43da      	mvns	r2, r3
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	025b      	lsls	r3, r3, #9
 80012d4:	4013      	ands	r3, r2
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012e0:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <HAL_GPIO_Init+0x2d8>)
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	3301      	adds	r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	40da      	lsrs	r2, r3
 80012f4:	1e13      	subs	r3, r2, #0
 80012f6:	d000      	beq.n	80012fa <HAL_GPIO_Init+0x2ba>
 80012f8:	e6ae      	b.n	8001058 <HAL_GPIO_Init+0x18>
  }
}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	46c0      	nop			; (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	b006      	add	sp, #24
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40021000 	.word	0x40021000
 8001308:	40010000 	.word	0x40010000
 800130c:	50000400 	.word	0x50000400
 8001310:	50000800 	.word	0x50000800
 8001314:	50001c00 	.word	0x50001c00
 8001318:	40010400 	.word	0x40010400

0800131c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	0008      	movs	r0, r1
 8001326:	0011      	movs	r1, r2
 8001328:	1cbb      	adds	r3, r7, #2
 800132a:	1c02      	adds	r2, r0, #0
 800132c:	801a      	strh	r2, [r3, #0]
 800132e:	1c7b      	adds	r3, r7, #1
 8001330:	1c0a      	adds	r2, r1, #0
 8001332:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001334:	1c7b      	adds	r3, r7, #1
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d004      	beq.n	8001346 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800133c:	1cbb      	adds	r3, r7, #2
 800133e:	881a      	ldrh	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001344:	e003      	b.n	800134e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001346:	1cbb      	adds	r3, r7, #2
 8001348:	881a      	ldrh	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	46bd      	mov	sp, r7
 8001352:	b002      	add	sp, #8
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e082      	b.n	8001470 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2241      	movs	r2, #65	; 0x41
 800136e:	5c9b      	ldrb	r3, [r3, r2]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d107      	bne.n	8001386 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2240      	movs	r2, #64	; 0x40
 800137a:	2100      	movs	r1, #0
 800137c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	0018      	movs	r0, r3
 8001382:	f7ff fc2b 	bl	8000bdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2241      	movs	r2, #65	; 0x41
 800138a:	2124      	movs	r1, #36	; 0x24
 800138c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2101      	movs	r1, #1
 800139a:	438a      	bics	r2, r1
 800139c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4934      	ldr	r1, [pc, #208]	; (8001478 <HAL_I2C_Init+0x120>)
 80013a8:	400a      	ands	r2, r1
 80013aa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4931      	ldr	r1, [pc, #196]	; (800147c <HAL_I2C_Init+0x124>)
 80013b8:	400a      	ands	r2, r1
 80013ba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d108      	bne.n	80013d6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2180      	movs	r1, #128	; 0x80
 80013ce:	0209      	lsls	r1, r1, #8
 80013d0:	430a      	orrs	r2, r1
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	e007      	b.n	80013e6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2184      	movs	r1, #132	; 0x84
 80013e0:	0209      	lsls	r1, r1, #8
 80013e2:	430a      	orrs	r2, r1
 80013e4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d104      	bne.n	80013f8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2280      	movs	r2, #128	; 0x80
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	491f      	ldr	r1, [pc, #124]	; (8001480 <HAL_I2C_Init+0x128>)
 8001404:	430a      	orrs	r2, r1
 8001406:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	491a      	ldr	r1, [pc, #104]	; (800147c <HAL_I2C_Init+0x124>)
 8001414:	400a      	ands	r2, r1
 8001416:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691a      	ldr	r2, [r3, #16]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	431a      	orrs	r2, r3
 8001422:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	430a      	orrs	r2, r1
 8001430:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69d9      	ldr	r1, [r3, #28]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1a      	ldr	r2, [r3, #32]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	430a      	orrs	r2, r1
 8001440:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2101      	movs	r1, #1
 800144e:	430a      	orrs	r2, r1
 8001450:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2241      	movs	r2, #65	; 0x41
 800145c:	2120      	movs	r1, #32
 800145e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2242      	movs	r2, #66	; 0x42
 800146a:	2100      	movs	r1, #0
 800146c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	0018      	movs	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	b002      	add	sp, #8
 8001476:	bd80      	pop	{r7, pc}
 8001478:	f0ffffff 	.word	0xf0ffffff
 800147c:	ffff7fff 	.word	0xffff7fff
 8001480:	02008000 	.word	0x02008000

08001484 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2241      	movs	r2, #65	; 0x41
 8001492:	5c9b      	ldrb	r3, [r3, r2]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b20      	cmp	r3, #32
 8001498:	d138      	bne.n	800150c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2240      	movs	r2, #64	; 0x40
 800149e:	5c9b      	ldrb	r3, [r3, r2]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d101      	bne.n	80014a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80014a4:	2302      	movs	r3, #2
 80014a6:	e032      	b.n	800150e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2240      	movs	r2, #64	; 0x40
 80014ac:	2101      	movs	r1, #1
 80014ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2241      	movs	r2, #65	; 0x41
 80014b4:	2124      	movs	r1, #36	; 0x24
 80014b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2101      	movs	r1, #1
 80014c4:	438a      	bics	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4911      	ldr	r1, [pc, #68]	; (8001518 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80014d4:	400a      	ands	r2, r1
 80014d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6819      	ldr	r1, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2101      	movs	r1, #1
 80014f4:	430a      	orrs	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2241      	movs	r2, #65	; 0x41
 80014fc:	2120      	movs	r1, #32
 80014fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2240      	movs	r2, #64	; 0x40
 8001504:	2100      	movs	r1, #0
 8001506:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	e000      	b.n	800150e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800150c:	2302      	movs	r3, #2
  }
}
 800150e:	0018      	movs	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	b002      	add	sp, #8
 8001514:	bd80      	pop	{r7, pc}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	ffffefff 	.word	0xffffefff

0800151c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2241      	movs	r2, #65	; 0x41
 800152a:	5c9b      	ldrb	r3, [r3, r2]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b20      	cmp	r3, #32
 8001530:	d139      	bne.n	80015a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2240      	movs	r2, #64	; 0x40
 8001536:	5c9b      	ldrb	r3, [r3, r2]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d101      	bne.n	8001540 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800153c:	2302      	movs	r3, #2
 800153e:	e033      	b.n	80015a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2240      	movs	r2, #64	; 0x40
 8001544:	2101      	movs	r1, #1
 8001546:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2241      	movs	r2, #65	; 0x41
 800154c:	2124      	movs	r1, #36	; 0x24
 800154e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2101      	movs	r1, #1
 800155c:	438a      	bics	r2, r1
 800155e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4a11      	ldr	r2, [pc, #68]	; (80015b0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800156c:	4013      	ands	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	4313      	orrs	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2101      	movs	r1, #1
 800158e:	430a      	orrs	r2, r1
 8001590:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2241      	movs	r2, #65	; 0x41
 8001596:	2120      	movs	r1, #32
 8001598:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2240      	movs	r2, #64	; 0x40
 800159e:	2100      	movs	r1, #0
 80015a0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	e000      	b.n	80015a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80015a6:	2302      	movs	r3, #2
  }
}
 80015a8:	0018      	movs	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b004      	add	sp, #16
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	fffff0ff 	.word	0xfffff0ff

080015b4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80015be:	2180      	movs	r1, #128	; 0x80
 80015c0:	0049      	lsls	r1, r1, #1
 80015c2:	430a      	orrs	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]
}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40007000 	.word	0x40007000

080015d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d0:	b5b0      	push	{r4, r5, r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d102      	bne.n	80015e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	f000 fb6c 	bl	8001cbc <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015e4:	4bc8      	ldr	r3, [pc, #800]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	220c      	movs	r2, #12
 80015ea:	4013      	ands	r3, r2
 80015ec:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015ee:	4bc6      	ldr	r3, [pc, #792]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 80015f0:	68da      	ldr	r2, [r3, #12]
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	025b      	lsls	r3, r3, #9
 80015f6:	4013      	ands	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2201      	movs	r2, #1
 8001600:	4013      	ands	r3, r2
 8001602:	d100      	bne.n	8001606 <HAL_RCC_OscConfig+0x36>
 8001604:	e07d      	b.n	8001702 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	2b08      	cmp	r3, #8
 800160a:	d007      	beq.n	800161c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	2b0c      	cmp	r3, #12
 8001610:	d112      	bne.n	8001638 <HAL_RCC_OscConfig+0x68>
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	025b      	lsls	r3, r3, #9
 8001618:	429a      	cmp	r2, r3
 800161a:	d10d      	bne.n	8001638 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161c:	4bba      	ldr	r3, [pc, #744]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	2380      	movs	r3, #128	; 0x80
 8001622:	029b      	lsls	r3, r3, #10
 8001624:	4013      	ands	r3, r2
 8001626:	d100      	bne.n	800162a <HAL_RCC_OscConfig+0x5a>
 8001628:	e06a      	b.n	8001700 <HAL_RCC_OscConfig+0x130>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d166      	bne.n	8001700 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	f000 fb42 	bl	8001cbc <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	025b      	lsls	r3, r3, #9
 8001640:	429a      	cmp	r2, r3
 8001642:	d107      	bne.n	8001654 <HAL_RCC_OscConfig+0x84>
 8001644:	4bb0      	ldr	r3, [pc, #704]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4baf      	ldr	r3, [pc, #700]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 800164a:	2180      	movs	r1, #128	; 0x80
 800164c:	0249      	lsls	r1, r1, #9
 800164e:	430a      	orrs	r2, r1
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	e027      	b.n	80016a4 <HAL_RCC_OscConfig+0xd4>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	23a0      	movs	r3, #160	; 0xa0
 800165a:	02db      	lsls	r3, r3, #11
 800165c:	429a      	cmp	r2, r3
 800165e:	d10e      	bne.n	800167e <HAL_RCC_OscConfig+0xae>
 8001660:	4ba9      	ldr	r3, [pc, #676]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4ba8      	ldr	r3, [pc, #672]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 8001666:	2180      	movs	r1, #128	; 0x80
 8001668:	02c9      	lsls	r1, r1, #11
 800166a:	430a      	orrs	r2, r1
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	4ba6      	ldr	r3, [pc, #664]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4ba5      	ldr	r3, [pc, #660]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 8001674:	2180      	movs	r1, #128	; 0x80
 8001676:	0249      	lsls	r1, r1, #9
 8001678:	430a      	orrs	r2, r1
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	e012      	b.n	80016a4 <HAL_RCC_OscConfig+0xd4>
 800167e:	4ba2      	ldr	r3, [pc, #648]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	4ba1      	ldr	r3, [pc, #644]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 8001684:	49a1      	ldr	r1, [pc, #644]	; (800190c <HAL_RCC_OscConfig+0x33c>)
 8001686:	400a      	ands	r2, r1
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	4b9f      	ldr	r3, [pc, #636]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	025b      	lsls	r3, r3, #9
 8001692:	4013      	ands	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4b9b      	ldr	r3, [pc, #620]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b9a      	ldr	r3, [pc, #616]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 800169e:	499c      	ldr	r1, [pc, #624]	; (8001910 <HAL_RCC_OscConfig+0x340>)
 80016a0:	400a      	ands	r2, r1
 80016a2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d014      	beq.n	80016d6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fc0a 	bl	8000ec4 <HAL_GetTick>
 80016b0:	0003      	movs	r3, r0
 80016b2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b6:	f7ff fc05 	bl	8000ec4 <HAL_GetTick>
 80016ba:	0002      	movs	r2, r0
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b64      	cmp	r3, #100	; 0x64
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e2f9      	b.n	8001cbc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016c8:	4b8f      	ldr	r3, [pc, #572]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	029b      	lsls	r3, r3, #10
 80016d0:	4013      	ands	r3, r2
 80016d2:	d0f0      	beq.n	80016b6 <HAL_RCC_OscConfig+0xe6>
 80016d4:	e015      	b.n	8001702 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d6:	f7ff fbf5 	bl	8000ec4 <HAL_GetTick>
 80016da:	0003      	movs	r3, r0
 80016dc:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e0:	f7ff fbf0 	bl	8000ec4 <HAL_GetTick>
 80016e4:	0002      	movs	r2, r0
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b64      	cmp	r3, #100	; 0x64
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e2e4      	b.n	8001cbc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016f2:	4b85      	ldr	r3, [pc, #532]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	029b      	lsls	r3, r3, #10
 80016fa:	4013      	ands	r3, r2
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0x110>
 80016fe:	e000      	b.n	8001702 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001700:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2202      	movs	r2, #2
 8001708:	4013      	ands	r3, r2
 800170a:	d100      	bne.n	800170e <HAL_RCC_OscConfig+0x13e>
 800170c:	e099      	b.n	8001842 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	2220      	movs	r2, #32
 8001718:	4013      	ands	r3, r2
 800171a:	d009      	beq.n	8001730 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800171c:	4b7a      	ldr	r3, [pc, #488]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b79      	ldr	r3, [pc, #484]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 8001722:	2120      	movs	r1, #32
 8001724:	430a      	orrs	r2, r1
 8001726:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	2220      	movs	r2, #32
 800172c:	4393      	bics	r3, r2
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	2b04      	cmp	r3, #4
 8001734:	d005      	beq.n	8001742 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	2b0c      	cmp	r3, #12
 800173a:	d13e      	bne.n	80017ba <HAL_RCC_OscConfig+0x1ea>
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d13b      	bne.n	80017ba <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001742:	4b71      	ldr	r3, [pc, #452]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2204      	movs	r2, #4
 8001748:	4013      	ands	r3, r2
 800174a:	d004      	beq.n	8001756 <HAL_RCC_OscConfig+0x186>
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e2b2      	b.n	8001cbc <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001756:	4b6c      	ldr	r3, [pc, #432]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	4a6e      	ldr	r2, [pc, #440]	; (8001914 <HAL_RCC_OscConfig+0x344>)
 800175c:	4013      	ands	r3, r2
 800175e:	0019      	movs	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	021a      	lsls	r2, r3, #8
 8001766:	4b68      	ldr	r3, [pc, #416]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 8001768:	430a      	orrs	r2, r1
 800176a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800176c:	4b66      	ldr	r3, [pc, #408]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2209      	movs	r2, #9
 8001772:	4393      	bics	r3, r2
 8001774:	0019      	movs	r1, r3
 8001776:	4b64      	ldr	r3, [pc, #400]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 8001778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800177a:	430a      	orrs	r2, r1
 800177c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800177e:	f000 fbeb 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8001782:	0001      	movs	r1, r0
 8001784:	4b60      	ldr	r3, [pc, #384]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	091b      	lsrs	r3, r3, #4
 800178a:	220f      	movs	r2, #15
 800178c:	4013      	ands	r3, r2
 800178e:	4a62      	ldr	r2, [pc, #392]	; (8001918 <HAL_RCC_OscConfig+0x348>)
 8001790:	5cd3      	ldrb	r3, [r2, r3]
 8001792:	000a      	movs	r2, r1
 8001794:	40da      	lsrs	r2, r3
 8001796:	4b61      	ldr	r3, [pc, #388]	; (800191c <HAL_RCC_OscConfig+0x34c>)
 8001798:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800179a:	4b61      	ldr	r3, [pc, #388]	; (8001920 <HAL_RCC_OscConfig+0x350>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2513      	movs	r5, #19
 80017a0:	197c      	adds	r4, r7, r5
 80017a2:	0018      	movs	r0, r3
 80017a4:	f7ff fb48 	bl	8000e38 <HAL_InitTick>
 80017a8:	0003      	movs	r3, r0
 80017aa:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80017ac:	197b      	adds	r3, r7, r5
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d046      	beq.n	8001842 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80017b4:	197b      	adds	r3, r7, r5
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	e280      	b.n	8001cbc <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d027      	beq.n	8001810 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017c0:	4b51      	ldr	r3, [pc, #324]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2209      	movs	r2, #9
 80017c6:	4393      	bics	r3, r2
 80017c8:	0019      	movs	r1, r3
 80017ca:	4b4f      	ldr	r3, [pc, #316]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 80017cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ce:	430a      	orrs	r2, r1
 80017d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d2:	f7ff fb77 	bl	8000ec4 <HAL_GetTick>
 80017d6:	0003      	movs	r3, r0
 80017d8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017dc:	f7ff fb72 	bl	8000ec4 <HAL_GetTick>
 80017e0:	0002      	movs	r2, r0
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e266      	b.n	8001cbc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017ee:	4b46      	ldr	r3, [pc, #280]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2204      	movs	r2, #4
 80017f4:	4013      	ands	r3, r2
 80017f6:	d0f1      	beq.n	80017dc <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f8:	4b43      	ldr	r3, [pc, #268]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	4a45      	ldr	r2, [pc, #276]	; (8001914 <HAL_RCC_OscConfig+0x344>)
 80017fe:	4013      	ands	r3, r2
 8001800:	0019      	movs	r1, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	021a      	lsls	r2, r3, #8
 8001808:	4b3f      	ldr	r3, [pc, #252]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 800180a:	430a      	orrs	r2, r1
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	e018      	b.n	8001842 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001810:	4b3d      	ldr	r3, [pc, #244]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b3c      	ldr	r3, [pc, #240]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 8001816:	2101      	movs	r1, #1
 8001818:	438a      	bics	r2, r1
 800181a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff fb52 	bl	8000ec4 <HAL_GetTick>
 8001820:	0003      	movs	r3, r0
 8001822:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001826:	f7ff fb4d 	bl	8000ec4 <HAL_GetTick>
 800182a:	0002      	movs	r2, r0
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e241      	b.n	8001cbc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001838:	4b33      	ldr	r3, [pc, #204]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2204      	movs	r2, #4
 800183e:	4013      	ands	r3, r2
 8001840:	d1f1      	bne.n	8001826 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2210      	movs	r2, #16
 8001848:	4013      	ands	r3, r2
 800184a:	d100      	bne.n	800184e <HAL_RCC_OscConfig+0x27e>
 800184c:	e0a1      	b.n	8001992 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d140      	bne.n	80018d6 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001854:	4b2c      	ldr	r3, [pc, #176]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4013      	ands	r3, r2
 800185e:	d005      	beq.n	800186c <HAL_RCC_OscConfig+0x29c>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e227      	b.n	8001cbc <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800186c:	4b26      	ldr	r3, [pc, #152]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	4a2c      	ldr	r2, [pc, #176]	; (8001924 <HAL_RCC_OscConfig+0x354>)
 8001872:	4013      	ands	r3, r2
 8001874:	0019      	movs	r1, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a1a      	ldr	r2, [r3, #32]
 800187a:	4b23      	ldr	r3, [pc, #140]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 800187c:	430a      	orrs	r2, r1
 800187e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001880:	4b21      	ldr	r3, [pc, #132]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	021b      	lsls	r3, r3, #8
 8001886:	0a19      	lsrs	r1, r3, #8
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	061a      	lsls	r2, r3, #24
 800188e:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 8001890:	430a      	orrs	r2, r1
 8001892:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	0b5b      	lsrs	r3, r3, #13
 800189a:	3301      	adds	r3, #1
 800189c:	2280      	movs	r2, #128	; 0x80
 800189e:	0212      	lsls	r2, r2, #8
 80018a0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80018a2:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	210f      	movs	r1, #15
 80018aa:	400b      	ands	r3, r1
 80018ac:	491a      	ldr	r1, [pc, #104]	; (8001918 <HAL_RCC_OscConfig+0x348>)
 80018ae:	5ccb      	ldrb	r3, [r1, r3]
 80018b0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018b2:	4b1a      	ldr	r3, [pc, #104]	; (800191c <HAL_RCC_OscConfig+0x34c>)
 80018b4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80018b6:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <HAL_RCC_OscConfig+0x350>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2513      	movs	r5, #19
 80018bc:	197c      	adds	r4, r7, r5
 80018be:	0018      	movs	r0, r3
 80018c0:	f7ff faba 	bl	8000e38 <HAL_InitTick>
 80018c4:	0003      	movs	r3, r0
 80018c6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80018c8:	197b      	adds	r3, r7, r5
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d060      	beq.n	8001992 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80018d0:	197b      	adds	r3, r7, r5
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	e1f2      	b.n	8001cbc <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d03f      	beq.n	800195e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_RCC_OscConfig+0x338>)
 80018e4:	2180      	movs	r1, #128	; 0x80
 80018e6:	0049      	lsls	r1, r1, #1
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff faea 	bl	8000ec4 <HAL_GetTick>
 80018f0:	0003      	movs	r3, r0
 80018f2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018f4:	e018      	b.n	8001928 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018f6:	f7ff fae5 	bl	8000ec4 <HAL_GetTick>
 80018fa:	0002      	movs	r2, r0
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d911      	bls.n	8001928 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e1d9      	b.n	8001cbc <HAL_RCC_OscConfig+0x6ec>
 8001908:	40021000 	.word	0x40021000
 800190c:	fffeffff 	.word	0xfffeffff
 8001910:	fffbffff 	.word	0xfffbffff
 8001914:	ffffe0ff 	.word	0xffffe0ff
 8001918:	080041e4 	.word	0x080041e4
 800191c:	20000110 	.word	0x20000110
 8001920:	20000114 	.word	0x20000114
 8001924:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001928:	4bc9      	ldr	r3, [pc, #804]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4013      	ands	r3, r2
 8001932:	d0e0      	beq.n	80018f6 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001934:	4bc6      	ldr	r3, [pc, #792]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	4ac6      	ldr	r2, [pc, #792]	; (8001c54 <HAL_RCC_OscConfig+0x684>)
 800193a:	4013      	ands	r3, r2
 800193c:	0019      	movs	r1, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1a      	ldr	r2, [r3, #32]
 8001942:	4bc3      	ldr	r3, [pc, #780]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001944:	430a      	orrs	r2, r1
 8001946:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001948:	4bc1      	ldr	r3, [pc, #772]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	021b      	lsls	r3, r3, #8
 800194e:	0a19      	lsrs	r1, r3, #8
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	061a      	lsls	r2, r3, #24
 8001956:	4bbe      	ldr	r3, [pc, #760]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001958:	430a      	orrs	r2, r1
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	e019      	b.n	8001992 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800195e:	4bbc      	ldr	r3, [pc, #752]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4bbb      	ldr	r3, [pc, #748]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001964:	49bc      	ldr	r1, [pc, #752]	; (8001c58 <HAL_RCC_OscConfig+0x688>)
 8001966:	400a      	ands	r2, r1
 8001968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196a:	f7ff faab 	bl	8000ec4 <HAL_GetTick>
 800196e:	0003      	movs	r3, r0
 8001970:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001974:	f7ff faa6 	bl	8000ec4 <HAL_GetTick>
 8001978:	0002      	movs	r2, r0
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e19a      	b.n	8001cbc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001986:	4bb2      	ldr	r3, [pc, #712]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	2380      	movs	r3, #128	; 0x80
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4013      	ands	r3, r2
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2208      	movs	r2, #8
 8001998:	4013      	ands	r3, r2
 800199a:	d036      	beq.n	8001a0a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d019      	beq.n	80019d8 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019a4:	4baa      	ldr	r3, [pc, #680]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 80019a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019a8:	4ba9      	ldr	r3, [pc, #676]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 80019aa:	2101      	movs	r1, #1
 80019ac:	430a      	orrs	r2, r1
 80019ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b0:	f7ff fa88 	bl	8000ec4 <HAL_GetTick>
 80019b4:	0003      	movs	r3, r0
 80019b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ba:	f7ff fa83 	bl	8000ec4 <HAL_GetTick>
 80019be:	0002      	movs	r2, r0
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e177      	b.n	8001cbc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019cc:	4ba0      	ldr	r3, [pc, #640]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 80019ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019d0:	2202      	movs	r2, #2
 80019d2:	4013      	ands	r3, r2
 80019d4:	d0f1      	beq.n	80019ba <HAL_RCC_OscConfig+0x3ea>
 80019d6:	e018      	b.n	8001a0a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019d8:	4b9d      	ldr	r3, [pc, #628]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 80019da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019dc:	4b9c      	ldr	r3, [pc, #624]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 80019de:	2101      	movs	r1, #1
 80019e0:	438a      	bics	r2, r1
 80019e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e4:	f7ff fa6e 	bl	8000ec4 <HAL_GetTick>
 80019e8:	0003      	movs	r3, r0
 80019ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ee:	f7ff fa69 	bl	8000ec4 <HAL_GetTick>
 80019f2:	0002      	movs	r2, r0
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e15d      	b.n	8001cbc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a00:	4b93      	ldr	r3, [pc, #588]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a04:	2202      	movs	r2, #2
 8001a06:	4013      	ands	r3, r2
 8001a08:	d1f1      	bne.n	80019ee <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2204      	movs	r2, #4
 8001a10:	4013      	ands	r3, r2
 8001a12:	d100      	bne.n	8001a16 <HAL_RCC_OscConfig+0x446>
 8001a14:	e0ae      	b.n	8001b74 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a16:	2023      	movs	r0, #35	; 0x23
 8001a18:	183b      	adds	r3, r7, r0
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a1e:	4b8c      	ldr	r3, [pc, #560]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a22:	2380      	movs	r3, #128	; 0x80
 8001a24:	055b      	lsls	r3, r3, #21
 8001a26:	4013      	ands	r3, r2
 8001a28:	d109      	bne.n	8001a3e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	4b89      	ldr	r3, [pc, #548]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a2e:	4b88      	ldr	r3, [pc, #544]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	0549      	lsls	r1, r1, #21
 8001a34:	430a      	orrs	r2, r1
 8001a36:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001a38:	183b      	adds	r3, r7, r0
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3e:	4b87      	ldr	r3, [pc, #540]	; (8001c5c <HAL_RCC_OscConfig+0x68c>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	4013      	ands	r3, r2
 8001a48:	d11a      	bne.n	8001a80 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a4a:	4b84      	ldr	r3, [pc, #528]	; (8001c5c <HAL_RCC_OscConfig+0x68c>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	4b83      	ldr	r3, [pc, #524]	; (8001c5c <HAL_RCC_OscConfig+0x68c>)
 8001a50:	2180      	movs	r1, #128	; 0x80
 8001a52:	0049      	lsls	r1, r1, #1
 8001a54:	430a      	orrs	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a58:	f7ff fa34 	bl	8000ec4 <HAL_GetTick>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a62:	f7ff fa2f 	bl	8000ec4 <HAL_GetTick>
 8001a66:	0002      	movs	r2, r0
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b64      	cmp	r3, #100	; 0x64
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e123      	b.n	8001cbc <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a74:	4b79      	ldr	r3, [pc, #484]	; (8001c5c <HAL_RCC_OscConfig+0x68c>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d107      	bne.n	8001a9c <HAL_RCC_OscConfig+0x4cc>
 8001a8c:	4b70      	ldr	r3, [pc, #448]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001a8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a90:	4b6f      	ldr	r3, [pc, #444]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001a92:	2180      	movs	r1, #128	; 0x80
 8001a94:	0049      	lsls	r1, r1, #1
 8001a96:	430a      	orrs	r2, r1
 8001a98:	651a      	str	r2, [r3, #80]	; 0x50
 8001a9a:	e031      	b.n	8001b00 <HAL_RCC_OscConfig+0x530>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10c      	bne.n	8001abe <HAL_RCC_OscConfig+0x4ee>
 8001aa4:	4b6a      	ldr	r3, [pc, #424]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001aa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001aa8:	4b69      	ldr	r3, [pc, #420]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001aaa:	496b      	ldr	r1, [pc, #428]	; (8001c58 <HAL_RCC_OscConfig+0x688>)
 8001aac:	400a      	ands	r2, r1
 8001aae:	651a      	str	r2, [r3, #80]	; 0x50
 8001ab0:	4b67      	ldr	r3, [pc, #412]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001ab2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ab4:	4b66      	ldr	r3, [pc, #408]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001ab6:	496a      	ldr	r1, [pc, #424]	; (8001c60 <HAL_RCC_OscConfig+0x690>)
 8001ab8:	400a      	ands	r2, r1
 8001aba:	651a      	str	r2, [r3, #80]	; 0x50
 8001abc:	e020      	b.n	8001b00 <HAL_RCC_OscConfig+0x530>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	23a0      	movs	r3, #160	; 0xa0
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d10e      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x518>
 8001aca:	4b61      	ldr	r3, [pc, #388]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001acc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ace:	4b60      	ldr	r3, [pc, #384]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001ad0:	2180      	movs	r1, #128	; 0x80
 8001ad2:	00c9      	lsls	r1, r1, #3
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	651a      	str	r2, [r3, #80]	; 0x50
 8001ad8:	4b5d      	ldr	r3, [pc, #372]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001ada:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001adc:	4b5c      	ldr	r3, [pc, #368]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001ade:	2180      	movs	r1, #128	; 0x80
 8001ae0:	0049      	lsls	r1, r1, #1
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	651a      	str	r2, [r3, #80]	; 0x50
 8001ae6:	e00b      	b.n	8001b00 <HAL_RCC_OscConfig+0x530>
 8001ae8:	4b59      	ldr	r3, [pc, #356]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001aea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001aec:	4b58      	ldr	r3, [pc, #352]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001aee:	495a      	ldr	r1, [pc, #360]	; (8001c58 <HAL_RCC_OscConfig+0x688>)
 8001af0:	400a      	ands	r2, r1
 8001af2:	651a      	str	r2, [r3, #80]	; 0x50
 8001af4:	4b56      	ldr	r3, [pc, #344]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001af6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001af8:	4b55      	ldr	r3, [pc, #340]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001afa:	4959      	ldr	r1, [pc, #356]	; (8001c60 <HAL_RCC_OscConfig+0x690>)
 8001afc:	400a      	ands	r2, r1
 8001afe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d015      	beq.n	8001b34 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b08:	f7ff f9dc 	bl	8000ec4 <HAL_GetTick>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b10:	e009      	b.n	8001b26 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b12:	f7ff f9d7 	bl	8000ec4 <HAL_GetTick>
 8001b16:	0002      	movs	r2, r0
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	4a51      	ldr	r2, [pc, #324]	; (8001c64 <HAL_RCC_OscConfig+0x694>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e0ca      	b.n	8001cbc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b26:	4b4a      	ldr	r3, [pc, #296]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001b28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d0ef      	beq.n	8001b12 <HAL_RCC_OscConfig+0x542>
 8001b32:	e014      	b.n	8001b5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b34:	f7ff f9c6 	bl	8000ec4 <HAL_GetTick>
 8001b38:	0003      	movs	r3, r0
 8001b3a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b3c:	e009      	b.n	8001b52 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b3e:	f7ff f9c1 	bl	8000ec4 <HAL_GetTick>
 8001b42:	0002      	movs	r2, r0
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	4a46      	ldr	r2, [pc, #280]	; (8001c64 <HAL_RCC_OscConfig+0x694>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e0b4      	b.n	8001cbc <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b52:	4b3f      	ldr	r3, [pc, #252]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001b54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d1ef      	bne.n	8001b3e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b5e:	2323      	movs	r3, #35	; 0x23
 8001b60:	18fb      	adds	r3, r7, r3
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d105      	bne.n	8001b74 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b68:	4b39      	ldr	r3, [pc, #228]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001b6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b6c:	4b38      	ldr	r3, [pc, #224]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001b6e:	493e      	ldr	r1, [pc, #248]	; (8001c68 <HAL_RCC_OscConfig+0x698>)
 8001b70:	400a      	ands	r2, r1
 8001b72:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d100      	bne.n	8001b7e <HAL_RCC_OscConfig+0x5ae>
 8001b7c:	e09d      	b.n	8001cba <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	2b0c      	cmp	r3, #12
 8001b82:	d100      	bne.n	8001b86 <HAL_RCC_OscConfig+0x5b6>
 8001b84:	e076      	b.n	8001c74 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d145      	bne.n	8001c1a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8e:	4b30      	ldr	r3, [pc, #192]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	4b2f      	ldr	r3, [pc, #188]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001b94:	4935      	ldr	r1, [pc, #212]	; (8001c6c <HAL_RCC_OscConfig+0x69c>)
 8001b96:	400a      	ands	r2, r1
 8001b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9a:	f7ff f993 	bl	8000ec4 <HAL_GetTick>
 8001b9e:	0003      	movs	r3, r0
 8001ba0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba4:	f7ff f98e 	bl	8000ec4 <HAL_GetTick>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e082      	b.n	8001cbc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001bb6:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	049b      	lsls	r3, r3, #18
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bc2:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	4a2a      	ldr	r2, [pc, #168]	; (8001c70 <HAL_RCC_OscConfig+0x6a0>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	0019      	movs	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001bde:	430a      	orrs	r2, r1
 8001be0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be2:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001be8:	2180      	movs	r1, #128	; 0x80
 8001bea:	0449      	lsls	r1, r1, #17
 8001bec:	430a      	orrs	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf0:	f7ff f968 	bl	8000ec4 <HAL_GetTick>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bfa:	f7ff f963 	bl	8000ec4 <HAL_GetTick>
 8001bfe:	0002      	movs	r2, r0
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e057      	b.n	8001cbc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c0c:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	049b      	lsls	r3, r3, #18
 8001c14:	4013      	ands	r3, r2
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x62a>
 8001c18:	e04f      	b.n	8001cba <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001c20:	4912      	ldr	r1, [pc, #72]	; (8001c6c <HAL_RCC_OscConfig+0x69c>)
 8001c22:	400a      	ands	r2, r1
 8001c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c26:	f7ff f94d 	bl	8000ec4 <HAL_GetTick>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c30:	f7ff f948 	bl	8000ec4 <HAL_GetTick>
 8001c34:	0002      	movs	r2, r0
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e03c      	b.n	8001cbc <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c42:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_RCC_OscConfig+0x680>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	049b      	lsls	r3, r3, #18
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x660>
 8001c4e:	e034      	b.n	8001cba <HAL_RCC_OscConfig+0x6ea>
 8001c50:	40021000 	.word	0x40021000
 8001c54:	ffff1fff 	.word	0xffff1fff
 8001c58:	fffffeff 	.word	0xfffffeff
 8001c5c:	40007000 	.word	0x40007000
 8001c60:	fffffbff 	.word	0xfffffbff
 8001c64:	00001388 	.word	0x00001388
 8001c68:	efffffff 	.word	0xefffffff
 8001c6c:	feffffff 	.word	0xfeffffff
 8001c70:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e01d      	b.n	8001cbc <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c80:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <HAL_RCC_OscConfig+0x6f4>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	025b      	lsls	r3, r3, #9
 8001c8c:	401a      	ands	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d10f      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	23f0      	movs	r3, #240	; 0xf0
 8001c9a:	039b      	lsls	r3, r3, #14
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d107      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	23c0      	movs	r3, #192	; 0xc0
 8001caa:	041b      	lsls	r3, r3, #16
 8001cac:	401a      	ands	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d001      	beq.n	8001cba <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b00a      	add	sp, #40	; 0x28
 8001cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc4:	40021000 	.word	0x40021000

08001cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc8:	b5b0      	push	{r4, r5, r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e128      	b.n	8001f2e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cdc:	4b96      	ldr	r3, [pc, #600]	; (8001f38 <HAL_RCC_ClockConfig+0x270>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d91e      	bls.n	8001d28 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cea:	4b93      	ldr	r3, [pc, #588]	; (8001f38 <HAL_RCC_ClockConfig+0x270>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	4393      	bics	r3, r2
 8001cf2:	0019      	movs	r1, r3
 8001cf4:	4b90      	ldr	r3, [pc, #576]	; (8001f38 <HAL_RCC_ClockConfig+0x270>)
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cfc:	f7ff f8e2 	bl	8000ec4 <HAL_GetTick>
 8001d00:	0003      	movs	r3, r0
 8001d02:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d04:	e009      	b.n	8001d1a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d06:	f7ff f8dd 	bl	8000ec4 <HAL_GetTick>
 8001d0a:	0002      	movs	r2, r0
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	4a8a      	ldr	r2, [pc, #552]	; (8001f3c <HAL_RCC_ClockConfig+0x274>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e109      	b.n	8001f2e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1a:	4b87      	ldr	r3, [pc, #540]	; (8001f38 <HAL_RCC_ClockConfig+0x270>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4013      	ands	r3, r2
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d1ee      	bne.n	8001d06 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d009      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d32:	4b83      	ldr	r3, [pc, #524]	; (8001f40 <HAL_RCC_ClockConfig+0x278>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	22f0      	movs	r2, #240	; 0xf0
 8001d38:	4393      	bics	r3, r2
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	4b7f      	ldr	r3, [pc, #508]	; (8001f40 <HAL_RCC_ClockConfig+0x278>)
 8001d42:	430a      	orrs	r2, r1
 8001d44:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d100      	bne.n	8001d52 <HAL_RCC_ClockConfig+0x8a>
 8001d50:	e089      	b.n	8001e66 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d107      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d5a:	4b79      	ldr	r3, [pc, #484]	; (8001f40 <HAL_RCC_ClockConfig+0x278>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	029b      	lsls	r3, r3, #10
 8001d62:	4013      	ands	r3, r2
 8001d64:	d120      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e0e1      	b.n	8001f2e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d107      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d72:	4b73      	ldr	r3, [pc, #460]	; (8001f40 <HAL_RCC_ClockConfig+0x278>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	049b      	lsls	r3, r3, #18
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d114      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e0d5      	b.n	8001f2e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d106      	bne.n	8001d98 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d8a:	4b6d      	ldr	r3, [pc, #436]	; (8001f40 <HAL_RCC_ClockConfig+0x278>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2204      	movs	r2, #4
 8001d90:	4013      	ands	r3, r2
 8001d92:	d109      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0ca      	b.n	8001f2e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d98:	4b69      	ldr	r3, [pc, #420]	; (8001f40 <HAL_RCC_ClockConfig+0x278>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4013      	ands	r3, r2
 8001da2:	d101      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0c2      	b.n	8001f2e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001da8:	4b65      	ldr	r3, [pc, #404]	; (8001f40 <HAL_RCC_ClockConfig+0x278>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2203      	movs	r2, #3
 8001dae:	4393      	bics	r3, r2
 8001db0:	0019      	movs	r1, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	4b62      	ldr	r3, [pc, #392]	; (8001f40 <HAL_RCC_ClockConfig+0x278>)
 8001db8:	430a      	orrs	r2, r1
 8001dba:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dbc:	f7ff f882 	bl	8000ec4 <HAL_GetTick>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d111      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dcc:	e009      	b.n	8001de2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dce:	f7ff f879 	bl	8000ec4 <HAL_GetTick>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	4a58      	ldr	r2, [pc, #352]	; (8001f3c <HAL_RCC_ClockConfig+0x274>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e0a5      	b.n	8001f2e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001de2:	4b57      	ldr	r3, [pc, #348]	; (8001f40 <HAL_RCC_ClockConfig+0x278>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	220c      	movs	r2, #12
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d1ef      	bne.n	8001dce <HAL_RCC_ClockConfig+0x106>
 8001dee:	e03a      	b.n	8001e66 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d111      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001df8:	e009      	b.n	8001e0e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfa:	f7ff f863 	bl	8000ec4 <HAL_GetTick>
 8001dfe:	0002      	movs	r2, r0
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	4a4d      	ldr	r2, [pc, #308]	; (8001f3c <HAL_RCC_ClockConfig+0x274>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e08f      	b.n	8001f2e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e0e:	4b4c      	ldr	r3, [pc, #304]	; (8001f40 <HAL_RCC_ClockConfig+0x278>)
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	220c      	movs	r2, #12
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b0c      	cmp	r3, #12
 8001e18:	d1ef      	bne.n	8001dfa <HAL_RCC_ClockConfig+0x132>
 8001e1a:	e024      	b.n	8001e66 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d11b      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e24:	e009      	b.n	8001e3a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e26:	f7ff f84d 	bl	8000ec4 <HAL_GetTick>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	4a42      	ldr	r2, [pc, #264]	; (8001f3c <HAL_RCC_ClockConfig+0x274>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e079      	b.n	8001f2e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e3a:	4b41      	ldr	r3, [pc, #260]	; (8001f40 <HAL_RCC_ClockConfig+0x278>)
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	220c      	movs	r2, #12
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d1ef      	bne.n	8001e26 <HAL_RCC_ClockConfig+0x15e>
 8001e46:	e00e      	b.n	8001e66 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e48:	f7ff f83c 	bl	8000ec4 <HAL_GetTick>
 8001e4c:	0002      	movs	r2, r0
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	4a3a      	ldr	r2, [pc, #232]	; (8001f3c <HAL_RCC_ClockConfig+0x274>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e068      	b.n	8001f2e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e5c:	4b38      	ldr	r3, [pc, #224]	; (8001f40 <HAL_RCC_ClockConfig+0x278>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	220c      	movs	r2, #12
 8001e62:	4013      	ands	r3, r2
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e66:	4b34      	ldr	r3, [pc, #208]	; (8001f38 <HAL_RCC_ClockConfig+0x270>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d21e      	bcs.n	8001eb2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e74:	4b30      	ldr	r3, [pc, #192]	; (8001f38 <HAL_RCC_ClockConfig+0x270>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	4393      	bics	r3, r2
 8001e7c:	0019      	movs	r1, r3
 8001e7e:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <HAL_RCC_ClockConfig+0x270>)
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e86:	f7ff f81d 	bl	8000ec4 <HAL_GetTick>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	e009      	b.n	8001ea4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e90:	f7ff f818 	bl	8000ec4 <HAL_GetTick>
 8001e94:	0002      	movs	r2, r0
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	4a28      	ldr	r2, [pc, #160]	; (8001f3c <HAL_RCC_ClockConfig+0x274>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e044      	b.n	8001f2e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea4:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <HAL_RCC_ClockConfig+0x270>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	4013      	ands	r3, r2
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d1ee      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d009      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ebc:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <HAL_RCC_ClockConfig+0x278>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	4a20      	ldr	r2, [pc, #128]	; (8001f44 <HAL_RCC_ClockConfig+0x27c>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <HAL_RCC_ClockConfig+0x278>)
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2208      	movs	r2, #8
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d00a      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eda:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <HAL_RCC_ClockConfig+0x278>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	4a1a      	ldr	r2, [pc, #104]	; (8001f48 <HAL_RCC_ClockConfig+0x280>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	00da      	lsls	r2, r3, #3
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <HAL_RCC_ClockConfig+0x278>)
 8001eec:	430a      	orrs	r2, r1
 8001eee:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ef0:	f000 f832 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8001ef4:	0001      	movs	r1, r0
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_RCC_ClockConfig+0x278>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	091b      	lsrs	r3, r3, #4
 8001efc:	220f      	movs	r2, #15
 8001efe:	4013      	ands	r3, r2
 8001f00:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <HAL_RCC_ClockConfig+0x284>)
 8001f02:	5cd3      	ldrb	r3, [r2, r3]
 8001f04:	000a      	movs	r2, r1
 8001f06:	40da      	lsrs	r2, r3
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <HAL_RCC_ClockConfig+0x288>)
 8001f0a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <HAL_RCC_ClockConfig+0x28c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	250b      	movs	r5, #11
 8001f12:	197c      	adds	r4, r7, r5
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7fe ff8f 	bl	8000e38 <HAL_InitTick>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001f1e:	197b      	adds	r3, r7, r5
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001f26:	197b      	adds	r3, r7, r5
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	e000      	b.n	8001f2e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	0018      	movs	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b004      	add	sp, #16
 8001f34:	bdb0      	pop	{r4, r5, r7, pc}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	40022000 	.word	0x40022000
 8001f3c:	00001388 	.word	0x00001388
 8001f40:	40021000 	.word	0x40021000
 8001f44:	fffff8ff 	.word	0xfffff8ff
 8001f48:	ffffc7ff 	.word	0xffffc7ff
 8001f4c:	080041e4 	.word	0x080041e4
 8001f50:	20000110 	.word	0x20000110
 8001f54:	20000114 	.word	0x20000114

08001f58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f58:	b5b0      	push	{r4, r5, r7, lr}
 8001f5a:	b08e      	sub	sp, #56	; 0x38
 8001f5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001f5e:	4b4c      	ldr	r3, [pc, #304]	; (8002090 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f66:	230c      	movs	r3, #12
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b0c      	cmp	r3, #12
 8001f6c:	d014      	beq.n	8001f98 <HAL_RCC_GetSysClockFreq+0x40>
 8001f6e:	d900      	bls.n	8001f72 <HAL_RCC_GetSysClockFreq+0x1a>
 8001f70:	e07b      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x112>
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d002      	beq.n	8001f7c <HAL_RCC_GetSysClockFreq+0x24>
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d00b      	beq.n	8001f92 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f7a:	e076      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f7c:	4b44      	ldr	r3, [pc, #272]	; (8002090 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2210      	movs	r2, #16
 8001f82:	4013      	ands	r3, r2
 8001f84:	d002      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001f86:	4b43      	ldr	r3, [pc, #268]	; (8002094 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f88:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001f8a:	e07c      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001f8c:	4b42      	ldr	r3, [pc, #264]	; (8002098 <HAL_RCC_GetSysClockFreq+0x140>)
 8001f8e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f90:	e079      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f92:	4b42      	ldr	r3, [pc, #264]	; (800209c <HAL_RCC_GetSysClockFreq+0x144>)
 8001f94:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f96:	e076      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9a:	0c9a      	lsrs	r2, r3, #18
 8001f9c:	230f      	movs	r3, #15
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	4b3f      	ldr	r3, [pc, #252]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x148>)
 8001fa2:	5c9b      	ldrb	r3, [r3, r2]
 8001fa4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa8:	0d9a      	lsrs	r2, r3, #22
 8001faa:	2303      	movs	r3, #3
 8001fac:	4013      	ands	r3, r2
 8001fae:	3301      	adds	r3, #1
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fb2:	4b37      	ldr	r3, [pc, #220]	; (8002090 <HAL_RCC_GetSysClockFreq+0x138>)
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	025b      	lsls	r3, r3, #9
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d01a      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc0:	61bb      	str	r3, [r7, #24]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
 8001fc6:	4a35      	ldr	r2, [pc, #212]	; (800209c <HAL_RCC_GetSysClockFreq+0x144>)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	69b8      	ldr	r0, [r7, #24]
 8001fcc:	69f9      	ldr	r1, [r7, #28]
 8001fce:	f7fe f947 	bl	8000260 <__aeabi_lmul>
 8001fd2:	0002      	movs	r2, r0
 8001fd4:	000b      	movs	r3, r1
 8001fd6:	0010      	movs	r0, r2
 8001fd8:	0019      	movs	r1, r3
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f7fe f91b 	bl	8000220 <__aeabi_uldivmod>
 8001fea:	0002      	movs	r2, r0
 8001fec:	000b      	movs	r3, r1
 8001fee:	0013      	movs	r3, r2
 8001ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ff2:	e037      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ff4:	4b26      	ldr	r3, [pc, #152]	; (8002090 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2210      	movs	r2, #16
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d01a      	beq.n	8002034 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	4a23      	ldr	r2, [pc, #140]	; (8002094 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002008:	2300      	movs	r3, #0
 800200a:	68b8      	ldr	r0, [r7, #8]
 800200c:	68f9      	ldr	r1, [r7, #12]
 800200e:	f7fe f927 	bl	8000260 <__aeabi_lmul>
 8002012:	0002      	movs	r2, r0
 8002014:	000b      	movs	r3, r1
 8002016:	0010      	movs	r0, r2
 8002018:	0019      	movs	r1, r3
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	603b      	str	r3, [r7, #0]
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f7fe f8fb 	bl	8000220 <__aeabi_uldivmod>
 800202a:	0002      	movs	r2, r0
 800202c:	000b      	movs	r3, r1
 800202e:	0013      	movs	r3, r2
 8002030:	637b      	str	r3, [r7, #52]	; 0x34
 8002032:	e017      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002036:	0018      	movs	r0, r3
 8002038:	2300      	movs	r3, #0
 800203a:	0019      	movs	r1, r3
 800203c:	4a16      	ldr	r2, [pc, #88]	; (8002098 <HAL_RCC_GetSysClockFreq+0x140>)
 800203e:	2300      	movs	r3, #0
 8002040:	f7fe f90e 	bl	8000260 <__aeabi_lmul>
 8002044:	0002      	movs	r2, r0
 8002046:	000b      	movs	r3, r1
 8002048:	0010      	movs	r0, r2
 800204a:	0019      	movs	r1, r3
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	001c      	movs	r4, r3
 8002050:	2300      	movs	r3, #0
 8002052:	001d      	movs	r5, r3
 8002054:	0022      	movs	r2, r4
 8002056:	002b      	movs	r3, r5
 8002058:	f7fe f8e2 	bl	8000220 <__aeabi_uldivmod>
 800205c:	0002      	movs	r2, r0
 800205e:	000b      	movs	r3, r1
 8002060:	0013      	movs	r3, r2
 8002062:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002066:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002068:	e00d      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <HAL_RCC_GetSysClockFreq+0x138>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	0b5b      	lsrs	r3, r3, #13
 8002070:	2207      	movs	r2, #7
 8002072:	4013      	ands	r3, r2
 8002074:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	3301      	adds	r3, #1
 800207a:	2280      	movs	r2, #128	; 0x80
 800207c:	0212      	lsls	r2, r2, #8
 800207e:	409a      	lsls	r2, r3
 8002080:	0013      	movs	r3, r2
 8002082:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002084:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002088:	0018      	movs	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	b00e      	add	sp, #56	; 0x38
 800208e:	bdb0      	pop	{r4, r5, r7, pc}
 8002090:	40021000 	.word	0x40021000
 8002094:	003d0900 	.word	0x003d0900
 8002098:	00f42400 	.word	0x00f42400
 800209c:	007a1200 	.word	0x007a1200
 80020a0:	080041f4 	.word	0x080041f4

080020a4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80020ac:	2017      	movs	r0, #23
 80020ae:	183b      	adds	r3, r7, r0
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2220      	movs	r2, #32
 80020ba:	4013      	ands	r3, r2
 80020bc:	d100      	bne.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80020be:	e0c7      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c0:	4b84      	ldr	r3, [pc, #528]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020c4:	2380      	movs	r3, #128	; 0x80
 80020c6:	055b      	lsls	r3, r3, #21
 80020c8:	4013      	ands	r3, r2
 80020ca:	d109      	bne.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020cc:	4b81      	ldr	r3, [pc, #516]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020d0:	4b80      	ldr	r3, [pc, #512]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020d2:	2180      	movs	r1, #128	; 0x80
 80020d4:	0549      	lsls	r1, r1, #21
 80020d6:	430a      	orrs	r2, r1
 80020d8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80020da:	183b      	adds	r3, r7, r0
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e0:	4b7d      	ldr	r3, [pc, #500]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4013      	ands	r3, r2
 80020ea:	d11a      	bne.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ec:	4b7a      	ldr	r3, [pc, #488]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b79      	ldr	r3, [pc, #484]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80020f2:	2180      	movs	r1, #128	; 0x80
 80020f4:	0049      	lsls	r1, r1, #1
 80020f6:	430a      	orrs	r2, r1
 80020f8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020fa:	f7fe fee3 	bl	8000ec4 <HAL_GetTick>
 80020fe:	0003      	movs	r3, r0
 8002100:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002102:	e008      	b.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002104:	f7fe fede 	bl	8000ec4 <HAL_GetTick>
 8002108:	0002      	movs	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b64      	cmp	r3, #100	; 0x64
 8002110:	d901      	bls.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e0d9      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002116:	4b70      	ldr	r3, [pc, #448]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	4013      	ands	r3, r2
 8002120:	d0f0      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002122:	4b6c      	ldr	r3, [pc, #432]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	23c0      	movs	r3, #192	; 0xc0
 8002128:	039b      	lsls	r3, r3, #14
 800212a:	4013      	ands	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	23c0      	movs	r3, #192	; 0xc0
 8002134:	039b      	lsls	r3, r3, #14
 8002136:	4013      	ands	r3, r2
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	429a      	cmp	r2, r3
 800213c:	d013      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	23c0      	movs	r3, #192	; 0xc0
 8002144:	029b      	lsls	r3, r3, #10
 8002146:	401a      	ands	r2, r3
 8002148:	23c0      	movs	r3, #192	; 0xc0
 800214a:	029b      	lsls	r3, r3, #10
 800214c:	429a      	cmp	r2, r3
 800214e:	d10a      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002150:	4b60      	ldr	r3, [pc, #384]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	029b      	lsls	r3, r3, #10
 8002158:	401a      	ands	r2, r3
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	029b      	lsls	r3, r3, #10
 800215e:	429a      	cmp	r2, r3
 8002160:	d101      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e0b1      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002166:	4b5b      	ldr	r3, [pc, #364]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002168:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800216a:	23c0      	movs	r3, #192	; 0xc0
 800216c:	029b      	lsls	r3, r3, #10
 800216e:	4013      	ands	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d03b      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	23c0      	movs	r3, #192	; 0xc0
 800217e:	029b      	lsls	r3, r3, #10
 8002180:	4013      	ands	r3, r2
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	429a      	cmp	r2, r3
 8002186:	d033      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2220      	movs	r2, #32
 800218e:	4013      	ands	r3, r2
 8002190:	d02e      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002192:	4b50      	ldr	r3, [pc, #320]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002196:	4a51      	ldr	r2, [pc, #324]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002198:	4013      	ands	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800219c:	4b4d      	ldr	r3, [pc, #308]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800219e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021a0:	4b4c      	ldr	r3, [pc, #304]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021a2:	2180      	movs	r1, #128	; 0x80
 80021a4:	0309      	lsls	r1, r1, #12
 80021a6:	430a      	orrs	r2, r1
 80021a8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021aa:	4b4a      	ldr	r3, [pc, #296]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021ae:	4b49      	ldr	r3, [pc, #292]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021b0:	494b      	ldr	r1, [pc, #300]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80021b2:	400a      	ands	r2, r1
 80021b4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80021b6:	4b47      	ldr	r3, [pc, #284]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4013      	ands	r3, r2
 80021c4:	d014      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c6:	f7fe fe7d 	bl	8000ec4 <HAL_GetTick>
 80021ca:	0003      	movs	r3, r0
 80021cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021ce:	e009      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d0:	f7fe fe78 	bl	8000ec4 <HAL_GetTick>
 80021d4:	0002      	movs	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	4a42      	ldr	r2, [pc, #264]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d901      	bls.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e072      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021e4:	4b3b      	ldr	r3, [pc, #236]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021e8:	2380      	movs	r3, #128	; 0x80
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4013      	ands	r3, r2
 80021ee:	d0ef      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2220      	movs	r2, #32
 80021f6:	4013      	ands	r3, r2
 80021f8:	d01f      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	23c0      	movs	r3, #192	; 0xc0
 8002200:	029b      	lsls	r3, r3, #10
 8002202:	401a      	ands	r2, r3
 8002204:	23c0      	movs	r3, #192	; 0xc0
 8002206:	029b      	lsls	r3, r3, #10
 8002208:	429a      	cmp	r2, r3
 800220a:	d10c      	bne.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800220c:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a35      	ldr	r2, [pc, #212]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002212:	4013      	ands	r3, r2
 8002214:	0019      	movs	r1, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	23c0      	movs	r3, #192	; 0xc0
 800221c:	039b      	lsls	r3, r3, #14
 800221e:	401a      	ands	r2, r3
 8002220:	4b2c      	ldr	r3, [pc, #176]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002222:	430a      	orrs	r2, r1
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	4b2b      	ldr	r3, [pc, #172]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002228:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	23c0      	movs	r3, #192	; 0xc0
 8002230:	029b      	lsls	r3, r3, #10
 8002232:	401a      	ands	r2, r3
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002236:	430a      	orrs	r2, r1
 8002238:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800223a:	2317      	movs	r3, #23
 800223c:	18fb      	adds	r3, r7, r3
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d105      	bne.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002244:	4b23      	ldr	r3, [pc, #140]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002248:	4b22      	ldr	r3, [pc, #136]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800224a:	4928      	ldr	r1, [pc, #160]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800224c:	400a      	ands	r2, r1
 800224e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2202      	movs	r2, #2
 8002256:	4013      	ands	r3, r2
 8002258:	d009      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800225a:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	220c      	movs	r2, #12
 8002260:	4393      	bics	r3, r2
 8002262:	0019      	movs	r1, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800226a:	430a      	orrs	r2, r1
 800226c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2204      	movs	r2, #4
 8002274:	4013      	ands	r3, r2
 8002276:	d009      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002278:	4b16      	ldr	r3, [pc, #88]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800227a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227c:	4a1c      	ldr	r2, [pc, #112]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800227e:	4013      	ands	r3, r2
 8002280:	0019      	movs	r1, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002288:	430a      	orrs	r2, r1
 800228a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2208      	movs	r2, #8
 8002292:	4013      	ands	r3, r2
 8002294:	d009      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002296:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229a:	4a16      	ldr	r2, [pc, #88]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800229c:	4013      	ands	r3, r2
 800229e:	0019      	movs	r1, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022a6:	430a      	orrs	r2, r1
 80022a8:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2280      	movs	r2, #128	; 0x80
 80022b0:	4013      	ands	r3, r2
 80022b2:	d009      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80022b4:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b8:	4a0f      	ldr	r2, [pc, #60]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	0019      	movs	r1, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695a      	ldr	r2, [r3, #20]
 80022c2:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022c4:	430a      	orrs	r2, r1
 80022c6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	0018      	movs	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b006      	add	sp, #24
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40007000 	.word	0x40007000
 80022dc:	fffcffff 	.word	0xfffcffff
 80022e0:	fff7ffff 	.word	0xfff7ffff
 80022e4:	00001388 	.word	0x00001388
 80022e8:	ffcfffff 	.word	0xffcfffff
 80022ec:	efffffff 	.word	0xefffffff
 80022f0:	fffff3ff 	.word	0xfffff3ff
 80022f4:	ffffcfff 	.word	0xffffcfff
 80022f8:	fff3ffff 	.word	0xfff3ffff

080022fc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80022fc:	b5b0      	push	{r4, r5, r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002304:	230f      	movs	r3, #15
 8002306:	18fb      	adds	r3, r7, r3
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e088      	b.n	8002428 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2221      	movs	r2, #33	; 0x21
 800231a:	5c9b      	ldrb	r3, [r3, r2]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d107      	bne.n	8002332 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2220      	movs	r2, #32
 8002326:	2100      	movs	r1, #0
 8002328:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	0018      	movs	r0, r3
 800232e:	f7fe fc9b 	bl	8000c68 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2221      	movs	r2, #33	; 0x21
 8002336:	2102      	movs	r1, #2
 8002338:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2210      	movs	r2, #16
 8002342:	4013      	ands	r3, r2
 8002344:	2b10      	cmp	r3, #16
 8002346:	d05f      	beq.n	8002408 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	22ca      	movs	r2, #202	; 0xca
 800234e:	625a      	str	r2, [r3, #36]	; 0x24
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2253      	movs	r2, #83	; 0x53
 8002356:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002358:	250f      	movs	r5, #15
 800235a:	197c      	adds	r4, r7, r5
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	0018      	movs	r0, r3
 8002360:	f000 f93e 	bl	80025e0 <RTC_EnterInitMode>
 8002364:	0003      	movs	r3, r0
 8002366:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002368:	0028      	movs	r0, r5
 800236a:	183b      	adds	r3, r7, r0
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d12c      	bne.n	80023cc <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	492c      	ldr	r1, [pc, #176]	; (8002430 <HAL_RTC_Init+0x134>)
 800237e:	400a      	ands	r2, r1
 8002380:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6899      	ldr	r1, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	431a      	orrs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	68d2      	ldr	r2, [r2, #12]
 80023a8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6919      	ldr	r1, [r3, #16]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	041a      	lsls	r2, r3, #16
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80023be:	183c      	adds	r4, r7, r0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	0018      	movs	r0, r3
 80023c4:	f000 f950 	bl	8002668 <RTC_ExitInitMode>
 80023c8:	0003      	movs	r3, r0
 80023ca:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80023cc:	230f      	movs	r3, #15
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d113      	bne.n	80023fe <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2103      	movs	r1, #3
 80023e2:	438a      	bics	r2, r1
 80023e4:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69da      	ldr	r2, [r3, #28]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	431a      	orrs	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	22ff      	movs	r2, #255	; 0xff
 8002404:	625a      	str	r2, [r3, #36]	; 0x24
 8002406:	e003      	b.n	8002410 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002408:	230f      	movs	r3, #15
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002410:	230f      	movs	r3, #15
 8002412:	18fb      	adds	r3, r7, r3
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d103      	bne.n	8002422 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2221      	movs	r2, #33	; 0x21
 800241e:	2101      	movs	r1, #1
 8002420:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002422:	230f      	movs	r3, #15
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	781b      	ldrb	r3, [r3, #0]
}
 8002428:	0018      	movs	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	b004      	add	sp, #16
 800242e:	bdb0      	pop	{r4, r5, r7, pc}
 8002430:	ff8fffbf 	.word	0xff8fffbf

08002434 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	045b      	lsls	r3, r3, #17
 8002456:	0c5a      	lsrs	r2, r3, #17
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a22      	ldr	r2, [pc, #136]	; (80024ec <HAL_RTC_GetTime+0xb8>)
 8002464:	4013      	ands	r3, r2
 8002466:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	0c1b      	lsrs	r3, r3, #16
 800246c:	b2db      	uxtb	r3, r3
 800246e:	223f      	movs	r2, #63	; 0x3f
 8002470:	4013      	ands	r3, r2
 8002472:	b2da      	uxtb	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	0a1b      	lsrs	r3, r3, #8
 800247c:	b2db      	uxtb	r3, r3
 800247e:	227f      	movs	r2, #127	; 0x7f
 8002480:	4013      	ands	r3, r2
 8002482:	b2da      	uxtb	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	227f      	movs	r2, #127	; 0x7f
 800248e:	4013      	ands	r3, r2
 8002490:	b2da      	uxtb	r2, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	0d9b      	lsrs	r3, r3, #22
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2201      	movs	r2, #1
 800249e:	4013      	ands	r3, r2
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d11a      	bne.n	80024e2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	0018      	movs	r0, r3
 80024b2:	f000 f903 	bl	80026bc <RTC_Bcd2ToByte>
 80024b6:	0003      	movs	r3, r0
 80024b8:	001a      	movs	r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	785b      	ldrb	r3, [r3, #1]
 80024c2:	0018      	movs	r0, r3
 80024c4:	f000 f8fa 	bl	80026bc <RTC_Bcd2ToByte>
 80024c8:	0003      	movs	r3, r0
 80024ca:	001a      	movs	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	789b      	ldrb	r3, [r3, #2]
 80024d4:	0018      	movs	r0, r3
 80024d6:	f000 f8f1 	bl	80026bc <RTC_Bcd2ToByte>
 80024da:	0003      	movs	r3, r0
 80024dc:	001a      	movs	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	0018      	movs	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	b006      	add	sp, #24
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	007f7f7f 	.word	0x007f7f7f

080024f0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4a21      	ldr	r2, [pc, #132]	; (800258c <HAL_RTC_GetDate+0x9c>)
 8002508:	4013      	ands	r3, r2
 800250a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	0c1b      	lsrs	r3, r3, #16
 8002510:	b2da      	uxtb	r2, r3
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	b2db      	uxtb	r3, r3
 800251c:	221f      	movs	r2, #31
 800251e:	4013      	ands	r3, r2
 8002520:	b2da      	uxtb	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	223f      	movs	r2, #63	; 0x3f
 800252c:	4013      	ands	r3, r2
 800252e:	b2da      	uxtb	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	0b5b      	lsrs	r3, r3, #13
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2207      	movs	r2, #7
 800253c:	4013      	ands	r3, r2
 800253e:	b2da      	uxtb	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d11a      	bne.n	8002580 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	78db      	ldrb	r3, [r3, #3]
 800254e:	0018      	movs	r0, r3
 8002550:	f000 f8b4 	bl	80026bc <RTC_Bcd2ToByte>
 8002554:	0003      	movs	r3, r0
 8002556:	001a      	movs	r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	785b      	ldrb	r3, [r3, #1]
 8002560:	0018      	movs	r0, r3
 8002562:	f000 f8ab 	bl	80026bc <RTC_Bcd2ToByte>
 8002566:	0003      	movs	r3, r0
 8002568:	001a      	movs	r2, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	789b      	ldrb	r3, [r3, #2]
 8002572:	0018      	movs	r0, r3
 8002574:	f000 f8a2 	bl	80026bc <RTC_Bcd2ToByte>
 8002578:	0003      	movs	r3, r0
 800257a:	001a      	movs	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	0018      	movs	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	b006      	add	sp, #24
 8002588:	bd80      	pop	{r7, pc}
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	00ffff3f 	.word	0x00ffff3f

08002590 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a0e      	ldr	r2, [pc, #56]	; (80025dc <HAL_RTC_WaitForSynchro+0x4c>)
 80025a2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025a4:	f7fe fc8e 	bl	8000ec4 <HAL_GetTick>
 80025a8:	0003      	movs	r3, r0
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80025ac:	e00a      	b.n	80025c4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80025ae:	f7fe fc89 	bl	8000ec4 <HAL_GetTick>
 80025b2:	0002      	movs	r2, r0
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1ad2      	subs	r2, r2, r3
 80025b8:	23fa      	movs	r3, #250	; 0xfa
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	429a      	cmp	r2, r3
 80025be:	d901      	bls.n	80025c4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e006      	b.n	80025d2 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	2220      	movs	r2, #32
 80025cc:	4013      	ands	r3, r2
 80025ce:	d0ee      	beq.n	80025ae <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	0018      	movs	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b004      	add	sp, #16
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	0001ff5f 	.word	0x0001ff5f

080025e0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80025ec:	230f      	movs	r3, #15
 80025ee:	18fb      	adds	r3, r7, r3
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	2240      	movs	r2, #64	; 0x40
 80025fc:	4013      	ands	r3, r2
 80025fe:	d12c      	bne.n	800265a <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2180      	movs	r1, #128	; 0x80
 800260c:	430a      	orrs	r2, r1
 800260e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002610:	f7fe fc58 	bl	8000ec4 <HAL_GetTick>
 8002614:	0003      	movs	r3, r0
 8002616:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002618:	e014      	b.n	8002644 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800261a:	f7fe fc53 	bl	8000ec4 <HAL_GetTick>
 800261e:	0002      	movs	r2, r0
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	1ad2      	subs	r2, r2, r3
 8002624:	200f      	movs	r0, #15
 8002626:	183b      	adds	r3, r7, r0
 8002628:	1839      	adds	r1, r7, r0
 800262a:	7809      	ldrb	r1, [r1, #0]
 800262c:	7019      	strb	r1, [r3, #0]
 800262e:	23fa      	movs	r3, #250	; 0xfa
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	429a      	cmp	r2, r3
 8002634:	d906      	bls.n	8002644 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2221      	movs	r2, #33	; 0x21
 800263a:	2104      	movs	r1, #4
 800263c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800263e:	183b      	adds	r3, r7, r0
 8002640:	2201      	movs	r2, #1
 8002642:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2240      	movs	r2, #64	; 0x40
 800264c:	4013      	ands	r3, r2
 800264e:	d104      	bne.n	800265a <RTC_EnterInitMode+0x7a>
 8002650:	230f      	movs	r3, #15
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d1df      	bne.n	800261a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 800265a:	230f      	movs	r3, #15
 800265c:	18fb      	adds	r3, r7, r3
 800265e:	781b      	ldrb	r3, [r3, #0]
}
 8002660:	0018      	movs	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	b004      	add	sp, #16
 8002666:	bd80      	pop	{r7, pc}

08002668 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002670:	240f      	movs	r4, #15
 8002672:	193b      	adds	r3, r7, r4
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2180      	movs	r1, #128	; 0x80
 8002684:	438a      	bics	r2, r1
 8002686:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2220      	movs	r2, #32
 8002690:	4013      	ands	r3, r2
 8002692:	d10c      	bne.n	80026ae <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	0018      	movs	r0, r3
 8002698:	f7ff ff7a 	bl	8002590 <HAL_RTC_WaitForSynchro>
 800269c:	1e03      	subs	r3, r0, #0
 800269e:	d006      	beq.n	80026ae <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2221      	movs	r2, #33	; 0x21
 80026a4:	2104      	movs	r1, #4
 80026a6:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80026a8:	193b      	adds	r3, r7, r4
 80026aa:	2201      	movs	r2, #1
 80026ac:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80026ae:	230f      	movs	r3, #15
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	781b      	ldrb	r3, [r3, #0]
}
 80026b4:	0018      	movs	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	b005      	add	sp, #20
 80026ba:	bd90      	pop	{r4, r7, pc}

080026bc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	0002      	movs	r2, r0
 80026c4:	1dfb      	adds	r3, r7, #7
 80026c6:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80026cc:	1dfb      	adds	r3, r7, #7
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	091b      	lsrs	r3, r3, #4
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	001a      	movs	r2, r3
 80026d6:	0013      	movs	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	189b      	adds	r3, r3, r2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	1dfb      	adds	r3, r7, #7
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	210f      	movs	r1, #15
 80026ea:	400b      	ands	r3, r1
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	18d3      	adds	r3, r2, r3
 80026f0:	b2db      	uxtb	r3, r3
}
 80026f2:	0018      	movs	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	b004      	add	sp, #16
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e032      	b.n	8002772 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2239      	movs	r2, #57	; 0x39
 8002710:	5c9b      	ldrb	r3, [r3, r2]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d107      	bne.n	8002728 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2238      	movs	r2, #56	; 0x38
 800271c:	2100      	movs	r1, #0
 800271e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	0018      	movs	r0, r3
 8002724:	f7fe fab8 	bl	8000c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2239      	movs	r2, #57	; 0x39
 800272c:	2102      	movs	r1, #2
 800272e:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3304      	adds	r3, #4
 8002738:	0019      	movs	r1, r3
 800273a:	0010      	movs	r0, r2
 800273c:	f000 fa00 	bl	8002b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	223e      	movs	r2, #62	; 0x3e
 8002744:	2101      	movs	r1, #1
 8002746:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	223a      	movs	r2, #58	; 0x3a
 800274c:	2101      	movs	r1, #1
 800274e:	5499      	strb	r1, [r3, r2]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	223b      	movs	r2, #59	; 0x3b
 8002754:	2101      	movs	r1, #1
 8002756:	5499      	strb	r1, [r3, r2]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	223c      	movs	r2, #60	; 0x3c
 800275c:	2101      	movs	r1, #1
 800275e:	5499      	strb	r1, [r3, r2]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	223d      	movs	r2, #61	; 0x3d
 8002764:	2101      	movs	r1, #1
 8002766:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2239      	movs	r2, #57	; 0x39
 800276c:	2101      	movs	r1, #1
 800276e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	0018      	movs	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	b002      	add	sp, #8
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e032      	b.n	80027f2 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2239      	movs	r2, #57	; 0x39
 8002790:	5c9b      	ldrb	r3, [r3, r2]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d107      	bne.n	80027a8 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2238      	movs	r2, #56	; 0x38
 800279c:	2100      	movs	r1, #0
 800279e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	0018      	movs	r0, r3
 80027a4:	f000 f829 	bl	80027fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2239      	movs	r2, #57	; 0x39
 80027ac:	2102      	movs	r1, #2
 80027ae:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3304      	adds	r3, #4
 80027b8:	0019      	movs	r1, r3
 80027ba:	0010      	movs	r0, r2
 80027bc:	f000 f9c0 	bl	8002b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	223e      	movs	r2, #62	; 0x3e
 80027c4:	2101      	movs	r1, #1
 80027c6:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	223a      	movs	r2, #58	; 0x3a
 80027cc:	2101      	movs	r1, #1
 80027ce:	5499      	strb	r1, [r3, r2]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	223b      	movs	r2, #59	; 0x3b
 80027d4:	2101      	movs	r1, #1
 80027d6:	5499      	strb	r1, [r3, r2]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	223c      	movs	r2, #60	; 0x3c
 80027dc:	2101      	movs	r1, #1
 80027de:	5499      	strb	r1, [r3, r2]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	223d      	movs	r2, #61	; 0x3d
 80027e4:	2101      	movs	r1, #1
 80027e6:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2239      	movs	r2, #57	; 0x39
 80027ec:	2101      	movs	r1, #1
 80027ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	0018      	movs	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	b002      	add	sp, #8
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	46bd      	mov	sp, r7
 8002806:	b002      	add	sp, #8
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002818:	2317      	movs	r3, #23
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2238      	movs	r2, #56	; 0x38
 8002824:	5c9b      	ldrb	r3, [r3, r2]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d101      	bne.n	800282e <HAL_TIM_PWM_ConfigChannel+0x22>
 800282a:	2302      	movs	r3, #2
 800282c:	e0ad      	b.n	800298a <HAL_TIM_PWM_ConfigChannel+0x17e>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2238      	movs	r2, #56	; 0x38
 8002832:	2101      	movs	r1, #1
 8002834:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b0c      	cmp	r3, #12
 800283a:	d100      	bne.n	800283e <HAL_TIM_PWM_ConfigChannel+0x32>
 800283c:	e076      	b.n	800292c <HAL_TIM_PWM_ConfigChannel+0x120>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b0c      	cmp	r3, #12
 8002842:	d900      	bls.n	8002846 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002844:	e095      	b.n	8002972 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b08      	cmp	r3, #8
 800284a:	d04e      	beq.n	80028ea <HAL_TIM_PWM_ConfigChannel+0xde>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b08      	cmp	r3, #8
 8002850:	d900      	bls.n	8002854 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002852:	e08e      	b.n	8002972 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_TIM_PWM_ConfigChannel+0x56>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b04      	cmp	r3, #4
 800285e:	d021      	beq.n	80028a4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002860:	e087      	b.n	8002972 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	0011      	movs	r1, r2
 800286a:	0018      	movs	r0, r3
 800286c:	f000 f9b2 	bl	8002bd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699a      	ldr	r2, [r3, #24]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2108      	movs	r1, #8
 800287c:	430a      	orrs	r2, r1
 800287e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699a      	ldr	r2, [r3, #24]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2104      	movs	r1, #4
 800288c:	438a      	bics	r2, r1
 800288e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6999      	ldr	r1, [r3, #24]
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	619a      	str	r2, [r3, #24]
      break;
 80028a2:	e06b      	b.n	800297c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	0011      	movs	r1, r2
 80028ac:	0018      	movs	r0, r3
 80028ae:	f000 f9cd 	bl	8002c4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699a      	ldr	r2, [r3, #24]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2180      	movs	r1, #128	; 0x80
 80028be:	0109      	lsls	r1, r1, #4
 80028c0:	430a      	orrs	r2, r1
 80028c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4931      	ldr	r1, [pc, #196]	; (8002994 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80028d0:	400a      	ands	r2, r1
 80028d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6999      	ldr	r1, [r3, #24]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	021a      	lsls	r2, r3, #8
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	619a      	str	r2, [r3, #24]
      break;
 80028e8:	e048      	b.n	800297c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	0011      	movs	r1, r2
 80028f2:	0018      	movs	r0, r3
 80028f4:	f000 f9ec 	bl	8002cd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	69da      	ldr	r2, [r3, #28]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2108      	movs	r1, #8
 8002904:	430a      	orrs	r2, r1
 8002906:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	69da      	ldr	r2, [r3, #28]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2104      	movs	r1, #4
 8002914:	438a      	bics	r2, r1
 8002916:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	69d9      	ldr	r1, [r3, #28]
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	61da      	str	r2, [r3, #28]
      break;
 800292a:	e027      	b.n	800297c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	0011      	movs	r1, r2
 8002934:	0018      	movs	r0, r3
 8002936:	f000 fa0b 	bl	8002d50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	69da      	ldr	r2, [r3, #28]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2180      	movs	r1, #128	; 0x80
 8002946:	0109      	lsls	r1, r1, #4
 8002948:	430a      	orrs	r2, r1
 800294a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	69da      	ldr	r2, [r3, #28]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	490f      	ldr	r1, [pc, #60]	; (8002994 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002958:	400a      	ands	r2, r1
 800295a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	69d9      	ldr	r1, [r3, #28]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	021a      	lsls	r2, r3, #8
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	61da      	str	r2, [r3, #28]
      break;
 8002970:	e004      	b.n	800297c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002972:	2317      	movs	r3, #23
 8002974:	18fb      	adds	r3, r7, r3
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]
      break;
 800297a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2238      	movs	r2, #56	; 0x38
 8002980:	2100      	movs	r1, #0
 8002982:	5499      	strb	r1, [r3, r2]

  return status;
 8002984:	2317      	movs	r3, #23
 8002986:	18fb      	adds	r3, r7, r3
 8002988:	781b      	ldrb	r3, [r3, #0]
}
 800298a:	0018      	movs	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	b006      	add	sp, #24
 8002990:	bd80      	pop	{r7, pc}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	fffffbff 	.word	0xfffffbff

08002998 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029a2:	230f      	movs	r3, #15
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2238      	movs	r2, #56	; 0x38
 80029ae:	5c9b      	ldrb	r3, [r3, r2]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_TIM_ConfigClockSource+0x20>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e0bc      	b.n	8002b32 <HAL_TIM_ConfigClockSource+0x19a>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2238      	movs	r2, #56	; 0x38
 80029bc:	2101      	movs	r1, #1
 80029be:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2239      	movs	r2, #57	; 0x39
 80029c4:	2102      	movs	r1, #2
 80029c6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2277      	movs	r2, #119	; 0x77
 80029d4:	4393      	bics	r3, r2
 80029d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4a58      	ldr	r2, [pc, #352]	; (8002b3c <HAL_TIM_ConfigClockSource+0x1a4>)
 80029dc:	4013      	ands	r3, r2
 80029de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2280      	movs	r2, #128	; 0x80
 80029ee:	0192      	lsls	r2, r2, #6
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d040      	beq.n	8002a76 <HAL_TIM_ConfigClockSource+0xde>
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	0192      	lsls	r2, r2, #6
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d900      	bls.n	80029fe <HAL_TIM_ConfigClockSource+0x66>
 80029fc:	e088      	b.n	8002b10 <HAL_TIM_ConfigClockSource+0x178>
 80029fe:	2280      	movs	r2, #128	; 0x80
 8002a00:	0152      	lsls	r2, r2, #5
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d100      	bne.n	8002a08 <HAL_TIM_ConfigClockSource+0x70>
 8002a06:	e088      	b.n	8002b1a <HAL_TIM_ConfigClockSource+0x182>
 8002a08:	2280      	movs	r2, #128	; 0x80
 8002a0a:	0152      	lsls	r2, r2, #5
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d900      	bls.n	8002a12 <HAL_TIM_ConfigClockSource+0x7a>
 8002a10:	e07e      	b.n	8002b10 <HAL_TIM_ConfigClockSource+0x178>
 8002a12:	2b70      	cmp	r3, #112	; 0x70
 8002a14:	d018      	beq.n	8002a48 <HAL_TIM_ConfigClockSource+0xb0>
 8002a16:	d900      	bls.n	8002a1a <HAL_TIM_ConfigClockSource+0x82>
 8002a18:	e07a      	b.n	8002b10 <HAL_TIM_ConfigClockSource+0x178>
 8002a1a:	2b60      	cmp	r3, #96	; 0x60
 8002a1c:	d04f      	beq.n	8002abe <HAL_TIM_ConfigClockSource+0x126>
 8002a1e:	d900      	bls.n	8002a22 <HAL_TIM_ConfigClockSource+0x8a>
 8002a20:	e076      	b.n	8002b10 <HAL_TIM_ConfigClockSource+0x178>
 8002a22:	2b50      	cmp	r3, #80	; 0x50
 8002a24:	d03b      	beq.n	8002a9e <HAL_TIM_ConfigClockSource+0x106>
 8002a26:	d900      	bls.n	8002a2a <HAL_TIM_ConfigClockSource+0x92>
 8002a28:	e072      	b.n	8002b10 <HAL_TIM_ConfigClockSource+0x178>
 8002a2a:	2b40      	cmp	r3, #64	; 0x40
 8002a2c:	d057      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0x146>
 8002a2e:	d900      	bls.n	8002a32 <HAL_TIM_ConfigClockSource+0x9a>
 8002a30:	e06e      	b.n	8002b10 <HAL_TIM_ConfigClockSource+0x178>
 8002a32:	2b30      	cmp	r3, #48	; 0x30
 8002a34:	d063      	beq.n	8002afe <HAL_TIM_ConfigClockSource+0x166>
 8002a36:	d86b      	bhi.n	8002b10 <HAL_TIM_ConfigClockSource+0x178>
 8002a38:	2b20      	cmp	r3, #32
 8002a3a:	d060      	beq.n	8002afe <HAL_TIM_ConfigClockSource+0x166>
 8002a3c:	d868      	bhi.n	8002b10 <HAL_TIM_ConfigClockSource+0x178>
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d05d      	beq.n	8002afe <HAL_TIM_ConfigClockSource+0x166>
 8002a42:	2b10      	cmp	r3, #16
 8002a44:	d05b      	beq.n	8002afe <HAL_TIM_ConfigClockSource+0x166>
 8002a46:	e063      	b.n	8002b10 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a58:	f000 fa3a 	bl	8002ed0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2277      	movs	r2, #119	; 0x77
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	609a      	str	r2, [r3, #8]
      break;
 8002a74:	e052      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a86:	f000 fa23 	bl	8002ed0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2180      	movs	r1, #128	; 0x80
 8002a96:	01c9      	lsls	r1, r1, #7
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	609a      	str	r2, [r3, #8]
      break;
 8002a9c:	e03e      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aaa:	001a      	movs	r2, r3
 8002aac:	f000 f996 	bl	8002ddc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2150      	movs	r1, #80	; 0x50
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f000 f9f0 	bl	8002e9c <TIM_ITRx_SetConfig>
      break;
 8002abc:	e02e      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aca:	001a      	movs	r2, r3
 8002acc:	f000 f9b4 	bl	8002e38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2160      	movs	r1, #96	; 0x60
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f000 f9e0 	bl	8002e9c <TIM_ITRx_SetConfig>
      break;
 8002adc:	e01e      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aea:	001a      	movs	r2, r3
 8002aec:	f000 f976 	bl	8002ddc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2140      	movs	r1, #64	; 0x40
 8002af6:	0018      	movs	r0, r3
 8002af8:	f000 f9d0 	bl	8002e9c <TIM_ITRx_SetConfig>
      break;
 8002afc:	e00e      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	0019      	movs	r1, r3
 8002b08:	0010      	movs	r0, r2
 8002b0a:	f000 f9c7 	bl	8002e9c <TIM_ITRx_SetConfig>
      break;
 8002b0e:	e005      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002b10:	230f      	movs	r3, #15
 8002b12:	18fb      	adds	r3, r7, r3
 8002b14:	2201      	movs	r2, #1
 8002b16:	701a      	strb	r2, [r3, #0]
      break;
 8002b18:	e000      	b.n	8002b1c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002b1a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2239      	movs	r2, #57	; 0x39
 8002b20:	2101      	movs	r1, #1
 8002b22:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2238      	movs	r2, #56	; 0x38
 8002b28:	2100      	movs	r1, #0
 8002b2a:	5499      	strb	r1, [r3, r2]

  return status;
 8002b2c:	230f      	movs	r3, #15
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	781b      	ldrb	r3, [r3, #0]
}
 8002b32:	0018      	movs	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	b004      	add	sp, #16
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	ffff00ff 	.word	0xffff00ff

08002b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	2380      	movs	r3, #128	; 0x80
 8002b54:	05db      	lsls	r3, r3, #23
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d003      	beq.n	8002b62 <TIM_Base_SetConfig+0x22>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a1b      	ldr	r2, [pc, #108]	; (8002bcc <TIM_Base_SetConfig+0x8c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d108      	bne.n	8002b74 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2270      	movs	r2, #112	; 0x70
 8002b66:	4393      	bics	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	05db      	lsls	r3, r3, #23
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d003      	beq.n	8002b86 <TIM_Base_SetConfig+0x46>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a12      	ldr	r2, [pc, #72]	; (8002bcc <TIM_Base_SetConfig+0x8c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d108      	bne.n	8002b98 <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4a11      	ldr	r2, [pc, #68]	; (8002bd0 <TIM_Base_SetConfig+0x90>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2280      	movs	r2, #128	; 0x80
 8002b9c:	4393      	bics	r3, r2
 8002b9e:	001a      	movs	r2, r3
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	615a      	str	r2, [r3, #20]
}
 8002bc4:	46c0      	nop			; (mov r8, r8)
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b004      	add	sp, #16
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40010800 	.word	0x40010800
 8002bd0:	fffffcff 	.word	0xfffffcff

08002bd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	2201      	movs	r2, #1
 8002be4:	4393      	bics	r3, r2
 8002be6:	001a      	movs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2270      	movs	r2, #112	; 0x70
 8002c02:	4393      	bics	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2203      	movs	r2, #3
 8002c0a:	4393      	bics	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	4393      	bics	r3, r2
 8002c1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	621a      	str	r2, [r3, #32]
}
 8002c44:	46c0      	nop			; (mov r8, r8)
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b006      	add	sp, #24
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	2210      	movs	r2, #16
 8002c5c:	4393      	bics	r3, r2
 8002c5e:	001a      	movs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4a13      	ldr	r2, [pc, #76]	; (8002cc8 <TIM_OC2_SetConfig+0x7c>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4a12      	ldr	r2, [pc, #72]	; (8002ccc <TIM_OC2_SetConfig+0x80>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	021b      	lsls	r3, r3, #8
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2220      	movs	r2, #32
 8002c96:	4393      	bics	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	621a      	str	r2, [r3, #32]
}
 8002cc0:	46c0      	nop			; (mov r8, r8)
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b006      	add	sp, #24
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	ffff8fff 	.word	0xffff8fff
 8002ccc:	fffffcff 	.word	0xfffffcff

08002cd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	4a1a      	ldr	r2, [pc, #104]	; (8002d48 <TIM_OC3_SetConfig+0x78>)
 8002ce0:	401a      	ands	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2270      	movs	r2, #112	; 0x70
 8002cfc:	4393      	bics	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2203      	movs	r2, #3
 8002d04:	4393      	bics	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	4a0d      	ldr	r2, [pc, #52]	; (8002d4c <TIM_OC3_SetConfig+0x7c>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	021b      	lsls	r3, r3, #8
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	621a      	str	r2, [r3, #32]
}
 8002d40:	46c0      	nop			; (mov r8, r8)
 8002d42:	46bd      	mov	sp, r7
 8002d44:	b006      	add	sp, #24
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	fffffeff 	.word	0xfffffeff
 8002d4c:	fffffdff 	.word	0xfffffdff

08002d50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	4a1b      	ldr	r2, [pc, #108]	; (8002dcc <TIM_OC4_SetConfig+0x7c>)
 8002d60:	401a      	ands	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4a15      	ldr	r2, [pc, #84]	; (8002dd0 <TIM_OC4_SetConfig+0x80>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4a14      	ldr	r2, [pc, #80]	; (8002dd4 <TIM_OC4_SetConfig+0x84>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	4a10      	ldr	r2, [pc, #64]	; (8002dd8 <TIM_OC4_SetConfig+0x88>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	031b      	lsls	r3, r3, #12
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	621a      	str	r2, [r3, #32]
}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b006      	add	sp, #24
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	ffffefff 	.word	0xffffefff
 8002dd0:	ffff8fff 	.word	0xffff8fff
 8002dd4:	fffffcff 	.word	0xfffffcff
 8002dd8:	ffffdfff 	.word	0xffffdfff

08002ddc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	2201      	movs	r2, #1
 8002df4:	4393      	bics	r3, r2
 8002df6:	001a      	movs	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	22f0      	movs	r2, #240	; 0xf0
 8002e06:	4393      	bics	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	220a      	movs	r2, #10
 8002e18:	4393      	bics	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	621a      	str	r2, [r3, #32]
}
 8002e30:	46c0      	nop			; (mov r8, r8)
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b006      	add	sp, #24
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	2210      	movs	r2, #16
 8002e4a:	4393      	bics	r3, r2
 8002e4c:	001a      	movs	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	4a0d      	ldr	r2, [pc, #52]	; (8002e98 <TIM_TI2_ConfigInputStage+0x60>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	031b      	lsls	r3, r3, #12
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	22a0      	movs	r2, #160	; 0xa0
 8002e74:	4393      	bics	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	621a      	str	r2, [r3, #32]
}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b006      	add	sp, #24
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	ffff0fff 	.word	0xffff0fff

08002e9c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2270      	movs	r2, #112	; 0x70
 8002eb0:	4393      	bics	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	2207      	movs	r2, #7
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	609a      	str	r2, [r3, #8]
}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	b004      	add	sp, #16
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	4a09      	ldr	r2, [pc, #36]	; (8002f0c <TIM_ETR_SetConfig+0x3c>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	021a      	lsls	r2, r3, #8
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	609a      	str	r2, [r3, #8]
}
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b006      	add	sp, #24
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	ffff00ff 	.word	0xffff00ff

08002f10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2238      	movs	r2, #56	; 0x38
 8002f1e:	5c9b      	ldrb	r3, [r3, r2]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e03d      	b.n	8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2238      	movs	r2, #56	; 0x38
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2239      	movs	r2, #57	; 0x39
 8002f34:	2102      	movs	r1, #2
 8002f36:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2270      	movs	r2, #112	; 0x70
 8002f4c:	4393      	bics	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	05db      	lsls	r3, r3, #23
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d004      	beq.n	8002f78 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a0e      	ldr	r2, [pc, #56]	; (8002fac <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d10c      	bne.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2280      	movs	r2, #128	; 0x80
 8002f7c:	4393      	bics	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2239      	movs	r2, #57	; 0x39
 8002f96:	2101      	movs	r1, #1
 8002f98:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2238      	movs	r2, #56	; 0x38
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	b004      	add	sp, #16
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40010800 	.word	0x40010800

08002fb0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	0002      	movs	r2, r0
 8002fb8:	1dbb      	adds	r3, r7, #6
 8002fba:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002fc0:	1dbb      	adds	r3, r7, #6
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	5e9b      	ldrsh	r3, [r3, r2]
 8002fc6:	2b84      	cmp	r3, #132	; 0x84
 8002fc8:	d006      	beq.n	8002fd8 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8002fca:	1dbb      	adds	r3, r7, #6
 8002fcc:	2200      	movs	r2, #0
 8002fce:	5e9a      	ldrsh	r2, [r3, r2]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	18d3      	adds	r3, r2, r3
 8002fd4:	3303      	adds	r3, #3
 8002fd6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
}
 8002fda:	0018      	movs	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b004      	add	sp, #16
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002fe6:	f000 faab 	bl	8003540 <vTaskStartScheduler>
  
  return osOK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	0018      	movs	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002ff2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff4:	b089      	sub	sp, #36	; 0x24
 8002ff6:	af04      	add	r7, sp, #16
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d020      	beq.n	8003046 <osThreadCreate+0x54>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01c      	beq.n	8003046 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685c      	ldr	r4, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691e      	ldr	r6, [r3, #16]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2208      	movs	r2, #8
 800301c:	5e9b      	ldrsh	r3, [r3, r2]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800301e:	0018      	movs	r0, r3
 8003020:	f7ff ffc6 	bl	8002fb0 <makeFreeRtosPriority>
              thread_def->buffer, thread_def->controlblock);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	695a      	ldr	r2, [r3, #20]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800302c:	6839      	ldr	r1, [r7, #0]
 800302e:	9302      	str	r3, [sp, #8]
 8003030:	9201      	str	r2, [sp, #4]
 8003032:	9000      	str	r0, [sp, #0]
 8003034:	000b      	movs	r3, r1
 8003036:	0032      	movs	r2, r6
 8003038:	0029      	movs	r1, r5
 800303a:	0020      	movs	r0, r4
 800303c:	f000 f8e3 	bl	8003206 <xTaskCreateStatic>
 8003040:	0003      	movs	r3, r0
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	e01d      	b.n	8003082 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685c      	ldr	r4, [r3, #4]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003052:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2208      	movs	r2, #8
 8003058:	5e9b      	ldrsh	r3, [r3, r2]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800305a:	0018      	movs	r0, r3
 800305c:	f7ff ffa8 	bl	8002fb0 <makeFreeRtosPriority>
 8003060:	0001      	movs	r1, r0
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	230c      	movs	r3, #12
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	9301      	str	r3, [sp, #4]
 800306a:	9100      	str	r1, [sp, #0]
 800306c:	0013      	movs	r3, r2
 800306e:	0032      	movs	r2, r6
 8003070:	0029      	movs	r1, r5
 8003072:	0020      	movs	r0, r4
 8003074:	f000 f90b 	bl	800328e <xTaskCreate>
 8003078:	0003      	movs	r3, r0
 800307a:	2b01      	cmp	r3, #1
 800307c:	d001      	beq.n	8003082 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 800307e:	2300      	movs	r3, #0
 8003080:	e000      	b.n	8003084 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003082:	68fb      	ldr	r3, [r7, #12]
}
 8003084:	0018      	movs	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	b005      	add	sp, #20
 800308a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800308c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <osDelay+0x16>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	e000      	b.n	80030a4 <osDelay+0x18>
 80030a2:	2301      	movs	r3, #1
 80030a4:	0018      	movs	r0, r3
 80030a6:	f000 fa25 	bl	80034f4 <vTaskDelay>
  
  return osOK;
 80030aa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80030ac:	0018      	movs	r0, r3
 80030ae:	46bd      	mov	sp, r7
 80030b0:	b004      	add	sp, #16
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3308      	adds	r3, #8
 80030c0:	001a      	movs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	4252      	negs	r2, r2
 80030cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3308      	adds	r3, #8
 80030d2:	001a      	movs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3308      	adds	r3, #8
 80030dc:	001a      	movs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030e8:	46c0      	nop			; (mov r8, r8)
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b002      	add	sp, #8
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	46bd      	mov	sp, r7
 8003102:	b002      	add	sp, #8
 8003104:	bd80      	pop	{r7, pc}

08003106 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	601a      	str	r2, [r3, #0]
}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	46bd      	mov	sp, r7
 8003146:	b004      	add	sp, #16
 8003148:	bd80      	pop	{r7, pc}

0800314a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	3301      	adds	r3, #1
 800315e:	d103      	bne.n	8003168 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	e00c      	b.n	8003182 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3308      	adds	r3, #8
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	e002      	b.n	8003176 <vListInsert+0x2c>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	429a      	cmp	r2, r3
 8003180:	d2f6      	bcs.n	8003170 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	601a      	str	r2, [r3, #0]
}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	46bd      	mov	sp, r7
 80031b2:	b004      	add	sp, #16
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6892      	ldr	r2, [r2, #8]
 80031cc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6852      	ldr	r2, [r2, #4]
 80031d6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d103      	bne.n	80031ea <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	1e5a      	subs	r2, r3, #1
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
}
 80031fe:	0018      	movs	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	b004      	add	sp, #16
 8003204:	bd80      	pop	{r7, pc}

08003206 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003206:	b590      	push	{r4, r7, lr}
 8003208:	b08d      	sub	sp, #52	; 0x34
 800320a:	af04      	add	r7, sp, #16
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	607a      	str	r2, [r7, #4]
 8003212:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <xTaskCreateStatic+0x18>
 800321a:	b672      	cpsid	i
 800321c:	e7fe      	b.n	800321c <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800321e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <xTaskCreateStatic+0x22>
 8003224:	b672      	cpsid	i
 8003226:	e7fe      	b.n	8003226 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003228:	2354      	movs	r3, #84	; 0x54
 800322a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2b54      	cmp	r3, #84	; 0x54
 8003230:	d001      	beq.n	8003236 <xTaskCreateStatic+0x30>
 8003232:	b672      	cpsid	i
 8003234:	e7fe      	b.n	8003234 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003236:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323a:	2b00      	cmp	r3, #0
 800323c:	d020      	beq.n	8003280 <xTaskCreateStatic+0x7a>
 800323e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003240:	2b00      	cmp	r3, #0
 8003242:	d01d      	beq.n	8003280 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003246:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800324c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	2251      	movs	r2, #81	; 0x51
 8003252:	2102      	movs	r1, #2
 8003254:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003256:	683c      	ldr	r4, [r7, #0]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	68b9      	ldr	r1, [r7, #8]
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	2300      	movs	r3, #0
 8003260:	9303      	str	r3, [sp, #12]
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	9302      	str	r3, [sp, #8]
 8003266:	2318      	movs	r3, #24
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	9301      	str	r3, [sp, #4]
 800326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	0023      	movs	r3, r4
 8003272:	f000 f859 	bl	8003328 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	0018      	movs	r0, r3
 800327a:	f000 f8d7 	bl	800342c <prvAddNewTaskToReadyList>
 800327e:	e001      	b.n	8003284 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8003280:	2300      	movs	r3, #0
 8003282:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003284:	69bb      	ldr	r3, [r7, #24]
	}
 8003286:	0018      	movs	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	b009      	add	sp, #36	; 0x24
 800328c:	bd90      	pop	{r4, r7, pc}

0800328e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800328e:	b590      	push	{r4, r7, lr}
 8003290:	b08d      	sub	sp, #52	; 0x34
 8003292:	af04      	add	r7, sp, #16
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	603b      	str	r3, [r7, #0]
 800329a:	1dbb      	adds	r3, r7, #6
 800329c:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800329e:	1dbb      	adds	r3, r7, #6
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	0018      	movs	r0, r3
 80032a6:	f000 fd9b 	bl	8003de0 <pvPortMalloc>
 80032aa:	0003      	movs	r3, r0
 80032ac:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d010      	beq.n	80032d6 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80032b4:	2054      	movs	r0, #84	; 0x54
 80032b6:	f000 fd93 	bl	8003de0 <pvPortMalloc>
 80032ba:	0003      	movs	r3, r0
 80032bc:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	631a      	str	r2, [r3, #48]	; 0x30
 80032ca:	e006      	b.n	80032da <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	0018      	movs	r0, r3
 80032d0:	f000 fe2c 	bl	8003f2c <vPortFree>
 80032d4:	e001      	b.n	80032da <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d01a      	beq.n	8003316 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	2251      	movs	r2, #81	; 0x51
 80032e4:	2100      	movs	r1, #0
 80032e6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032e8:	1dbb      	adds	r3, r7, #6
 80032ea:	881a      	ldrh	r2, [r3, #0]
 80032ec:	683c      	ldr	r4, [r7, #0]
 80032ee:	68b9      	ldr	r1, [r7, #8]
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	2300      	movs	r3, #0
 80032f4:	9303      	str	r3, [sp, #12]
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	9302      	str	r3, [sp, #8]
 80032fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fc:	9301      	str	r3, [sp, #4]
 80032fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	0023      	movs	r3, r4
 8003304:	f000 f810 	bl	8003328 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	0018      	movs	r0, r3
 800330c:	f000 f88e 	bl	800342c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003310:	2301      	movs	r3, #1
 8003312:	61bb      	str	r3, [r7, #24]
 8003314:	e002      	b.n	800331c <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003316:	2301      	movs	r3, #1
 8003318:	425b      	negs	r3, r3
 800331a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800331c:	69bb      	ldr	r3, [r7, #24]
	}
 800331e:	0018      	movs	r0, r3
 8003320:	46bd      	mov	sp, r7
 8003322:	b009      	add	sp, #36	; 0x24
 8003324:	bd90      	pop	{r4, r7, pc}
	...

08003328 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	493a      	ldr	r1, [pc, #232]	; (8003428 <prvInitialiseNewTask+0x100>)
 800333e:	468c      	mov	ip, r1
 8003340:	4463      	add	r3, ip
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	18d3      	adds	r3, r2, r3
 8003346:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	2207      	movs	r2, #7
 800334c:	4393      	bics	r3, r2
 800334e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	2207      	movs	r2, #7
 8003354:	4013      	ands	r3, r2
 8003356:	d001      	beq.n	800335c <prvInitialiseNewTask+0x34>
 8003358:	b672      	cpsid	i
 800335a:	e7fe      	b.n	800335a <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d020      	beq.n	80033a4 <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	e013      	b.n	8003390 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	18d3      	adds	r3, r2, r3
 800336e:	7818      	ldrb	r0, [r3, #0]
 8003370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003372:	2134      	movs	r1, #52	; 0x34
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	18d3      	adds	r3, r2, r3
 8003378:	185b      	adds	r3, r3, r1
 800337a:	1c02      	adds	r2, r0, #0
 800337c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	18d3      	adds	r3, r2, r3
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d006      	beq.n	8003398 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	3301      	adds	r3, #1
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	2b0f      	cmp	r3, #15
 8003394:	d9e8      	bls.n	8003368 <prvInitialiseNewTask+0x40>
 8003396:	e000      	b.n	800339a <prvInitialiseNewTask+0x72>
			{
				break;
 8003398:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339c:	2243      	movs	r2, #67	; 0x43
 800339e:	2100      	movs	r1, #0
 80033a0:	5499      	strb	r1, [r3, r2]
 80033a2:	e003      	b.n	80033ac <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80033a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a6:	2234      	movs	r2, #52	; 0x34
 80033a8:	2100      	movs	r1, #0
 80033aa:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	2b06      	cmp	r3, #6
 80033b0:	d901      	bls.n	80033b6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033b2:	2306      	movs	r3, #6
 80033b4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80033b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b8:	6a3a      	ldr	r2, [r7, #32]
 80033ba:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033be:	6a3a      	ldr	r2, [r7, #32]
 80033c0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80033c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c4:	2200      	movs	r2, #0
 80033c6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ca:	3304      	adds	r3, #4
 80033cc:	0018      	movs	r0, r3
 80033ce:	f7ff fe8f 	bl	80030f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d4:	3318      	adds	r3, #24
 80033d6:	0018      	movs	r0, r3
 80033d8:	f7ff fe8a 	bl	80030f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	2207      	movs	r2, #7
 80033e6:	1ad2      	subs	r2, r2, r3
 80033e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80033ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033f0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80033f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f4:	2200      	movs	r2, #0
 80033f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fa:	2250      	movs	r2, #80	; 0x50
 80033fc:	2100      	movs	r1, #0
 80033fe:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	68f9      	ldr	r1, [r7, #12]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	0018      	movs	r0, r3
 8003408:	f000 fbba 	bl	8003b80 <pxPortInitialiseStack>
 800340c:	0002      	movs	r2, r0
 800340e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003410:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800341c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	46bd      	mov	sp, r7
 8003422:	b006      	add	sp, #24
 8003424:	bd80      	pop	{r7, pc}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	3fffffff 	.word	0x3fffffff

0800342c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003434:	f000 fc3c 	bl	8003cb0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003438:	4b28      	ldr	r3, [pc, #160]	; (80034dc <prvAddNewTaskToReadyList+0xb0>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	4b27      	ldr	r3, [pc, #156]	; (80034dc <prvAddNewTaskToReadyList+0xb0>)
 8003440:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003442:	4b27      	ldr	r3, [pc, #156]	; (80034e0 <prvAddNewTaskToReadyList+0xb4>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d109      	bne.n	800345e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800344a:	4b25      	ldr	r3, [pc, #148]	; (80034e0 <prvAddNewTaskToReadyList+0xb4>)
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003450:	4b22      	ldr	r3, [pc, #136]	; (80034dc <prvAddNewTaskToReadyList+0xb0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d110      	bne.n	800347a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003458:	f000 fa6a 	bl	8003930 <prvInitialiseTaskLists>
 800345c:	e00d      	b.n	800347a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800345e:	4b21      	ldr	r3, [pc, #132]	; (80034e4 <prvAddNewTaskToReadyList+0xb8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003466:	4b1e      	ldr	r3, [pc, #120]	; (80034e0 <prvAddNewTaskToReadyList+0xb4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003470:	429a      	cmp	r2, r3
 8003472:	d802      	bhi.n	800347a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003474:	4b1a      	ldr	r3, [pc, #104]	; (80034e0 <prvAddNewTaskToReadyList+0xb4>)
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800347a:	4b1b      	ldr	r3, [pc, #108]	; (80034e8 <prvAddNewTaskToReadyList+0xbc>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <prvAddNewTaskToReadyList+0xbc>)
 8003482:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003488:	4b18      	ldr	r3, [pc, #96]	; (80034ec <prvAddNewTaskToReadyList+0xc0>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d903      	bls.n	8003498 <prvAddNewTaskToReadyList+0x6c>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003494:	4b15      	ldr	r3, [pc, #84]	; (80034ec <prvAddNewTaskToReadyList+0xc0>)
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349c:	0013      	movs	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	189b      	adds	r3, r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4a12      	ldr	r2, [pc, #72]	; (80034f0 <prvAddNewTaskToReadyList+0xc4>)
 80034a6:	189a      	adds	r2, r3, r2
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3304      	adds	r3, #4
 80034ac:	0019      	movs	r1, r3
 80034ae:	0010      	movs	r0, r2
 80034b0:	f7ff fe29 	bl	8003106 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80034b4:	f000 fc0e 	bl	8003cd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80034b8:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <prvAddNewTaskToReadyList+0xb8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034c0:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <prvAddNewTaskToReadyList+0xb4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d201      	bcs.n	80034d2 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80034ce:	f000 fbdf 	bl	8003c90 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	46bd      	mov	sp, r7
 80034d6:	b002      	add	sp, #8
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	20000554 	.word	0x20000554
 80034e0:	20000454 	.word	0x20000454
 80034e4:	20000560 	.word	0x20000560
 80034e8:	20000570 	.word	0x20000570
 80034ec:	2000055c 	.word	0x2000055c
 80034f0:	20000458 	.word	0x20000458

080034f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80034fc:	2300      	movs	r3, #0
 80034fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d010      	beq.n	8003528 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003506:	4b0d      	ldr	r3, [pc, #52]	; (800353c <vTaskDelay+0x48>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <vTaskDelay+0x1e>
 800350e:	b672      	cpsid	i
 8003510:	e7fe      	b.n	8003510 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003512:	f000 f863 	bl	80035dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2100      	movs	r1, #0
 800351a:	0018      	movs	r0, r3
 800351c:	f000 fadc 	bl	8003ad8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003520:	f000 f868 	bl	80035f4 <xTaskResumeAll>
 8003524:	0003      	movs	r3, r0
 8003526:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800352e:	f000 fbaf 	bl	8003c90 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	46bd      	mov	sp, r7
 8003536:	b004      	add	sp, #16
 8003538:	bd80      	pop	{r7, pc}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	2000057c 	.word	0x2000057c

08003540 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b089      	sub	sp, #36	; 0x24
 8003544:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003546:	2300      	movs	r3, #0
 8003548:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800354a:	2300      	movs	r3, #0
 800354c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800354e:	003a      	movs	r2, r7
 8003550:	1d39      	adds	r1, r7, #4
 8003552:	2308      	movs	r3, #8
 8003554:	18fb      	adds	r3, r7, r3
 8003556:	0018      	movs	r0, r3
 8003558:	f7fd f8c6 	bl	80006e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800355c:	683c      	ldr	r4, [r7, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	4918      	ldr	r1, [pc, #96]	; (80035c4 <vTaskStartScheduler+0x84>)
 8003564:	4818      	ldr	r0, [pc, #96]	; (80035c8 <vTaskStartScheduler+0x88>)
 8003566:	9202      	str	r2, [sp, #8]
 8003568:	9301      	str	r3, [sp, #4]
 800356a:	2300      	movs	r3, #0
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	2300      	movs	r3, #0
 8003570:	0022      	movs	r2, r4
 8003572:	f7ff fe48 	bl	8003206 <xTaskCreateStatic>
 8003576:	0002      	movs	r2, r0
 8003578:	4b14      	ldr	r3, [pc, #80]	; (80035cc <vTaskStartScheduler+0x8c>)
 800357a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800357c:	4b13      	ldr	r3, [pc, #76]	; (80035cc <vTaskStartScheduler+0x8c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003584:	2301      	movs	r3, #1
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	e001      	b.n	800358e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800358a:	2300      	movs	r3, #0
 800358c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d10d      	bne.n	80035b0 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003594:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003596:	4b0e      	ldr	r3, [pc, #56]	; (80035d0 <vTaskStartScheduler+0x90>)
 8003598:	2201      	movs	r2, #1
 800359a:	4252      	negs	r2, r2
 800359c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800359e:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <vTaskStartScheduler+0x94>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80035a4:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <vTaskStartScheduler+0x98>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035aa:	f000 fb4d 	bl	8003c48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035ae:	e004      	b.n	80035ba <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	3301      	adds	r3, #1
 80035b4:	d101      	bne.n	80035ba <vTaskStartScheduler+0x7a>
 80035b6:	b672      	cpsid	i
 80035b8:	e7fe      	b.n	80035b8 <vTaskStartScheduler+0x78>
}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	46bd      	mov	sp, r7
 80035be:	b005      	add	sp, #20
 80035c0:	bd90      	pop	{r4, r7, pc}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	080041dc 	.word	0x080041dc
 80035c8:	08003911 	.word	0x08003911
 80035cc:	20000578 	.word	0x20000578
 80035d0:	20000574 	.word	0x20000574
 80035d4:	20000560 	.word	0x20000560
 80035d8:	20000558 	.word	0x20000558

080035dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80035e0:	4b03      	ldr	r3, [pc, #12]	; (80035f0 <vTaskSuspendAll+0x14>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	4b02      	ldr	r3, [pc, #8]	; (80035f0 <vTaskSuspendAll+0x14>)
 80035e8:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	2000057c 	.word	0x2000057c

080035f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80035fe:	2300      	movs	r3, #0
 8003600:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003602:	4b3a      	ldr	r3, [pc, #232]	; (80036ec <xTaskResumeAll+0xf8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <xTaskResumeAll+0x1a>
 800360a:	b672      	cpsid	i
 800360c:	e7fe      	b.n	800360c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800360e:	f000 fb4f 	bl	8003cb0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003612:	4b36      	ldr	r3, [pc, #216]	; (80036ec <xTaskResumeAll+0xf8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	1e5a      	subs	r2, r3, #1
 8003618:	4b34      	ldr	r3, [pc, #208]	; (80036ec <xTaskResumeAll+0xf8>)
 800361a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800361c:	4b33      	ldr	r3, [pc, #204]	; (80036ec <xTaskResumeAll+0xf8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d15b      	bne.n	80036dc <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003624:	4b32      	ldr	r3, [pc, #200]	; (80036f0 <xTaskResumeAll+0xfc>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d057      	beq.n	80036dc <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800362c:	e02f      	b.n	800368e <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800362e:	4b31      	ldr	r3, [pc, #196]	; (80036f4 <xTaskResumeAll+0x100>)
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	3318      	adds	r3, #24
 800363a:	0018      	movs	r0, r3
 800363c:	f7ff fdbb 	bl	80031b6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3304      	adds	r3, #4
 8003644:	0018      	movs	r0, r3
 8003646:	f7ff fdb6 	bl	80031b6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364e:	4b2a      	ldr	r3, [pc, #168]	; (80036f8 <xTaskResumeAll+0x104>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d903      	bls.n	800365e <xTaskResumeAll+0x6a>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365a:	4b27      	ldr	r3, [pc, #156]	; (80036f8 <xTaskResumeAll+0x104>)
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003662:	0013      	movs	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	189b      	adds	r3, r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4a24      	ldr	r2, [pc, #144]	; (80036fc <xTaskResumeAll+0x108>)
 800366c:	189a      	adds	r2, r3, r2
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	3304      	adds	r3, #4
 8003672:	0019      	movs	r1, r3
 8003674:	0010      	movs	r0, r2
 8003676:	f7ff fd46 	bl	8003106 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800367e:	4b20      	ldr	r3, [pc, #128]	; (8003700 <xTaskResumeAll+0x10c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	429a      	cmp	r2, r3
 8003686:	d302      	bcc.n	800368e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8003688:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <xTaskResumeAll+0x110>)
 800368a:	2201      	movs	r2, #1
 800368c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800368e:	4b19      	ldr	r3, [pc, #100]	; (80036f4 <xTaskResumeAll+0x100>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1cb      	bne.n	800362e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800369c:	f000 f9e2 	bl	8003a64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80036a0:	4b19      	ldr	r3, [pc, #100]	; (8003708 <xTaskResumeAll+0x114>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00f      	beq.n	80036cc <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80036ac:	f000 f82e 	bl	800370c <xTaskIncrementTick>
 80036b0:	1e03      	subs	r3, r0, #0
 80036b2:	d002      	beq.n	80036ba <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80036b4:	4b13      	ldr	r3, [pc, #76]	; (8003704 <xTaskResumeAll+0x110>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3b01      	subs	r3, #1
 80036be:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f2      	bne.n	80036ac <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80036c6:	4b10      	ldr	r3, [pc, #64]	; (8003708 <xTaskResumeAll+0x114>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80036cc:	4b0d      	ldr	r3, [pc, #52]	; (8003704 <xTaskResumeAll+0x110>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80036d4:	2301      	movs	r3, #1
 80036d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80036d8:	f000 fada 	bl	8003c90 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80036dc:	f000 fafa 	bl	8003cd4 <vPortExitCritical>

	return xAlreadyYielded;
 80036e0:	68bb      	ldr	r3, [r7, #8]
}
 80036e2:	0018      	movs	r0, r3
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b004      	add	sp, #16
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	2000057c 	.word	0x2000057c
 80036f0:	20000554 	.word	0x20000554
 80036f4:	20000514 	.word	0x20000514
 80036f8:	2000055c 	.word	0x2000055c
 80036fc:	20000458 	.word	0x20000458
 8003700:	20000454 	.word	0x20000454
 8003704:	20000568 	.word	0x20000568
 8003708:	20000564 	.word	0x20000564

0800370c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003716:	4b4a      	ldr	r3, [pc, #296]	; (8003840 <xTaskIncrementTick+0x134>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d000      	beq.n	8003720 <xTaskIncrementTick+0x14>
 800371e:	e07e      	b.n	800381e <xTaskIncrementTick+0x112>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003720:	4b48      	ldr	r3, [pc, #288]	; (8003844 <xTaskIncrementTick+0x138>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3301      	adds	r3, #1
 8003726:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003728:	4b46      	ldr	r3, [pc, #280]	; (8003844 <xTaskIncrementTick+0x138>)
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d117      	bne.n	8003764 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8003734:	4b44      	ldr	r3, [pc, #272]	; (8003848 <xTaskIncrementTick+0x13c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <xTaskIncrementTick+0x36>
 800373e:	b672      	cpsid	i
 8003740:	e7fe      	b.n	8003740 <xTaskIncrementTick+0x34>
 8003742:	4b41      	ldr	r3, [pc, #260]	; (8003848 <xTaskIncrementTick+0x13c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	4b40      	ldr	r3, [pc, #256]	; (800384c <xTaskIncrementTick+0x140>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	4b3e      	ldr	r3, [pc, #248]	; (8003848 <xTaskIncrementTick+0x13c>)
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	4b3e      	ldr	r3, [pc, #248]	; (800384c <xTaskIncrementTick+0x140>)
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	4b3e      	ldr	r3, [pc, #248]	; (8003850 <xTaskIncrementTick+0x144>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	4b3c      	ldr	r3, [pc, #240]	; (8003850 <xTaskIncrementTick+0x144>)
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	f000 f980 	bl	8003a64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003764:	4b3b      	ldr	r3, [pc, #236]	; (8003854 <xTaskIncrementTick+0x148>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	429a      	cmp	r2, r3
 800376c:	d349      	bcc.n	8003802 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800376e:	4b36      	ldr	r3, [pc, #216]	; (8003848 <xTaskIncrementTick+0x13c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d104      	bne.n	8003782 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003778:	4b36      	ldr	r3, [pc, #216]	; (8003854 <xTaskIncrementTick+0x148>)
 800377a:	2201      	movs	r2, #1
 800377c:	4252      	negs	r2, r2
 800377e:	601a      	str	r2, [r3, #0]
					break;
 8003780:	e03f      	b.n	8003802 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003782:	4b31      	ldr	r3, [pc, #196]	; (8003848 <xTaskIncrementTick+0x13c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	429a      	cmp	r2, r3
 8003798:	d203      	bcs.n	80037a2 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800379a:	4b2e      	ldr	r3, [pc, #184]	; (8003854 <xTaskIncrementTick+0x148>)
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80037a0:	e02f      	b.n	8003802 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	3304      	adds	r3, #4
 80037a6:	0018      	movs	r0, r3
 80037a8:	f7ff fd05 	bl	80031b6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d004      	beq.n	80037be <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	3318      	adds	r3, #24
 80037b8:	0018      	movs	r0, r3
 80037ba:	f7ff fcfc 	bl	80031b6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c2:	4b25      	ldr	r3, [pc, #148]	; (8003858 <xTaskIncrementTick+0x14c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d903      	bls.n	80037d2 <xTaskIncrementTick+0xc6>
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ce:	4b22      	ldr	r3, [pc, #136]	; (8003858 <xTaskIncrementTick+0x14c>)
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d6:	0013      	movs	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	189b      	adds	r3, r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4a1f      	ldr	r2, [pc, #124]	; (800385c <xTaskIncrementTick+0x150>)
 80037e0:	189a      	adds	r2, r3, r2
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	3304      	adds	r3, #4
 80037e6:	0019      	movs	r1, r3
 80037e8:	0010      	movs	r0, r2
 80037ea:	f7ff fc8c 	bl	8003106 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f2:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <xTaskIncrementTick+0x154>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d3b8      	bcc.n	800376e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80037fc:	2301      	movs	r3, #1
 80037fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003800:	e7b5      	b.n	800376e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003802:	4b17      	ldr	r3, [pc, #92]	; (8003860 <xTaskIncrementTick+0x154>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003808:	4914      	ldr	r1, [pc, #80]	; (800385c <xTaskIncrementTick+0x150>)
 800380a:	0013      	movs	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	189b      	adds	r3, r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	585b      	ldr	r3, [r3, r1]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d907      	bls.n	8003828 <xTaskIncrementTick+0x11c>
			{
				xSwitchRequired = pdTRUE;
 8003818:	2301      	movs	r3, #1
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	e004      	b.n	8003828 <xTaskIncrementTick+0x11c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800381e:	4b11      	ldr	r3, [pc, #68]	; (8003864 <xTaskIncrementTick+0x158>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	4b0f      	ldr	r3, [pc, #60]	; (8003864 <xTaskIncrementTick+0x158>)
 8003826:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003828:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <xTaskIncrementTick+0x15c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <xTaskIncrementTick+0x128>
		{
			xSwitchRequired = pdTRUE;
 8003830:	2301      	movs	r3, #1
 8003832:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003834:	697b      	ldr	r3, [r7, #20]
}
 8003836:	0018      	movs	r0, r3
 8003838:	46bd      	mov	sp, r7
 800383a:	b006      	add	sp, #24
 800383c:	bd80      	pop	{r7, pc}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	2000057c 	.word	0x2000057c
 8003844:	20000558 	.word	0x20000558
 8003848:	2000050c 	.word	0x2000050c
 800384c:	20000510 	.word	0x20000510
 8003850:	2000056c 	.word	0x2000056c
 8003854:	20000574 	.word	0x20000574
 8003858:	2000055c 	.word	0x2000055c
 800385c:	20000458 	.word	0x20000458
 8003860:	20000454 	.word	0x20000454
 8003864:	20000564 	.word	0x20000564
 8003868:	20000568 	.word	0x20000568

0800386c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003872:	4b22      	ldr	r3, [pc, #136]	; (80038fc <vTaskSwitchContext+0x90>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800387a:	4b21      	ldr	r3, [pc, #132]	; (8003900 <vTaskSwitchContext+0x94>)
 800387c:	2201      	movs	r2, #1
 800387e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003880:	e037      	b.n	80038f2 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8003882:	4b1f      	ldr	r3, [pc, #124]	; (8003900 <vTaskSwitchContext+0x94>)
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003888:	4b1e      	ldr	r3, [pc, #120]	; (8003904 <vTaskSwitchContext+0x98>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	607b      	str	r3, [r7, #4]
 800388e:	e007      	b.n	80038a0 <vTaskSwitchContext+0x34>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <vTaskSwitchContext+0x2e>
 8003896:	b672      	cpsid	i
 8003898:	e7fe      	b.n	8003898 <vTaskSwitchContext+0x2c>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3b01      	subs	r3, #1
 800389e:	607b      	str	r3, [r7, #4]
 80038a0:	4919      	ldr	r1, [pc, #100]	; (8003908 <vTaskSwitchContext+0x9c>)
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	0013      	movs	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	189b      	adds	r3, r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	585b      	ldr	r3, [r3, r1]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0ee      	beq.n	8003890 <vTaskSwitchContext+0x24>
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	0013      	movs	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	189b      	adds	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4a12      	ldr	r2, [pc, #72]	; (8003908 <vTaskSwitchContext+0x9c>)
 80038be:	189b      	adds	r3, r3, r2
 80038c0:	603b      	str	r3, [r7, #0]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	605a      	str	r2, [r3, #4]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	3308      	adds	r3, #8
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d104      	bne.n	80038e2 <vTaskSwitchContext+0x76>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	4b08      	ldr	r3, [pc, #32]	; (800390c <vTaskSwitchContext+0xa0>)
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	4b05      	ldr	r3, [pc, #20]	; (8003904 <vTaskSwitchContext+0x98>)
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	601a      	str	r2, [r3, #0]
}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	46bd      	mov	sp, r7
 80038f6:	b002      	add	sp, #8
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	2000057c 	.word	0x2000057c
 8003900:	20000568 	.word	0x20000568
 8003904:	2000055c 	.word	0x2000055c
 8003908:	20000458 	.word	0x20000458
 800390c:	20000454 	.word	0x20000454

08003910 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003918:	f000 f84e 	bl	80039b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800391c:	4b03      	ldr	r3, [pc, #12]	; (800392c <prvIdleTask+0x1c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d9f9      	bls.n	8003918 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003924:	f000 f9b4 	bl	8003c90 <vPortYield>
		prvCheckTasksWaitingTermination();
 8003928:	e7f6      	b.n	8003918 <prvIdleTask+0x8>
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	20000458 	.word	0x20000458

08003930 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003936:	2300      	movs	r3, #0
 8003938:	607b      	str	r3, [r7, #4]
 800393a:	e00c      	b.n	8003956 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	0013      	movs	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	189b      	adds	r3, r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4a14      	ldr	r2, [pc, #80]	; (8003998 <prvInitialiseTaskLists+0x68>)
 8003948:	189b      	adds	r3, r3, r2
 800394a:	0018      	movs	r0, r3
 800394c:	f7ff fbb2 	bl	80030b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3301      	adds	r3, #1
 8003954:	607b      	str	r3, [r7, #4]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b06      	cmp	r3, #6
 800395a:	d9ef      	bls.n	800393c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800395c:	4b0f      	ldr	r3, [pc, #60]	; (800399c <prvInitialiseTaskLists+0x6c>)
 800395e:	0018      	movs	r0, r3
 8003960:	f7ff fba8 	bl	80030b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003964:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <prvInitialiseTaskLists+0x70>)
 8003966:	0018      	movs	r0, r3
 8003968:	f7ff fba4 	bl	80030b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800396c:	4b0d      	ldr	r3, [pc, #52]	; (80039a4 <prvInitialiseTaskLists+0x74>)
 800396e:	0018      	movs	r0, r3
 8003970:	f7ff fba0 	bl	80030b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <prvInitialiseTaskLists+0x78>)
 8003976:	0018      	movs	r0, r3
 8003978:	f7ff fb9c 	bl	80030b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <prvInitialiseTaskLists+0x7c>)
 800397e:	0018      	movs	r0, r3
 8003980:	f7ff fb98 	bl	80030b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003984:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <prvInitialiseTaskLists+0x80>)
 8003986:	4a05      	ldr	r2, [pc, #20]	; (800399c <prvInitialiseTaskLists+0x6c>)
 8003988:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800398a:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <prvInitialiseTaskLists+0x84>)
 800398c:	4a04      	ldr	r2, [pc, #16]	; (80039a0 <prvInitialiseTaskLists+0x70>)
 800398e:	601a      	str	r2, [r3, #0]
}
 8003990:	46c0      	nop			; (mov r8, r8)
 8003992:	46bd      	mov	sp, r7
 8003994:	b002      	add	sp, #8
 8003996:	bd80      	pop	{r7, pc}
 8003998:	20000458 	.word	0x20000458
 800399c:	200004e4 	.word	0x200004e4
 80039a0:	200004f8 	.word	0x200004f8
 80039a4:	20000514 	.word	0x20000514
 80039a8:	20000528 	.word	0x20000528
 80039ac:	20000540 	.word	0x20000540
 80039b0:	2000050c 	.word	0x2000050c
 80039b4:	20000510 	.word	0x20000510

080039b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039be:	e01a      	b.n	80039f6 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80039c0:	f000 f976 	bl	8003cb0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039c4:	4b10      	ldr	r3, [pc, #64]	; (8003a08 <prvCheckTasksWaitingTermination+0x50>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3304      	adds	r3, #4
 80039d0:	0018      	movs	r0, r3
 80039d2:	f7ff fbf0 	bl	80031b6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80039d6:	4b0d      	ldr	r3, [pc, #52]	; (8003a0c <prvCheckTasksWaitingTermination+0x54>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	1e5a      	subs	r2, r3, #1
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <prvCheckTasksWaitingTermination+0x54>)
 80039de:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <prvCheckTasksWaitingTermination+0x58>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	1e5a      	subs	r2, r3, #1
 80039e6:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <prvCheckTasksWaitingTermination+0x58>)
 80039e8:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80039ea:	f000 f973 	bl	8003cd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	0018      	movs	r0, r3
 80039f2:	f000 f80f 	bl	8003a14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039f6:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <prvCheckTasksWaitingTermination+0x58>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1e0      	bne.n	80039c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	46c0      	nop			; (mov r8, r8)
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b002      	add	sp, #8
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	20000528 	.word	0x20000528
 8003a0c:	20000554 	.word	0x20000554
 8003a10:	2000053c 	.word	0x2000053c

08003a14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2251      	movs	r2, #81	; 0x51
 8003a20:	5c9b      	ldrb	r3, [r3, r2]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f000 fa7e 	bl	8003f2c <vPortFree>
				vPortFree( pxTCB );
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	0018      	movs	r0, r3
 8003a34:	f000 fa7a 	bl	8003f2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003a38:	e010      	b.n	8003a5c <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2251      	movs	r2, #81	; 0x51
 8003a3e:	5c9b      	ldrb	r3, [r3, r2]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d104      	bne.n	8003a4e <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	0018      	movs	r0, r3
 8003a48:	f000 fa70 	bl	8003f2c <vPortFree>
	}
 8003a4c:	e006      	b.n	8003a5c <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2251      	movs	r2, #81	; 0x51
 8003a52:	5c9b      	ldrb	r3, [r3, r2]
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d001      	beq.n	8003a5c <prvDeleteTCB+0x48>
 8003a58:	b672      	cpsid	i
 8003a5a:	e7fe      	b.n	8003a5a <prvDeleteTCB+0x46>
	}
 8003a5c:	46c0      	nop			; (mov r8, r8)
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	b002      	add	sp, #8
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a6a:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <prvResetNextTaskUnblockTime+0x34>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d104      	bne.n	8003a7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a74:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <prvResetNextTaskUnblockTime+0x38>)
 8003a76:	2201      	movs	r2, #1
 8003a78:	4252      	negs	r2, r2
 8003a7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003a7c:	e008      	b.n	8003a90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a7e:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <prvResetNextTaskUnblockTime+0x34>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	4b03      	ldr	r3, [pc, #12]	; (8003a9c <prvResetNextTaskUnblockTime+0x38>)
 8003a8e:	601a      	str	r2, [r3, #0]
}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b002      	add	sp, #8
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	2000050c 	.word	0x2000050c
 8003a9c:	20000574 	.word	0x20000574

08003aa0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003aa6:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <xTaskGetSchedulerState+0x30>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d102      	bne.n	8003ab4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	607b      	str	r3, [r7, #4]
 8003ab2:	e008      	b.n	8003ac6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ab4:	4b07      	ldr	r3, [pc, #28]	; (8003ad4 <xTaskGetSchedulerState+0x34>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d102      	bne.n	8003ac2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003abc:	2302      	movs	r3, #2
 8003abe:	607b      	str	r3, [r7, #4]
 8003ac0:	e001      	b.n	8003ac6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003ac6:	687b      	ldr	r3, [r7, #4]
	}
 8003ac8:	0018      	movs	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b002      	add	sp, #8
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20000560 	.word	0x20000560
 8003ad4:	2000057c 	.word	0x2000057c

08003ad8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ae2:	4b21      	ldr	r3, [pc, #132]	; (8003b68 <prvAddCurrentTaskToDelayedList+0x90>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ae8:	4b20      	ldr	r3, [pc, #128]	; (8003b6c <prvAddCurrentTaskToDelayedList+0x94>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3304      	adds	r3, #4
 8003aee:	0018      	movs	r0, r3
 8003af0:	f7ff fb61 	bl	80031b6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3301      	adds	r3, #1
 8003af8:	d10b      	bne.n	8003b12 <prvAddCurrentTaskToDelayedList+0x3a>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b00:	4b1a      	ldr	r3, [pc, #104]	; (8003b6c <prvAddCurrentTaskToDelayedList+0x94>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	1d1a      	adds	r2, r3, #4
 8003b06:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <prvAddCurrentTaskToDelayedList+0x98>)
 8003b08:	0011      	movs	r1, r2
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f7ff fafb 	bl	8003106 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b10:	e026      	b.n	8003b60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	18d3      	adds	r3, r2, r3
 8003b18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b1a:	4b14      	ldr	r3, [pc, #80]	; (8003b6c <prvAddCurrentTaskToDelayedList+0x94>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d209      	bcs.n	8003b3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b2a:	4b12      	ldr	r3, [pc, #72]	; (8003b74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <prvAddCurrentTaskToDelayedList+0x94>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3304      	adds	r3, #4
 8003b34:	0019      	movs	r1, r3
 8003b36:	0010      	movs	r0, r2
 8003b38:	f7ff fb07 	bl	800314a <vListInsert>
}
 8003b3c:	e010      	b.n	8003b60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b3e:	4b0e      	ldr	r3, [pc, #56]	; (8003b78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <prvAddCurrentTaskToDelayedList+0x94>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3304      	adds	r3, #4
 8003b48:	0019      	movs	r1, r3
 8003b4a:	0010      	movs	r0, r2
 8003b4c:	f7ff fafd 	bl	800314a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b50:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d202      	bcs.n	8003b60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003b5a:	4b08      	ldr	r3, [pc, #32]	; (8003b7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	601a      	str	r2, [r3, #0]
}
 8003b60:	46c0      	nop			; (mov r8, r8)
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b004      	add	sp, #16
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20000558 	.word	0x20000558
 8003b6c:	20000454 	.word	0x20000454
 8003b70:	20000540 	.word	0x20000540
 8003b74:	20000510 	.word	0x20000510
 8003b78:	2000050c 	.word	0x2000050c
 8003b7c:	20000574 	.word	0x20000574

08003b80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3b04      	subs	r3, #4
 8003b90:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2280      	movs	r2, #128	; 0x80
 8003b96:	0452      	lsls	r2, r2, #17
 8003b98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	3b04      	subs	r3, #4
 8003b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	3b04      	subs	r3, #4
 8003baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003bac:	4a08      	ldr	r2, [pc, #32]	; (8003bd0 <pxPortInitialiseStack+0x50>)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	3b14      	subs	r3, #20
 8003bb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	3b20      	subs	r3, #32
 8003bc2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
}
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	b004      	add	sp, #16
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	08003bd5 	.word	0x08003bd5

08003bd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003bde:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <prvTaskExitError+0x2c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3301      	adds	r3, #1
 8003be4:	d001      	beq.n	8003bea <prvTaskExitError+0x16>
 8003be6:	b672      	cpsid	i
 8003be8:	e7fe      	b.n	8003be8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8003bea:	b672      	cpsid	i
	while( ulDummy == 0 )
 8003bec:	46c0      	nop			; (mov r8, r8)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0fc      	beq.n	8003bee <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	b002      	add	sp, #8
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	2000011c 	.word	0x2000011c

08003c04 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8003c08:	46c0      	nop			; (mov r8, r8)
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8003c10:	4a0b      	ldr	r2, [pc, #44]	; (8003c40 <pxCurrentTCBConst2>)
 8003c12:	6813      	ldr	r3, [r2, #0]
 8003c14:	6818      	ldr	r0, [r3, #0]
 8003c16:	3020      	adds	r0, #32
 8003c18:	f380 8809 	msr	PSP, r0
 8003c1c:	2002      	movs	r0, #2
 8003c1e:	f380 8814 	msr	CONTROL, r0
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003c28:	46ae      	mov	lr, r5
 8003c2a:	bc08      	pop	{r3}
 8003c2c:	bc04      	pop	{r2}
 8003c2e:	b662      	cpsie	i
 8003c30:	4718      	bx	r3
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	46c0      	nop			; (mov r8, r8)
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	46c0      	nop			; (mov r8, r8)
 8003c3e:	46c0      	nop			; (mov r8, r8)

08003c40 <pxCurrentTCBConst2>:
 8003c40:	20000454 	.word	0x20000454
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8003c44:	46c0      	nop			; (mov r8, r8)
 8003c46:	46c0      	nop			; (mov r8, r8)

08003c48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8003c4c:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <xPortStartScheduler+0x40>)
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <xPortStartScheduler+0x40>)
 8003c52:	21ff      	movs	r1, #255	; 0xff
 8003c54:	0409      	lsls	r1, r1, #16
 8003c56:	430a      	orrs	r2, r1
 8003c58:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <xPortStartScheduler+0x40>)
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <xPortStartScheduler+0x40>)
 8003c60:	21ff      	movs	r1, #255	; 0xff
 8003c62:	0609      	lsls	r1, r1, #24
 8003c64:	430a      	orrs	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8003c68:	f000 f898 	bl	8003d9c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003c6c:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <xPortStartScheduler+0x44>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8003c72:	f7ff ffcd 	bl	8003c10 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003c76:	f7ff fdf9 	bl	800386c <vTaskSwitchContext>
	prvTaskExitError();
 8003c7a:	f7ff ffab 	bl	8003bd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	0018      	movs	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	46c0      	nop			; (mov r8, r8)
 8003c88:	e000ed20 	.word	0xe000ed20
 8003c8c:	2000011c 	.word	0x2000011c

08003c90 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8003c94:	4b05      	ldr	r3, [pc, #20]	; (8003cac <vPortYield+0x1c>)
 8003c96:	2280      	movs	r2, #128	; 0x80
 8003c98:	0552      	lsls	r2, r2, #21
 8003c9a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8003c9c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003ca0:	f3bf 8f6f 	isb	sy
}
 8003ca4:	46c0      	nop			; (mov r8, r8)
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	e000ed04 	.word	0xe000ed04

08003cb0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003cb4:	b672      	cpsid	i
    uxCriticalNesting++;
 8003cb6:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <vPortEnterCritical+0x20>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	4b04      	ldr	r3, [pc, #16]	; (8003cd0 <vPortEnterCritical+0x20>)
 8003cbe:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8003cc0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003cc4:	f3bf 8f6f 	isb	sy
}
 8003cc8:	46c0      	nop			; (mov r8, r8)
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	2000011c 	.word	0x2000011c

08003cd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003cd8:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <vPortExitCritical+0x2c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <vPortExitCritical+0x10>
 8003ce0:	b672      	cpsid	i
 8003ce2:	e7fe      	b.n	8003ce2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003ce4:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <vPortExitCritical+0x2c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	1e5a      	subs	r2, r3, #1
 8003cea:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <vPortExitCritical+0x2c>)
 8003cec:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8003cee:	4b04      	ldr	r3, [pc, #16]	; (8003d00 <vPortExitCritical+0x2c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d100      	bne.n	8003cf8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8003cf6:	b662      	cpsie	i
    }
}
 8003cf8:	46c0      	nop			; (mov r8, r8)
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	2000011c 	.word	0x2000011c

08003d04 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8003d04:	f3ef 8010 	mrs	r0, PRIMASK
 8003d08:	b672      	cpsid	i
 8003d0a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8003d0c:	46c0      	nop			; (mov r8, r8)
 8003d0e:	0018      	movs	r0, r3

08003d10 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8003d10:	f380 8810 	msr	PRIMASK, r0
 8003d14:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8003d16:	46c0      	nop			; (mov r8, r8)
	...

08003d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d20:	f3ef 8009 	mrs	r0, PSP
 8003d24:	4b0e      	ldr	r3, [pc, #56]	; (8003d60 <pxCurrentTCBConst>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	3820      	subs	r0, #32
 8003d2a:	6010      	str	r0, [r2, #0]
 8003d2c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003d2e:	4644      	mov	r4, r8
 8003d30:	464d      	mov	r5, r9
 8003d32:	4656      	mov	r6, sl
 8003d34:	465f      	mov	r7, fp
 8003d36:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003d38:	b508      	push	{r3, lr}
 8003d3a:	b672      	cpsid	i
 8003d3c:	f7ff fd96 	bl	800386c <vTaskSwitchContext>
 8003d40:	b662      	cpsie	i
 8003d42:	bc0c      	pop	{r2, r3}
 8003d44:	6811      	ldr	r1, [r2, #0]
 8003d46:	6808      	ldr	r0, [r1, #0]
 8003d48:	3010      	adds	r0, #16
 8003d4a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003d4c:	46a0      	mov	r8, r4
 8003d4e:	46a9      	mov	r9, r5
 8003d50:	46b2      	mov	sl, r6
 8003d52:	46bb      	mov	fp, r7
 8003d54:	f380 8809 	msr	PSP, r0
 8003d58:	3820      	subs	r0, #32
 8003d5a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003d5c:	4718      	bx	r3
 8003d5e:	46c0      	nop			; (mov r8, r8)

08003d60 <pxCurrentTCBConst>:
 8003d60:	20000454 	.word	0x20000454
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8003d64:	46c0      	nop			; (mov r8, r8)
 8003d66:	46c0      	nop			; (mov r8, r8)

08003d68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d6e:	f7ff ffc9 	bl	8003d04 <ulSetInterruptMaskFromISR>
 8003d72:	0003      	movs	r3, r0
 8003d74:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003d76:	f7ff fcc9 	bl	800370c <xTaskIncrementTick>
 8003d7a:	1e03      	subs	r3, r0, #0
 8003d7c:	d003      	beq.n	8003d86 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8003d7e:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <xPortSysTickHandler+0x30>)
 8003d80:	2280      	movs	r2, #128	; 0x80
 8003d82:	0552      	lsls	r2, r2, #21
 8003d84:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f7ff ffc1 	bl	8003d10 <vClearInterruptMaskFromISR>
}
 8003d8e:	46c0      	nop			; (mov r8, r8)
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b002      	add	sp, #8
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	e000ed04 	.word	0xe000ed04

08003d9c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <prvSetupTimerInterrupt+0x34>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8003da6:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <prvSetupTimerInterrupt+0x38>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003dac:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <prvSetupTimerInterrupt+0x3c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	22fa      	movs	r2, #250	; 0xfa
 8003db2:	0091      	lsls	r1, r2, #2
 8003db4:	0018      	movs	r0, r3
 8003db6:	f7fc f9a7 	bl	8000108 <__udivsi3>
 8003dba:	0003      	movs	r3, r0
 8003dbc:	001a      	movs	r2, r3
 8003dbe:	4b07      	ldr	r3, [pc, #28]	; (8003ddc <prvSetupTimerInterrupt+0x40>)
 8003dc0:	3a01      	subs	r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003dc4:	4b02      	ldr	r3, [pc, #8]	; (8003dd0 <prvSetupTimerInterrupt+0x34>)
 8003dc6:	2207      	movs	r2, #7
 8003dc8:	601a      	str	r2, [r3, #0]
}
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	e000e010 	.word	0xe000e010
 8003dd4:	e000e018 	.word	0xe000e018
 8003dd8:	20000110 	.word	0x20000110
 8003ddc:	e000e014 	.word	0xe000e014

08003de0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8003dec:	f7ff fbf6 	bl	80035dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003df0:	4b49      	ldr	r3, [pc, #292]	; (8003f18 <pvPortMalloc+0x138>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003df8:	f000 f8e0 	bl	8003fbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003dfc:	4b47      	ldr	r3, [pc, #284]	; (8003f1c <pvPortMalloc+0x13c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	4013      	ands	r3, r2
 8003e04:	d000      	beq.n	8003e08 <pvPortMalloc+0x28>
 8003e06:	e079      	b.n	8003efc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d012      	beq.n	8003e34 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8003e0e:	2208      	movs	r2, #8
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	189b      	adds	r3, r3, r2
 8003e14:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2207      	movs	r2, #7
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d00a      	beq.n	8003e34 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2207      	movs	r2, #7
 8003e22:	4393      	bics	r3, r2
 8003e24:	3308      	adds	r3, #8
 8003e26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2207      	movs	r2, #7
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d001      	beq.n	8003e34 <pvPortMalloc+0x54>
 8003e30:	b672      	cpsid	i
 8003e32:	e7fe      	b.n	8003e32 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d060      	beq.n	8003efc <pvPortMalloc+0x11c>
 8003e3a:	4b39      	ldr	r3, [pc, #228]	; (8003f20 <pvPortMalloc+0x140>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d85b      	bhi.n	8003efc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003e44:	4b37      	ldr	r3, [pc, #220]	; (8003f24 <pvPortMalloc+0x144>)
 8003e46:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8003e48:	4b36      	ldr	r3, [pc, #216]	; (8003f24 <pvPortMalloc+0x144>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e4e:	e004      	b.n	8003e5a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d903      	bls.n	8003e6c <pvPortMalloc+0x8c>
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1f1      	bne.n	8003e50 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003e6c:	4b2a      	ldr	r3, [pc, #168]	; (8003f18 <pvPortMalloc+0x138>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d042      	beq.n	8003efc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2208      	movs	r2, #8
 8003e7c:	189b      	adds	r3, r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	1ad2      	subs	r2, r2, r3
 8003e90:	2308      	movs	r3, #8
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d916      	bls.n	8003ec6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	18d3      	adds	r3, r2, r3
 8003e9e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2207      	movs	r2, #7
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	d001      	beq.n	8003eac <pvPortMalloc+0xcc>
 8003ea8:	b672      	cpsid	i
 8003eaa:	e7fe      	b.n	8003eaa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	1ad2      	subs	r2, r2, r3
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f000 f8db 	bl	800407c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003ec6:	4b16      	ldr	r3, [pc, #88]	; (8003f20 <pvPortMalloc+0x140>)
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	1ad2      	subs	r2, r2, r3
 8003ed0:	4b13      	ldr	r3, [pc, #76]	; (8003f20 <pvPortMalloc+0x140>)
 8003ed2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003ed4:	4b12      	ldr	r3, [pc, #72]	; (8003f20 <pvPortMalloc+0x140>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	4b13      	ldr	r3, [pc, #76]	; (8003f28 <pvPortMalloc+0x148>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d203      	bcs.n	8003ee8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003ee0:	4b0f      	ldr	r3, [pc, #60]	; (8003f20 <pvPortMalloc+0x140>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	4b10      	ldr	r3, [pc, #64]	; (8003f28 <pvPortMalloc+0x148>)
 8003ee6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <pvPortMalloc+0x13c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003efc:	f7ff fb7a 	bl	80035f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2207      	movs	r2, #7
 8003f04:	4013      	ands	r3, r2
 8003f06:	d001      	beq.n	8003f0c <pvPortMalloc+0x12c>
 8003f08:	b672      	cpsid	i
 8003f0a:	e7fe      	b.n	8003f0a <pvPortMalloc+0x12a>
	return pvReturn;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
}
 8003f0e:	0018      	movs	r0, r3
 8003f10:	46bd      	mov	sp, r7
 8003f12:	b006      	add	sp, #24
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	20001188 	.word	0x20001188
 8003f1c:	20001194 	.word	0x20001194
 8003f20:	2000118c 	.word	0x2000118c
 8003f24:	20001180 	.word	0x20001180
 8003f28:	20001190 	.word	0x20001190

08003f2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d035      	beq.n	8003faa <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003f3e:	2308      	movs	r3, #8
 8003f40:	425b      	negs	r3, r3
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	18d3      	adds	r3, r2, r3
 8003f46:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	4b18      	ldr	r3, [pc, #96]	; (8003fb4 <vPortFree+0x88>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4013      	ands	r3, r2
 8003f56:	d101      	bne.n	8003f5c <vPortFree+0x30>
 8003f58:	b672      	cpsid	i
 8003f5a:	e7fe      	b.n	8003f5a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <vPortFree+0x3c>
 8003f64:	b672      	cpsid	i
 8003f66:	e7fe      	b.n	8003f66 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <vPortFree+0x88>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4013      	ands	r3, r2
 8003f72:	d01a      	beq.n	8003faa <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d116      	bne.n	8003faa <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <vPortFree+0x88>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	43db      	mvns	r3, r3
 8003f86:	401a      	ands	r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003f8c:	f7ff fb26 	bl	80035dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	4b08      	ldr	r3, [pc, #32]	; (8003fb8 <vPortFree+0x8c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	18d2      	adds	r2, r2, r3
 8003f9a:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <vPortFree+0x8c>)
 8003f9c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	f000 f86b 	bl	800407c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003fa6:	f7ff fb25 	bl	80035f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	46bd      	mov	sp, r7
 8003fae:	b004      	add	sp, #16
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	46c0      	nop			; (mov r8, r8)
 8003fb4:	20001194 	.word	0x20001194
 8003fb8:	2000118c 	.word	0x2000118c

08003fbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003fc2:	23c0      	movs	r3, #192	; 0xc0
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003fc8:	4b26      	ldr	r3, [pc, #152]	; (8004064 <prvHeapInit+0xa8>)
 8003fca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2207      	movs	r2, #7
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	d00c      	beq.n	8003fee <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	3307      	adds	r3, #7
 8003fd8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2207      	movs	r2, #7
 8003fde:	4393      	bics	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	1ad2      	subs	r2, r2, r3
 8003fe8:	4b1e      	ldr	r3, [pc, #120]	; (8004064 <prvHeapInit+0xa8>)
 8003fea:	18d3      	adds	r3, r2, r3
 8003fec:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ff2:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <prvHeapInit+0xac>)
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003ff8:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <prvHeapInit+0xac>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	18d3      	adds	r3, r2, r3
 8004004:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004006:	2208      	movs	r2, #8
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	1a9b      	subs	r3, r3, r2
 800400c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2207      	movs	r2, #7
 8004012:	4393      	bics	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4b14      	ldr	r3, [pc, #80]	; (800406c <prvHeapInit+0xb0>)
 800401a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800401c:	4b13      	ldr	r3, [pc, #76]	; (800406c <prvHeapInit+0xb0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2200      	movs	r2, #0
 8004022:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004024:	4b11      	ldr	r3, [pc, #68]	; (800406c <prvHeapInit+0xb0>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	1ad2      	subs	r2, r2, r3
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800403a:	4b0c      	ldr	r3, [pc, #48]	; (800406c <prvHeapInit+0xb0>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <prvHeapInit+0xb4>)
 8004048:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	4b09      	ldr	r3, [pc, #36]	; (8004074 <prvHeapInit+0xb8>)
 8004050:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004052:	4b09      	ldr	r3, [pc, #36]	; (8004078 <prvHeapInit+0xbc>)
 8004054:	2280      	movs	r2, #128	; 0x80
 8004056:	0612      	lsls	r2, r2, #24
 8004058:	601a      	str	r2, [r3, #0]
}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	46bd      	mov	sp, r7
 800405e:	b004      	add	sp, #16
 8004060:	bd80      	pop	{r7, pc}
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	20000580 	.word	0x20000580
 8004068:	20001180 	.word	0x20001180
 800406c:	20001188 	.word	0x20001188
 8004070:	20001190 	.word	0x20001190
 8004074:	2000118c 	.word	0x2000118c
 8004078:	20001194 	.word	0x20001194

0800407c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004084:	4b27      	ldr	r3, [pc, #156]	; (8004124 <prvInsertBlockIntoFreeList+0xa8>)
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	e002      	b.n	8004090 <prvInsertBlockIntoFreeList+0x14>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	429a      	cmp	r2, r3
 8004098:	d8f7      	bhi.n	800408a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	18d3      	adds	r3, r2, r3
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d108      	bne.n	80040be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	18d2      	adds	r2, r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	18d2      	adds	r2, r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d118      	bne.n	8004104 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	4b14      	ldr	r3, [pc, #80]	; (8004128 <prvInsertBlockIntoFreeList+0xac>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d00d      	beq.n	80040fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	18d2      	adds	r2, r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	e008      	b.n	800410c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80040fa:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <prvInsertBlockIntoFreeList+0xac>)
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	e003      	b.n	800410c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	429a      	cmp	r2, r3
 8004112:	d002      	beq.n	800411a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	46bd      	mov	sp, r7
 800411e:	b004      	add	sp, #16
 8004120:	bd80      	pop	{r7, pc}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	20001180 	.word	0x20001180
 8004128:	20001188 	.word	0x20001188

0800412c <memset>:
 800412c:	0003      	movs	r3, r0
 800412e:	1882      	adds	r2, r0, r2
 8004130:	4293      	cmp	r3, r2
 8004132:	d100      	bne.n	8004136 <memset+0xa>
 8004134:	4770      	bx	lr
 8004136:	7019      	strb	r1, [r3, #0]
 8004138:	3301      	adds	r3, #1
 800413a:	e7f9      	b.n	8004130 <memset+0x4>

0800413c <__libc_init_array>:
 800413c:	b570      	push	{r4, r5, r6, lr}
 800413e:	2600      	movs	r6, #0
 8004140:	4c0c      	ldr	r4, [pc, #48]	; (8004174 <__libc_init_array+0x38>)
 8004142:	4d0d      	ldr	r5, [pc, #52]	; (8004178 <__libc_init_array+0x3c>)
 8004144:	1b64      	subs	r4, r4, r5
 8004146:	10a4      	asrs	r4, r4, #2
 8004148:	42a6      	cmp	r6, r4
 800414a:	d109      	bne.n	8004160 <__libc_init_array+0x24>
 800414c:	2600      	movs	r6, #0
 800414e:	f000 f819 	bl	8004184 <_init>
 8004152:	4c0a      	ldr	r4, [pc, #40]	; (800417c <__libc_init_array+0x40>)
 8004154:	4d0a      	ldr	r5, [pc, #40]	; (8004180 <__libc_init_array+0x44>)
 8004156:	1b64      	subs	r4, r4, r5
 8004158:	10a4      	asrs	r4, r4, #2
 800415a:	42a6      	cmp	r6, r4
 800415c:	d105      	bne.n	800416a <__libc_init_array+0x2e>
 800415e:	bd70      	pop	{r4, r5, r6, pc}
 8004160:	00b3      	lsls	r3, r6, #2
 8004162:	58eb      	ldr	r3, [r5, r3]
 8004164:	4798      	blx	r3
 8004166:	3601      	adds	r6, #1
 8004168:	e7ee      	b.n	8004148 <__libc_init_array+0xc>
 800416a:	00b3      	lsls	r3, r6, #2
 800416c:	58eb      	ldr	r3, [r5, r3]
 800416e:	4798      	blx	r3
 8004170:	3601      	adds	r6, #1
 8004172:	e7f2      	b.n	800415a <__libc_init_array+0x1e>
 8004174:	08004208 	.word	0x08004208
 8004178:	08004208 	.word	0x08004208
 800417c:	0800420c 	.word	0x0800420c
 8004180:	08004208 	.word	0x08004208

08004184 <_init>:
 8004184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800418a:	bc08      	pop	{r3}
 800418c:	469e      	mov	lr, r3
 800418e:	4770      	bx	lr

08004190 <_fini>:
 8004190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004196:	bc08      	pop	{r3}
 8004198:	469e      	mov	lr, r3
 800419a:	4770      	bx	lr
