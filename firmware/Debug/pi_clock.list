
pi_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f0c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004fcc  08004fcc  00014fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050c0  080050c0  00020124  2**0
                  CONTENTS
  4 .ARM          00000008  080050c0  080050c0  000150c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050c8  080050c8  00020124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050c8  080050c8  000150c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050cc  080050cc  000150cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  080050d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000124  080051f4  00020124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  080051f4  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f8c0  00000000  00000000  0002018f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002127  00000000  00000000  0002fa4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed8  00000000  00000000  00031b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ba2  00000000  00000000  00032a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011b9f  00000000  00000000  000335f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012b4f  00000000  00000000  00045191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006e1dd  00000000  00000000  00057ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000036a4  00000000  00000000  000c5ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000c9564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000124 	.word	0x20000124
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004fb4 	.word	0x08004fb4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000128 	.word	0x20000128
 8000104:	08004fb4 	.word	0x08004fb4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 fd28 	bl	8000d30 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 fd23 	bl	8000d30 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__aeabi_fdiv>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	464f      	mov	r7, r9
 8000458:	4646      	mov	r6, r8
 800045a:	46d6      	mov	lr, sl
 800045c:	0245      	lsls	r5, r0, #9
 800045e:	b5c0      	push	{r6, r7, lr}
 8000460:	0047      	lsls	r7, r0, #1
 8000462:	1c0c      	adds	r4, r1, #0
 8000464:	0a6d      	lsrs	r5, r5, #9
 8000466:	0e3f      	lsrs	r7, r7, #24
 8000468:	0fc6      	lsrs	r6, r0, #31
 800046a:	2f00      	cmp	r7, #0
 800046c:	d100      	bne.n	8000470 <__aeabi_fdiv+0x1c>
 800046e:	e06f      	b.n	8000550 <__aeabi_fdiv+0xfc>
 8000470:	2fff      	cmp	r7, #255	; 0xff
 8000472:	d100      	bne.n	8000476 <__aeabi_fdiv+0x22>
 8000474:	e074      	b.n	8000560 <__aeabi_fdiv+0x10c>
 8000476:	2300      	movs	r3, #0
 8000478:	2280      	movs	r2, #128	; 0x80
 800047a:	4699      	mov	r9, r3
 800047c:	469a      	mov	sl, r3
 800047e:	00ed      	lsls	r5, r5, #3
 8000480:	04d2      	lsls	r2, r2, #19
 8000482:	4315      	orrs	r5, r2
 8000484:	3f7f      	subs	r7, #127	; 0x7f
 8000486:	0263      	lsls	r3, r4, #9
 8000488:	0a5b      	lsrs	r3, r3, #9
 800048a:	4698      	mov	r8, r3
 800048c:	0063      	lsls	r3, r4, #1
 800048e:	0e1b      	lsrs	r3, r3, #24
 8000490:	0fe4      	lsrs	r4, r4, #31
 8000492:	2b00      	cmp	r3, #0
 8000494:	d04d      	beq.n	8000532 <__aeabi_fdiv+0xde>
 8000496:	2bff      	cmp	r3, #255	; 0xff
 8000498:	d045      	beq.n	8000526 <__aeabi_fdiv+0xd2>
 800049a:	4642      	mov	r2, r8
 800049c:	2180      	movs	r1, #128	; 0x80
 800049e:	00d2      	lsls	r2, r2, #3
 80004a0:	04c9      	lsls	r1, r1, #19
 80004a2:	4311      	orrs	r1, r2
 80004a4:	4688      	mov	r8, r1
 80004a6:	2200      	movs	r2, #0
 80004a8:	3b7f      	subs	r3, #127	; 0x7f
 80004aa:	0031      	movs	r1, r6
 80004ac:	1aff      	subs	r7, r7, r3
 80004ae:	464b      	mov	r3, r9
 80004b0:	4061      	eors	r1, r4
 80004b2:	b2c9      	uxtb	r1, r1
 80004b4:	2b0f      	cmp	r3, #15
 80004b6:	d900      	bls.n	80004ba <__aeabi_fdiv+0x66>
 80004b8:	e0b8      	b.n	800062c <__aeabi_fdiv+0x1d8>
 80004ba:	4870      	ldr	r0, [pc, #448]	; (800067c <__aeabi_fdiv+0x228>)
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	58c3      	ldr	r3, [r0, r3]
 80004c0:	469f      	mov	pc, r3
 80004c2:	2300      	movs	r3, #0
 80004c4:	4698      	mov	r8, r3
 80004c6:	0026      	movs	r6, r4
 80004c8:	4645      	mov	r5, r8
 80004ca:	4692      	mov	sl, r2
 80004cc:	4653      	mov	r3, sl
 80004ce:	2b02      	cmp	r3, #2
 80004d0:	d100      	bne.n	80004d4 <__aeabi_fdiv+0x80>
 80004d2:	e08d      	b.n	80005f0 <__aeabi_fdiv+0x19c>
 80004d4:	2b03      	cmp	r3, #3
 80004d6:	d100      	bne.n	80004da <__aeabi_fdiv+0x86>
 80004d8:	e0a1      	b.n	800061e <__aeabi_fdiv+0x1ca>
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d018      	beq.n	8000510 <__aeabi_fdiv+0xbc>
 80004de:	003b      	movs	r3, r7
 80004e0:	337f      	adds	r3, #127	; 0x7f
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	dd6d      	ble.n	80005c2 <__aeabi_fdiv+0x16e>
 80004e6:	076a      	lsls	r2, r5, #29
 80004e8:	d004      	beq.n	80004f4 <__aeabi_fdiv+0xa0>
 80004ea:	220f      	movs	r2, #15
 80004ec:	402a      	ands	r2, r5
 80004ee:	2a04      	cmp	r2, #4
 80004f0:	d000      	beq.n	80004f4 <__aeabi_fdiv+0xa0>
 80004f2:	3504      	adds	r5, #4
 80004f4:	012a      	lsls	r2, r5, #4
 80004f6:	d503      	bpl.n	8000500 <__aeabi_fdiv+0xac>
 80004f8:	4b61      	ldr	r3, [pc, #388]	; (8000680 <__aeabi_fdiv+0x22c>)
 80004fa:	401d      	ands	r5, r3
 80004fc:	003b      	movs	r3, r7
 80004fe:	3380      	adds	r3, #128	; 0x80
 8000500:	2bfe      	cmp	r3, #254	; 0xfe
 8000502:	dd00      	ble.n	8000506 <__aeabi_fdiv+0xb2>
 8000504:	e074      	b.n	80005f0 <__aeabi_fdiv+0x19c>
 8000506:	01aa      	lsls	r2, r5, #6
 8000508:	0a52      	lsrs	r2, r2, #9
 800050a:	b2d8      	uxtb	r0, r3
 800050c:	e002      	b.n	8000514 <__aeabi_fdiv+0xc0>
 800050e:	000e      	movs	r6, r1
 8000510:	2000      	movs	r0, #0
 8000512:	2200      	movs	r2, #0
 8000514:	05c0      	lsls	r0, r0, #23
 8000516:	07f6      	lsls	r6, r6, #31
 8000518:	4310      	orrs	r0, r2
 800051a:	4330      	orrs	r0, r6
 800051c:	bce0      	pop	{r5, r6, r7}
 800051e:	46ba      	mov	sl, r7
 8000520:	46b1      	mov	r9, r6
 8000522:	46a8      	mov	r8, r5
 8000524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000526:	4643      	mov	r3, r8
 8000528:	2b00      	cmp	r3, #0
 800052a:	d13f      	bne.n	80005ac <__aeabi_fdiv+0x158>
 800052c:	2202      	movs	r2, #2
 800052e:	3fff      	subs	r7, #255	; 0xff
 8000530:	e003      	b.n	800053a <__aeabi_fdiv+0xe6>
 8000532:	4643      	mov	r3, r8
 8000534:	2b00      	cmp	r3, #0
 8000536:	d12d      	bne.n	8000594 <__aeabi_fdiv+0x140>
 8000538:	2201      	movs	r2, #1
 800053a:	0031      	movs	r1, r6
 800053c:	464b      	mov	r3, r9
 800053e:	4061      	eors	r1, r4
 8000540:	b2c9      	uxtb	r1, r1
 8000542:	4313      	orrs	r3, r2
 8000544:	2b0f      	cmp	r3, #15
 8000546:	d838      	bhi.n	80005ba <__aeabi_fdiv+0x166>
 8000548:	484e      	ldr	r0, [pc, #312]	; (8000684 <__aeabi_fdiv+0x230>)
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	58c3      	ldr	r3, [r0, r3]
 800054e:	469f      	mov	pc, r3
 8000550:	2d00      	cmp	r5, #0
 8000552:	d113      	bne.n	800057c <__aeabi_fdiv+0x128>
 8000554:	2304      	movs	r3, #4
 8000556:	4699      	mov	r9, r3
 8000558:	3b03      	subs	r3, #3
 800055a:	2700      	movs	r7, #0
 800055c:	469a      	mov	sl, r3
 800055e:	e792      	b.n	8000486 <__aeabi_fdiv+0x32>
 8000560:	2d00      	cmp	r5, #0
 8000562:	d105      	bne.n	8000570 <__aeabi_fdiv+0x11c>
 8000564:	2308      	movs	r3, #8
 8000566:	4699      	mov	r9, r3
 8000568:	3b06      	subs	r3, #6
 800056a:	27ff      	movs	r7, #255	; 0xff
 800056c:	469a      	mov	sl, r3
 800056e:	e78a      	b.n	8000486 <__aeabi_fdiv+0x32>
 8000570:	230c      	movs	r3, #12
 8000572:	4699      	mov	r9, r3
 8000574:	3b09      	subs	r3, #9
 8000576:	27ff      	movs	r7, #255	; 0xff
 8000578:	469a      	mov	sl, r3
 800057a:	e784      	b.n	8000486 <__aeabi_fdiv+0x32>
 800057c:	0028      	movs	r0, r5
 800057e:	f000 fbb9 	bl	8000cf4 <__clzsi2>
 8000582:	2776      	movs	r7, #118	; 0x76
 8000584:	1f43      	subs	r3, r0, #5
 8000586:	409d      	lsls	r5, r3
 8000588:	2300      	movs	r3, #0
 800058a:	427f      	negs	r7, r7
 800058c:	4699      	mov	r9, r3
 800058e:	469a      	mov	sl, r3
 8000590:	1a3f      	subs	r7, r7, r0
 8000592:	e778      	b.n	8000486 <__aeabi_fdiv+0x32>
 8000594:	4640      	mov	r0, r8
 8000596:	f000 fbad 	bl	8000cf4 <__clzsi2>
 800059a:	4642      	mov	r2, r8
 800059c:	1f43      	subs	r3, r0, #5
 800059e:	409a      	lsls	r2, r3
 80005a0:	2376      	movs	r3, #118	; 0x76
 80005a2:	425b      	negs	r3, r3
 80005a4:	4690      	mov	r8, r2
 80005a6:	1a1b      	subs	r3, r3, r0
 80005a8:	2200      	movs	r2, #0
 80005aa:	e77e      	b.n	80004aa <__aeabi_fdiv+0x56>
 80005ac:	2303      	movs	r3, #3
 80005ae:	464a      	mov	r2, r9
 80005b0:	431a      	orrs	r2, r3
 80005b2:	4691      	mov	r9, r2
 80005b4:	33fc      	adds	r3, #252	; 0xfc
 80005b6:	2203      	movs	r2, #3
 80005b8:	e777      	b.n	80004aa <__aeabi_fdiv+0x56>
 80005ba:	000e      	movs	r6, r1
 80005bc:	20ff      	movs	r0, #255	; 0xff
 80005be:	2200      	movs	r2, #0
 80005c0:	e7a8      	b.n	8000514 <__aeabi_fdiv+0xc0>
 80005c2:	2201      	movs	r2, #1
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	2b1b      	cmp	r3, #27
 80005c8:	dca2      	bgt.n	8000510 <__aeabi_fdiv+0xbc>
 80005ca:	379e      	adds	r7, #158	; 0x9e
 80005cc:	002a      	movs	r2, r5
 80005ce:	40bd      	lsls	r5, r7
 80005d0:	40da      	lsrs	r2, r3
 80005d2:	1e6b      	subs	r3, r5, #1
 80005d4:	419d      	sbcs	r5, r3
 80005d6:	4315      	orrs	r5, r2
 80005d8:	076a      	lsls	r2, r5, #29
 80005da:	d004      	beq.n	80005e6 <__aeabi_fdiv+0x192>
 80005dc:	220f      	movs	r2, #15
 80005de:	402a      	ands	r2, r5
 80005e0:	2a04      	cmp	r2, #4
 80005e2:	d000      	beq.n	80005e6 <__aeabi_fdiv+0x192>
 80005e4:	3504      	adds	r5, #4
 80005e6:	016a      	lsls	r2, r5, #5
 80005e8:	d544      	bpl.n	8000674 <__aeabi_fdiv+0x220>
 80005ea:	2001      	movs	r0, #1
 80005ec:	2200      	movs	r2, #0
 80005ee:	e791      	b.n	8000514 <__aeabi_fdiv+0xc0>
 80005f0:	20ff      	movs	r0, #255	; 0xff
 80005f2:	2200      	movs	r2, #0
 80005f4:	e78e      	b.n	8000514 <__aeabi_fdiv+0xc0>
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	2600      	movs	r6, #0
 80005fa:	20ff      	movs	r0, #255	; 0xff
 80005fc:	03d2      	lsls	r2, r2, #15
 80005fe:	e789      	b.n	8000514 <__aeabi_fdiv+0xc0>
 8000600:	2300      	movs	r3, #0
 8000602:	4698      	mov	r8, r3
 8000604:	2280      	movs	r2, #128	; 0x80
 8000606:	03d2      	lsls	r2, r2, #15
 8000608:	4215      	tst	r5, r2
 800060a:	d008      	beq.n	800061e <__aeabi_fdiv+0x1ca>
 800060c:	4643      	mov	r3, r8
 800060e:	4213      	tst	r3, r2
 8000610:	d105      	bne.n	800061e <__aeabi_fdiv+0x1ca>
 8000612:	431a      	orrs	r2, r3
 8000614:	0252      	lsls	r2, r2, #9
 8000616:	0026      	movs	r6, r4
 8000618:	20ff      	movs	r0, #255	; 0xff
 800061a:	0a52      	lsrs	r2, r2, #9
 800061c:	e77a      	b.n	8000514 <__aeabi_fdiv+0xc0>
 800061e:	2280      	movs	r2, #128	; 0x80
 8000620:	03d2      	lsls	r2, r2, #15
 8000622:	432a      	orrs	r2, r5
 8000624:	0252      	lsls	r2, r2, #9
 8000626:	20ff      	movs	r0, #255	; 0xff
 8000628:	0a52      	lsrs	r2, r2, #9
 800062a:	e773      	b.n	8000514 <__aeabi_fdiv+0xc0>
 800062c:	4642      	mov	r2, r8
 800062e:	016b      	lsls	r3, r5, #5
 8000630:	0155      	lsls	r5, r2, #5
 8000632:	42ab      	cmp	r3, r5
 8000634:	d21a      	bcs.n	800066c <__aeabi_fdiv+0x218>
 8000636:	201b      	movs	r0, #27
 8000638:	2200      	movs	r2, #0
 800063a:	3f01      	subs	r7, #1
 800063c:	2601      	movs	r6, #1
 800063e:	001c      	movs	r4, r3
 8000640:	0052      	lsls	r2, r2, #1
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	2c00      	cmp	r4, #0
 8000646:	db01      	blt.n	800064c <__aeabi_fdiv+0x1f8>
 8000648:	429d      	cmp	r5, r3
 800064a:	d801      	bhi.n	8000650 <__aeabi_fdiv+0x1fc>
 800064c:	1b5b      	subs	r3, r3, r5
 800064e:	4332      	orrs	r2, r6
 8000650:	3801      	subs	r0, #1
 8000652:	2800      	cmp	r0, #0
 8000654:	d1f3      	bne.n	800063e <__aeabi_fdiv+0x1ea>
 8000656:	1e58      	subs	r0, r3, #1
 8000658:	4183      	sbcs	r3, r0
 800065a:	4313      	orrs	r3, r2
 800065c:	001d      	movs	r5, r3
 800065e:	003b      	movs	r3, r7
 8000660:	337f      	adds	r3, #127	; 0x7f
 8000662:	000e      	movs	r6, r1
 8000664:	2b00      	cmp	r3, #0
 8000666:	dd00      	ble.n	800066a <__aeabi_fdiv+0x216>
 8000668:	e73d      	b.n	80004e6 <__aeabi_fdiv+0x92>
 800066a:	e7aa      	b.n	80005c2 <__aeabi_fdiv+0x16e>
 800066c:	201a      	movs	r0, #26
 800066e:	2201      	movs	r2, #1
 8000670:	1b5b      	subs	r3, r3, r5
 8000672:	e7e3      	b.n	800063c <__aeabi_fdiv+0x1e8>
 8000674:	01aa      	lsls	r2, r5, #6
 8000676:	2000      	movs	r0, #0
 8000678:	0a52      	lsrs	r2, r2, #9
 800067a:	e74b      	b.n	8000514 <__aeabi_fdiv+0xc0>
 800067c:	08004fd4 	.word	0x08004fd4
 8000680:	f7ffffff 	.word	0xf7ffffff
 8000684:	08005014 	.word	0x08005014

08000688 <__aeabi_fmul>:
 8000688:	0243      	lsls	r3, r0, #9
 800068a:	0a5b      	lsrs	r3, r3, #9
 800068c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800068e:	464f      	mov	r7, r9
 8000690:	4646      	mov	r6, r8
 8000692:	4699      	mov	r9, r3
 8000694:	46d6      	mov	lr, sl
 8000696:	0fc3      	lsrs	r3, r0, #31
 8000698:	0045      	lsls	r5, r0, #1
 800069a:	4698      	mov	r8, r3
 800069c:	b5c0      	push	{r6, r7, lr}
 800069e:	464b      	mov	r3, r9
 80006a0:	1c0f      	adds	r7, r1, #0
 80006a2:	0e2d      	lsrs	r5, r5, #24
 80006a4:	d100      	bne.n	80006a8 <__aeabi_fmul+0x20>
 80006a6:	e0cb      	b.n	8000840 <__aeabi_fmul+0x1b8>
 80006a8:	2dff      	cmp	r5, #255	; 0xff
 80006aa:	d100      	bne.n	80006ae <__aeabi_fmul+0x26>
 80006ac:	e0cf      	b.n	800084e <__aeabi_fmul+0x1c6>
 80006ae:	2280      	movs	r2, #128	; 0x80
 80006b0:	00db      	lsls	r3, r3, #3
 80006b2:	04d2      	lsls	r2, r2, #19
 80006b4:	431a      	orrs	r2, r3
 80006b6:	2300      	movs	r3, #0
 80006b8:	4691      	mov	r9, r2
 80006ba:	2600      	movs	r6, #0
 80006bc:	469a      	mov	sl, r3
 80006be:	3d7f      	subs	r5, #127	; 0x7f
 80006c0:	027c      	lsls	r4, r7, #9
 80006c2:	007b      	lsls	r3, r7, #1
 80006c4:	0a64      	lsrs	r4, r4, #9
 80006c6:	0e1b      	lsrs	r3, r3, #24
 80006c8:	0fff      	lsrs	r7, r7, #31
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d100      	bne.n	80006d0 <__aeabi_fmul+0x48>
 80006ce:	e0a9      	b.n	8000824 <__aeabi_fmul+0x19c>
 80006d0:	2bff      	cmp	r3, #255	; 0xff
 80006d2:	d011      	beq.n	80006f8 <__aeabi_fmul+0x70>
 80006d4:	2280      	movs	r2, #128	; 0x80
 80006d6:	00e4      	lsls	r4, r4, #3
 80006d8:	04d2      	lsls	r2, r2, #19
 80006da:	4314      	orrs	r4, r2
 80006dc:	4642      	mov	r2, r8
 80006de:	3b7f      	subs	r3, #127	; 0x7f
 80006e0:	195b      	adds	r3, r3, r5
 80006e2:	407a      	eors	r2, r7
 80006e4:	2000      	movs	r0, #0
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	1c5d      	adds	r5, r3, #1
 80006ea:	2e0a      	cmp	r6, #10
 80006ec:	dd13      	ble.n	8000716 <__aeabi_fmul+0x8e>
 80006ee:	003a      	movs	r2, r7
 80006f0:	2e0b      	cmp	r6, #11
 80006f2:	d047      	beq.n	8000784 <__aeabi_fmul+0xfc>
 80006f4:	4647      	mov	r7, r8
 80006f6:	e03f      	b.n	8000778 <__aeabi_fmul+0xf0>
 80006f8:	002b      	movs	r3, r5
 80006fa:	33ff      	adds	r3, #255	; 0xff
 80006fc:	2c00      	cmp	r4, #0
 80006fe:	d11e      	bne.n	800073e <__aeabi_fmul+0xb6>
 8000700:	2202      	movs	r2, #2
 8000702:	4316      	orrs	r6, r2
 8000704:	4642      	mov	r2, r8
 8000706:	3501      	adds	r5, #1
 8000708:	407a      	eors	r2, r7
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	35ff      	adds	r5, #255	; 0xff
 800070e:	2e0a      	cmp	r6, #10
 8000710:	dd00      	ble.n	8000714 <__aeabi_fmul+0x8c>
 8000712:	e0e4      	b.n	80008de <__aeabi_fmul+0x256>
 8000714:	2002      	movs	r0, #2
 8000716:	2e02      	cmp	r6, #2
 8000718:	dc1c      	bgt.n	8000754 <__aeabi_fmul+0xcc>
 800071a:	3e01      	subs	r6, #1
 800071c:	2e01      	cmp	r6, #1
 800071e:	d842      	bhi.n	80007a6 <__aeabi_fmul+0x11e>
 8000720:	2802      	cmp	r0, #2
 8000722:	d03d      	beq.n	80007a0 <__aeabi_fmul+0x118>
 8000724:	2801      	cmp	r0, #1
 8000726:	d166      	bne.n	80007f6 <__aeabi_fmul+0x16e>
 8000728:	2000      	movs	r0, #0
 800072a:	2100      	movs	r1, #0
 800072c:	05c0      	lsls	r0, r0, #23
 800072e:	4308      	orrs	r0, r1
 8000730:	07d2      	lsls	r2, r2, #31
 8000732:	4310      	orrs	r0, r2
 8000734:	bce0      	pop	{r5, r6, r7}
 8000736:	46ba      	mov	sl, r7
 8000738:	46b1      	mov	r9, r6
 800073a:	46a8      	mov	r8, r5
 800073c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800073e:	2203      	movs	r2, #3
 8000740:	4316      	orrs	r6, r2
 8000742:	4642      	mov	r2, r8
 8000744:	3501      	adds	r5, #1
 8000746:	407a      	eors	r2, r7
 8000748:	b2d2      	uxtb	r2, r2
 800074a:	35ff      	adds	r5, #255	; 0xff
 800074c:	2e0a      	cmp	r6, #10
 800074e:	dd00      	ble.n	8000752 <__aeabi_fmul+0xca>
 8000750:	e0e4      	b.n	800091c <__aeabi_fmul+0x294>
 8000752:	2003      	movs	r0, #3
 8000754:	2101      	movs	r1, #1
 8000756:	40b1      	lsls	r1, r6
 8000758:	26a6      	movs	r6, #166	; 0xa6
 800075a:	00f6      	lsls	r6, r6, #3
 800075c:	4231      	tst	r1, r6
 800075e:	d10a      	bne.n	8000776 <__aeabi_fmul+0xee>
 8000760:	2690      	movs	r6, #144	; 0x90
 8000762:	00b6      	lsls	r6, r6, #2
 8000764:	4231      	tst	r1, r6
 8000766:	d116      	bne.n	8000796 <__aeabi_fmul+0x10e>
 8000768:	3eb9      	subs	r6, #185	; 0xb9
 800076a:	3eff      	subs	r6, #255	; 0xff
 800076c:	420e      	tst	r6, r1
 800076e:	d01a      	beq.n	80007a6 <__aeabi_fmul+0x11e>
 8000770:	46a1      	mov	r9, r4
 8000772:	4682      	mov	sl, r0
 8000774:	e000      	b.n	8000778 <__aeabi_fmul+0xf0>
 8000776:	0017      	movs	r7, r2
 8000778:	4653      	mov	r3, sl
 800077a:	003a      	movs	r2, r7
 800077c:	2b02      	cmp	r3, #2
 800077e:	d00f      	beq.n	80007a0 <__aeabi_fmul+0x118>
 8000780:	464c      	mov	r4, r9
 8000782:	4650      	mov	r0, sl
 8000784:	2803      	cmp	r0, #3
 8000786:	d1cd      	bne.n	8000724 <__aeabi_fmul+0x9c>
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	03c9      	lsls	r1, r1, #15
 800078c:	4321      	orrs	r1, r4
 800078e:	0249      	lsls	r1, r1, #9
 8000790:	20ff      	movs	r0, #255	; 0xff
 8000792:	0a49      	lsrs	r1, r1, #9
 8000794:	e7ca      	b.n	800072c <__aeabi_fmul+0xa4>
 8000796:	2180      	movs	r1, #128	; 0x80
 8000798:	2200      	movs	r2, #0
 800079a:	20ff      	movs	r0, #255	; 0xff
 800079c:	03c9      	lsls	r1, r1, #15
 800079e:	e7c5      	b.n	800072c <__aeabi_fmul+0xa4>
 80007a0:	20ff      	movs	r0, #255	; 0xff
 80007a2:	2100      	movs	r1, #0
 80007a4:	e7c2      	b.n	800072c <__aeabi_fmul+0xa4>
 80007a6:	0c20      	lsrs	r0, r4, #16
 80007a8:	4649      	mov	r1, r9
 80007aa:	0424      	lsls	r4, r4, #16
 80007ac:	0c24      	lsrs	r4, r4, #16
 80007ae:	0027      	movs	r7, r4
 80007b0:	0c0e      	lsrs	r6, r1, #16
 80007b2:	0409      	lsls	r1, r1, #16
 80007b4:	0c09      	lsrs	r1, r1, #16
 80007b6:	4374      	muls	r4, r6
 80007b8:	434f      	muls	r7, r1
 80007ba:	4346      	muls	r6, r0
 80007bc:	4348      	muls	r0, r1
 80007be:	0c39      	lsrs	r1, r7, #16
 80007c0:	1900      	adds	r0, r0, r4
 80007c2:	1809      	adds	r1, r1, r0
 80007c4:	428c      	cmp	r4, r1
 80007c6:	d903      	bls.n	80007d0 <__aeabi_fmul+0x148>
 80007c8:	2080      	movs	r0, #128	; 0x80
 80007ca:	0240      	lsls	r0, r0, #9
 80007cc:	4684      	mov	ip, r0
 80007ce:	4466      	add	r6, ip
 80007d0:	043f      	lsls	r7, r7, #16
 80007d2:	0408      	lsls	r0, r1, #16
 80007d4:	0c3f      	lsrs	r7, r7, #16
 80007d6:	19c0      	adds	r0, r0, r7
 80007d8:	0184      	lsls	r4, r0, #6
 80007da:	1e67      	subs	r7, r4, #1
 80007dc:	41bc      	sbcs	r4, r7
 80007de:	0c09      	lsrs	r1, r1, #16
 80007e0:	0e80      	lsrs	r0, r0, #26
 80007e2:	1989      	adds	r1, r1, r6
 80007e4:	4304      	orrs	r4, r0
 80007e6:	0189      	lsls	r1, r1, #6
 80007e8:	430c      	orrs	r4, r1
 80007ea:	0109      	lsls	r1, r1, #4
 80007ec:	d571      	bpl.n	80008d2 <__aeabi_fmul+0x24a>
 80007ee:	2301      	movs	r3, #1
 80007f0:	0861      	lsrs	r1, r4, #1
 80007f2:	401c      	ands	r4, r3
 80007f4:	430c      	orrs	r4, r1
 80007f6:	002b      	movs	r3, r5
 80007f8:	337f      	adds	r3, #127	; 0x7f
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	dd51      	ble.n	80008a2 <__aeabi_fmul+0x21a>
 80007fe:	0761      	lsls	r1, r4, #29
 8000800:	d004      	beq.n	800080c <__aeabi_fmul+0x184>
 8000802:	210f      	movs	r1, #15
 8000804:	4021      	ands	r1, r4
 8000806:	2904      	cmp	r1, #4
 8000808:	d000      	beq.n	800080c <__aeabi_fmul+0x184>
 800080a:	3404      	adds	r4, #4
 800080c:	0121      	lsls	r1, r4, #4
 800080e:	d503      	bpl.n	8000818 <__aeabi_fmul+0x190>
 8000810:	4b43      	ldr	r3, [pc, #268]	; (8000920 <__aeabi_fmul+0x298>)
 8000812:	401c      	ands	r4, r3
 8000814:	002b      	movs	r3, r5
 8000816:	3380      	adds	r3, #128	; 0x80
 8000818:	2bfe      	cmp	r3, #254	; 0xfe
 800081a:	dcc1      	bgt.n	80007a0 <__aeabi_fmul+0x118>
 800081c:	01a1      	lsls	r1, r4, #6
 800081e:	0a49      	lsrs	r1, r1, #9
 8000820:	b2d8      	uxtb	r0, r3
 8000822:	e783      	b.n	800072c <__aeabi_fmul+0xa4>
 8000824:	2c00      	cmp	r4, #0
 8000826:	d12c      	bne.n	8000882 <__aeabi_fmul+0x1fa>
 8000828:	2301      	movs	r3, #1
 800082a:	4642      	mov	r2, r8
 800082c:	431e      	orrs	r6, r3
 800082e:	002b      	movs	r3, r5
 8000830:	407a      	eors	r2, r7
 8000832:	2001      	movs	r0, #1
 8000834:	b2d2      	uxtb	r2, r2
 8000836:	1c5d      	adds	r5, r3, #1
 8000838:	2e0a      	cmp	r6, #10
 800083a:	dd00      	ble.n	800083e <__aeabi_fmul+0x1b6>
 800083c:	e757      	b.n	80006ee <__aeabi_fmul+0x66>
 800083e:	e76a      	b.n	8000716 <__aeabi_fmul+0x8e>
 8000840:	2b00      	cmp	r3, #0
 8000842:	d110      	bne.n	8000866 <__aeabi_fmul+0x1de>
 8000844:	2301      	movs	r3, #1
 8000846:	2604      	movs	r6, #4
 8000848:	2500      	movs	r5, #0
 800084a:	469a      	mov	sl, r3
 800084c:	e738      	b.n	80006c0 <__aeabi_fmul+0x38>
 800084e:	2b00      	cmp	r3, #0
 8000850:	d104      	bne.n	800085c <__aeabi_fmul+0x1d4>
 8000852:	2302      	movs	r3, #2
 8000854:	2608      	movs	r6, #8
 8000856:	25ff      	movs	r5, #255	; 0xff
 8000858:	469a      	mov	sl, r3
 800085a:	e731      	b.n	80006c0 <__aeabi_fmul+0x38>
 800085c:	2303      	movs	r3, #3
 800085e:	260c      	movs	r6, #12
 8000860:	25ff      	movs	r5, #255	; 0xff
 8000862:	469a      	mov	sl, r3
 8000864:	e72c      	b.n	80006c0 <__aeabi_fmul+0x38>
 8000866:	4648      	mov	r0, r9
 8000868:	f000 fa44 	bl	8000cf4 <__clzsi2>
 800086c:	464a      	mov	r2, r9
 800086e:	1f43      	subs	r3, r0, #5
 8000870:	2576      	movs	r5, #118	; 0x76
 8000872:	409a      	lsls	r2, r3
 8000874:	2300      	movs	r3, #0
 8000876:	426d      	negs	r5, r5
 8000878:	4691      	mov	r9, r2
 800087a:	2600      	movs	r6, #0
 800087c:	469a      	mov	sl, r3
 800087e:	1a2d      	subs	r5, r5, r0
 8000880:	e71e      	b.n	80006c0 <__aeabi_fmul+0x38>
 8000882:	0020      	movs	r0, r4
 8000884:	f000 fa36 	bl	8000cf4 <__clzsi2>
 8000888:	4642      	mov	r2, r8
 800088a:	1f43      	subs	r3, r0, #5
 800088c:	409c      	lsls	r4, r3
 800088e:	1a2b      	subs	r3, r5, r0
 8000890:	3b76      	subs	r3, #118	; 0x76
 8000892:	407a      	eors	r2, r7
 8000894:	2000      	movs	r0, #0
 8000896:	b2d2      	uxtb	r2, r2
 8000898:	1c5d      	adds	r5, r3, #1
 800089a:	2e0a      	cmp	r6, #10
 800089c:	dd00      	ble.n	80008a0 <__aeabi_fmul+0x218>
 800089e:	e726      	b.n	80006ee <__aeabi_fmul+0x66>
 80008a0:	e739      	b.n	8000716 <__aeabi_fmul+0x8e>
 80008a2:	2101      	movs	r1, #1
 80008a4:	1acb      	subs	r3, r1, r3
 80008a6:	2b1b      	cmp	r3, #27
 80008a8:	dd00      	ble.n	80008ac <__aeabi_fmul+0x224>
 80008aa:	e73d      	b.n	8000728 <__aeabi_fmul+0xa0>
 80008ac:	359e      	adds	r5, #158	; 0x9e
 80008ae:	0021      	movs	r1, r4
 80008b0:	40ac      	lsls	r4, r5
 80008b2:	40d9      	lsrs	r1, r3
 80008b4:	1e63      	subs	r3, r4, #1
 80008b6:	419c      	sbcs	r4, r3
 80008b8:	4321      	orrs	r1, r4
 80008ba:	074b      	lsls	r3, r1, #29
 80008bc:	d004      	beq.n	80008c8 <__aeabi_fmul+0x240>
 80008be:	230f      	movs	r3, #15
 80008c0:	400b      	ands	r3, r1
 80008c2:	2b04      	cmp	r3, #4
 80008c4:	d000      	beq.n	80008c8 <__aeabi_fmul+0x240>
 80008c6:	3104      	adds	r1, #4
 80008c8:	014b      	lsls	r3, r1, #5
 80008ca:	d504      	bpl.n	80008d6 <__aeabi_fmul+0x24e>
 80008cc:	2001      	movs	r0, #1
 80008ce:	2100      	movs	r1, #0
 80008d0:	e72c      	b.n	800072c <__aeabi_fmul+0xa4>
 80008d2:	001d      	movs	r5, r3
 80008d4:	e78f      	b.n	80007f6 <__aeabi_fmul+0x16e>
 80008d6:	0189      	lsls	r1, r1, #6
 80008d8:	2000      	movs	r0, #0
 80008da:	0a49      	lsrs	r1, r1, #9
 80008dc:	e726      	b.n	800072c <__aeabi_fmul+0xa4>
 80008de:	2302      	movs	r3, #2
 80008e0:	2e0f      	cmp	r6, #15
 80008e2:	d10c      	bne.n	80008fe <__aeabi_fmul+0x276>
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	464b      	mov	r3, r9
 80008e8:	03c9      	lsls	r1, r1, #15
 80008ea:	420b      	tst	r3, r1
 80008ec:	d00d      	beq.n	800090a <__aeabi_fmul+0x282>
 80008ee:	420c      	tst	r4, r1
 80008f0:	d10b      	bne.n	800090a <__aeabi_fmul+0x282>
 80008f2:	4321      	orrs	r1, r4
 80008f4:	0249      	lsls	r1, r1, #9
 80008f6:	003a      	movs	r2, r7
 80008f8:	20ff      	movs	r0, #255	; 0xff
 80008fa:	0a49      	lsrs	r1, r1, #9
 80008fc:	e716      	b.n	800072c <__aeabi_fmul+0xa4>
 80008fe:	2e0b      	cmp	r6, #11
 8000900:	d000      	beq.n	8000904 <__aeabi_fmul+0x27c>
 8000902:	e6f7      	b.n	80006f4 <__aeabi_fmul+0x6c>
 8000904:	46a1      	mov	r9, r4
 8000906:	469a      	mov	sl, r3
 8000908:	e736      	b.n	8000778 <__aeabi_fmul+0xf0>
 800090a:	2180      	movs	r1, #128	; 0x80
 800090c:	464b      	mov	r3, r9
 800090e:	03c9      	lsls	r1, r1, #15
 8000910:	4319      	orrs	r1, r3
 8000912:	0249      	lsls	r1, r1, #9
 8000914:	4642      	mov	r2, r8
 8000916:	20ff      	movs	r0, #255	; 0xff
 8000918:	0a49      	lsrs	r1, r1, #9
 800091a:	e707      	b.n	800072c <__aeabi_fmul+0xa4>
 800091c:	2303      	movs	r3, #3
 800091e:	e7df      	b.n	80008e0 <__aeabi_fmul+0x258>
 8000920:	f7ffffff 	.word	0xf7ffffff

08000924 <__aeabi_fsub>:
 8000924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000926:	46c6      	mov	lr, r8
 8000928:	0243      	lsls	r3, r0, #9
 800092a:	0a5b      	lsrs	r3, r3, #9
 800092c:	0045      	lsls	r5, r0, #1
 800092e:	00da      	lsls	r2, r3, #3
 8000930:	0fc4      	lsrs	r4, r0, #31
 8000932:	0248      	lsls	r0, r1, #9
 8000934:	004f      	lsls	r7, r1, #1
 8000936:	4694      	mov	ip, r2
 8000938:	0a42      	lsrs	r2, r0, #9
 800093a:	001e      	movs	r6, r3
 800093c:	4690      	mov	r8, r2
 800093e:	b500      	push	{lr}
 8000940:	0e2d      	lsrs	r5, r5, #24
 8000942:	0e3f      	lsrs	r7, r7, #24
 8000944:	0fc9      	lsrs	r1, r1, #31
 8000946:	0980      	lsrs	r0, r0, #6
 8000948:	2fff      	cmp	r7, #255	; 0xff
 800094a:	d059      	beq.n	8000a00 <__aeabi_fsub+0xdc>
 800094c:	2201      	movs	r2, #1
 800094e:	4051      	eors	r1, r2
 8000950:	428c      	cmp	r4, r1
 8000952:	d039      	beq.n	80009c8 <__aeabi_fsub+0xa4>
 8000954:	1bea      	subs	r2, r5, r7
 8000956:	2a00      	cmp	r2, #0
 8000958:	dd58      	ble.n	8000a0c <__aeabi_fsub+0xe8>
 800095a:	2f00      	cmp	r7, #0
 800095c:	d068      	beq.n	8000a30 <__aeabi_fsub+0x10c>
 800095e:	2dff      	cmp	r5, #255	; 0xff
 8000960:	d100      	bne.n	8000964 <__aeabi_fsub+0x40>
 8000962:	e0d1      	b.n	8000b08 <__aeabi_fsub+0x1e4>
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	04db      	lsls	r3, r3, #19
 8000968:	4318      	orrs	r0, r3
 800096a:	2a1b      	cmp	r2, #27
 800096c:	dc00      	bgt.n	8000970 <__aeabi_fsub+0x4c>
 800096e:	e0e3      	b.n	8000b38 <__aeabi_fsub+0x214>
 8000970:	2301      	movs	r3, #1
 8000972:	4662      	mov	r2, ip
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	015a      	lsls	r2, r3, #5
 8000978:	d400      	bmi.n	800097c <__aeabi_fsub+0x58>
 800097a:	e0ac      	b.n	8000ad6 <__aeabi_fsub+0x1b2>
 800097c:	019b      	lsls	r3, r3, #6
 800097e:	099e      	lsrs	r6, r3, #6
 8000980:	0030      	movs	r0, r6
 8000982:	f000 f9b7 	bl	8000cf4 <__clzsi2>
 8000986:	0033      	movs	r3, r6
 8000988:	3805      	subs	r0, #5
 800098a:	4083      	lsls	r3, r0
 800098c:	4285      	cmp	r5, r0
 800098e:	dc00      	bgt.n	8000992 <__aeabi_fsub+0x6e>
 8000990:	e0c6      	b.n	8000b20 <__aeabi_fsub+0x1fc>
 8000992:	4ab2      	ldr	r2, [pc, #712]	; (8000c5c <__aeabi_fsub+0x338>)
 8000994:	1a2d      	subs	r5, r5, r0
 8000996:	4013      	ands	r3, r2
 8000998:	075a      	lsls	r2, r3, #29
 800099a:	d004      	beq.n	80009a6 <__aeabi_fsub+0x82>
 800099c:	220f      	movs	r2, #15
 800099e:	401a      	ands	r2, r3
 80009a0:	2a04      	cmp	r2, #4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_fsub+0x82>
 80009a4:	3304      	adds	r3, #4
 80009a6:	015a      	lsls	r2, r3, #5
 80009a8:	d400      	bmi.n	80009ac <__aeabi_fsub+0x88>
 80009aa:	e097      	b.n	8000adc <__aeabi_fsub+0x1b8>
 80009ac:	1c6a      	adds	r2, r5, #1
 80009ae:	2dfe      	cmp	r5, #254	; 0xfe
 80009b0:	d100      	bne.n	80009b4 <__aeabi_fsub+0x90>
 80009b2:	e084      	b.n	8000abe <__aeabi_fsub+0x19a>
 80009b4:	019b      	lsls	r3, r3, #6
 80009b6:	0a5e      	lsrs	r6, r3, #9
 80009b8:	b2d2      	uxtb	r2, r2
 80009ba:	05d0      	lsls	r0, r2, #23
 80009bc:	4330      	orrs	r0, r6
 80009be:	07e4      	lsls	r4, r4, #31
 80009c0:	4320      	orrs	r0, r4
 80009c2:	bc80      	pop	{r7}
 80009c4:	46b8      	mov	r8, r7
 80009c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009c8:	1bea      	subs	r2, r5, r7
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	dd41      	ble.n	8000a52 <__aeabi_fsub+0x12e>
 80009ce:	2f00      	cmp	r7, #0
 80009d0:	d06b      	beq.n	8000aaa <__aeabi_fsub+0x186>
 80009d2:	2dff      	cmp	r5, #255	; 0xff
 80009d4:	d100      	bne.n	80009d8 <__aeabi_fsub+0xb4>
 80009d6:	e097      	b.n	8000b08 <__aeabi_fsub+0x1e4>
 80009d8:	2380      	movs	r3, #128	; 0x80
 80009da:	04db      	lsls	r3, r3, #19
 80009dc:	4318      	orrs	r0, r3
 80009de:	2a1b      	cmp	r2, #27
 80009e0:	dc00      	bgt.n	80009e4 <__aeabi_fsub+0xc0>
 80009e2:	e0cc      	b.n	8000b7e <__aeabi_fsub+0x25a>
 80009e4:	2301      	movs	r3, #1
 80009e6:	4463      	add	r3, ip
 80009e8:	015a      	lsls	r2, r3, #5
 80009ea:	d574      	bpl.n	8000ad6 <__aeabi_fsub+0x1b2>
 80009ec:	3501      	adds	r5, #1
 80009ee:	2dff      	cmp	r5, #255	; 0xff
 80009f0:	d065      	beq.n	8000abe <__aeabi_fsub+0x19a>
 80009f2:	2201      	movs	r2, #1
 80009f4:	499a      	ldr	r1, [pc, #616]	; (8000c60 <__aeabi_fsub+0x33c>)
 80009f6:	401a      	ands	r2, r3
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	400b      	ands	r3, r1
 80009fc:	4313      	orrs	r3, r2
 80009fe:	e7cb      	b.n	8000998 <__aeabi_fsub+0x74>
 8000a00:	2800      	cmp	r0, #0
 8000a02:	d01f      	beq.n	8000a44 <__aeabi_fsub+0x120>
 8000a04:	428c      	cmp	r4, r1
 8000a06:	d022      	beq.n	8000a4e <__aeabi_fsub+0x12a>
 8000a08:	002a      	movs	r2, r5
 8000a0a:	3aff      	subs	r2, #255	; 0xff
 8000a0c:	2a00      	cmp	r2, #0
 8000a0e:	d035      	beq.n	8000a7c <__aeabi_fsub+0x158>
 8000a10:	1b7a      	subs	r2, r7, r5
 8000a12:	2d00      	cmp	r5, #0
 8000a14:	d000      	beq.n	8000a18 <__aeabi_fsub+0xf4>
 8000a16:	e099      	b.n	8000b4c <__aeabi_fsub+0x228>
 8000a18:	4663      	mov	r3, ip
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_fsub+0xfc>
 8000a1e:	e0dd      	b.n	8000bdc <__aeabi_fsub+0x2b8>
 8000a20:	1e53      	subs	r3, r2, #1
 8000a22:	2a01      	cmp	r2, #1
 8000a24:	d100      	bne.n	8000a28 <__aeabi_fsub+0x104>
 8000a26:	e105      	b.n	8000c34 <__aeabi_fsub+0x310>
 8000a28:	2aff      	cmp	r2, #255	; 0xff
 8000a2a:	d06b      	beq.n	8000b04 <__aeabi_fsub+0x1e0>
 8000a2c:	001a      	movs	r2, r3
 8000a2e:	e094      	b.n	8000b5a <__aeabi_fsub+0x236>
 8000a30:	2800      	cmp	r0, #0
 8000a32:	d073      	beq.n	8000b1c <__aeabi_fsub+0x1f8>
 8000a34:	1e51      	subs	r1, r2, #1
 8000a36:	2a01      	cmp	r2, #1
 8000a38:	d100      	bne.n	8000a3c <__aeabi_fsub+0x118>
 8000a3a:	e0df      	b.n	8000bfc <__aeabi_fsub+0x2d8>
 8000a3c:	2aff      	cmp	r2, #255	; 0xff
 8000a3e:	d063      	beq.n	8000b08 <__aeabi_fsub+0x1e4>
 8000a40:	000a      	movs	r2, r1
 8000a42:	e792      	b.n	800096a <__aeabi_fsub+0x46>
 8000a44:	2201      	movs	r2, #1
 8000a46:	4051      	eors	r1, r2
 8000a48:	42a1      	cmp	r1, r4
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_fsub+0x12a>
 8000a4c:	e782      	b.n	8000954 <__aeabi_fsub+0x30>
 8000a4e:	002a      	movs	r2, r5
 8000a50:	3aff      	subs	r2, #255	; 0xff
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	d036      	beq.n	8000ac4 <__aeabi_fsub+0x1a0>
 8000a56:	1b7a      	subs	r2, r7, r5
 8000a58:	2d00      	cmp	r5, #0
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_fsub+0x13a>
 8000a5c:	e0aa      	b.n	8000bb4 <__aeabi_fsub+0x290>
 8000a5e:	2fff      	cmp	r7, #255	; 0xff
 8000a60:	d100      	bne.n	8000a64 <__aeabi_fsub+0x140>
 8000a62:	e0da      	b.n	8000c1a <__aeabi_fsub+0x2f6>
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	4661      	mov	r1, ip
 8000a68:	04db      	lsls	r3, r3, #19
 8000a6a:	4319      	orrs	r1, r3
 8000a6c:	468c      	mov	ip, r1
 8000a6e:	2a1b      	cmp	r2, #27
 8000a70:	dc00      	bgt.n	8000a74 <__aeabi_fsub+0x150>
 8000a72:	e0d4      	b.n	8000c1e <__aeabi_fsub+0x2fa>
 8000a74:	2301      	movs	r3, #1
 8000a76:	003d      	movs	r5, r7
 8000a78:	181b      	adds	r3, r3, r0
 8000a7a:	e7b5      	b.n	80009e8 <__aeabi_fsub+0xc4>
 8000a7c:	27fe      	movs	r7, #254	; 0xfe
 8000a7e:	1c6a      	adds	r2, r5, #1
 8000a80:	4217      	tst	r7, r2
 8000a82:	d171      	bne.n	8000b68 <__aeabi_fsub+0x244>
 8000a84:	2d00      	cmp	r5, #0
 8000a86:	d000      	beq.n	8000a8a <__aeabi_fsub+0x166>
 8000a88:	e09e      	b.n	8000bc8 <__aeabi_fsub+0x2a4>
 8000a8a:	4663      	mov	r3, ip
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_fsub+0x16e>
 8000a90:	e0d5      	b.n	8000c3e <__aeabi_fsub+0x31a>
 8000a92:	2200      	movs	r2, #0
 8000a94:	2800      	cmp	r0, #0
 8000a96:	d100      	bne.n	8000a9a <__aeabi_fsub+0x176>
 8000a98:	e78f      	b.n	80009ba <__aeabi_fsub+0x96>
 8000a9a:	1a1b      	subs	r3, r3, r0
 8000a9c:	015e      	lsls	r6, r3, #5
 8000a9e:	d400      	bmi.n	8000aa2 <__aeabi_fsub+0x17e>
 8000aa0:	e0d6      	b.n	8000c50 <__aeabi_fsub+0x32c>
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	000c      	movs	r4, r1
 8000aa6:	1ac3      	subs	r3, r0, r3
 8000aa8:	e776      	b.n	8000998 <__aeabi_fsub+0x74>
 8000aaa:	2800      	cmp	r0, #0
 8000aac:	d036      	beq.n	8000b1c <__aeabi_fsub+0x1f8>
 8000aae:	1e51      	subs	r1, r2, #1
 8000ab0:	2a01      	cmp	r2, #1
 8000ab2:	d100      	bne.n	8000ab6 <__aeabi_fsub+0x192>
 8000ab4:	e09a      	b.n	8000bec <__aeabi_fsub+0x2c8>
 8000ab6:	2aff      	cmp	r2, #255	; 0xff
 8000ab8:	d026      	beq.n	8000b08 <__aeabi_fsub+0x1e4>
 8000aba:	000a      	movs	r2, r1
 8000abc:	e78f      	b.n	80009de <__aeabi_fsub+0xba>
 8000abe:	22ff      	movs	r2, #255	; 0xff
 8000ac0:	2600      	movs	r6, #0
 8000ac2:	e77a      	b.n	80009ba <__aeabi_fsub+0x96>
 8000ac4:	27fe      	movs	r7, #254	; 0xfe
 8000ac6:	1c6a      	adds	r2, r5, #1
 8000ac8:	4217      	tst	r7, r2
 8000aca:	d062      	beq.n	8000b92 <__aeabi_fsub+0x26e>
 8000acc:	2aff      	cmp	r2, #255	; 0xff
 8000ace:	d0f6      	beq.n	8000abe <__aeabi_fsub+0x19a>
 8000ad0:	0015      	movs	r5, r2
 8000ad2:	4460      	add	r0, ip
 8000ad4:	0843      	lsrs	r3, r0, #1
 8000ad6:	075a      	lsls	r2, r3, #29
 8000ad8:	d000      	beq.n	8000adc <__aeabi_fsub+0x1b8>
 8000ada:	e75f      	b.n	800099c <__aeabi_fsub+0x78>
 8000adc:	08db      	lsrs	r3, r3, #3
 8000ade:	2dff      	cmp	r5, #255	; 0xff
 8000ae0:	d012      	beq.n	8000b08 <__aeabi_fsub+0x1e4>
 8000ae2:	025b      	lsls	r3, r3, #9
 8000ae4:	0a5e      	lsrs	r6, r3, #9
 8000ae6:	b2ea      	uxtb	r2, r5
 8000ae8:	e767      	b.n	80009ba <__aeabi_fsub+0x96>
 8000aea:	4662      	mov	r2, ip
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	d100      	bne.n	8000af2 <__aeabi_fsub+0x1ce>
 8000af0:	e093      	b.n	8000c1a <__aeabi_fsub+0x2f6>
 8000af2:	2800      	cmp	r0, #0
 8000af4:	d008      	beq.n	8000b08 <__aeabi_fsub+0x1e4>
 8000af6:	2280      	movs	r2, #128	; 0x80
 8000af8:	03d2      	lsls	r2, r2, #15
 8000afa:	4213      	tst	r3, r2
 8000afc:	d004      	beq.n	8000b08 <__aeabi_fsub+0x1e4>
 8000afe:	4640      	mov	r0, r8
 8000b00:	4210      	tst	r0, r2
 8000b02:	d101      	bne.n	8000b08 <__aeabi_fsub+0x1e4>
 8000b04:	000c      	movs	r4, r1
 8000b06:	4643      	mov	r3, r8
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d0d8      	beq.n	8000abe <__aeabi_fsub+0x19a>
 8000b0c:	2680      	movs	r6, #128	; 0x80
 8000b0e:	03f6      	lsls	r6, r6, #15
 8000b10:	431e      	orrs	r6, r3
 8000b12:	0276      	lsls	r6, r6, #9
 8000b14:	22ff      	movs	r2, #255	; 0xff
 8000b16:	0a76      	lsrs	r6, r6, #9
 8000b18:	e74f      	b.n	80009ba <__aeabi_fsub+0x96>
 8000b1a:	4643      	mov	r3, r8
 8000b1c:	0015      	movs	r5, r2
 8000b1e:	e7de      	b.n	8000ade <__aeabi_fsub+0x1ba>
 8000b20:	2220      	movs	r2, #32
 8000b22:	1b40      	subs	r0, r0, r5
 8000b24:	3001      	adds	r0, #1
 8000b26:	1a12      	subs	r2, r2, r0
 8000b28:	0019      	movs	r1, r3
 8000b2a:	4093      	lsls	r3, r2
 8000b2c:	40c1      	lsrs	r1, r0
 8000b2e:	1e5a      	subs	r2, r3, #1
 8000b30:	4193      	sbcs	r3, r2
 8000b32:	2500      	movs	r5, #0
 8000b34:	430b      	orrs	r3, r1
 8000b36:	e72f      	b.n	8000998 <__aeabi_fsub+0x74>
 8000b38:	2320      	movs	r3, #32
 8000b3a:	1a9b      	subs	r3, r3, r2
 8000b3c:	0001      	movs	r1, r0
 8000b3e:	4098      	lsls	r0, r3
 8000b40:	0003      	movs	r3, r0
 8000b42:	40d1      	lsrs	r1, r2
 8000b44:	1e5a      	subs	r2, r3, #1
 8000b46:	4193      	sbcs	r3, r2
 8000b48:	430b      	orrs	r3, r1
 8000b4a:	e712      	b.n	8000972 <__aeabi_fsub+0x4e>
 8000b4c:	2fff      	cmp	r7, #255	; 0xff
 8000b4e:	d0d9      	beq.n	8000b04 <__aeabi_fsub+0x1e0>
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	4664      	mov	r4, ip
 8000b54:	04db      	lsls	r3, r3, #19
 8000b56:	431c      	orrs	r4, r3
 8000b58:	46a4      	mov	ip, r4
 8000b5a:	2a1b      	cmp	r2, #27
 8000b5c:	dd52      	ble.n	8000c04 <__aeabi_fsub+0x2e0>
 8000b5e:	2301      	movs	r3, #1
 8000b60:	000c      	movs	r4, r1
 8000b62:	003d      	movs	r5, r7
 8000b64:	1ac3      	subs	r3, r0, r3
 8000b66:	e706      	b.n	8000976 <__aeabi_fsub+0x52>
 8000b68:	4663      	mov	r3, ip
 8000b6a:	1a1e      	subs	r6, r3, r0
 8000b6c:	0173      	lsls	r3, r6, #5
 8000b6e:	d439      	bmi.n	8000be4 <__aeabi_fsub+0x2c0>
 8000b70:	2e00      	cmp	r6, #0
 8000b72:	d000      	beq.n	8000b76 <__aeabi_fsub+0x252>
 8000b74:	e704      	b.n	8000980 <__aeabi_fsub+0x5c>
 8000b76:	2400      	movs	r4, #0
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2600      	movs	r6, #0
 8000b7c:	e71d      	b.n	80009ba <__aeabi_fsub+0x96>
 8000b7e:	2320      	movs	r3, #32
 8000b80:	1a9b      	subs	r3, r3, r2
 8000b82:	0001      	movs	r1, r0
 8000b84:	4098      	lsls	r0, r3
 8000b86:	0003      	movs	r3, r0
 8000b88:	40d1      	lsrs	r1, r2
 8000b8a:	1e5a      	subs	r2, r3, #1
 8000b8c:	4193      	sbcs	r3, r2
 8000b8e:	430b      	orrs	r3, r1
 8000b90:	e729      	b.n	80009e6 <__aeabi_fsub+0xc2>
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	d1a9      	bne.n	8000aea <__aeabi_fsub+0x1c6>
 8000b96:	4663      	mov	r3, ip
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d056      	beq.n	8000c4a <__aeabi_fsub+0x326>
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_fsub+0x280>
 8000ba2:	e70a      	b.n	80009ba <__aeabi_fsub+0x96>
 8000ba4:	0003      	movs	r3, r0
 8000ba6:	4463      	add	r3, ip
 8000ba8:	015a      	lsls	r2, r3, #5
 8000baa:	d594      	bpl.n	8000ad6 <__aeabi_fsub+0x1b2>
 8000bac:	4a2b      	ldr	r2, [pc, #172]	; (8000c5c <__aeabi_fsub+0x338>)
 8000bae:	3501      	adds	r5, #1
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	e790      	b.n	8000ad6 <__aeabi_fsub+0x1b2>
 8000bb4:	4663      	mov	r3, ip
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0af      	beq.n	8000b1a <__aeabi_fsub+0x1f6>
 8000bba:	1e53      	subs	r3, r2, #1
 8000bbc:	2a01      	cmp	r2, #1
 8000bbe:	d015      	beq.n	8000bec <__aeabi_fsub+0x2c8>
 8000bc0:	2aff      	cmp	r2, #255	; 0xff
 8000bc2:	d02a      	beq.n	8000c1a <__aeabi_fsub+0x2f6>
 8000bc4:	001a      	movs	r2, r3
 8000bc6:	e752      	b.n	8000a6e <__aeabi_fsub+0x14a>
 8000bc8:	4662      	mov	r2, ip
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d191      	bne.n	8000af2 <__aeabi_fsub+0x1ce>
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	d198      	bne.n	8000b04 <__aeabi_fsub+0x1e0>
 8000bd2:	2680      	movs	r6, #128	; 0x80
 8000bd4:	2400      	movs	r4, #0
 8000bd6:	22ff      	movs	r2, #255	; 0xff
 8000bd8:	03f6      	lsls	r6, r6, #15
 8000bda:	e6ee      	b.n	80009ba <__aeabi_fsub+0x96>
 8000bdc:	000c      	movs	r4, r1
 8000bde:	4643      	mov	r3, r8
 8000be0:	0015      	movs	r5, r2
 8000be2:	e77c      	b.n	8000ade <__aeabi_fsub+0x1ba>
 8000be4:	4663      	mov	r3, ip
 8000be6:	000c      	movs	r4, r1
 8000be8:	1ac6      	subs	r6, r0, r3
 8000bea:	e6c9      	b.n	8000980 <__aeabi_fsub+0x5c>
 8000bec:	0003      	movs	r3, r0
 8000bee:	4463      	add	r3, ip
 8000bf0:	2501      	movs	r5, #1
 8000bf2:	015a      	lsls	r2, r3, #5
 8000bf4:	d400      	bmi.n	8000bf8 <__aeabi_fsub+0x2d4>
 8000bf6:	e76e      	b.n	8000ad6 <__aeabi_fsub+0x1b2>
 8000bf8:	2502      	movs	r5, #2
 8000bfa:	e6fa      	b.n	80009f2 <__aeabi_fsub+0xce>
 8000bfc:	4663      	mov	r3, ip
 8000bfe:	2501      	movs	r5, #1
 8000c00:	1a1b      	subs	r3, r3, r0
 8000c02:	e6b8      	b.n	8000976 <__aeabi_fsub+0x52>
 8000c04:	4664      	mov	r4, ip
 8000c06:	2320      	movs	r3, #32
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	1a9b      	subs	r3, r3, r2
 8000c0c:	4662      	mov	r2, ip
 8000c0e:	409a      	lsls	r2, r3
 8000c10:	0013      	movs	r3, r2
 8000c12:	1e5a      	subs	r2, r3, #1
 8000c14:	4193      	sbcs	r3, r2
 8000c16:	4323      	orrs	r3, r4
 8000c18:	e7a2      	b.n	8000b60 <__aeabi_fsub+0x23c>
 8000c1a:	4643      	mov	r3, r8
 8000c1c:	e774      	b.n	8000b08 <__aeabi_fsub+0x1e4>
 8000c1e:	4661      	mov	r1, ip
 8000c20:	2320      	movs	r3, #32
 8000c22:	40d1      	lsrs	r1, r2
 8000c24:	1a9b      	subs	r3, r3, r2
 8000c26:	4662      	mov	r2, ip
 8000c28:	409a      	lsls	r2, r3
 8000c2a:	0013      	movs	r3, r2
 8000c2c:	1e5a      	subs	r2, r3, #1
 8000c2e:	4193      	sbcs	r3, r2
 8000c30:	430b      	orrs	r3, r1
 8000c32:	e720      	b.n	8000a76 <__aeabi_fsub+0x152>
 8000c34:	4663      	mov	r3, ip
 8000c36:	000c      	movs	r4, r1
 8000c38:	2501      	movs	r5, #1
 8000c3a:	1ac3      	subs	r3, r0, r3
 8000c3c:	e69b      	b.n	8000976 <__aeabi_fsub+0x52>
 8000c3e:	2800      	cmp	r0, #0
 8000c40:	d099      	beq.n	8000b76 <__aeabi_fsub+0x252>
 8000c42:	000c      	movs	r4, r1
 8000c44:	4646      	mov	r6, r8
 8000c46:	2200      	movs	r2, #0
 8000c48:	e6b7      	b.n	80009ba <__aeabi_fsub+0x96>
 8000c4a:	4646      	mov	r6, r8
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	e6b4      	b.n	80009ba <__aeabi_fsub+0x96>
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d000      	beq.n	8000c56 <__aeabi_fsub+0x332>
 8000c54:	e73f      	b.n	8000ad6 <__aeabi_fsub+0x1b2>
 8000c56:	2400      	movs	r4, #0
 8000c58:	2600      	movs	r6, #0
 8000c5a:	e6ae      	b.n	80009ba <__aeabi_fsub+0x96>
 8000c5c:	fbffffff 	.word	0xfbffffff
 8000c60:	7dffffff 	.word	0x7dffffff

08000c64 <__aeabi_ui2f>:
 8000c64:	b570      	push	{r4, r5, r6, lr}
 8000c66:	1e04      	subs	r4, r0, #0
 8000c68:	d00e      	beq.n	8000c88 <__aeabi_ui2f+0x24>
 8000c6a:	f000 f843 	bl	8000cf4 <__clzsi2>
 8000c6e:	239e      	movs	r3, #158	; 0x9e
 8000c70:	0001      	movs	r1, r0
 8000c72:	1a1b      	subs	r3, r3, r0
 8000c74:	2b96      	cmp	r3, #150	; 0x96
 8000c76:	dc0c      	bgt.n	8000c92 <__aeabi_ui2f+0x2e>
 8000c78:	2808      	cmp	r0, #8
 8000c7a:	d02c      	beq.n	8000cd6 <__aeabi_ui2f+0x72>
 8000c7c:	3908      	subs	r1, #8
 8000c7e:	408c      	lsls	r4, r1
 8000c80:	0264      	lsls	r4, r4, #9
 8000c82:	0a64      	lsrs	r4, r4, #9
 8000c84:	b2d8      	uxtb	r0, r3
 8000c86:	e001      	b.n	8000c8c <__aeabi_ui2f+0x28>
 8000c88:	2000      	movs	r0, #0
 8000c8a:	2400      	movs	r4, #0
 8000c8c:	05c0      	lsls	r0, r0, #23
 8000c8e:	4320      	orrs	r0, r4
 8000c90:	bd70      	pop	{r4, r5, r6, pc}
 8000c92:	2b99      	cmp	r3, #153	; 0x99
 8000c94:	dd0a      	ble.n	8000cac <__aeabi_ui2f+0x48>
 8000c96:	0002      	movs	r2, r0
 8000c98:	0020      	movs	r0, r4
 8000c9a:	321b      	adds	r2, #27
 8000c9c:	4090      	lsls	r0, r2
 8000c9e:	0002      	movs	r2, r0
 8000ca0:	1e50      	subs	r0, r2, #1
 8000ca2:	4182      	sbcs	r2, r0
 8000ca4:	2005      	movs	r0, #5
 8000ca6:	1a40      	subs	r0, r0, r1
 8000ca8:	40c4      	lsrs	r4, r0
 8000caa:	4314      	orrs	r4, r2
 8000cac:	2905      	cmp	r1, #5
 8000cae:	dc16      	bgt.n	8000cde <__aeabi_ui2f+0x7a>
 8000cb0:	0022      	movs	r2, r4
 8000cb2:	480f      	ldr	r0, [pc, #60]	; (8000cf0 <__aeabi_ui2f+0x8c>)
 8000cb4:	4002      	ands	r2, r0
 8000cb6:	0765      	lsls	r5, r4, #29
 8000cb8:	d009      	beq.n	8000cce <__aeabi_ui2f+0x6a>
 8000cba:	250f      	movs	r5, #15
 8000cbc:	402c      	ands	r4, r5
 8000cbe:	2c04      	cmp	r4, #4
 8000cc0:	d005      	beq.n	8000cce <__aeabi_ui2f+0x6a>
 8000cc2:	3204      	adds	r2, #4
 8000cc4:	0154      	lsls	r4, r2, #5
 8000cc6:	d502      	bpl.n	8000cce <__aeabi_ui2f+0x6a>
 8000cc8:	239f      	movs	r3, #159	; 0x9f
 8000cca:	4002      	ands	r2, r0
 8000ccc:	1a5b      	subs	r3, r3, r1
 8000cce:	0192      	lsls	r2, r2, #6
 8000cd0:	0a54      	lsrs	r4, r2, #9
 8000cd2:	b2d8      	uxtb	r0, r3
 8000cd4:	e7da      	b.n	8000c8c <__aeabi_ui2f+0x28>
 8000cd6:	0264      	lsls	r4, r4, #9
 8000cd8:	2096      	movs	r0, #150	; 0x96
 8000cda:	0a64      	lsrs	r4, r4, #9
 8000cdc:	e7d6      	b.n	8000c8c <__aeabi_ui2f+0x28>
 8000cde:	1f4a      	subs	r2, r1, #5
 8000ce0:	4094      	lsls	r4, r2
 8000ce2:	0022      	movs	r2, r4
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <__aeabi_ui2f+0x8c>)
 8000ce6:	4002      	ands	r2, r0
 8000ce8:	0765      	lsls	r5, r4, #29
 8000cea:	d0f0      	beq.n	8000cce <__aeabi_ui2f+0x6a>
 8000cec:	e7e5      	b.n	8000cba <__aeabi_ui2f+0x56>
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	fbffffff 	.word	0xfbffffff

08000cf4 <__clzsi2>:
 8000cf4:	211c      	movs	r1, #28
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	041b      	lsls	r3, r3, #16
 8000cfa:	4298      	cmp	r0, r3
 8000cfc:	d301      	bcc.n	8000d02 <__clzsi2+0xe>
 8000cfe:	0c00      	lsrs	r0, r0, #16
 8000d00:	3910      	subs	r1, #16
 8000d02:	0a1b      	lsrs	r3, r3, #8
 8000d04:	4298      	cmp	r0, r3
 8000d06:	d301      	bcc.n	8000d0c <__clzsi2+0x18>
 8000d08:	0a00      	lsrs	r0, r0, #8
 8000d0a:	3908      	subs	r1, #8
 8000d0c:	091b      	lsrs	r3, r3, #4
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d301      	bcc.n	8000d16 <__clzsi2+0x22>
 8000d12:	0900      	lsrs	r0, r0, #4
 8000d14:	3904      	subs	r1, #4
 8000d16:	a202      	add	r2, pc, #8	; (adr r2, 8000d20 <__clzsi2+0x2c>)
 8000d18:	5c10      	ldrb	r0, [r2, r0]
 8000d1a:	1840      	adds	r0, r0, r1
 8000d1c:	4770      	bx	lr
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	02020304 	.word	0x02020304
 8000d24:	01010101 	.word	0x01010101
	...

08000d30 <__clzdi2>:
 8000d30:	b510      	push	{r4, lr}
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d103      	bne.n	8000d3e <__clzdi2+0xe>
 8000d36:	f7ff ffdd 	bl	8000cf4 <__clzsi2>
 8000d3a:	3020      	adds	r0, #32
 8000d3c:	e002      	b.n	8000d44 <__clzdi2+0x14>
 8000d3e:	0008      	movs	r0, r1
 8000d40:	f7ff ffd8 	bl	8000cf4 <__clzsi2>
 8000d44:	bd10      	pop	{r4, pc}
 8000d46:	46c0      	nop			; (mov r8, r8)

08000d48 <segment_write>:
		{ 1, 0, 0, 1, 0, 0, 0, 1 }, // Y (31)
		{ 1, 0, 1, 0, 0, 1, 0, 0 }, // Z (32)
		{ 1, 1, 1, 1, 1, 1, 1, 1 }, // BLANK (33)
		{ 1, 0, 0, 1, 1, 1, 0, 0 } }; // DEG (34)

void segment_write(seven_segment *seg) {
 8000d48:	b5b0      	push	{r4, r5, r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(seg->enable_port, seg->enable_pin, seg->enable_segment);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6958      	ldr	r0, [r3, #20]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	8b19      	ldrh	r1, [r3, #24]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	789b      	ldrb	r3, [r3, #2]
 8000d5c:	001a      	movs	r2, r3
 8000d5e:	f001 f9bd 	bl	80020dc <HAL_GPIO_WritePin>

	for (uint8_t i = 0; i < 8; i++) {
 8000d62:	230f      	movs	r3, #15
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
 8000d6a:	e026      	b.n	8000dba <segment_write+0x72>
		HAL_GPIO_WritePin(seg->a_port, seg->a_pin, segment_data[seg->data][i]);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	68d8      	ldr	r0, [r3, #12]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	8a1c      	ldrh	r4, [r3, #16]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	001a      	movs	r2, r3
 8000d7a:	250f      	movs	r5, #15
 8000d7c:	197b      	adds	r3, r7, r5
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4917      	ldr	r1, [pc, #92]	; (8000de0 <segment_write+0x98>)
 8000d82:	00d2      	lsls	r2, r2, #3
 8000d84:	188a      	adds	r2, r1, r2
 8000d86:	5cd3      	ldrb	r3, [r2, r3]
 8000d88:	001a      	movs	r2, r3
 8000d8a:	0021      	movs	r1, r4
 8000d8c:	f001 f9a6 	bl	80020dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(seg->clock_port, seg->clock_pin, 0);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6858      	ldr	r0, [r3, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	891b      	ldrh	r3, [r3, #8]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	0019      	movs	r1, r3
 8000d9c:	f001 f99e 	bl	80020dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(seg->clock_port, seg->clock_pin, 1);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6858      	ldr	r0, [r3, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	891b      	ldrh	r3, [r3, #8]
 8000da8:	2201      	movs	r2, #1
 8000daa:	0019      	movs	r1, r3
 8000dac:	f001 f996 	bl	80020dc <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 8; i++) {
 8000db0:	197b      	adds	r3, r7, r5
 8000db2:	781a      	ldrb	r2, [r3, #0]
 8000db4:	197b      	adds	r3, r7, r5
 8000db6:	3201      	adds	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
 8000dba:	230f      	movs	r3, #15
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b07      	cmp	r3, #7
 8000dc2:	d9d3      	bls.n	8000d6c <segment_write+0x24>
	}
	HAL_GPIO_WritePin(seg->enable_port, seg->enable_pin, seg->enable_segment);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6958      	ldr	r0, [r3, #20]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	8b19      	ldrh	r1, [r3, #24]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	789b      	ldrb	r3, [r3, #2]
 8000dd0:	001a      	movs	r2, r3
 8000dd2:	f001 f983 	bl	80020dc <HAL_GPIO_WritePin>
}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b004      	add	sp, #16
 8000ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	20000000 	.word	0x20000000

08000de4 <display_write>:

void display_write(display *disp) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	uint32_t data = disp->data;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	60fb      	str	r3, [r7, #12]
	disp->second_one->data = data % 10;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	210a      	movs	r1, #10
 8000df6:	0018      	movs	r0, r3
 8000df8:	f7ff fa0c 	bl	8000214 <__aeabi_uidivmod>
 8000dfc:	000b      	movs	r3, r1
 8000dfe:	001a      	movs	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	701a      	strb	r2, [r3, #0]
	data /= 10;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	210a      	movs	r1, #10
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff f97b 	bl	8000108 <__udivsi3>
 8000e12:	0003      	movs	r3, r0
 8000e14:	60fb      	str	r3, [r7, #12]
	disp->second_ten->data = data % 10;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	210a      	movs	r1, #10
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f7ff f9fa 	bl	8000214 <__aeabi_uidivmod>
 8000e20:	000b      	movs	r3, r1
 8000e22:	001a      	movs	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	701a      	strb	r2, [r3, #0]
	data /= 10;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	210a      	movs	r1, #10
 8000e30:	0018      	movs	r0, r3
 8000e32:	f7ff f969 	bl	8000108 <__udivsi3>
 8000e36:	0003      	movs	r3, r0
 8000e38:	60fb      	str	r3, [r7, #12]
	disp->minute_one->data = data % 10;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	210a      	movs	r1, #10
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f7ff f9e8 	bl	8000214 <__aeabi_uidivmod>
 8000e44:	000b      	movs	r3, r1
 8000e46:	001a      	movs	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	691b      	ldr	r3, [r3, #16]
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	701a      	strb	r2, [r3, #0]
	data /= 10;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	210a      	movs	r1, #10
 8000e54:	0018      	movs	r0, r3
 8000e56:	f7ff f957 	bl	8000108 <__udivsi3>
 8000e5a:	0003      	movs	r3, r0
 8000e5c:	60fb      	str	r3, [r7, #12]
	disp->minute_ten->data = data % 10;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	210a      	movs	r1, #10
 8000e62:	0018      	movs	r0, r3
 8000e64:	f7ff f9d6 	bl	8000214 <__aeabi_uidivmod>
 8000e68:	000b      	movs	r3, r1
 8000e6a:	001a      	movs	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	701a      	strb	r2, [r3, #0]
	data /= 10;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	210a      	movs	r1, #10
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f7ff f945 	bl	8000108 <__udivsi3>
 8000e7e:	0003      	movs	r3, r0
 8000e80:	60fb      	str	r3, [r7, #12]
	disp->hour_one->data = data % 10;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	210a      	movs	r1, #10
 8000e86:	0018      	movs	r0, r3
 8000e88:	f7ff f9c4 	bl	8000214 <__aeabi_uidivmod>
 8000e8c:	000b      	movs	r3, r1
 8000e8e:	001a      	movs	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	701a      	strb	r2, [r3, #0]
	data /= 10;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	210a      	movs	r1, #10
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f7ff f933 	bl	8000108 <__udivsi3>
 8000ea2:	0003      	movs	r3, r0
 8000ea4:	60fb      	str	r3, [r7, #12]
	disp->hour_ten->data = data % 10;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	210a      	movs	r1, #10
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f7ff f9b2 	bl	8000214 <__aeabi_uidivmod>
 8000eb0:	000b      	movs	r3, r1
 8000eb2:	001a      	movs	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	701a      	strb	r2, [r3, #0]

	if(disp->hour_ten->data != disp->hour_ten->data_old){
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	781a      	ldrb	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	785b      	ldrb	r3, [r3, #1]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d00a      	beq.n	8000ee2 <display_write+0xfe>
		segment_write(disp->hour_ten);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f7ff ff39 	bl	8000d48 <segment_write>
		disp->hour_ten->data_old = disp->hour_ten->data;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	7812      	ldrb	r2, [r2, #0]
 8000ee0:	705a      	strb	r2, [r3, #1]
	}

	if(disp->hour_one->data != disp->hour_one->data_old){
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	781a      	ldrb	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	785b      	ldrb	r3, [r3, #1]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d00a      	beq.n	8000f08 <display_write+0x124>
		segment_write(disp->hour_one);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f7ff ff26 	bl	8000d48 <segment_write>
		disp->hour_one->data_old = disp->hour_one->data;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	7812      	ldrb	r2, [r2, #0]
 8000f06:	705a      	strb	r2, [r3, #1]
	}

	if(disp->minute_ten->data != disp->minute_ten->data_old){
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	781a      	ldrb	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	785b      	ldrb	r3, [r3, #1]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d00a      	beq.n	8000f2e <display_write+0x14a>
		segment_write(disp->minute_ten);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f7ff ff13 	bl	8000d48 <segment_write>
		disp->minute_ten->data_old = disp->minute_ten->data;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68da      	ldr	r2, [r3, #12]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	7812      	ldrb	r2, [r2, #0]
 8000f2c:	705a      	strb	r2, [r3, #1]
	}

	if(disp->minute_one->data != disp->minute_one->data_old){
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	691b      	ldr	r3, [r3, #16]
 8000f32:	781a      	ldrb	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	785b      	ldrb	r3, [r3, #1]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d00a      	beq.n	8000f54 <display_write+0x170>
		segment_write(disp->minute_one);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	0018      	movs	r0, r3
 8000f44:	f7ff ff00 	bl	8000d48 <segment_write>
		disp->minute_one->data_old = disp->minute_one->data;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	691a      	ldr	r2, [r3, #16]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	7812      	ldrb	r2, [r2, #0]
 8000f52:	705a      	strb	r2, [r3, #1]
	}

	if(disp->second_ten->data != disp->second_ten->data_old){
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	781a      	ldrb	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	785b      	ldrb	r3, [r3, #1]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d00a      	beq.n	8000f7a <display_write+0x196>
		segment_write(disp->second_ten);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	695b      	ldr	r3, [r3, #20]
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f7ff feed 	bl	8000d48 <segment_write>
		disp->second_ten->data_old = disp->second_ten->data;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	695a      	ldr	r2, [r3, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	7812      	ldrb	r2, [r2, #0]
 8000f78:	705a      	strb	r2, [r3, #1]
	}

	if(disp->second_one->data != disp->second_one->data_old){
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	781a      	ldrb	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	785b      	ldrb	r3, [r3, #1]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d00a      	beq.n	8000fa0 <display_write+0x1bc>
		segment_write(disp->second_one);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f7ff feda 	bl	8000d48 <segment_write>
		disp->second_one->data_old = disp->second_one->data;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699a      	ldr	r2, [r3, #24]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	7812      	ldrb	r2, [r2, #0]
 8000f9e:	705a      	strb	r2, [r3, #1]
	}

}
 8000fa0:	46c0      	nop			; (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b004      	add	sp, #16
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000faa:	b0dd      	sub	sp, #372	; 0x174
 8000fac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fae:	f000 fddf 	bl	8001b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb2:	f000 fa23 	bl	80013fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb6:	f000 fbc3 	bl	8001740 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fba:	f000 faa7 	bl	800150c <MX_I2C1_Init>
  MX_RTC_Init();
 8000fbe:	f000 fae5 	bl	800158c <MX_RTC_Init>
  MX_TIM2_Init();
 8000fc2:	f000 fb0d 	bl	80015e0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000fc6:	f000 fb8b 	bl	80016e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(EN_HO_GPIO_Port, EN_HO_Pin, 0);
 8000fca:	4bfd      	ldr	r3, [pc, #1012]	; (80013c0 <main+0x418>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2110      	movs	r1, #16
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f001 f883 	bl	80020dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_HT_GPIO_Port, EN_HT_Pin, 0);
 8000fd6:	23a0      	movs	r3, #160	; 0xa0
 8000fd8:	05db      	lsls	r3, r3, #23
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2108      	movs	r1, #8
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f001 f87c 	bl	80020dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_MO_GPIO_Port, EN_MO_Pin, 0);
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	015b      	lsls	r3, r3, #5
 8000fe8:	48f5      	ldr	r0, [pc, #980]	; (80013c0 <main+0x418>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	0019      	movs	r1, r3
 8000fee:	f001 f875 	bl	80020dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_MT_GPIO_Port, EN_MT_Pin, 0);
 8000ff2:	4bf3      	ldr	r3, [pc, #972]	; (80013c0 <main+0x418>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2120      	movs	r1, #32
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f001 f86f 	bl	80020dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_SO_GPIO_Port, EN_SO_Pin, 0);
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	01db      	lsls	r3, r3, #7
 8001002:	48ef      	ldr	r0, [pc, #956]	; (80013c0 <main+0x418>)
 8001004:	2200      	movs	r2, #0
 8001006:	0019      	movs	r1, r3
 8001008:	f001 f868 	bl	80020dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_ST_GPIO_Port, EN_ST_Pin, 0);
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	019b      	lsls	r3, r3, #6
 8001010:	48eb      	ldr	r0, [pc, #940]	; (80013c0 <main+0x418>)
 8001012:	2200      	movs	r2, #0
 8001014:	0019      	movs	r1, r3
 8001016:	f001 f861 	bl	80020dc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(A_HT_GPIO_Port, A_HT_Pin, 1);
 800101a:	23a0      	movs	r3, #160	; 0xa0
 800101c:	05db      	lsls	r3, r3, #23
 800101e:	2201      	movs	r2, #1
 8001020:	2102      	movs	r1, #2
 8001022:	0018      	movs	r0, r3
 8001024:	f001 f85a 	bl	80020dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLEAR_GPIO_Port, CLEAR_Pin, 1);
 8001028:	23a0      	movs	r3, #160	; 0xa0
 800102a:	05db      	lsls	r3, r3, #23
 800102c:	2201      	movs	r2, #1
 800102e:	2101      	movs	r1, #1
 8001030:	0018      	movs	r0, r3
 8001032:	f001 f853 	bl	80020dc <HAL_GPIO_WritePin>

	uint8_t data[6] = {
 8001036:	25a6      	movs	r5, #166	; 0xa6
 8001038:	006d      	lsls	r5, r5, #1
 800103a:	197b      	adds	r3, r7, r5
 800103c:	4ae1      	ldr	r2, [pc, #900]	; (80013c4 <main+0x41c>)
 800103e:	6811      	ldr	r1, [r2, #0]
 8001040:	6019      	str	r1, [r3, #0]
 8001042:	8892      	ldrh	r2, [r2, #4]
 8001044:	809a      	strh	r2, [r3, #4]

	RTC_TimeTypeDef sTimeStamp;
	RTC_DateTypeDef sTimeStampDate;

	uint8_t bcd;
	uint8_t old_sec = 15;
 8001046:	2368      	movs	r3, #104	; 0x68
 8001048:	33ff      	adds	r3, #255	; 0xff
 800104a:	18fb      	adds	r3, r7, r3
 800104c:	220f      	movs	r2, #15
 800104e:	701a      	strb	r2, [r3, #0]

	uint8_t sht_addr = 0x88;
 8001050:	26b3      	movs	r6, #179	; 0xb3
 8001052:	0076      	lsls	r6, r6, #1
 8001054:	19bb      	adds	r3, r7, r6
 8001056:	2288      	movs	r2, #136	; 0x88
 8001058:	701a      	strb	r2, [r3, #0]

	uint8_t sht_tx[2] = { 0x20, 0x32 };
 800105a:	2098      	movs	r0, #152	; 0x98
 800105c:	0040      	lsls	r0, r0, #1
 800105e:	183b      	adds	r3, r7, r0
 8001060:	4ad9      	ldr	r2, [pc, #868]	; (80013c8 <main+0x420>)
 8001062:	801a      	strh	r2, [r3, #0]
	uint8_t sht_rx[6];
	HAL_StatusTypeDef result;

	result = HAL_I2C_Master_Transmit(&hi2c1, sht_addr, sht_tx, 2, 10);
 8001064:	19bb      	adds	r3, r7, r6
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b299      	uxth	r1, r3
 800106a:	2366      	movs	r3, #102	; 0x66
 800106c:	33ff      	adds	r3, #255	; 0xff
 800106e:	18fc      	adds	r4, r7, r3
 8001070:	183a      	adds	r2, r7, r0
 8001072:	48d6      	ldr	r0, [pc, #856]	; (80013cc <main+0x424>)
 8001074:	230a      	movs	r3, #10
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	2302      	movs	r3, #2
 800107a:	f001 f8e3 	bl	8002244 <HAL_I2C_Master_Transmit>
 800107e:	0003      	movs	r3, r0
 8001080:	7023      	strb	r3, [r4, #0]

	result = HAL_I2C_Master_Receive(&hi2c1, sht_addr, sht_rx, 3, 10);
 8001082:	19bb      	adds	r3, r7, r6
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	b299      	uxth	r1, r3
 8001088:	2366      	movs	r3, #102	; 0x66
 800108a:	33ff      	adds	r3, #255	; 0xff
 800108c:	18fc      	adds	r4, r7, r3
 800108e:	2694      	movs	r6, #148	; 0x94
 8001090:	0076      	lsls	r6, r6, #1
 8001092:	19ba      	adds	r2, r7, r6
 8001094:	48cd      	ldr	r0, [pc, #820]	; (80013cc <main+0x424>)
 8001096:	230a      	movs	r3, #10
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2303      	movs	r3, #3
 800109c:	f001 f9da 	bl	8002454 <HAL_I2C_Master_Receive>
 80010a0:	0003      	movs	r3, r0
 80010a2:	7023      	strb	r3, [r4, #0]

	uint8_t tx_data[100];

	uint16_t st = 0;
 80010a4:	21b1      	movs	r1, #177	; 0xb1
 80010a6:	0049      	lsls	r1, r1, #1
 80010a8:	187b      	adds	r3, r7, r1
 80010aa:	2200      	movs	r2, #0
 80010ac:	801a      	strh	r2, [r3, #0]
	uint32_t temp_seg = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	22ae      	movs	r2, #174	; 0xae
 80010b2:	0052      	lsls	r2, r2, #1
 80010b4:	18ba      	adds	r2, r7, r2
 80010b6:	6013      	str	r3, [r2, #0]
	st = sht_rx[0] << 8;
 80010b8:	19bb      	adds	r3, r7, r6
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b29a      	uxth	r2, r3
 80010be:	0008      	movs	r0, r1
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	0212      	lsls	r2, r2, #8
 80010c4:	801a      	strh	r2, [r3, #0]
	st = st | sht_rx[1];
 80010c6:	19bb      	adds	r3, r7, r6
 80010c8:	785b      	ldrb	r3, [r3, #1]
 80010ca:	b299      	uxth	r1, r3
 80010cc:	183b      	adds	r3, r7, r0
 80010ce:	183a      	adds	r2, r7, r0
 80010d0:	8812      	ldrh	r2, [r2, #0]
 80010d2:	430a      	orrs	r2, r1
 80010d4:	801a      	strh	r2, [r3, #0]

	float temperature = -45 + 175 * ((float) st / 65535);
 80010d6:	183b      	adds	r3, r7, r0
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	0018      	movs	r0, r3
 80010dc:	f7ff fdc2 	bl	8000c64 <__aeabi_ui2f>
 80010e0:	1c03      	adds	r3, r0, #0
 80010e2:	49bb      	ldr	r1, [pc, #748]	; (80013d0 <main+0x428>)
 80010e4:	1c18      	adds	r0, r3, #0
 80010e6:	f7ff f9b5 	bl	8000454 <__aeabi_fdiv>
 80010ea:	1c03      	adds	r3, r0, #0
 80010ec:	49b9      	ldr	r1, [pc, #740]	; (80013d4 <main+0x42c>)
 80010ee:	1c18      	adds	r0, r3, #0
 80010f0:	f7ff faca 	bl	8000688 <__aeabi_fmul>
 80010f4:	1c03      	adds	r3, r0, #0
 80010f6:	49b8      	ldr	r1, [pc, #736]	; (80013d8 <main+0x430>)
 80010f8:	1c18      	adds	r0, r3, #0
 80010fa:	f7ff fc13 	bl	8000924 <__aeabi_fsub>
 80010fe:	1c03      	adds	r3, r0, #0
 8001100:	22ac      	movs	r2, #172	; 0xac
 8001102:	0052      	lsls	r2, r2, #1
 8001104:	18ba      	adds	r2, r7, r2
 8001106:	6013      	str	r3, [r2, #0]
	uint8_t hour_ten_value = 0;
 8001108:	2358      	movs	r3, #88	; 0x58
 800110a:	33ff      	adds	r3, #255	; 0xff
 800110c:	18fb      	adds	r3, r7, r3
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
	uint8_t hour_one_value = 0;
 8001112:	23ab      	movs	r3, #171	; 0xab
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	18fb      	adds	r3, r7, r3
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
	uint8_t minute_ten_value = 0;
 800111c:	2356      	movs	r3, #86	; 0x56
 800111e:	33ff      	adds	r3, #255	; 0xff
 8001120:	18fb      	adds	r3, r7, r3
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
	uint8_t minute_one_value = 0;
 8001126:	23aa      	movs	r3, #170	; 0xaa
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	18fb      	adds	r3, r7, r3
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
	uint8_t second_ten_value = 0;
 8001130:	2354      	movs	r3, #84	; 0x54
 8001132:	33ff      	adds	r3, #255	; 0xff
 8001134:	18fb      	adds	r3, r7, r3
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
	uint8_t second_one_value = 0;
 800113a:	23a9      	movs	r3, #169	; 0xa9
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	18fb      	adds	r3, r7, r3
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]

	data[0] = SEG_A;
 8001144:	0029      	movs	r1, r5
 8001146:	187b      	adds	r3, r7, r1
 8001148:	220a      	movs	r2, #10
 800114a:	701a      	strb	r2, [r3, #0]
	data[1] = SEG_A;
 800114c:	187b      	adds	r3, r7, r1
 800114e:	220a      	movs	r2, #10
 8001150:	705a      	strb	r2, [r3, #1]
	data[2] = SEG_A;
 8001152:	187b      	adds	r3, r7, r1
 8001154:	220a      	movs	r2, #10
 8001156:	709a      	strb	r2, [r3, #2]
	data[3] = SEG_A;
 8001158:	187b      	adds	r3, r7, r1
 800115a:	220a      	movs	r2, #10
 800115c:	70da      	strb	r2, [r3, #3]
	data[4] = SEG_A;
 800115e:	187b      	adds	r3, r7, r1
 8001160:	220a      	movs	r2, #10
 8001162:	711a      	strb	r2, [r3, #4]
	data[5] = SEG_A;
 8001164:	187b      	adds	r3, r7, r1
 8001166:	220a      	movs	r2, #10
 8001168:	715a      	strb	r2, [r3, #5]
	seven_segment second_ten;
	seven_segment second_one;

	display disp;

	hour_ten.a_port = A_HT_GPIO_Port;
 800116a:	20a8      	movs	r0, #168	; 0xa8
 800116c:	183b      	adds	r3, r7, r0
 800116e:	22a0      	movs	r2, #160	; 0xa0
 8001170:	05d2      	lsls	r2, r2, #23
 8001172:	60da      	str	r2, [r3, #12]
	hour_ten.a_pin = A_HT_Pin;
 8001174:	183b      	adds	r3, r7, r0
 8001176:	2202      	movs	r2, #2
 8001178:	821a      	strh	r2, [r3, #16]
	hour_ten.clock_port = CLK_A_HT_GPIO_Port;
 800117a:	183b      	adds	r3, r7, r0
 800117c:	22a0      	movs	r2, #160	; 0xa0
 800117e:	05d2      	lsls	r2, r2, #23
 8001180:	605a      	str	r2, [r3, #4]
	hour_ten.clock_pin = CLK_A_HT_Pin;
 8001182:	183b      	adds	r3, r7, r0
 8001184:	2204      	movs	r2, #4
 8001186:	811a      	strh	r2, [r3, #8]
	hour_ten.enable_port = EN_HT_GPIO_Port;
 8001188:	183b      	adds	r3, r7, r0
 800118a:	22a0      	movs	r2, #160	; 0xa0
 800118c:	05d2      	lsls	r2, r2, #23
 800118e:	615a      	str	r2, [r3, #20]
	hour_ten.enable_pin = EN_HT_Pin;
 8001190:	183b      	adds	r3, r7, r0
 8001192:	2208      	movs	r2, #8
 8001194:	831a      	strh	r2, [r3, #24]
	hour_ten.enable_segment = 1;
 8001196:	183b      	adds	r3, r7, r0
 8001198:	2201      	movs	r2, #1
 800119a:	709a      	strb	r2, [r3, #2]

	hour_one.a_port = A_HO_GPIO_Port;
 800119c:	248c      	movs	r4, #140	; 0x8c
 800119e:	193b      	adds	r3, r7, r4
 80011a0:	22a0      	movs	r2, #160	; 0xa0
 80011a2:	05d2      	lsls	r2, r2, #23
 80011a4:	60da      	str	r2, [r3, #12]
	hour_one.a_pin = A_HO_Pin;
 80011a6:	193b      	adds	r3, r7, r4
 80011a8:	2210      	movs	r2, #16
 80011aa:	821a      	strh	r2, [r3, #16]
	hour_one.clock_port = CLK_A_HO_GPIO_Port;
 80011ac:	193b      	adds	r3, r7, r4
 80011ae:	22a0      	movs	r2, #160	; 0xa0
 80011b0:	05d2      	lsls	r2, r2, #23
 80011b2:	605a      	str	r2, [r3, #4]
	hour_one.clock_pin = CLK_A_HO_Pin;
 80011b4:	193b      	adds	r3, r7, r4
 80011b6:	2220      	movs	r2, #32
 80011b8:	811a      	strh	r2, [r3, #8]
	hour_one.enable_port = EN_HO_GPIO_Port;
 80011ba:	193b      	adds	r3, r7, r4
 80011bc:	4a80      	ldr	r2, [pc, #512]	; (80013c0 <main+0x418>)
 80011be:	615a      	str	r2, [r3, #20]
	hour_one.enable_pin = EN_HO_Pin;
 80011c0:	193b      	adds	r3, r7, r4
 80011c2:	2210      	movs	r2, #16
 80011c4:	831a      	strh	r2, [r3, #24]
	hour_one.enable_segment = 1;
 80011c6:	193b      	adds	r3, r7, r4
 80011c8:	2201      	movs	r2, #1
 80011ca:	709a      	strb	r2, [r3, #2]

	minute_ten.a_port = A_MT_GPIO_Port;
 80011cc:	2570      	movs	r5, #112	; 0x70
 80011ce:	197b      	adds	r3, r7, r5
 80011d0:	22a0      	movs	r2, #160	; 0xa0
 80011d2:	05d2      	lsls	r2, r2, #23
 80011d4:	60da      	str	r2, [r3, #12]
	minute_ten.a_pin = A_MT_Pin;
 80011d6:	197b      	adds	r3, r7, r5
 80011d8:	2240      	movs	r2, #64	; 0x40
 80011da:	821a      	strh	r2, [r3, #16]
	minute_ten.clock_port = CLK_A_MT_GPIO_Port;
 80011dc:	197b      	adds	r3, r7, r5
 80011de:	22a0      	movs	r2, #160	; 0xa0
 80011e0:	05d2      	lsls	r2, r2, #23
 80011e2:	605a      	str	r2, [r3, #4]
	minute_ten.clock_pin = CLK_A_MT_Pin;
 80011e4:	197b      	adds	r3, r7, r5
 80011e6:	2280      	movs	r2, #128	; 0x80
 80011e8:	811a      	strh	r2, [r3, #8]
	minute_ten.enable_port = EN_MT_GPIO_Port;
 80011ea:	197b      	adds	r3, r7, r5
 80011ec:	4a74      	ldr	r2, [pc, #464]	; (80013c0 <main+0x418>)
 80011ee:	615a      	str	r2, [r3, #20]
	minute_ten.enable_pin = EN_MT_Pin;
 80011f0:	197b      	adds	r3, r7, r5
 80011f2:	2220      	movs	r2, #32
 80011f4:	831a      	strh	r2, [r3, #24]
	minute_ten.enable_segment = 1;
 80011f6:	197b      	adds	r3, r7, r5
 80011f8:	2201      	movs	r2, #1
 80011fa:	709a      	strb	r2, [r3, #2]

	minute_one.a_port = A_MO_GPIO_Port;
 80011fc:	4b77      	ldr	r3, [pc, #476]	; (80013dc <main+0x434>)
 80011fe:	21b4      	movs	r1, #180	; 0xb4
 8001200:	0049      	lsls	r1, r1, #1
 8001202:	185b      	adds	r3, r3, r1
 8001204:	19db      	adds	r3, r3, r7
 8001206:	22a0      	movs	r2, #160	; 0xa0
 8001208:	05d2      	lsls	r2, r2, #23
 800120a:	60da      	str	r2, [r3, #12]
	minute_one.a_pin = A_MO_Pin;
 800120c:	4b73      	ldr	r3, [pc, #460]	; (80013dc <main+0x434>)
 800120e:	185b      	adds	r3, r3, r1
 8001210:	19db      	adds	r3, r3, r7
 8001212:	2280      	movs	r2, #128	; 0x80
 8001214:	0052      	lsls	r2, r2, #1
 8001216:	821a      	strh	r2, [r3, #16]
	minute_one.clock_port = CLK_A_MO_GPIO_Port;
 8001218:	4b70      	ldr	r3, [pc, #448]	; (80013dc <main+0x434>)
 800121a:	185b      	adds	r3, r3, r1
 800121c:	19db      	adds	r3, r3, r7
 800121e:	22a0      	movs	r2, #160	; 0xa0
 8001220:	05d2      	lsls	r2, r2, #23
 8001222:	605a      	str	r2, [r3, #4]
	minute_one.clock_pin = CLK_A_MO_Pin;
 8001224:	4b6d      	ldr	r3, [pc, #436]	; (80013dc <main+0x434>)
 8001226:	185b      	adds	r3, r3, r1
 8001228:	19db      	adds	r3, r3, r7
 800122a:	2280      	movs	r2, #128	; 0x80
 800122c:	0092      	lsls	r2, r2, #2
 800122e:	811a      	strh	r2, [r3, #8]
	minute_one.enable_port = EN_MO_GPIO_Port;
 8001230:	4b6a      	ldr	r3, [pc, #424]	; (80013dc <main+0x434>)
 8001232:	185b      	adds	r3, r3, r1
 8001234:	19db      	adds	r3, r3, r7
 8001236:	4a62      	ldr	r2, [pc, #392]	; (80013c0 <main+0x418>)
 8001238:	615a      	str	r2, [r3, #20]
	minute_one.enable_pin = EN_MO_Pin;
 800123a:	4b68      	ldr	r3, [pc, #416]	; (80013dc <main+0x434>)
 800123c:	185b      	adds	r3, r3, r1
 800123e:	19db      	adds	r3, r3, r7
 8001240:	2280      	movs	r2, #128	; 0x80
 8001242:	0152      	lsls	r2, r2, #5
 8001244:	831a      	strh	r2, [r3, #24]
	minute_one.enable_segment = 1;
 8001246:	4b65      	ldr	r3, [pc, #404]	; (80013dc <main+0x434>)
 8001248:	185b      	adds	r3, r3, r1
 800124a:	19db      	adds	r3, r3, r7
 800124c:	2201      	movs	r2, #1
 800124e:	709a      	strb	r2, [r3, #2]

	second_ten.a_port = A_ST_GPIO_Port;
 8001250:	4b63      	ldr	r3, [pc, #396]	; (80013e0 <main+0x438>)
 8001252:	185b      	adds	r3, r3, r1
 8001254:	19db      	adds	r3, r3, r7
 8001256:	22a0      	movs	r2, #160	; 0xa0
 8001258:	05d2      	lsls	r2, r2, #23
 800125a:	60da      	str	r2, [r3, #12]
	second_ten.a_pin = A_ST_Pin;
 800125c:	4b60      	ldr	r3, [pc, #384]	; (80013e0 <main+0x438>)
 800125e:	185b      	adds	r3, r3, r1
 8001260:	19db      	adds	r3, r3, r7
 8001262:	2280      	movs	r2, #128	; 0x80
 8001264:	00d2      	lsls	r2, r2, #3
 8001266:	821a      	strh	r2, [r3, #16]
	second_ten.clock_port = CLK_A_ST_GPIO_Port;
 8001268:	4b5d      	ldr	r3, [pc, #372]	; (80013e0 <main+0x438>)
 800126a:	185b      	adds	r3, r3, r1
 800126c:	19db      	adds	r3, r3, r7
 800126e:	22a0      	movs	r2, #160	; 0xa0
 8001270:	05d2      	lsls	r2, r2, #23
 8001272:	605a      	str	r2, [r3, #4]
	second_ten.clock_pin = CLK_A_ST_Pin;
 8001274:	4b5a      	ldr	r3, [pc, #360]	; (80013e0 <main+0x438>)
 8001276:	185b      	adds	r3, r3, r1
 8001278:	19db      	adds	r3, r3, r7
 800127a:	2280      	movs	r2, #128	; 0x80
 800127c:	0112      	lsls	r2, r2, #4
 800127e:	811a      	strh	r2, [r3, #8]
	second_ten.enable_port = EN_ST_GPIO_Port;
 8001280:	4b57      	ldr	r3, [pc, #348]	; (80013e0 <main+0x438>)
 8001282:	185b      	adds	r3, r3, r1
 8001284:	19db      	adds	r3, r3, r7
 8001286:	4a4e      	ldr	r2, [pc, #312]	; (80013c0 <main+0x418>)
 8001288:	615a      	str	r2, [r3, #20]
	second_ten.enable_pin = EN_ST_Pin;
 800128a:	4b55      	ldr	r3, [pc, #340]	; (80013e0 <main+0x438>)
 800128c:	185b      	adds	r3, r3, r1
 800128e:	19db      	adds	r3, r3, r7
 8001290:	2280      	movs	r2, #128	; 0x80
 8001292:	0192      	lsls	r2, r2, #6
 8001294:	831a      	strh	r2, [r3, #24]
	second_ten.enable_segment = 1;
 8001296:	4b52      	ldr	r3, [pc, #328]	; (80013e0 <main+0x438>)
 8001298:	185b      	adds	r3, r3, r1
 800129a:	19db      	adds	r3, r3, r7
 800129c:	2201      	movs	r2, #1
 800129e:	709a      	strb	r2, [r3, #2]

	second_one.a_port = A_SO_GPIO_Port;
 80012a0:	4b50      	ldr	r3, [pc, #320]	; (80013e4 <main+0x43c>)
 80012a2:	185b      	adds	r3, r3, r1
 80012a4:	19db      	adds	r3, r3, r7
 80012a6:	22a0      	movs	r2, #160	; 0xa0
 80012a8:	05d2      	lsls	r2, r2, #23
 80012aa:	60da      	str	r2, [r3, #12]
	second_one.a_pin = A_SO_Pin;
 80012ac:	4b4d      	ldr	r3, [pc, #308]	; (80013e4 <main+0x43c>)
 80012ae:	185b      	adds	r3, r3, r1
 80012b0:	19db      	adds	r3, r3, r7
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	0152      	lsls	r2, r2, #5
 80012b6:	821a      	strh	r2, [r3, #16]
	second_one.clock_port = CLK_A_SO_GPIO_Port;
 80012b8:	4b4a      	ldr	r3, [pc, #296]	; (80013e4 <main+0x43c>)
 80012ba:	185b      	adds	r3, r3, r1
 80012bc:	19db      	adds	r3, r3, r7
 80012be:	22a0      	movs	r2, #160	; 0xa0
 80012c0:	05d2      	lsls	r2, r2, #23
 80012c2:	605a      	str	r2, [r3, #4]
	second_one.clock_pin = CLK_A_SO_Pin;
 80012c4:	4b47      	ldr	r3, [pc, #284]	; (80013e4 <main+0x43c>)
 80012c6:	185b      	adds	r3, r3, r1
 80012c8:	19db      	adds	r3, r3, r7
 80012ca:	4a47      	ldr	r2, [pc, #284]	; (80013e8 <main+0x440>)
 80012cc:	811a      	strh	r2, [r3, #8]
	second_one.enable_port = EN_SO_GPIO_Port;
 80012ce:	4b45      	ldr	r3, [pc, #276]	; (80013e4 <main+0x43c>)
 80012d0:	185b      	adds	r3, r3, r1
 80012d2:	19db      	adds	r3, r3, r7
 80012d4:	4a3a      	ldr	r2, [pc, #232]	; (80013c0 <main+0x418>)
 80012d6:	615a      	str	r2, [r3, #20]
	second_one.enable_pin = EN_SO_Pin;
 80012d8:	4b42      	ldr	r3, [pc, #264]	; (80013e4 <main+0x43c>)
 80012da:	185b      	adds	r3, r3, r1
 80012dc:	19db      	adds	r3, r3, r7
 80012de:	2280      	movs	r2, #128	; 0x80
 80012e0:	01d2      	lsls	r2, r2, #7
 80012e2:	831a      	strh	r2, [r3, #24]
	second_one.enable_segment = 1;
 80012e4:	4b3f      	ldr	r3, [pc, #252]	; (80013e4 <main+0x43c>)
 80012e6:	185b      	adds	r3, r3, r1
 80012e8:	19db      	adds	r3, r3, r7
 80012ea:	2201      	movs	r2, #1
 80012ec:	709a      	strb	r2, [r3, #2]

	hour_ten.data = 0;
 80012ee:	183b      	adds	r3, r7, r0
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
	hour_ten.data_old = 255;
 80012f4:	183b      	adds	r3, r7, r0
 80012f6:	22ff      	movs	r2, #255	; 0xff
 80012f8:	705a      	strb	r2, [r3, #1]
	hour_one.data = 0;
 80012fa:	193b      	adds	r3, r7, r4
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]
	hour_one.data_old = 255;
 8001300:	193b      	adds	r3, r7, r4
 8001302:	22ff      	movs	r2, #255	; 0xff
 8001304:	705a      	strb	r2, [r3, #1]
	minute_ten.data = 0;
 8001306:	197b      	adds	r3, r7, r5
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
	minute_ten.data_old = 255;
 800130c:	197b      	adds	r3, r7, r5
 800130e:	22ff      	movs	r2, #255	; 0xff
 8001310:	705a      	strb	r2, [r3, #1]
	minute_one.data = 0;
 8001312:	4b32      	ldr	r3, [pc, #200]	; (80013dc <main+0x434>)
 8001314:	185b      	adds	r3, r3, r1
 8001316:	19db      	adds	r3, r3, r7
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
	minute_one.data_old = 255;
 800131c:	4b2f      	ldr	r3, [pc, #188]	; (80013dc <main+0x434>)
 800131e:	185b      	adds	r3, r3, r1
 8001320:	19db      	adds	r3, r3, r7
 8001322:	22ff      	movs	r2, #255	; 0xff
 8001324:	705a      	strb	r2, [r3, #1]
	second_ten.data = 0;
 8001326:	4b2e      	ldr	r3, [pc, #184]	; (80013e0 <main+0x438>)
 8001328:	185b      	adds	r3, r3, r1
 800132a:	19db      	adds	r3, r3, r7
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
	second_ten.data_old = 255;
 8001330:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <main+0x438>)
 8001332:	185b      	adds	r3, r3, r1
 8001334:	19db      	adds	r3, r3, r7
 8001336:	22ff      	movs	r2, #255	; 0xff
 8001338:	705a      	strb	r2, [r3, #1]
	second_one.data = 0;
 800133a:	4b2a      	ldr	r3, [pc, #168]	; (80013e4 <main+0x43c>)
 800133c:	185b      	adds	r3, r3, r1
 800133e:	19db      	adds	r3, r3, r7
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
	second_one.data_old = 255;
 8001344:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <main+0x43c>)
 8001346:	185b      	adds	r3, r3, r1
 8001348:	19db      	adds	r3, r3, r7
 800134a:	22ff      	movs	r2, #255	; 0xff
 800134c:	705a      	strb	r2, [r3, #1]

	disp.hour_ten = &hour_ten;
 800134e:	4b27      	ldr	r3, [pc, #156]	; (80013ec <main+0x444>)
 8001350:	185b      	adds	r3, r3, r1
 8001352:	19db      	adds	r3, r3, r7
 8001354:	183a      	adds	r2, r7, r0
 8001356:	605a      	str	r2, [r3, #4]
	disp.hour_one = &hour_one;
 8001358:	4b24      	ldr	r3, [pc, #144]	; (80013ec <main+0x444>)
 800135a:	185b      	adds	r3, r3, r1
 800135c:	19db      	adds	r3, r3, r7
 800135e:	193a      	adds	r2, r7, r4
 8001360:	609a      	str	r2, [r3, #8]
	disp.minute_ten = &minute_ten;
 8001362:	4b22      	ldr	r3, [pc, #136]	; (80013ec <main+0x444>)
 8001364:	185b      	adds	r3, r3, r1
 8001366:	19db      	adds	r3, r3, r7
 8001368:	197a      	adds	r2, r7, r5
 800136a:	60da      	str	r2, [r3, #12]
	disp.minute_one = &minute_one;
 800136c:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <main+0x444>)
 800136e:	185b      	adds	r3, r3, r1
 8001370:	19db      	adds	r3, r3, r7
 8001372:	2254      	movs	r2, #84	; 0x54
 8001374:	18ba      	adds	r2, r7, r2
 8001376:	611a      	str	r2, [r3, #16]
	disp.second_ten = &second_ten;
 8001378:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <main+0x444>)
 800137a:	185b      	adds	r3, r3, r1
 800137c:	19db      	adds	r3, r3, r7
 800137e:	2238      	movs	r2, #56	; 0x38
 8001380:	18ba      	adds	r2, r7, r2
 8001382:	615a      	str	r2, [r3, #20]
	disp.second_one = &second_one;
 8001384:	4b19      	ldr	r3, [pc, #100]	; (80013ec <main+0x444>)
 8001386:	185b      	adds	r3, r3, r1
 8001388:	19db      	adds	r3, r3, r7
 800138a:	221c      	movs	r2, #28
 800138c:	18ba      	adds	r2, r7, r2
 800138e:	619a      	str	r2, [r3, #24]

	disp.data = 0;
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <main+0x444>)
 8001392:	185b      	adds	r3, r3, r1
 8001394:	19db      	adds	r3, r3, r7
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
	display_write(&disp);
 800139a:	003b      	movs	r3, r7
 800139c:	0018      	movs	r0, r3
 800139e:	f7ff fd21 	bl	8000de4 <display_write>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		disp.data++;
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <main+0x444>)
 80013a4:	21b4      	movs	r1, #180	; 0xb4
 80013a6:	0049      	lsls	r1, r1, #1
 80013a8:	185b      	adds	r3, r3, r1
 80013aa:	19db      	adds	r3, r3, r7
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <main+0x444>)
 80013b2:	185b      	adds	r3, r3, r1
 80013b4:	19db      	adds	r3, r3, r7
 80013b6:	601a      	str	r2, [r3, #0]
		display_write(&disp);
 80013b8:	003b      	movs	r3, r7
 80013ba:	0018      	movs	r0, r3
 80013bc:	e018      	b.n	80013f0 <main+0x448>
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	50000400 	.word	0x50000400
 80013c4:	08004fcc 	.word	0x08004fcc
 80013c8:	00003220 	.word	0x00003220
 80013cc:	20000140 	.word	0x20000140
 80013d0:	477fff00 	.word	0x477fff00
 80013d4:	432f0000 	.word	0x432f0000
 80013d8:	42340000 	.word	0x42340000
 80013dc:	fffffeec 	.word	0xfffffeec
 80013e0:	fffffed0 	.word	0xfffffed0
 80013e4:	fffffeb4 	.word	0xfffffeb4
 80013e8:	ffff8000 	.word	0xffff8000
 80013ec:	fffffe98 	.word	0xfffffe98
 80013f0:	f7ff fcf8 	bl	8000de4 <display_write>
		HAL_Delay(1);
 80013f4:	2001      	movs	r0, #1
 80013f6:	f000 fc2b 	bl	8001c50 <HAL_Delay>
		disp.data++;
 80013fa:	e7d2      	b.n	80013a2 <main+0x3fa>

080013fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b099      	sub	sp, #100	; 0x64
 8001400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001402:	242c      	movs	r4, #44	; 0x2c
 8001404:	193b      	adds	r3, r7, r4
 8001406:	0018      	movs	r0, r3
 8001408:	2334      	movs	r3, #52	; 0x34
 800140a:	001a      	movs	r2, r3
 800140c:	2100      	movs	r1, #0
 800140e:	f003 fda5 	bl	8004f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001412:	2318      	movs	r3, #24
 8001414:	18fb      	adds	r3, r7, r3
 8001416:	0018      	movs	r0, r3
 8001418:	2314      	movs	r3, #20
 800141a:	001a      	movs	r2, r3
 800141c:	2100      	movs	r1, #0
 800141e:	f003 fd9d 	bl	8004f5c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001422:	003b      	movs	r3, r7
 8001424:	0018      	movs	r0, r3
 8001426:	2318      	movs	r3, #24
 8001428:	001a      	movs	r2, r3
 800142a:	2100      	movs	r1, #0
 800142c:	f003 fd96 	bl	8004f5c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001430:	4b33      	ldr	r3, [pc, #204]	; (8001500 <SystemClock_Config+0x104>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a33      	ldr	r2, [pc, #204]	; (8001504 <SystemClock_Config+0x108>)
 8001436:	401a      	ands	r2, r3
 8001438:	4b31      	ldr	r3, [pc, #196]	; (8001500 <SystemClock_Config+0x104>)
 800143a:	2180      	movs	r1, #128	; 0x80
 800143c:	0109      	lsls	r1, r1, #4
 800143e:	430a      	orrs	r2, r1
 8001440:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001442:	f001 fc5d 	bl	8002d00 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001446:	4b30      	ldr	r3, [pc, #192]	; (8001508 <SystemClock_Config+0x10c>)
 8001448:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800144a:	4b2f      	ldr	r3, [pc, #188]	; (8001508 <SystemClock_Config+0x10c>)
 800144c:	492d      	ldr	r1, [pc, #180]	; (8001504 <SystemClock_Config+0x108>)
 800144e:	400a      	ands	r2, r1
 8001450:	651a      	str	r2, [r3, #80]	; 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001452:	193b      	adds	r3, r7, r4
 8001454:	2206      	movs	r2, #6
 8001456:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001458:	193b      	adds	r3, r7, r4
 800145a:	2280      	movs	r2, #128	; 0x80
 800145c:	0052      	lsls	r2, r2, #1
 800145e:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001460:	0021      	movs	r1, r4
 8001462:	187b      	adds	r3, r7, r1
 8001464:	2201      	movs	r2, #1
 8001466:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001468:	187b      	adds	r3, r7, r1
 800146a:	2210      	movs	r2, #16
 800146c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800146e:	187b      	adds	r3, r7, r1
 8001470:	2202      	movs	r2, #2
 8001472:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001474:	187b      	adds	r3, r7, r1
 8001476:	2200      	movs	r2, #0
 8001478:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800147a:	187b      	adds	r3, r7, r1
 800147c:	2280      	movs	r2, #128	; 0x80
 800147e:	02d2      	lsls	r2, r2, #11
 8001480:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001482:	187b      	adds	r3, r7, r1
 8001484:	2280      	movs	r2, #128	; 0x80
 8001486:	03d2      	lsls	r2, r2, #15
 8001488:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800148a:	187b      	adds	r3, r7, r1
 800148c:	0018      	movs	r0, r3
 800148e:	f001 fc45 	bl	8002d1c <HAL_RCC_OscConfig>
 8001492:	1e03      	subs	r3, r0, #0
 8001494:	d001      	beq.n	800149a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001496:	f000 f9fd 	bl	8001894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800149a:	2118      	movs	r1, #24
 800149c:	187b      	adds	r3, r7, r1
 800149e:	220f      	movs	r2, #15
 80014a0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a2:	187b      	adds	r3, r7, r1
 80014a4:	2203      	movs	r2, #3
 80014a6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a8:	187b      	adds	r3, r7, r1
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014ae:	187b      	adds	r3, r7, r1
 80014b0:	2200      	movs	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b4:	187b      	adds	r3, r7, r1
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014ba:	187b      	adds	r3, r7, r1
 80014bc:	2101      	movs	r1, #1
 80014be:	0018      	movs	r0, r3
 80014c0:	f001 ffa8 	bl	8003414 <HAL_RCC_ClockConfig>
 80014c4:	1e03      	subs	r3, r0, #0
 80014c6:	d001      	beq.n	80014cc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80014c8:	f000 f9e4 	bl	8001894 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80014cc:	003b      	movs	r3, r7
 80014ce:	222a      	movs	r2, #42	; 0x2a
 80014d0:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014d2:	003b      	movs	r3, r7
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014d8:	003b      	movs	r3, r7
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80014de:	003b      	movs	r3, r7
 80014e0:	2280      	movs	r2, #128	; 0x80
 80014e2:	0252      	lsls	r2, r2, #9
 80014e4:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e6:	003b      	movs	r3, r7
 80014e8:	0018      	movs	r0, r3
 80014ea:	f002 f9b7 	bl	800385c <HAL_RCCEx_PeriphCLKConfig>
 80014ee:	1e03      	subs	r3, r0, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80014f2:	f000 f9cf 	bl	8001894 <Error_Handler>
  }
}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b019      	add	sp, #100	; 0x64
 80014fc:	bd90      	pop	{r4, r7, pc}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	40007000 	.word	0x40007000
 8001504:	ffffe7ff 	.word	0xffffe7ff
 8001508:	40021000 	.word	0x40021000

0800150c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <MX_I2C1_Init+0x74>)
 8001512:	4a1c      	ldr	r2, [pc, #112]	; (8001584 <MX_I2C1_Init+0x78>)
 8001514:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001516:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <MX_I2C1_Init+0x74>)
 8001518:	4a1b      	ldr	r2, [pc, #108]	; (8001588 <MX_I2C1_Init+0x7c>)
 800151a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <MX_I2C1_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001522:	4b17      	ldr	r3, [pc, #92]	; (8001580 <MX_I2C1_Init+0x74>)
 8001524:	2201      	movs	r2, #1
 8001526:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001528:	4b15      	ldr	r3, [pc, #84]	; (8001580 <MX_I2C1_Init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <MX_I2C1_Init+0x74>)
 8001530:	2200      	movs	r2, #0
 8001532:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_I2C1_Init+0x74>)
 8001536:	2200      	movs	r2, #0
 8001538:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_I2C1_Init+0x74>)
 800153c:	2200      	movs	r2, #0
 800153e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_I2C1_Init+0x74>)
 8001542:	2200      	movs	r2, #0
 8001544:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_I2C1_Init+0x74>)
 8001548:	0018      	movs	r0, r3
 800154a:	f000 fde5 	bl	8002118 <HAL_I2C_Init>
 800154e:	1e03      	subs	r3, r0, #0
 8001550:	d001      	beq.n	8001556 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001552:	f000 f99f 	bl	8001894 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <MX_I2C1_Init+0x74>)
 8001558:	2100      	movs	r1, #0
 800155a:	0018      	movs	r0, r3
 800155c:	f001 fb38 	bl	8002bd0 <HAL_I2CEx_ConfigAnalogFilter>
 8001560:	1e03      	subs	r3, r0, #0
 8001562:	d001      	beq.n	8001568 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001564:	f000 f996 	bl	8001894 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <MX_I2C1_Init+0x74>)
 800156a:	2100      	movs	r1, #0
 800156c:	0018      	movs	r0, r3
 800156e:	f001 fb7b 	bl	8002c68 <HAL_I2CEx_ConfigDigitalFilter>
 8001572:	1e03      	subs	r3, r0, #0
 8001574:	d001      	beq.n	800157a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001576:	f000 f98d 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000140 	.word	0x20000140
 8001584:	40005400 	.word	0x40005400
 8001588:	00707cbb 	.word	0x00707cbb

0800158c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MX_RTC_Init+0x4c>)
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <MX_RTC_Init+0x50>)
 8001594:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <MX_RTC_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800159c:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <MX_RTC_Init+0x4c>)
 800159e:	227f      	movs	r2, #127	; 0x7f
 80015a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <MX_RTC_Init+0x4c>)
 80015a4:	22ff      	movs	r2, #255	; 0xff
 80015a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <MX_RTC_Init+0x4c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <MX_RTC_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <MX_RTC_Init+0x4c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <MX_RTC_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <MX_RTC_Init+0x4c>)
 80015c2:	0018      	movs	r0, r3
 80015c4:	f002 fa76 	bl	8003ab4 <HAL_RTC_Init>
 80015c8:	1e03      	subs	r3, r0, #0
 80015ca:	d001      	beq.n	80015d0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80015cc:	f000 f962 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	20000194 	.word	0x20000194
 80015dc:	40002800 	.word	0x40002800

080015e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015e6:	2318      	movs	r3, #24
 80015e8:	18fb      	adds	r3, r7, r3
 80015ea:	0018      	movs	r0, r3
 80015ec:	2310      	movs	r3, #16
 80015ee:	001a      	movs	r2, r3
 80015f0:	2100      	movs	r1, #0
 80015f2:	f003 fcb3 	bl	8004f5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f6:	2310      	movs	r3, #16
 80015f8:	18fb      	adds	r3, r7, r3
 80015fa:	0018      	movs	r0, r3
 80015fc:	2308      	movs	r3, #8
 80015fe:	001a      	movs	r2, r3
 8001600:	2100      	movs	r1, #0
 8001602:	f003 fcab 	bl	8004f5c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001606:	003b      	movs	r3, r7
 8001608:	0018      	movs	r0, r3
 800160a:	2310      	movs	r3, #16
 800160c:	001a      	movs	r2, r3
 800160e:	2100      	movs	r1, #0
 8001610:	f003 fca4 	bl	8004f5c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001614:	4b30      	ldr	r3, [pc, #192]	; (80016d8 <MX_TIM2_Init+0xf8>)
 8001616:	2280      	movs	r2, #128	; 0x80
 8001618:	05d2      	lsls	r2, r2, #23
 800161a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 800161c:	4b2e      	ldr	r3, [pc, #184]	; (80016d8 <MX_TIM2_Init+0xf8>)
 800161e:	221f      	movs	r2, #31
 8001620:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001622:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <MX_TIM2_Init+0xf8>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001628:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <MX_TIM2_Init+0xf8>)
 800162a:	4a2c      	ldr	r2, [pc, #176]	; (80016dc <MX_TIM2_Init+0xfc>)
 800162c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162e:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <MX_TIM2_Init+0xf8>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001634:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <MX_TIM2_Init+0xf8>)
 8001636:	2280      	movs	r2, #128	; 0x80
 8001638:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800163a:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <MX_TIM2_Init+0xf8>)
 800163c:	0018      	movs	r0, r3
 800163e:	f002 fb6b 	bl	8003d18 <HAL_TIM_Base_Init>
 8001642:	1e03      	subs	r3, r0, #0
 8001644:	d001      	beq.n	800164a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001646:	f000 f925 	bl	8001894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164a:	2118      	movs	r1, #24
 800164c:	187b      	adds	r3, r7, r1
 800164e:	2280      	movs	r2, #128	; 0x80
 8001650:	0152      	lsls	r2, r2, #5
 8001652:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001654:	187a      	adds	r2, r7, r1
 8001656:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <MX_TIM2_Init+0xf8>)
 8001658:	0011      	movs	r1, r2
 800165a:	0018      	movs	r0, r3
 800165c:	f002 fcaa 	bl	8003fb4 <HAL_TIM_ConfigClockSource>
 8001660:	1e03      	subs	r3, r0, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001664:	f000 f916 	bl	8001894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001668:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <MX_TIM2_Init+0xf8>)
 800166a:	0018      	movs	r0, r3
 800166c:	f002 fb94 	bl	8003d98 <HAL_TIM_PWM_Init>
 8001670:	1e03      	subs	r3, r0, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001674:	f000 f90e 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001678:	2110      	movs	r1, #16
 800167a:	187b      	adds	r3, r7, r1
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001680:	187b      	adds	r3, r7, r1
 8001682:	2200      	movs	r2, #0
 8001684:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001686:	187a      	adds	r2, r7, r1
 8001688:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <MX_TIM2_Init+0xf8>)
 800168a:	0011      	movs	r1, r2
 800168c:	0018      	movs	r0, r3
 800168e:	f002 ff4d 	bl	800452c <HAL_TIMEx_MasterConfigSynchronization>
 8001692:	1e03      	subs	r3, r0, #0
 8001694:	d001      	beq.n	800169a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001696:	f000 f8fd 	bl	8001894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800169a:	003b      	movs	r3, r7
 800169c:	2260      	movs	r2, #96	; 0x60
 800169e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 499;
 80016a0:	003b      	movs	r3, r7
 80016a2:	22f4      	movs	r2, #244	; 0xf4
 80016a4:	32ff      	adds	r2, #255	; 0xff
 80016a6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a8:	003b      	movs	r3, r7
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ae:	003b      	movs	r3, r7
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016b4:	0039      	movs	r1, r7
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <MX_TIM2_Init+0xf8>)
 80016b8:	2208      	movs	r2, #8
 80016ba:	0018      	movs	r0, r3
 80016bc:	f002 fbb4 	bl	8003e28 <HAL_TIM_PWM_ConfigChannel>
 80016c0:	1e03      	subs	r3, r0, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80016c4:	f000 f8e6 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <MX_TIM2_Init+0xf8>)
 80016ca:	0018      	movs	r0, r3
 80016cc:	f000 f970 	bl	80019b0 <HAL_TIM_MspPostInit>

}
 80016d0:	46c0      	nop			; (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b00a      	add	sp, #40	; 0x28
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200001b8 	.word	0x200001b8
 80016dc:	000003e7 	.word	0x000003e7

080016e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <MX_USART2_UART_Init+0x58>)
 80016e6:	4a15      	ldr	r2, [pc, #84]	; (800173c <MX_USART2_UART_Init+0x5c>)
 80016e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <MX_USART2_UART_Init+0x58>)
 80016ec:	22e1      	movs	r2, #225	; 0xe1
 80016ee:	0252      	lsls	r2, r2, #9
 80016f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <MX_USART2_UART_Init+0x58>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <MX_USART2_UART_Init+0x58>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <MX_USART2_UART_Init+0x58>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <MX_USART2_UART_Init+0x58>)
 8001706:	220c      	movs	r2, #12
 8001708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <MX_USART2_UART_Init+0x58>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <MX_USART2_UART_Init+0x58>)
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <MX_USART2_UART_Init+0x58>)
 8001718:	2200      	movs	r2, #0
 800171a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <MX_USART2_UART_Init+0x58>)
 800171e:	2200      	movs	r2, #0
 8001720:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001722:	4b05      	ldr	r3, [pc, #20]	; (8001738 <MX_USART2_UART_Init+0x58>)
 8001724:	0018      	movs	r0, r3
 8001726:	f002 ff51 	bl	80045cc <HAL_UART_Init>
 800172a:	1e03      	subs	r3, r0, #0
 800172c:	d001      	beq.n	8001732 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800172e:	f000 f8b1 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	200001f8 	.word	0x200001f8
 800173c:	40004400 	.word	0x40004400

08001740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001740:	b590      	push	{r4, r7, lr}
 8001742:	b089      	sub	sp, #36	; 0x24
 8001744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001746:	240c      	movs	r4, #12
 8001748:	193b      	adds	r3, r7, r4
 800174a:	0018      	movs	r0, r3
 800174c:	2314      	movs	r3, #20
 800174e:	001a      	movs	r2, r3
 8001750:	2100      	movs	r1, #0
 8001752:	f003 fc03 	bl	8004f5c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001756:	4b49      	ldr	r3, [pc, #292]	; (800187c <MX_GPIO_Init+0x13c>)
 8001758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800175a:	4b48      	ldr	r3, [pc, #288]	; (800187c <MX_GPIO_Init+0x13c>)
 800175c:	2104      	movs	r1, #4
 800175e:	430a      	orrs	r2, r1
 8001760:	62da      	str	r2, [r3, #44]	; 0x2c
 8001762:	4b46      	ldr	r3, [pc, #280]	; (800187c <MX_GPIO_Init+0x13c>)
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001766:	2204      	movs	r2, #4
 8001768:	4013      	ands	r3, r2
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	4b43      	ldr	r3, [pc, #268]	; (800187c <MX_GPIO_Init+0x13c>)
 8001770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001772:	4b42      	ldr	r3, [pc, #264]	; (800187c <MX_GPIO_Init+0x13c>)
 8001774:	2101      	movs	r1, #1
 8001776:	430a      	orrs	r2, r1
 8001778:	62da      	str	r2, [r3, #44]	; 0x2c
 800177a:	4b40      	ldr	r3, [pc, #256]	; (800187c <MX_GPIO_Init+0x13c>)
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177e:	2201      	movs	r2, #1
 8001780:	4013      	ands	r3, r2
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001786:	4b3d      	ldr	r3, [pc, #244]	; (800187c <MX_GPIO_Init+0x13c>)
 8001788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800178a:	4b3c      	ldr	r3, [pc, #240]	; (800187c <MX_GPIO_Init+0x13c>)
 800178c:	2102      	movs	r1, #2
 800178e:	430a      	orrs	r2, r1
 8001790:	62da      	str	r2, [r3, #44]	; 0x2c
 8001792:	4b3a      	ldr	r3, [pc, #232]	; (800187c <MX_GPIO_Init+0x13c>)
 8001794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001796:	2202      	movs	r2, #2
 8001798:	4013      	ands	r3, r2
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLEAR_Pin|A_HT_Pin|CLK_A_HT_Pin|EN_HT_Pin
 800179e:	4938      	ldr	r1, [pc, #224]	; (8001880 <MX_GPIO_Init+0x140>)
 80017a0:	23a0      	movs	r3, #160	; 0xa0
 80017a2:	05db      	lsls	r3, r3, #23
 80017a4:	2200      	movs	r2, #0
 80017a6:	0018      	movs	r0, r3
 80017a8:	f000 fc98 	bl	80020dc <HAL_GPIO_WritePin>
                          |A_HO_Pin|CLK_A_HO_Pin|A_MT_Pin|CLK_A_MT_Pin
                          |A_MO_Pin|CLK_A_MO_Pin|A_ST_Pin|CLK_A_ST_Pin
                          |A_SO_Pin|CLK_A_SO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|EN_MO_Pin|EN_ST_Pin|EN_SO_Pin
 80017ac:	4935      	ldr	r1, [pc, #212]	; (8001884 <MX_GPIO_Init+0x144>)
 80017ae:	4b36      	ldr	r3, [pc, #216]	; (8001888 <MX_GPIO_Init+0x148>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	0018      	movs	r0, r3
 80017b4:	f000 fc92 	bl	80020dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CLEAR_Pin A_HT_Pin CLK_A_HT_Pin A_HO_Pin
                           CLK_A_HO_Pin A_MT_Pin CLK_A_MT_Pin A_MO_Pin
                           CLK_A_MO_Pin A_ST_Pin CLK_A_ST_Pin A_SO_Pin
                           CLK_A_SO_Pin */
  GPIO_InitStruct.Pin = CLEAR_Pin|A_HT_Pin|CLK_A_HT_Pin|A_HO_Pin
 80017b8:	193b      	adds	r3, r7, r4
 80017ba:	4a34      	ldr	r2, [pc, #208]	; (800188c <MX_GPIO_Init+0x14c>)
 80017bc:	601a      	str	r2, [r3, #0]
                          |CLK_A_HO_Pin|A_MT_Pin|CLK_A_MT_Pin|A_MO_Pin
                          |CLK_A_MO_Pin|A_ST_Pin|CLK_A_ST_Pin|A_SO_Pin
                          |CLK_A_SO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	193b      	adds	r3, r7, r4
 80017c0:	2201      	movs	r2, #1
 80017c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	193b      	adds	r3, r7, r4
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ca:	193b      	adds	r3, r7, r4
 80017cc:	2202      	movs	r2, #2
 80017ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d0:	193a      	adds	r2, r7, r4
 80017d2:	23a0      	movs	r3, #160	; 0xa0
 80017d4:	05db      	lsls	r3, r3, #23
 80017d6:	0011      	movs	r1, r2
 80017d8:	0018      	movs	r0, r3
 80017da:	f000 fb11 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_HT_Pin */
  GPIO_InitStruct.Pin = EN_HT_Pin;
 80017de:	193b      	adds	r3, r7, r4
 80017e0:	2208      	movs	r2, #8
 80017e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e4:	193b      	adds	r3, r7, r4
 80017e6:	2201      	movs	r2, #1
 80017e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	193b      	adds	r3, r7, r4
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f0:	193b      	adds	r3, r7, r4
 80017f2:	2203      	movs	r2, #3
 80017f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EN_HT_GPIO_Port, &GPIO_InitStruct);
 80017f6:	193a      	adds	r2, r7, r4
 80017f8:	23a0      	movs	r3, #160	; 0xa0
 80017fa:	05db      	lsls	r3, r3, #23
 80017fc:	0011      	movs	r1, r2
 80017fe:	0018      	movs	r0, r3
 8001800:	f000 fafe 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_UP_Pin BTN_DOWN_Pin BTN_LEFT_Pin BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_DOWN_Pin|BTN_LEFT_Pin|BTN_RIGHT_Pin;
 8001804:	193b      	adds	r3, r7, r4
 8001806:	220f      	movs	r2, #15
 8001808:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180a:	193b      	adds	r3, r7, r4
 800180c:	2200      	movs	r2, #0
 800180e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	193b      	adds	r3, r7, r4
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001816:	193b      	adds	r3, r7, r4
 8001818:	4a1b      	ldr	r2, [pc, #108]	; (8001888 <MX_GPIO_Init+0x148>)
 800181a:	0019      	movs	r1, r3
 800181c:	0010      	movs	r0, r2
 800181e:	f000 faef 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001822:	0021      	movs	r1, r4
 8001824:	187b      	adds	r3, r7, r1
 8001826:	2280      	movs	r2, #128	; 0x80
 8001828:	0112      	lsls	r2, r2, #4
 800182a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182c:	000c      	movs	r4, r1
 800182e:	193b      	adds	r3, r7, r4
 8001830:	2201      	movs	r2, #1
 8001832:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	193b      	adds	r3, r7, r4
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	193b      	adds	r3, r7, r4
 800183c:	2200      	movs	r2, #0
 800183e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001840:	193b      	adds	r3, r7, r4
 8001842:	4a11      	ldr	r2, [pc, #68]	; (8001888 <MX_GPIO_Init+0x148>)
 8001844:	0019      	movs	r1, r3
 8001846:	0010      	movs	r0, r2
 8001848:	f000 fada 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_MO_Pin EN_ST_Pin EN_SO_Pin EN_HO_Pin
                           EN_MT_Pin */
  GPIO_InitStruct.Pin = EN_MO_Pin|EN_ST_Pin|EN_SO_Pin|EN_HO_Pin
 800184c:	0021      	movs	r1, r4
 800184e:	187b      	adds	r3, r7, r1
 8001850:	4a0f      	ldr	r2, [pc, #60]	; (8001890 <MX_GPIO_Init+0x150>)
 8001852:	601a      	str	r2, [r3, #0]
                          |EN_MT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001854:	187b      	adds	r3, r7, r1
 8001856:	2201      	movs	r2, #1
 8001858:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	187b      	adds	r3, r7, r1
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001860:	187b      	adds	r3, r7, r1
 8001862:	2202      	movs	r2, #2
 8001864:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001866:	187b      	adds	r3, r7, r1
 8001868:	4a07      	ldr	r2, [pc, #28]	; (8001888 <MX_GPIO_Init+0x148>)
 800186a:	0019      	movs	r1, r3
 800186c:	0010      	movs	r0, r2
 800186e:	f000 fac7 	bl	8001e00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	46bd      	mov	sp, r7
 8001876:	b009      	add	sp, #36	; 0x24
 8001878:	bd90      	pop	{r4, r7, pc}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	40021000 	.word	0x40021000
 8001880:	00009fff 	.word	0x00009fff
 8001884:	00007830 	.word	0x00007830
 8001888:	50000400 	.word	0x50000400
 800188c:	00009ff7 	.word	0x00009ff7
 8001890:	00007030 	.word	0x00007030

08001894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001898:	b672      	cpsid	i
}
 800189a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800189c:	e7fe      	b.n	800189c <Error_Handler+0x8>
	...

080018a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <HAL_MspInit+0x24>)
 80018a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_MspInit+0x24>)
 80018aa:	2101      	movs	r1, #1
 80018ac:	430a      	orrs	r2, r1
 80018ae:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b0:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <HAL_MspInit+0x24>)
 80018b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <HAL_MspInit+0x24>)
 80018b6:	2180      	movs	r1, #128	; 0x80
 80018b8:	0549      	lsls	r1, r1, #21
 80018ba:	430a      	orrs	r2, r1
 80018bc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40021000 	.word	0x40021000

080018c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	240c      	movs	r4, #12
 80018d2:	193b      	adds	r3, r7, r4
 80018d4:	0018      	movs	r0, r3
 80018d6:	2314      	movs	r3, #20
 80018d8:	001a      	movs	r2, r3
 80018da:	2100      	movs	r1, #0
 80018dc:	f003 fb3e 	bl	8004f5c <memset>
  if(hi2c->Instance==I2C1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a18      	ldr	r2, [pc, #96]	; (8001948 <HAL_I2C_MspInit+0x80>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d129      	bne.n	800193e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	4b18      	ldr	r3, [pc, #96]	; (800194c <HAL_I2C_MspInit+0x84>)
 80018ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <HAL_I2C_MspInit+0x84>)
 80018f0:	2102      	movs	r1, #2
 80018f2:	430a      	orrs	r2, r1
 80018f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_I2C_MspInit+0x84>)
 80018f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fa:	2202      	movs	r2, #2
 80018fc:	4013      	ands	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001902:	193b      	adds	r3, r7, r4
 8001904:	22c0      	movs	r2, #192	; 0xc0
 8001906:	0092      	lsls	r2, r2, #2
 8001908:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800190a:	0021      	movs	r1, r4
 800190c:	187b      	adds	r3, r7, r1
 800190e:	2212      	movs	r2, #18
 8001910:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	187b      	adds	r3, r7, r1
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001918:	187b      	adds	r3, r7, r1
 800191a:	2203      	movs	r2, #3
 800191c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800191e:	187b      	adds	r3, r7, r1
 8001920:	2204      	movs	r2, #4
 8001922:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001924:	187b      	adds	r3, r7, r1
 8001926:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <HAL_I2C_MspInit+0x88>)
 8001928:	0019      	movs	r1, r3
 800192a:	0010      	movs	r0, r2
 800192c:	f000 fa68 	bl	8001e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_I2C_MspInit+0x84>)
 8001932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_I2C_MspInit+0x84>)
 8001936:	2180      	movs	r1, #128	; 0x80
 8001938:	0389      	lsls	r1, r1, #14
 800193a:	430a      	orrs	r2, r1
 800193c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	46bd      	mov	sp, r7
 8001942:	b009      	add	sp, #36	; 0x24
 8001944:	bd90      	pop	{r4, r7, pc}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	40005400 	.word	0x40005400
 800194c:	40021000 	.word	0x40021000
 8001950:	50000400 	.word	0x50000400

08001954 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a06      	ldr	r2, [pc, #24]	; (800197c <HAL_RTC_MspInit+0x28>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d106      	bne.n	8001974 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_RTC_MspInit+0x2c>)
 8001968:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800196a:	4b05      	ldr	r3, [pc, #20]	; (8001980 <HAL_RTC_MspInit+0x2c>)
 800196c:	2180      	movs	r1, #128	; 0x80
 800196e:	02c9      	lsls	r1, r1, #11
 8001970:	430a      	orrs	r2, r1
 8001972:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001974:	46c0      	nop			; (mov r8, r8)
 8001976:	46bd      	mov	sp, r7
 8001978:	b002      	add	sp, #8
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40002800 	.word	0x40002800
 8001980:	40021000 	.word	0x40021000

08001984 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	05db      	lsls	r3, r3, #23
 8001994:	429a      	cmp	r2, r3
 8001996:	d105      	bne.n	80019a4 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <HAL_TIM_Base_MspInit+0x28>)
 800199a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <HAL_TIM_Base_MspInit+0x28>)
 800199e:	2101      	movs	r1, #1
 80019a0:	430a      	orrs	r2, r1
 80019a2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019a4:	46c0      	nop			; (mov r8, r8)
 80019a6:	46bd      	mov	sp, r7
 80019a8:	b002      	add	sp, #8
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40021000 	.word	0x40021000

080019b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	240c      	movs	r4, #12
 80019ba:	193b      	adds	r3, r7, r4
 80019bc:	0018      	movs	r0, r3
 80019be:	2314      	movs	r3, #20
 80019c0:	001a      	movs	r2, r3
 80019c2:	2100      	movs	r1, #0
 80019c4:	f003 faca 	bl	8004f5c <memset>
  if(htim->Instance==TIM2)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	05db      	lsls	r3, r3, #23
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d122      	bne.n	8001a1a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d4:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <HAL_TIM_MspPostInit+0x74>)
 80019d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_TIM_MspPostInit+0x74>)
 80019da:	2102      	movs	r1, #2
 80019dc:	430a      	orrs	r2, r1
 80019de:	62da      	str	r2, [r3, #44]	; 0x2c
 80019e0:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <HAL_TIM_MspPostInit+0x74>)
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	2202      	movs	r2, #2
 80019e6:	4013      	ands	r3, r2
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019ec:	193b      	adds	r3, r7, r4
 80019ee:	2280      	movs	r2, #128	; 0x80
 80019f0:	00d2      	lsls	r2, r2, #3
 80019f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	0021      	movs	r1, r4
 80019f6:	187b      	adds	r3, r7, r1
 80019f8:	2202      	movs	r2, #2
 80019fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	187b      	adds	r3, r7, r1
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	187b      	adds	r3, r7, r1
 8001a04:	2200      	movs	r2, #0
 8001a06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001a08:	187b      	adds	r3, r7, r1
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0e:	187b      	adds	r3, r7, r1
 8001a10:	4a05      	ldr	r2, [pc, #20]	; (8001a28 <HAL_TIM_MspPostInit+0x78>)
 8001a12:	0019      	movs	r1, r3
 8001a14:	0010      	movs	r0, r2
 8001a16:	f000 f9f3 	bl	8001e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b009      	add	sp, #36	; 0x24
 8001a20:	bd90      	pop	{r4, r7, pc}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	40021000 	.word	0x40021000
 8001a28:	50000400 	.word	0x50000400

08001a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b089      	sub	sp, #36	; 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	240c      	movs	r4, #12
 8001a36:	193b      	adds	r3, r7, r4
 8001a38:	0018      	movs	r0, r3
 8001a3a:	2314      	movs	r3, #20
 8001a3c:	001a      	movs	r2, r3
 8001a3e:	2100      	movs	r1, #0
 8001a40:	f003 fa8c 	bl	8004f5c <memset>
  if(huart->Instance==USART2)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a17      	ldr	r2, [pc, #92]	; (8001aa8 <HAL_UART_MspInit+0x7c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d128      	bne.n	8001aa0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <HAL_UART_MspInit+0x80>)
 8001a50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <HAL_UART_MspInit+0x80>)
 8001a54:	2180      	movs	r1, #128	; 0x80
 8001a56:	0289      	lsls	r1, r1, #10
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5c:	4b13      	ldr	r3, [pc, #76]	; (8001aac <HAL_UART_MspInit+0x80>)
 8001a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_UART_MspInit+0x80>)
 8001a62:	2102      	movs	r1, #2
 8001a64:	430a      	orrs	r2, r1
 8001a66:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a68:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_UART_MspInit+0x80>)
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	4013      	ands	r3, r2
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB6     ------> USART2_TX
    PB7     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a74:	0021      	movs	r1, r4
 8001a76:	187b      	adds	r3, r7, r1
 8001a78:	22c0      	movs	r2, #192	; 0xc0
 8001a7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	187b      	adds	r3, r7, r1
 8001a7e:	2202      	movs	r2, #2
 8001a80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	187b      	adds	r3, r7, r1
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a88:	187b      	adds	r3, r7, r1
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8001a8e:	187b      	adds	r3, r7, r1
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a94:	187b      	adds	r3, r7, r1
 8001a96:	4a06      	ldr	r2, [pc, #24]	; (8001ab0 <HAL_UART_MspInit+0x84>)
 8001a98:	0019      	movs	r1, r3
 8001a9a:	0010      	movs	r0, r2
 8001a9c:	f000 f9b0 	bl	8001e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001aa0:	46c0      	nop			; (mov r8, r8)
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b009      	add	sp, #36	; 0x24
 8001aa6:	bd90      	pop	{r4, r7, pc}
 8001aa8:	40004400 	.word	0x40004400
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	50000400 	.word	0x50000400

08001ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <NMI_Handler+0x4>

08001aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <HardFault_Handler+0x4>

08001ac0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ac4:	46c0      	nop			; (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad8:	f000 f89e 	bl	8001c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001adc:	46c0      	nop			; (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001aec:	4813      	ldr	r0, [pc, #76]	; (8001b3c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001aee:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001af0:	f7ff fff7 	bl	8001ae2 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001af4:	4812      	ldr	r0, [pc, #72]	; (8001b40 <LoopForever+0x6>)
    LDR R1, [R0]
 8001af6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001af8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <LoopForever+0xa>)
    CMP R1, R2
 8001afc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001afe:	d105      	bne.n	8001b0c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001b00:	4811      	ldr	r0, [pc, #68]	; (8001b48 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001b02:	4912      	ldr	r1, [pc, #72]	; (8001b4c <LoopForever+0x12>)
    STR R1, [R0]
 8001b04:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001b06:	4812      	ldr	r0, [pc, #72]	; (8001b50 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001b08:	4912      	ldr	r1, [pc, #72]	; (8001b54 <LoopForever+0x1a>)
    STR R1, [R0]
 8001b0a:	6001      	str	r1, [r0, #0]

08001b0c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b0c:	4812      	ldr	r0, [pc, #72]	; (8001b58 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001b0e:	4913      	ldr	r1, [pc, #76]	; (8001b5c <LoopForever+0x22>)
  ldr r2, =_sidata
 8001b10:	4a13      	ldr	r2, [pc, #76]	; (8001b60 <LoopForever+0x26>)
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b14:	e002      	b.n	8001b1c <LoopCopyDataInit>

08001b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1a:	3304      	adds	r3, #4

08001b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b20:	d3f9      	bcc.n	8001b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b22:	4a10      	ldr	r2, [pc, #64]	; (8001b64 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001b24:	4c10      	ldr	r4, [pc, #64]	; (8001b68 <LoopForever+0x2e>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b28:	e001      	b.n	8001b2e <LoopFillZerobss>

08001b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b2c:	3204      	adds	r2, #4

08001b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b30:	d3fb      	bcc.n	8001b2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b32:	f003 fa1b 	bl	8004f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b36:	f7ff fa37 	bl	8000fa8 <main>

08001b3a <LoopForever>:

LoopForever:
    b LoopForever
 8001b3a:	e7fe      	b.n	8001b3a <LoopForever>
   ldr   r0, =_estack
 8001b3c:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8001b40:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001b44:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001b48:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001b4c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001b50:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001b54:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b5c:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8001b60:	080050d0 	.word	0x080050d0
  ldr r2, =_sbss
 8001b64:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 8001b68:	20000284 	.word	0x20000284

08001b6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <ADC1_IRQHandler>
	...

08001b70 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b76:	1dfb      	adds	r3, r7, #7
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_Init+0x3c>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_Init+0x3c>)
 8001b82:	2140      	movs	r1, #64	; 0x40
 8001b84:	430a      	orrs	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b88:	2003      	movs	r0, #3
 8001b8a:	f000 f811 	bl	8001bb0 <HAL_InitTick>
 8001b8e:	1e03      	subs	r3, r0, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001b92:	1dfb      	adds	r3, r7, #7
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
 8001b98:	e001      	b.n	8001b9e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b9a:	f7ff fe81 	bl	80018a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b9e:	1dfb      	adds	r3, r7, #7
 8001ba0:	781b      	ldrb	r3, [r3, #0]
}
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	b002      	add	sp, #8
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	40022000 	.word	0x40022000

08001bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb0:	b590      	push	{r4, r7, lr}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb8:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <HAL_InitTick+0x5c>)
 8001bba:	681c      	ldr	r4, [r3, #0]
 8001bbc:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <HAL_InitTick+0x60>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	0019      	movs	r1, r3
 8001bc2:	23fa      	movs	r3, #250	; 0xfa
 8001bc4:	0098      	lsls	r0, r3, #2
 8001bc6:	f7fe fa9f 	bl	8000108 <__udivsi3>
 8001bca:	0003      	movs	r3, r0
 8001bcc:	0019      	movs	r1, r3
 8001bce:	0020      	movs	r0, r4
 8001bd0:	f7fe fa9a 	bl	8000108 <__udivsi3>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f000 f905 	bl	8001de6 <HAL_SYSTICK_Config>
 8001bdc:	1e03      	subs	r3, r0, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e00f      	b.n	8001c04 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d80b      	bhi.n	8001c02 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	2301      	movs	r3, #1
 8001bee:	425b      	negs	r3, r3
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f000 f8e2 	bl	8001dbc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_InitTick+0x64>)
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e000      	b.n	8001c04 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
}
 8001c04:	0018      	movs	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b003      	add	sp, #12
 8001c0a:	bd90      	pop	{r4, r7, pc}
 8001c0c:	20000118 	.word	0x20000118
 8001c10:	20000120 	.word	0x20000120
 8001c14:	2000011c 	.word	0x2000011c

08001c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_IncTick+0x1c>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	001a      	movs	r2, r3
 8001c22:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <HAL_IncTick+0x20>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	18d2      	adds	r2, r2, r3
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <HAL_IncTick+0x20>)
 8001c2a:	601a      	str	r2, [r3, #0]
}
 8001c2c:	46c0      	nop			; (mov r8, r8)
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	20000120 	.word	0x20000120
 8001c38:	20000280 	.word	0x20000280

08001c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c40:	4b02      	ldr	r3, [pc, #8]	; (8001c4c <HAL_GetTick+0x10>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	0018      	movs	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	20000280 	.word	0x20000280

08001c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c58:	f7ff fff0 	bl	8001c3c <HAL_GetTick>
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	3301      	adds	r3, #1
 8001c68:	d005      	beq.n	8001c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_Delay+0x44>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	001a      	movs	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	189b      	adds	r3, r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	f7ff ffe0 	bl	8001c3c <HAL_GetTick>
 8001c7c:	0002      	movs	r2, r0
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d8f7      	bhi.n	8001c78 <HAL_Delay+0x28>
  {
  }
}
 8001c88:	46c0      	nop			; (mov r8, r8)
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	b004      	add	sp, #16
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	20000120 	.word	0x20000120

08001c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	0002      	movs	r2, r0
 8001ca0:	6039      	str	r1, [r7, #0]
 8001ca2:	1dfb      	adds	r3, r7, #7
 8001ca4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ca6:	1dfb      	adds	r3, r7, #7
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b7f      	cmp	r3, #127	; 0x7f
 8001cac:	d828      	bhi.n	8001d00 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cae:	4a2f      	ldr	r2, [pc, #188]	; (8001d6c <__NVIC_SetPriority+0xd4>)
 8001cb0:	1dfb      	adds	r3, r7, #7
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	b25b      	sxtb	r3, r3
 8001cb6:	089b      	lsrs	r3, r3, #2
 8001cb8:	33c0      	adds	r3, #192	; 0xc0
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	589b      	ldr	r3, [r3, r2]
 8001cbe:	1dfa      	adds	r2, r7, #7
 8001cc0:	7812      	ldrb	r2, [r2, #0]
 8001cc2:	0011      	movs	r1, r2
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	400a      	ands	r2, r1
 8001cc8:	00d2      	lsls	r2, r2, #3
 8001cca:	21ff      	movs	r1, #255	; 0xff
 8001ccc:	4091      	lsls	r1, r2
 8001cce:	000a      	movs	r2, r1
 8001cd0:	43d2      	mvns	r2, r2
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	019b      	lsls	r3, r3, #6
 8001cda:	22ff      	movs	r2, #255	; 0xff
 8001cdc:	401a      	ands	r2, r3
 8001cde:	1dfb      	adds	r3, r7, #7
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	4003      	ands	r3, r0
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cec:	481f      	ldr	r0, [pc, #124]	; (8001d6c <__NVIC_SetPriority+0xd4>)
 8001cee:	1dfb      	adds	r3, r7, #7
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	b25b      	sxtb	r3, r3
 8001cf4:	089b      	lsrs	r3, r3, #2
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	33c0      	adds	r3, #192	; 0xc0
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001cfe:	e031      	b.n	8001d64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d00:	4a1b      	ldr	r2, [pc, #108]	; (8001d70 <__NVIC_SetPriority+0xd8>)
 8001d02:	1dfb      	adds	r3, r7, #7
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	0019      	movs	r1, r3
 8001d08:	230f      	movs	r3, #15
 8001d0a:	400b      	ands	r3, r1
 8001d0c:	3b08      	subs	r3, #8
 8001d0e:	089b      	lsrs	r3, r3, #2
 8001d10:	3306      	adds	r3, #6
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	18d3      	adds	r3, r2, r3
 8001d16:	3304      	adds	r3, #4
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	1dfa      	adds	r2, r7, #7
 8001d1c:	7812      	ldrb	r2, [r2, #0]
 8001d1e:	0011      	movs	r1, r2
 8001d20:	2203      	movs	r2, #3
 8001d22:	400a      	ands	r2, r1
 8001d24:	00d2      	lsls	r2, r2, #3
 8001d26:	21ff      	movs	r1, #255	; 0xff
 8001d28:	4091      	lsls	r1, r2
 8001d2a:	000a      	movs	r2, r1
 8001d2c:	43d2      	mvns	r2, r2
 8001d2e:	401a      	ands	r2, r3
 8001d30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	019b      	lsls	r3, r3, #6
 8001d36:	22ff      	movs	r2, #255	; 0xff
 8001d38:	401a      	ands	r2, r3
 8001d3a:	1dfb      	adds	r3, r7, #7
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	0018      	movs	r0, r3
 8001d40:	2303      	movs	r3, #3
 8001d42:	4003      	ands	r3, r0
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d48:	4809      	ldr	r0, [pc, #36]	; (8001d70 <__NVIC_SetPriority+0xd8>)
 8001d4a:	1dfb      	adds	r3, r7, #7
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	001c      	movs	r4, r3
 8001d50:	230f      	movs	r3, #15
 8001d52:	4023      	ands	r3, r4
 8001d54:	3b08      	subs	r3, #8
 8001d56:	089b      	lsrs	r3, r3, #2
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	3306      	adds	r3, #6
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	18c3      	adds	r3, r0, r3
 8001d60:	3304      	adds	r3, #4
 8001d62:	601a      	str	r2, [r3, #0]
}
 8001d64:	46c0      	nop			; (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b003      	add	sp, #12
 8001d6a:	bd90      	pop	{r4, r7, pc}
 8001d6c:	e000e100 	.word	0xe000e100
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	1e5a      	subs	r2, r3, #1
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	045b      	lsls	r3, r3, #17
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d301      	bcc.n	8001d8c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e010      	b.n	8001dae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <SysTick_Config+0x44>)
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	3a01      	subs	r2, #1
 8001d92:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d94:	2301      	movs	r3, #1
 8001d96:	425b      	negs	r3, r3
 8001d98:	2103      	movs	r1, #3
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f7ff ff7c 	bl	8001c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <SysTick_Config+0x44>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da6:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <SysTick_Config+0x44>)
 8001da8:	2207      	movs	r2, #7
 8001daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	0018      	movs	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	b002      	add	sp, #8
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	e000e010 	.word	0xe000e010

08001dbc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	210f      	movs	r1, #15
 8001dc8:	187b      	adds	r3, r7, r1
 8001dca:	1c02      	adds	r2, r0, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	187b      	adds	r3, r7, r1
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	b25b      	sxtb	r3, r3
 8001dd6:	0011      	movs	r1, r2
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f7ff ff5d 	bl	8001c98 <__NVIC_SetPriority>
}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	46bd      	mov	sp, r7
 8001de2:	b004      	add	sp, #16
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	0018      	movs	r0, r3
 8001df2:	f7ff ffbf 	bl	8001d74 <SysTick_Config>
 8001df6:	0003      	movs	r3, r0
}
 8001df8:	0018      	movs	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b002      	add	sp, #8
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e16:	e149      	b.n	80020ac <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	4091      	lsls	r1, r2
 8001e22:	000a      	movs	r2, r1
 8001e24:	4013      	ands	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d100      	bne.n	8001e30 <HAL_GPIO_Init+0x30>
 8001e2e:	e13a      	b.n	80020a6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2203      	movs	r2, #3
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d005      	beq.n	8001e48 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2203      	movs	r2, #3
 8001e42:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d130      	bne.n	8001eaa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	2203      	movs	r2, #3
 8001e54:	409a      	lsls	r2, r3
 8001e56:	0013      	movs	r3, r2
 8001e58:	43da      	mvns	r2, r3
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	0013      	movs	r3, r2
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e7e:	2201      	movs	r2, #1
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	409a      	lsls	r2, r3
 8001e84:	0013      	movs	r3, r2
 8001e86:	43da      	mvns	r2, r3
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	091b      	lsrs	r3, r3, #4
 8001e94:	2201      	movs	r2, #1
 8001e96:	401a      	ands	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	0013      	movs	r3, r2
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2203      	movs	r2, #3
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d017      	beq.n	8001ee6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	0013      	movs	r3, r2
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	0013      	movs	r3, r2
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2203      	movs	r2, #3
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d123      	bne.n	8001f3a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	08da      	lsrs	r2, r3, #3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3208      	adds	r2, #8
 8001efa:	0092      	lsls	r2, r2, #2
 8001efc:	58d3      	ldr	r3, [r2, r3]
 8001efe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	2207      	movs	r2, #7
 8001f04:	4013      	ands	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	220f      	movs	r2, #15
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	0013      	movs	r3, r2
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	691a      	ldr	r2, [r3, #16]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2107      	movs	r1, #7
 8001f1e:	400b      	ands	r3, r1
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	409a      	lsls	r2, r3
 8001f24:	0013      	movs	r3, r2
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	08da      	lsrs	r2, r3, #3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3208      	adds	r2, #8
 8001f34:	0092      	lsls	r2, r2, #2
 8001f36:	6939      	ldr	r1, [r7, #16]
 8001f38:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	2203      	movs	r2, #3
 8001f46:	409a      	lsls	r2, r3
 8001f48:	0013      	movs	r3, r2
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2203      	movs	r2, #3
 8001f58:	401a      	ands	r2, r3
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	0013      	movs	r3, r2
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	23c0      	movs	r3, #192	; 0xc0
 8001f74:	029b      	lsls	r3, r3, #10
 8001f76:	4013      	ands	r3, r2
 8001f78:	d100      	bne.n	8001f7c <HAL_GPIO_Init+0x17c>
 8001f7a:	e094      	b.n	80020a6 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7c:	4b51      	ldr	r3, [pc, #324]	; (80020c4 <HAL_GPIO_Init+0x2c4>)
 8001f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f80:	4b50      	ldr	r3, [pc, #320]	; (80020c4 <HAL_GPIO_Init+0x2c4>)
 8001f82:	2101      	movs	r1, #1
 8001f84:	430a      	orrs	r2, r1
 8001f86:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f88:	4a4f      	ldr	r2, [pc, #316]	; (80020c8 <HAL_GPIO_Init+0x2c8>)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	3302      	adds	r3, #2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	589b      	ldr	r3, [r3, r2]
 8001f94:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2203      	movs	r2, #3
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	220f      	movs	r2, #15
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	0013      	movs	r3, r2
 8001fa4:	43da      	mvns	r2, r3
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	23a0      	movs	r3, #160	; 0xa0
 8001fb0:	05db      	lsls	r3, r3, #23
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d013      	beq.n	8001fde <HAL_GPIO_Init+0x1de>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a44      	ldr	r2, [pc, #272]	; (80020cc <HAL_GPIO_Init+0x2cc>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00d      	beq.n	8001fda <HAL_GPIO_Init+0x1da>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a43      	ldr	r2, [pc, #268]	; (80020d0 <HAL_GPIO_Init+0x2d0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d007      	beq.n	8001fd6 <HAL_GPIO_Init+0x1d6>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a42      	ldr	r2, [pc, #264]	; (80020d4 <HAL_GPIO_Init+0x2d4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d101      	bne.n	8001fd2 <HAL_GPIO_Init+0x1d2>
 8001fce:	2305      	movs	r3, #5
 8001fd0:	e006      	b.n	8001fe0 <HAL_GPIO_Init+0x1e0>
 8001fd2:	2306      	movs	r3, #6
 8001fd4:	e004      	b.n	8001fe0 <HAL_GPIO_Init+0x1e0>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e002      	b.n	8001fe0 <HAL_GPIO_Init+0x1e0>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <HAL_GPIO_Init+0x1e0>
 8001fde:	2300      	movs	r3, #0
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	2103      	movs	r1, #3
 8001fe4:	400a      	ands	r2, r1
 8001fe6:	0092      	lsls	r2, r2, #2
 8001fe8:	4093      	lsls	r3, r2
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ff0:	4935      	ldr	r1, [pc, #212]	; (80020c8 <HAL_GPIO_Init+0x2c8>)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	089b      	lsrs	r3, r3, #2
 8001ff6:	3302      	adds	r3, #2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ffe:	4b36      	ldr	r3, [pc, #216]	; (80020d8 <HAL_GPIO_Init+0x2d8>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	43da      	mvns	r2, r3
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4013      	ands	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	2380      	movs	r3, #128	; 0x80
 8002014:	035b      	lsls	r3, r3, #13
 8002016:	4013      	ands	r3, r2
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4313      	orrs	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002022:	4b2d      	ldr	r3, [pc, #180]	; (80020d8 <HAL_GPIO_Init+0x2d8>)
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002028:	4b2b      	ldr	r3, [pc, #172]	; (80020d8 <HAL_GPIO_Init+0x2d8>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	43da      	mvns	r2, r3
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4013      	ands	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	039b      	lsls	r3, r3, #14
 8002040:	4013      	ands	r3, r2
 8002042:	d003      	beq.n	800204c <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800204c:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <HAL_GPIO_Init+0x2d8>)
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002052:	4b21      	ldr	r3, [pc, #132]	; (80020d8 <HAL_GPIO_Init+0x2d8>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	43da      	mvns	r2, r3
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	029b      	lsls	r3, r3, #10
 800206a:	4013      	ands	r3, r2
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002076:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <HAL_GPIO_Init+0x2d8>)
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800207c:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <HAL_GPIO_Init+0x2d8>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	43da      	mvns	r2, r3
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	2380      	movs	r3, #128	; 0x80
 8002092:	025b      	lsls	r3, r3, #9
 8002094:	4013      	ands	r3, r2
 8002096:	d003      	beq.n	80020a0 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020a0:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <HAL_GPIO_Init+0x2d8>)
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	3301      	adds	r3, #1
 80020aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	40da      	lsrs	r2, r3
 80020b4:	1e13      	subs	r3, r2, #0
 80020b6:	d000      	beq.n	80020ba <HAL_GPIO_Init+0x2ba>
 80020b8:	e6ae      	b.n	8001e18 <HAL_GPIO_Init+0x18>
  }
}
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	46c0      	nop			; (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	b006      	add	sp, #24
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40021000 	.word	0x40021000
 80020c8:	40010000 	.word	0x40010000
 80020cc:	50000400 	.word	0x50000400
 80020d0:	50000800 	.word	0x50000800
 80020d4:	50001c00 	.word	0x50001c00
 80020d8:	40010400 	.word	0x40010400

080020dc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	0008      	movs	r0, r1
 80020e6:	0011      	movs	r1, r2
 80020e8:	1cbb      	adds	r3, r7, #2
 80020ea:	1c02      	adds	r2, r0, #0
 80020ec:	801a      	strh	r2, [r3, #0]
 80020ee:	1c7b      	adds	r3, r7, #1
 80020f0:	1c0a      	adds	r2, r1, #0
 80020f2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020f4:	1c7b      	adds	r3, r7, #1
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d004      	beq.n	8002106 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020fc:	1cbb      	adds	r3, r7, #2
 80020fe:	881a      	ldrh	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002104:	e003      	b.n	800210e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002106:	1cbb      	adds	r3, r7, #2
 8002108:	881a      	ldrh	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	46bd      	mov	sp, r7
 8002112:	b002      	add	sp, #8
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e082      	b.n	8002230 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2241      	movs	r2, #65	; 0x41
 800212e:	5c9b      	ldrb	r3, [r3, r2]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d107      	bne.n	8002146 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2240      	movs	r2, #64	; 0x40
 800213a:	2100      	movs	r1, #0
 800213c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	0018      	movs	r0, r3
 8002142:	f7ff fbc1 	bl	80018c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2241      	movs	r2, #65	; 0x41
 800214a:	2124      	movs	r1, #36	; 0x24
 800214c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2101      	movs	r1, #1
 800215a:	438a      	bics	r2, r1
 800215c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4934      	ldr	r1, [pc, #208]	; (8002238 <HAL_I2C_Init+0x120>)
 8002168:	400a      	ands	r2, r1
 800216a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4931      	ldr	r1, [pc, #196]	; (800223c <HAL_I2C_Init+0x124>)
 8002178:	400a      	ands	r2, r1
 800217a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d108      	bne.n	8002196 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2180      	movs	r1, #128	; 0x80
 800218e:	0209      	lsls	r1, r1, #8
 8002190:	430a      	orrs	r2, r1
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	e007      	b.n	80021a6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2184      	movs	r1, #132	; 0x84
 80021a0:	0209      	lsls	r1, r1, #8
 80021a2:	430a      	orrs	r2, r1
 80021a4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d104      	bne.n	80021b8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2280      	movs	r2, #128	; 0x80
 80021b4:	0112      	lsls	r2, r2, #4
 80021b6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	491f      	ldr	r1, [pc, #124]	; (8002240 <HAL_I2C_Init+0x128>)
 80021c4:	430a      	orrs	r2, r1
 80021c6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	491a      	ldr	r1, [pc, #104]	; (800223c <HAL_I2C_Init+0x124>)
 80021d4:	400a      	ands	r2, r1
 80021d6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69d9      	ldr	r1, [r3, #28]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1a      	ldr	r2, [r3, #32]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2101      	movs	r1, #1
 800220e:	430a      	orrs	r2, r1
 8002210:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2241      	movs	r2, #65	; 0x41
 800221c:	2120      	movs	r1, #32
 800221e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2242      	movs	r2, #66	; 0x42
 800222a:	2100      	movs	r1, #0
 800222c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	0018      	movs	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	b002      	add	sp, #8
 8002236:	bd80      	pop	{r7, pc}
 8002238:	f0ffffff 	.word	0xf0ffffff
 800223c:	ffff7fff 	.word	0xffff7fff
 8002240:	02008000 	.word	0x02008000

08002244 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b089      	sub	sp, #36	; 0x24
 8002248:	af02      	add	r7, sp, #8
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	0008      	movs	r0, r1
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	0019      	movs	r1, r3
 8002252:	230a      	movs	r3, #10
 8002254:	18fb      	adds	r3, r7, r3
 8002256:	1c02      	adds	r2, r0, #0
 8002258:	801a      	strh	r2, [r3, #0]
 800225a:	2308      	movs	r3, #8
 800225c:	18fb      	adds	r3, r7, r3
 800225e:	1c0a      	adds	r2, r1, #0
 8002260:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2241      	movs	r2, #65	; 0x41
 8002266:	5c9b      	ldrb	r3, [r3, r2]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b20      	cmp	r3, #32
 800226c:	d000      	beq.n	8002270 <HAL_I2C_Master_Transmit+0x2c>
 800226e:	e0e7      	b.n	8002440 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2240      	movs	r2, #64	; 0x40
 8002274:	5c9b      	ldrb	r3, [r3, r2]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_I2C_Master_Transmit+0x3a>
 800227a:	2302      	movs	r3, #2
 800227c:	e0e1      	b.n	8002442 <HAL_I2C_Master_Transmit+0x1fe>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2240      	movs	r2, #64	; 0x40
 8002282:	2101      	movs	r1, #1
 8002284:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002286:	f7ff fcd9 	bl	8001c3c <HAL_GetTick>
 800228a:	0003      	movs	r3, r0
 800228c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	0219      	lsls	r1, r3, #8
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	2319      	movs	r3, #25
 800229a:	2201      	movs	r2, #1
 800229c:	f000 fa04 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 80022a0:	1e03      	subs	r3, r0, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0cc      	b.n	8002442 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2241      	movs	r2, #65	; 0x41
 80022ac:	2121      	movs	r1, #33	; 0x21
 80022ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2242      	movs	r2, #66	; 0x42
 80022b4:	2110      	movs	r1, #16
 80022b6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2208      	movs	r2, #8
 80022c8:	18ba      	adds	r2, r7, r2
 80022ca:	8812      	ldrh	r2, [r2, #0]
 80022cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2bff      	cmp	r3, #255	; 0xff
 80022dc:	d911      	bls.n	8002302 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	22ff      	movs	r2, #255	; 0xff
 80022e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	045c      	lsls	r4, r3, #17
 80022ee:	230a      	movs	r3, #10
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	8819      	ldrh	r1, [r3, #0]
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	4b55      	ldr	r3, [pc, #340]	; (800244c <HAL_I2C_Master_Transmit+0x208>)
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	0023      	movs	r3, r4
 80022fc:	f000 fc2e 	bl	8002b5c <I2C_TransferConfig>
 8002300:	e075      	b.n	80023ee <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002306:	b29a      	uxth	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002310:	b2da      	uxtb	r2, r3
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	049c      	lsls	r4, r3, #18
 8002316:	230a      	movs	r3, #10
 8002318:	18fb      	adds	r3, r7, r3
 800231a:	8819      	ldrh	r1, [r3, #0]
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	4b4b      	ldr	r3, [pc, #300]	; (800244c <HAL_I2C_Master_Transmit+0x208>)
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	0023      	movs	r3, r4
 8002324:	f000 fc1a 	bl	8002b5c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002328:	e061      	b.n	80023ee <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	0018      	movs	r0, r3
 8002332:	f000 fa07 	bl	8002744 <I2C_WaitOnTXISFlagUntilTimeout>
 8002336:	1e03      	subs	r3, r0, #0
 8002338:	d001      	beq.n	800233e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e081      	b.n	8002442 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	781a      	ldrb	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002358:	b29b      	uxth	r3, r3
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002366:	3b01      	subs	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002372:	b29b      	uxth	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d03a      	beq.n	80023ee <HAL_I2C_Master_Transmit+0x1aa>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237c:	2b00      	cmp	r3, #0
 800237e:	d136      	bne.n	80023ee <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	0013      	movs	r3, r2
 800238a:	2200      	movs	r2, #0
 800238c:	2180      	movs	r1, #128	; 0x80
 800238e:	f000 f98b 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 8002392:	1e03      	subs	r3, r0, #0
 8002394:	d001      	beq.n	800239a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e053      	b.n	8002442 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239e:	b29b      	uxth	r3, r3
 80023a0:	2bff      	cmp	r3, #255	; 0xff
 80023a2:	d911      	bls.n	80023c8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	22ff      	movs	r2, #255	; 0xff
 80023a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	045c      	lsls	r4, r3, #17
 80023b4:	230a      	movs	r3, #10
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	8819      	ldrh	r1, [r3, #0]
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	2300      	movs	r3, #0
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	0023      	movs	r3, r4
 80023c2:	f000 fbcb 	bl	8002b5c <I2C_TransferConfig>
 80023c6:	e012      	b.n	80023ee <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	049c      	lsls	r4, r3, #18
 80023dc:	230a      	movs	r3, #10
 80023de:	18fb      	adds	r3, r7, r3
 80023e0:	8819      	ldrh	r1, [r3, #0]
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	2300      	movs	r3, #0
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	0023      	movs	r3, r4
 80023ea:	f000 fbb7 	bl	8002b5c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d198      	bne.n	800232a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	0018      	movs	r0, r3
 8002400:	f000 f9e6 	bl	80027d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002404:	1e03      	subs	r3, r0, #0
 8002406:	d001      	beq.n	800240c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e01a      	b.n	8002442 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2220      	movs	r2, #32
 8002412:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	490c      	ldr	r1, [pc, #48]	; (8002450 <HAL_I2C_Master_Transmit+0x20c>)
 8002420:	400a      	ands	r2, r1
 8002422:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2241      	movs	r2, #65	; 0x41
 8002428:	2120      	movs	r1, #32
 800242a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2242      	movs	r2, #66	; 0x42
 8002430:	2100      	movs	r1, #0
 8002432:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2240      	movs	r2, #64	; 0x40
 8002438:	2100      	movs	r1, #0
 800243a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	e000      	b.n	8002442 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002440:	2302      	movs	r3, #2
  }
}
 8002442:	0018      	movs	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	b007      	add	sp, #28
 8002448:	bd90      	pop	{r4, r7, pc}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	80002000 	.word	0x80002000
 8002450:	fe00e800 	.word	0xfe00e800

08002454 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b089      	sub	sp, #36	; 0x24
 8002458:	af02      	add	r7, sp, #8
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	0008      	movs	r0, r1
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	0019      	movs	r1, r3
 8002462:	230a      	movs	r3, #10
 8002464:	18fb      	adds	r3, r7, r3
 8002466:	1c02      	adds	r2, r0, #0
 8002468:	801a      	strh	r2, [r3, #0]
 800246a:	2308      	movs	r3, #8
 800246c:	18fb      	adds	r3, r7, r3
 800246e:	1c0a      	adds	r2, r1, #0
 8002470:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2241      	movs	r2, #65	; 0x41
 8002476:	5c9b      	ldrb	r3, [r3, r2]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b20      	cmp	r3, #32
 800247c:	d000      	beq.n	8002480 <HAL_I2C_Master_Receive+0x2c>
 800247e:	e0e8      	b.n	8002652 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2240      	movs	r2, #64	; 0x40
 8002484:	5c9b      	ldrb	r3, [r3, r2]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_I2C_Master_Receive+0x3a>
 800248a:	2302      	movs	r3, #2
 800248c:	e0e2      	b.n	8002654 <HAL_I2C_Master_Receive+0x200>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2240      	movs	r2, #64	; 0x40
 8002492:	2101      	movs	r1, #1
 8002494:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002496:	f7ff fbd1 	bl	8001c3c <HAL_GetTick>
 800249a:	0003      	movs	r3, r0
 800249c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	0219      	lsls	r1, r3, #8
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	2319      	movs	r3, #25
 80024aa:	2201      	movs	r2, #1
 80024ac:	f000 f8fc 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 80024b0:	1e03      	subs	r3, r0, #0
 80024b2:	d001      	beq.n	80024b8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0cd      	b.n	8002654 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2241      	movs	r2, #65	; 0x41
 80024bc:	2122      	movs	r1, #34	; 0x22
 80024be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2242      	movs	r2, #66	; 0x42
 80024c4:	2110      	movs	r1, #16
 80024c6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2208      	movs	r2, #8
 80024d8:	18ba      	adds	r2, r7, r2
 80024da:	8812      	ldrh	r2, [r2, #0]
 80024dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	2bff      	cmp	r3, #255	; 0xff
 80024ec:	d911      	bls.n	8002512 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	22ff      	movs	r2, #255	; 0xff
 80024f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	045c      	lsls	r4, r3, #17
 80024fe:	230a      	movs	r3, #10
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	8819      	ldrh	r1, [r3, #0]
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	4b55      	ldr	r3, [pc, #340]	; (800265c <HAL_I2C_Master_Receive+0x208>)
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	0023      	movs	r3, r4
 800250c:	f000 fb26 	bl	8002b5c <I2C_TransferConfig>
 8002510:	e076      	b.n	8002600 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002520:	b2da      	uxtb	r2, r3
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	049c      	lsls	r4, r3, #18
 8002526:	230a      	movs	r3, #10
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	8819      	ldrh	r1, [r3, #0]
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	4b4b      	ldr	r3, [pc, #300]	; (800265c <HAL_I2C_Master_Receive+0x208>)
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	0023      	movs	r3, r4
 8002534:	f000 fb12 	bl	8002b5c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002538:	e062      	b.n	8002600 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	0018      	movs	r0, r3
 8002542:	f000 f989 	bl	8002858 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002546:	1e03      	subs	r3, r0, #0
 8002548:	d001      	beq.n	800254e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e082      	b.n	8002654 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002576:	b29b      	uxth	r3, r3
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002584:	b29b      	uxth	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d03a      	beq.n	8002600 <HAL_I2C_Master_Receive+0x1ac>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258e:	2b00      	cmp	r3, #0
 8002590:	d136      	bne.n	8002600 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	0013      	movs	r3, r2
 800259c:	2200      	movs	r2, #0
 800259e:	2180      	movs	r1, #128	; 0x80
 80025a0:	f000 f882 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 80025a4:	1e03      	subs	r3, r0, #0
 80025a6:	d001      	beq.n	80025ac <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e053      	b.n	8002654 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	2bff      	cmp	r3, #255	; 0xff
 80025b4:	d911      	bls.n	80025da <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	22ff      	movs	r2, #255	; 0xff
 80025ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	045c      	lsls	r4, r3, #17
 80025c6:	230a      	movs	r3, #10
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	8819      	ldrh	r1, [r3, #0]
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	2300      	movs	r3, #0
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	0023      	movs	r3, r4
 80025d4:	f000 fac2 	bl	8002b5c <I2C_TransferConfig>
 80025d8:	e012      	b.n	8002600 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	2380      	movs	r3, #128	; 0x80
 80025ec:	049c      	lsls	r4, r3, #18
 80025ee:	230a      	movs	r3, #10
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	8819      	ldrh	r1, [r3, #0]
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	2300      	movs	r3, #0
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	0023      	movs	r3, r4
 80025fc:	f000 faae 	bl	8002b5c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d197      	bne.n	800253a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	0018      	movs	r0, r3
 8002612:	f000 f8dd 	bl	80027d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002616:	1e03      	subs	r3, r0, #0
 8002618:	d001      	beq.n	800261e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e01a      	b.n	8002654 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2220      	movs	r2, #32
 8002624:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	490b      	ldr	r1, [pc, #44]	; (8002660 <HAL_I2C_Master_Receive+0x20c>)
 8002632:	400a      	ands	r2, r1
 8002634:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2241      	movs	r2, #65	; 0x41
 800263a:	2120      	movs	r1, #32
 800263c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2242      	movs	r2, #66	; 0x42
 8002642:	2100      	movs	r1, #0
 8002644:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2240      	movs	r2, #64	; 0x40
 800264a:	2100      	movs	r1, #0
 800264c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	e000      	b.n	8002654 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002652:	2302      	movs	r3, #2
  }
}
 8002654:	0018      	movs	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	b007      	add	sp, #28
 800265a:	bd90      	pop	{r4, r7, pc}
 800265c:	80002400 	.word	0x80002400
 8002660:	fe00e800 	.word	0xfe00e800

08002664 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	2202      	movs	r2, #2
 8002674:	4013      	ands	r3, r2
 8002676:	2b02      	cmp	r3, #2
 8002678:	d103      	bne.n	8002682 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2200      	movs	r2, #0
 8002680:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	2201      	movs	r2, #1
 800268a:	4013      	ands	r3, r2
 800268c:	2b01      	cmp	r3, #1
 800268e:	d007      	beq.n	80026a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699a      	ldr	r2, [r3, #24]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2101      	movs	r1, #1
 800269c:	430a      	orrs	r2, r1
 800269e:	619a      	str	r2, [r3, #24]
  }
}
 80026a0:	46c0      	nop			; (mov r8, r8)
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b002      	add	sp, #8
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	1dfb      	adds	r3, r7, #7
 80026b6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026b8:	e030      	b.n	800271c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	3301      	adds	r3, #1
 80026be:	d02d      	beq.n	800271c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026c0:	f7ff fabc 	bl	8001c3c <HAL_GetTick>
 80026c4:	0002      	movs	r2, r0
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d302      	bcc.n	80026d6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d122      	bne.n	800271c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	4013      	ands	r3, r2
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	425a      	negs	r2, r3
 80026e6:	4153      	adcs	r3, r2
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	001a      	movs	r2, r3
 80026ec:	1dfb      	adds	r3, r7, #7
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d113      	bne.n	800271c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f8:	2220      	movs	r2, #32
 80026fa:	431a      	orrs	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2241      	movs	r2, #65	; 0x41
 8002704:	2120      	movs	r1, #32
 8002706:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2242      	movs	r2, #66	; 0x42
 800270c:	2100      	movs	r1, #0
 800270e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2240      	movs	r2, #64	; 0x40
 8002714:	2100      	movs	r1, #0
 8002716:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e00f      	b.n	800273c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	4013      	ands	r3, r2
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	425a      	negs	r2, r3
 800272c:	4153      	adcs	r3, r2
 800272e:	b2db      	uxtb	r3, r3
 8002730:	001a      	movs	r2, r3
 8002732:	1dfb      	adds	r3, r7, #7
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d0bf      	beq.n	80026ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	0018      	movs	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	b004      	add	sp, #16
 8002742:	bd80      	pop	{r7, pc}

08002744 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002750:	e032      	b.n	80027b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68b9      	ldr	r1, [r7, #8]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	0018      	movs	r0, r3
 800275a:	f000 f8ff 	bl	800295c <I2C_IsErrorOccurred>
 800275e:	1e03      	subs	r3, r0, #0
 8002760:	d001      	beq.n	8002766 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e030      	b.n	80027c8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	3301      	adds	r3, #1
 800276a:	d025      	beq.n	80027b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276c:	f7ff fa66 	bl	8001c3c <HAL_GetTick>
 8002770:	0002      	movs	r2, r0
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	429a      	cmp	r2, r3
 800277a:	d302      	bcc.n	8002782 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d11a      	bne.n	80027b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	2202      	movs	r2, #2
 800278a:	4013      	ands	r3, r2
 800278c:	2b02      	cmp	r3, #2
 800278e:	d013      	beq.n	80027b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002794:	2220      	movs	r2, #32
 8002796:	431a      	orrs	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2241      	movs	r2, #65	; 0x41
 80027a0:	2120      	movs	r1, #32
 80027a2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2242      	movs	r2, #66	; 0x42
 80027a8:	2100      	movs	r1, #0
 80027aa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2240      	movs	r2, #64	; 0x40
 80027b0:	2100      	movs	r1, #0
 80027b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e007      	b.n	80027c8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2202      	movs	r2, #2
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d1c5      	bne.n	8002752 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	0018      	movs	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b004      	add	sp, #16
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027dc:	e02f      	b.n	800283e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	0018      	movs	r0, r3
 80027e6:	f000 f8b9 	bl	800295c <I2C_IsErrorOccurred>
 80027ea:	1e03      	subs	r3, r0, #0
 80027ec:	d001      	beq.n	80027f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e02d      	b.n	800284e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f2:	f7ff fa23 	bl	8001c3c <HAL_GetTick>
 80027f6:	0002      	movs	r2, r0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d302      	bcc.n	8002808 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d11a      	bne.n	800283e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	2220      	movs	r2, #32
 8002810:	4013      	ands	r3, r2
 8002812:	2b20      	cmp	r3, #32
 8002814:	d013      	beq.n	800283e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	2220      	movs	r2, #32
 800281c:	431a      	orrs	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2241      	movs	r2, #65	; 0x41
 8002826:	2120      	movs	r1, #32
 8002828:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2242      	movs	r2, #66	; 0x42
 800282e:	2100      	movs	r1, #0
 8002830:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2240      	movs	r2, #64	; 0x40
 8002836:	2100      	movs	r1, #0
 8002838:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e007      	b.n	800284e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	2220      	movs	r2, #32
 8002846:	4013      	ands	r3, r2
 8002848:	2b20      	cmp	r3, #32
 800284a:	d1c8      	bne.n	80027de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	0018      	movs	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	b004      	add	sp, #16
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002864:	e06b      	b.n	800293e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	68b9      	ldr	r1, [r7, #8]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	0018      	movs	r0, r3
 800286e:	f000 f875 	bl	800295c <I2C_IsErrorOccurred>
 8002872:	1e03      	subs	r3, r0, #0
 8002874:	d001      	beq.n	800287a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e069      	b.n	800294e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	2220      	movs	r2, #32
 8002882:	4013      	ands	r3, r2
 8002884:	2b20      	cmp	r3, #32
 8002886:	d138      	bne.n	80028fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2204      	movs	r2, #4
 8002890:	4013      	ands	r3, r2
 8002892:	2b04      	cmp	r3, #4
 8002894:	d105      	bne.n	80028a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	e055      	b.n	800294e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	2210      	movs	r2, #16
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b10      	cmp	r3, #16
 80028ae:	d107      	bne.n	80028c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2210      	movs	r2, #16
 80028b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2204      	movs	r2, #4
 80028bc:	645a      	str	r2, [r3, #68]	; 0x44
 80028be:	e002      	b.n	80028c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2220      	movs	r2, #32
 80028cc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	491f      	ldr	r1, [pc, #124]	; (8002958 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80028da:	400a      	ands	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2241      	movs	r2, #65	; 0x41
 80028e2:	2120      	movs	r1, #32
 80028e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2242      	movs	r2, #66	; 0x42
 80028ea:	2100      	movs	r1, #0
 80028ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2240      	movs	r2, #64	; 0x40
 80028f2:	2100      	movs	r1, #0
 80028f4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e029      	b.n	800294e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fa:	f7ff f99f 	bl	8001c3c <HAL_GetTick>
 80028fe:	0002      	movs	r2, r0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	429a      	cmp	r2, r3
 8002908:	d302      	bcc.n	8002910 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d116      	bne.n	800293e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2204      	movs	r2, #4
 8002918:	4013      	ands	r3, r2
 800291a:	2b04      	cmp	r3, #4
 800291c:	d00f      	beq.n	800293e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	2220      	movs	r2, #32
 8002924:	431a      	orrs	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2241      	movs	r2, #65	; 0x41
 800292e:	2120      	movs	r1, #32
 8002930:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2240      	movs	r2, #64	; 0x40
 8002936:	2100      	movs	r1, #0
 8002938:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e007      	b.n	800294e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	2204      	movs	r2, #4
 8002946:	4013      	ands	r3, r2
 8002948:	2b04      	cmp	r3, #4
 800294a:	d18c      	bne.n	8002866 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	0018      	movs	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	b004      	add	sp, #16
 8002954:	bd80      	pop	{r7, pc}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	fe00e800 	.word	0xfe00e800

0800295c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b08b      	sub	sp, #44	; 0x2c
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002968:	2327      	movs	r3, #39	; 0x27
 800296a:	18fb      	adds	r3, r7, r3
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	2210      	movs	r2, #16
 8002984:	4013      	ands	r3, r2
 8002986:	d100      	bne.n	800298a <I2C_IsErrorOccurred+0x2e>
 8002988:	e082      	b.n	8002a90 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2210      	movs	r2, #16
 8002990:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002992:	e060      	b.n	8002a56 <I2C_IsErrorOccurred+0xfa>
 8002994:	2427      	movs	r4, #39	; 0x27
 8002996:	193b      	adds	r3, r7, r4
 8002998:	193a      	adds	r2, r7, r4
 800299a:	7812      	ldrb	r2, [r2, #0]
 800299c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	3301      	adds	r3, #1
 80029a2:	d058      	beq.n	8002a56 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029a4:	f7ff f94a 	bl	8001c3c <HAL_GetTick>
 80029a8:	0002      	movs	r2, r0
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d306      	bcc.n	80029c2 <I2C_IsErrorOccurred+0x66>
 80029b4:	193b      	adds	r3, r7, r4
 80029b6:	193a      	adds	r2, r7, r4
 80029b8:	7812      	ldrb	r2, [r2, #0]
 80029ba:	701a      	strb	r2, [r3, #0]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d149      	bne.n	8002a56 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	2380      	movs	r3, #128	; 0x80
 80029ca:	01db      	lsls	r3, r3, #7
 80029cc:	4013      	ands	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80029d0:	2013      	movs	r0, #19
 80029d2:	183b      	adds	r3, r7, r0
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	2142      	movs	r1, #66	; 0x42
 80029d8:	5c52      	ldrb	r2, [r2, r1]
 80029da:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	2380      	movs	r3, #128	; 0x80
 80029e4:	021b      	lsls	r3, r3, #8
 80029e6:	401a      	ands	r2, r3
 80029e8:	2380      	movs	r3, #128	; 0x80
 80029ea:	021b      	lsls	r3, r3, #8
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d126      	bne.n	8002a3e <I2C_IsErrorOccurred+0xe2>
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	2380      	movs	r3, #128	; 0x80
 80029f4:	01db      	lsls	r3, r3, #7
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d021      	beq.n	8002a3e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80029fa:	183b      	adds	r3, r7, r0
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	d01d      	beq.n	8002a3e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2180      	movs	r1, #128	; 0x80
 8002a0e:	01c9      	lsls	r1, r1, #7
 8002a10:	430a      	orrs	r2, r1
 8002a12:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002a14:	f7ff f912 	bl	8001c3c <HAL_GetTick>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a1c:	e00f      	b.n	8002a3e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002a1e:	f7ff f90d 	bl	8001c3c <HAL_GetTick>
 8002a22:	0002      	movs	r2, r0
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b19      	cmp	r3, #25
 8002a2a:	d908      	bls.n	8002a3e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	4313      	orrs	r3, r2
 8002a32:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002a34:	2327      	movs	r3, #39	; 0x27
 8002a36:	18fb      	adds	r3, r7, r3
 8002a38:	2201      	movs	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]

              break;
 8002a3c:	e00b      	b.n	8002a56 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	2220      	movs	r2, #32
 8002a46:	4013      	ands	r3, r2
 8002a48:	2127      	movs	r1, #39	; 0x27
 8002a4a:	187a      	adds	r2, r7, r1
 8002a4c:	1879      	adds	r1, r7, r1
 8002a4e:	7809      	ldrb	r1, [r1, #0]
 8002a50:	7011      	strb	r1, [r2, #0]
 8002a52:	2b20      	cmp	r3, #32
 8002a54:	d1e3      	bne.n	8002a1e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	d004      	beq.n	8002a6e <I2C_IsErrorOccurred+0x112>
 8002a64:	2327      	movs	r3, #39	; 0x27
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d092      	beq.n	8002994 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002a6e:	2327      	movs	r3, #39	; 0x27
 8002a70:	18fb      	adds	r3, r7, r3
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d103      	bne.n	8002a80 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	2204      	movs	r2, #4
 8002a84:	4313      	orrs	r3, r2
 8002a86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002a88:	2327      	movs	r3, #39	; 0x27
 8002a8a:	18fb      	adds	r3, r7, r3
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	2380      	movs	r3, #128	; 0x80
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d00c      	beq.n	8002abc <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2280      	movs	r2, #128	; 0x80
 8002ab0:	0052      	lsls	r2, r2, #1
 8002ab2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ab4:	2327      	movs	r3, #39	; 0x27
 8002ab6:	18fb      	adds	r3, r7, r3
 8002ab8:	2201      	movs	r2, #1
 8002aba:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	2380      	movs	r3, #128	; 0x80
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d00c      	beq.n	8002ae0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	2208      	movs	r2, #8
 8002aca:	4313      	orrs	r3, r2
 8002acc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2280      	movs	r2, #128	; 0x80
 8002ad4:	00d2      	lsls	r2, r2, #3
 8002ad6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ad8:	2327      	movs	r3, #39	; 0x27
 8002ada:	18fb      	adds	r3, r7, r3
 8002adc:	2201      	movs	r2, #1
 8002ade:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	2380      	movs	r3, #128	; 0x80
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d00c      	beq.n	8002b04 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	2202      	movs	r2, #2
 8002aee:	4313      	orrs	r3, r2
 8002af0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2280      	movs	r2, #128	; 0x80
 8002af8:	0092      	lsls	r2, r2, #2
 8002afa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002afc:	2327      	movs	r3, #39	; 0x27
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	2201      	movs	r2, #1
 8002b02:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002b04:	2327      	movs	r3, #39	; 0x27
 8002b06:	18fb      	adds	r3, r7, r3
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d01d      	beq.n	8002b4a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	0018      	movs	r0, r3
 8002b12:	f7ff fda7 	bl	8002664 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	490d      	ldr	r1, [pc, #52]	; (8002b58 <I2C_IsErrorOccurred+0x1fc>)
 8002b22:	400a      	ands	r2, r1
 8002b24:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2241      	movs	r2, #65	; 0x41
 8002b36:	2120      	movs	r1, #32
 8002b38:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2242      	movs	r2, #66	; 0x42
 8002b3e:	2100      	movs	r1, #0
 8002b40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2240      	movs	r2, #64	; 0x40
 8002b46:	2100      	movs	r1, #0
 8002b48:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002b4a:	2327      	movs	r3, #39	; 0x27
 8002b4c:	18fb      	adds	r3, r7, r3
 8002b4e:	781b      	ldrb	r3, [r3, #0]
}
 8002b50:	0018      	movs	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	b00b      	add	sp, #44	; 0x2c
 8002b56:	bd90      	pop	{r4, r7, pc}
 8002b58:	fe00e800 	.word	0xfe00e800

08002b5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b5c:	b590      	push	{r4, r7, lr}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	0008      	movs	r0, r1
 8002b66:	0011      	movs	r1, r2
 8002b68:	607b      	str	r3, [r7, #4]
 8002b6a:	240a      	movs	r4, #10
 8002b6c:	193b      	adds	r3, r7, r4
 8002b6e:	1c02      	adds	r2, r0, #0
 8002b70:	801a      	strh	r2, [r3, #0]
 8002b72:	2009      	movs	r0, #9
 8002b74:	183b      	adds	r3, r7, r0
 8002b76:	1c0a      	adds	r2, r1, #0
 8002b78:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b7a:	193b      	adds	r3, r7, r4
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	059b      	lsls	r3, r3, #22
 8002b80:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b82:	183b      	adds	r3, r7, r0
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	0419      	lsls	r1, r3, #16
 8002b88:	23ff      	movs	r3, #255	; 0xff
 8002b8a:	041b      	lsls	r3, r3, #16
 8002b8c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b8e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b96:	4313      	orrs	r3, r2
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	085b      	lsrs	r3, r3, #1
 8002b9c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ba6:	0d51      	lsrs	r1, r2, #21
 8002ba8:	2280      	movs	r2, #128	; 0x80
 8002baa:	00d2      	lsls	r2, r2, #3
 8002bac:	400a      	ands	r2, r1
 8002bae:	4907      	ldr	r1, [pc, #28]	; (8002bcc <I2C_TransferConfig+0x70>)
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	43d2      	mvns	r2, r2
 8002bb4:	401a      	ands	r2, r3
 8002bb6:	0011      	movs	r1, r2
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	b007      	add	sp, #28
 8002bc8:	bd90      	pop	{r4, r7, pc}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	03ff63ff 	.word	0x03ff63ff

08002bd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2241      	movs	r2, #65	; 0x41
 8002bde:	5c9b      	ldrb	r3, [r3, r2]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b20      	cmp	r3, #32
 8002be4:	d138      	bne.n	8002c58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2240      	movs	r2, #64	; 0x40
 8002bea:	5c9b      	ldrb	r3, [r3, r2]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e032      	b.n	8002c5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2240      	movs	r2, #64	; 0x40
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2241      	movs	r2, #65	; 0x41
 8002c00:	2124      	movs	r1, #36	; 0x24
 8002c02:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2101      	movs	r1, #1
 8002c10:	438a      	bics	r2, r1
 8002c12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4911      	ldr	r1, [pc, #68]	; (8002c64 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002c20:	400a      	ands	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6819      	ldr	r1, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2101      	movs	r1, #1
 8002c40:	430a      	orrs	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2241      	movs	r2, #65	; 0x41
 8002c48:	2120      	movs	r1, #32
 8002c4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2240      	movs	r2, #64	; 0x40
 8002c50:	2100      	movs	r1, #0
 8002c52:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	e000      	b.n	8002c5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c58:	2302      	movs	r3, #2
  }
}
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b002      	add	sp, #8
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	ffffefff 	.word	0xffffefff

08002c68 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2241      	movs	r2, #65	; 0x41
 8002c76:	5c9b      	ldrb	r3, [r3, r2]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b20      	cmp	r3, #32
 8002c7c:	d139      	bne.n	8002cf2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2240      	movs	r2, #64	; 0x40
 8002c82:	5c9b      	ldrb	r3, [r3, r2]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e033      	b.n	8002cf4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2240      	movs	r2, #64	; 0x40
 8002c90:	2101      	movs	r1, #1
 8002c92:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2241      	movs	r2, #65	; 0x41
 8002c98:	2124      	movs	r1, #36	; 0x24
 8002c9a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	438a      	bics	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4a11      	ldr	r2, [pc, #68]	; (8002cfc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	021b      	lsls	r3, r3, #8
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2101      	movs	r1, #1
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2241      	movs	r2, #65	; 0x41
 8002ce2:	2120      	movs	r1, #32
 8002ce4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2240      	movs	r2, #64	; 0x40
 8002cea:	2100      	movs	r1, #0
 8002cec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e000      	b.n	8002cf4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002cf2:	2302      	movs	r3, #2
  }
}
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b004      	add	sp, #16
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	fffff0ff 	.word	0xfffff0ff

08002d00 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d04:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002d0a:	2180      	movs	r1, #128	; 0x80
 8002d0c:	0049      	lsls	r1, r1, #1
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	601a      	str	r2, [r3, #0]
}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40007000 	.word	0x40007000

08002d1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d1c:	b5b0      	push	{r4, r5, r7, lr}
 8002d1e:	b08a      	sub	sp, #40	; 0x28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d102      	bne.n	8002d30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	f000 fb6c 	bl	8003408 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d30:	4bc8      	ldr	r3, [pc, #800]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	220c      	movs	r2, #12
 8002d36:	4013      	ands	r3, r2
 8002d38:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d3a:	4bc6      	ldr	r3, [pc, #792]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	2380      	movs	r3, #128	; 0x80
 8002d40:	025b      	lsls	r3, r3, #9
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d100      	bne.n	8002d52 <HAL_RCC_OscConfig+0x36>
 8002d50:	e07d      	b.n	8002e4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d007      	beq.n	8002d68 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	2b0c      	cmp	r3, #12
 8002d5c:	d112      	bne.n	8002d84 <HAL_RCC_OscConfig+0x68>
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	2380      	movs	r3, #128	; 0x80
 8002d62:	025b      	lsls	r3, r3, #9
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d10d      	bne.n	8002d84 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d68:	4bba      	ldr	r3, [pc, #744]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	2380      	movs	r3, #128	; 0x80
 8002d6e:	029b      	lsls	r3, r3, #10
 8002d70:	4013      	ands	r3, r2
 8002d72:	d100      	bne.n	8002d76 <HAL_RCC_OscConfig+0x5a>
 8002d74:	e06a      	b.n	8002e4c <HAL_RCC_OscConfig+0x130>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d166      	bne.n	8002e4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	f000 fb42 	bl	8003408 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	2380      	movs	r3, #128	; 0x80
 8002d8a:	025b      	lsls	r3, r3, #9
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d107      	bne.n	8002da0 <HAL_RCC_OscConfig+0x84>
 8002d90:	4bb0      	ldr	r3, [pc, #704]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4baf      	ldr	r3, [pc, #700]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002d96:	2180      	movs	r1, #128	; 0x80
 8002d98:	0249      	lsls	r1, r1, #9
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	e027      	b.n	8002df0 <HAL_RCC_OscConfig+0xd4>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	23a0      	movs	r3, #160	; 0xa0
 8002da6:	02db      	lsls	r3, r3, #11
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d10e      	bne.n	8002dca <HAL_RCC_OscConfig+0xae>
 8002dac:	4ba9      	ldr	r3, [pc, #676]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4ba8      	ldr	r3, [pc, #672]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002db2:	2180      	movs	r1, #128	; 0x80
 8002db4:	02c9      	lsls	r1, r1, #11
 8002db6:	430a      	orrs	r2, r1
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	4ba6      	ldr	r3, [pc, #664]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4ba5      	ldr	r3, [pc, #660]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002dc0:	2180      	movs	r1, #128	; 0x80
 8002dc2:	0249      	lsls	r1, r1, #9
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	e012      	b.n	8002df0 <HAL_RCC_OscConfig+0xd4>
 8002dca:	4ba2      	ldr	r3, [pc, #648]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	4ba1      	ldr	r3, [pc, #644]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002dd0:	49a1      	ldr	r1, [pc, #644]	; (8003058 <HAL_RCC_OscConfig+0x33c>)
 8002dd2:	400a      	ands	r2, r1
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	4b9f      	ldr	r3, [pc, #636]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	025b      	lsls	r3, r3, #9
 8002dde:	4013      	ands	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4b9b      	ldr	r3, [pc, #620]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4b9a      	ldr	r3, [pc, #616]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002dea:	499c      	ldr	r1, [pc, #624]	; (800305c <HAL_RCC_OscConfig+0x340>)
 8002dec:	400a      	ands	r2, r1
 8002dee:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d014      	beq.n	8002e22 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df8:	f7fe ff20 	bl	8001c3c <HAL_GetTick>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e02:	f7fe ff1b 	bl	8001c3c <HAL_GetTick>
 8002e06:	0002      	movs	r2, r0
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b64      	cmp	r3, #100	; 0x64
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e2f9      	b.n	8003408 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e14:	4b8f      	ldr	r3, [pc, #572]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	2380      	movs	r3, #128	; 0x80
 8002e1a:	029b      	lsls	r3, r3, #10
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_RCC_OscConfig+0xe6>
 8002e20:	e015      	b.n	8002e4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e22:	f7fe ff0b 	bl	8001c3c <HAL_GetTick>
 8002e26:	0003      	movs	r3, r0
 8002e28:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e2c:	f7fe ff06 	bl	8001c3c <HAL_GetTick>
 8002e30:	0002      	movs	r2, r0
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b64      	cmp	r3, #100	; 0x64
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e2e4      	b.n	8003408 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e3e:	4b85      	ldr	r3, [pc, #532]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	2380      	movs	r3, #128	; 0x80
 8002e44:	029b      	lsls	r3, r3, #10
 8002e46:	4013      	ands	r3, r2
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x110>
 8002e4a:	e000      	b.n	8002e4e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2202      	movs	r2, #2
 8002e54:	4013      	ands	r3, r2
 8002e56:	d100      	bne.n	8002e5a <HAL_RCC_OscConfig+0x13e>
 8002e58:	e099      	b.n	8002f8e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	2220      	movs	r2, #32
 8002e64:	4013      	ands	r3, r2
 8002e66:	d009      	beq.n	8002e7c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002e68:	4b7a      	ldr	r3, [pc, #488]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4b79      	ldr	r3, [pc, #484]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002e6e:	2120      	movs	r1, #32
 8002e70:	430a      	orrs	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	2220      	movs	r2, #32
 8002e78:	4393      	bics	r3, r2
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d005      	beq.n	8002e8e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	2b0c      	cmp	r3, #12
 8002e86:	d13e      	bne.n	8002f06 <HAL_RCC_OscConfig+0x1ea>
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d13b      	bne.n	8002f06 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002e8e:	4b71      	ldr	r3, [pc, #452]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2204      	movs	r2, #4
 8002e94:	4013      	ands	r3, r2
 8002e96:	d004      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x186>
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e2b2      	b.n	8003408 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea2:	4b6c      	ldr	r3, [pc, #432]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	4a6e      	ldr	r2, [pc, #440]	; (8003060 <HAL_RCC_OscConfig+0x344>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	0019      	movs	r1, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	021a      	lsls	r2, r3, #8
 8002eb2:	4b68      	ldr	r3, [pc, #416]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002eb8:	4b66      	ldr	r3, [pc, #408]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2209      	movs	r2, #9
 8002ebe:	4393      	bics	r3, r2
 8002ec0:	0019      	movs	r1, r3
 8002ec2:	4b64      	ldr	r3, [pc, #400]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eca:	f000 fbeb 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 8002ece:	0001      	movs	r1, r0
 8002ed0:	4b60      	ldr	r3, [pc, #384]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	220f      	movs	r2, #15
 8002ed8:	4013      	ands	r3, r2
 8002eda:	4a62      	ldr	r2, [pc, #392]	; (8003064 <HAL_RCC_OscConfig+0x348>)
 8002edc:	5cd3      	ldrb	r3, [r2, r3]
 8002ede:	000a      	movs	r2, r1
 8002ee0:	40da      	lsrs	r2, r3
 8002ee2:	4b61      	ldr	r3, [pc, #388]	; (8003068 <HAL_RCC_OscConfig+0x34c>)
 8002ee4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002ee6:	4b61      	ldr	r3, [pc, #388]	; (800306c <HAL_RCC_OscConfig+0x350>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2513      	movs	r5, #19
 8002eec:	197c      	adds	r4, r7, r5
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f7fe fe5e 	bl	8001bb0 <HAL_InitTick>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002ef8:	197b      	adds	r3, r7, r5
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d046      	beq.n	8002f8e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002f00:	197b      	adds	r3, r7, r5
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	e280      	b.n	8003408 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d027      	beq.n	8002f5c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002f0c:	4b51      	ldr	r3, [pc, #324]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2209      	movs	r2, #9
 8002f12:	4393      	bics	r3, r2
 8002f14:	0019      	movs	r1, r3
 8002f16:	4b4f      	ldr	r3, [pc, #316]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1e:	f7fe fe8d 	bl	8001c3c <HAL_GetTick>
 8002f22:	0003      	movs	r3, r0
 8002f24:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f28:	f7fe fe88 	bl	8001c3c <HAL_GetTick>
 8002f2c:	0002      	movs	r2, r0
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e266      	b.n	8003408 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f3a:	4b46      	ldr	r3, [pc, #280]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2204      	movs	r2, #4
 8002f40:	4013      	ands	r3, r2
 8002f42:	d0f1      	beq.n	8002f28 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f44:	4b43      	ldr	r3, [pc, #268]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	4a45      	ldr	r2, [pc, #276]	; (8003060 <HAL_RCC_OscConfig+0x344>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	0019      	movs	r1, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	021a      	lsls	r2, r3, #8
 8002f54:	4b3f      	ldr	r3, [pc, #252]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002f56:	430a      	orrs	r2, r1
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	e018      	b.n	8002f8e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f5c:	4b3d      	ldr	r3, [pc, #244]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4b3c      	ldr	r3, [pc, #240]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002f62:	2101      	movs	r1, #1
 8002f64:	438a      	bics	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f68:	f7fe fe68 	bl	8001c3c <HAL_GetTick>
 8002f6c:	0003      	movs	r3, r0
 8002f6e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f72:	f7fe fe63 	bl	8001c3c <HAL_GetTick>
 8002f76:	0002      	movs	r2, r0
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e241      	b.n	8003408 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f84:	4b33      	ldr	r3, [pc, #204]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2204      	movs	r2, #4
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d1f1      	bne.n	8002f72 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2210      	movs	r2, #16
 8002f94:	4013      	ands	r3, r2
 8002f96:	d100      	bne.n	8002f9a <HAL_RCC_OscConfig+0x27e>
 8002f98:	e0a1      	b.n	80030de <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d140      	bne.n	8003022 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fa0:	4b2c      	ldr	r3, [pc, #176]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x29c>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e227      	b.n	8003408 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fb8:	4b26      	ldr	r3, [pc, #152]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4a2c      	ldr	r2, [pc, #176]	; (8003070 <HAL_RCC_OscConfig+0x354>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	0019      	movs	r1, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1a      	ldr	r2, [r3, #32]
 8002fc6:	4b23      	ldr	r3, [pc, #140]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fcc:	4b21      	ldr	r3, [pc, #132]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	021b      	lsls	r3, r3, #8
 8002fd2:	0a19      	lsrs	r1, r3, #8
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	061a      	lsls	r2, r3, #24
 8002fda:	4b1e      	ldr	r3, [pc, #120]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	0b5b      	lsrs	r3, r3, #13
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	2280      	movs	r2, #128	; 0x80
 8002fea:	0212      	lsls	r2, r2, #8
 8002fec:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002fee:	4b19      	ldr	r3, [pc, #100]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	091b      	lsrs	r3, r3, #4
 8002ff4:	210f      	movs	r1, #15
 8002ff6:	400b      	ands	r3, r1
 8002ff8:	491a      	ldr	r1, [pc, #104]	; (8003064 <HAL_RCC_OscConfig+0x348>)
 8002ffa:	5ccb      	ldrb	r3, [r1, r3]
 8002ffc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002ffe:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <HAL_RCC_OscConfig+0x34c>)
 8003000:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003002:	4b1a      	ldr	r3, [pc, #104]	; (800306c <HAL_RCC_OscConfig+0x350>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2513      	movs	r5, #19
 8003008:	197c      	adds	r4, r7, r5
 800300a:	0018      	movs	r0, r3
 800300c:	f7fe fdd0 	bl	8001bb0 <HAL_InitTick>
 8003010:	0003      	movs	r3, r0
 8003012:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003014:	197b      	adds	r3, r7, r5
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d060      	beq.n	80030de <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 800301c:	197b      	adds	r3, r7, r5
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	e1f2      	b.n	8003408 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d03f      	beq.n	80030aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800302a:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	4b09      	ldr	r3, [pc, #36]	; (8003054 <HAL_RCC_OscConfig+0x338>)
 8003030:	2180      	movs	r1, #128	; 0x80
 8003032:	0049      	lsls	r1, r1, #1
 8003034:	430a      	orrs	r2, r1
 8003036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fe fe00 	bl	8001c3c <HAL_GetTick>
 800303c:	0003      	movs	r3, r0
 800303e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003040:	e018      	b.n	8003074 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003042:	f7fe fdfb 	bl	8001c3c <HAL_GetTick>
 8003046:	0002      	movs	r2, r0
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d911      	bls.n	8003074 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e1d9      	b.n	8003408 <HAL_RCC_OscConfig+0x6ec>
 8003054:	40021000 	.word	0x40021000
 8003058:	fffeffff 	.word	0xfffeffff
 800305c:	fffbffff 	.word	0xfffbffff
 8003060:	ffffe0ff 	.word	0xffffe0ff
 8003064:	08005054 	.word	0x08005054
 8003068:	20000118 	.word	0x20000118
 800306c:	2000011c 	.word	0x2000011c
 8003070:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003074:	4bc9      	ldr	r3, [pc, #804]	; (800339c <HAL_RCC_OscConfig+0x680>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	2380      	movs	r3, #128	; 0x80
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4013      	ands	r3, r2
 800307e:	d0e0      	beq.n	8003042 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003080:	4bc6      	ldr	r3, [pc, #792]	; (800339c <HAL_RCC_OscConfig+0x680>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	4ac6      	ldr	r2, [pc, #792]	; (80033a0 <HAL_RCC_OscConfig+0x684>)
 8003086:	4013      	ands	r3, r2
 8003088:	0019      	movs	r1, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1a      	ldr	r2, [r3, #32]
 800308e:	4bc3      	ldr	r3, [pc, #780]	; (800339c <HAL_RCC_OscConfig+0x680>)
 8003090:	430a      	orrs	r2, r1
 8003092:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003094:	4bc1      	ldr	r3, [pc, #772]	; (800339c <HAL_RCC_OscConfig+0x680>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	021b      	lsls	r3, r3, #8
 800309a:	0a19      	lsrs	r1, r3, #8
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	061a      	lsls	r2, r3, #24
 80030a2:	4bbe      	ldr	r3, [pc, #760]	; (800339c <HAL_RCC_OscConfig+0x680>)
 80030a4:	430a      	orrs	r2, r1
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	e019      	b.n	80030de <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030aa:	4bbc      	ldr	r3, [pc, #752]	; (800339c <HAL_RCC_OscConfig+0x680>)
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	4bbb      	ldr	r3, [pc, #748]	; (800339c <HAL_RCC_OscConfig+0x680>)
 80030b0:	49bc      	ldr	r1, [pc, #752]	; (80033a4 <HAL_RCC_OscConfig+0x688>)
 80030b2:	400a      	ands	r2, r1
 80030b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b6:	f7fe fdc1 	bl	8001c3c <HAL_GetTick>
 80030ba:	0003      	movs	r3, r0
 80030bc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030c0:	f7fe fdbc 	bl	8001c3c <HAL_GetTick>
 80030c4:	0002      	movs	r2, r0
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e19a      	b.n	8003408 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80030d2:	4bb2      	ldr	r3, [pc, #712]	; (800339c <HAL_RCC_OscConfig+0x680>)
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	2380      	movs	r3, #128	; 0x80
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4013      	ands	r3, r2
 80030dc:	d1f0      	bne.n	80030c0 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2208      	movs	r2, #8
 80030e4:	4013      	ands	r3, r2
 80030e6:	d036      	beq.n	8003156 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d019      	beq.n	8003124 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030f0:	4baa      	ldr	r3, [pc, #680]	; (800339c <HAL_RCC_OscConfig+0x680>)
 80030f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030f4:	4ba9      	ldr	r3, [pc, #676]	; (800339c <HAL_RCC_OscConfig+0x680>)
 80030f6:	2101      	movs	r1, #1
 80030f8:	430a      	orrs	r2, r1
 80030fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fc:	f7fe fd9e 	bl	8001c3c <HAL_GetTick>
 8003100:	0003      	movs	r3, r0
 8003102:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003106:	f7fe fd99 	bl	8001c3c <HAL_GetTick>
 800310a:	0002      	movs	r2, r0
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e177      	b.n	8003408 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003118:	4ba0      	ldr	r3, [pc, #640]	; (800339c <HAL_RCC_OscConfig+0x680>)
 800311a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800311c:	2202      	movs	r2, #2
 800311e:	4013      	ands	r3, r2
 8003120:	d0f1      	beq.n	8003106 <HAL_RCC_OscConfig+0x3ea>
 8003122:	e018      	b.n	8003156 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003124:	4b9d      	ldr	r3, [pc, #628]	; (800339c <HAL_RCC_OscConfig+0x680>)
 8003126:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003128:	4b9c      	ldr	r3, [pc, #624]	; (800339c <HAL_RCC_OscConfig+0x680>)
 800312a:	2101      	movs	r1, #1
 800312c:	438a      	bics	r2, r1
 800312e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003130:	f7fe fd84 	bl	8001c3c <HAL_GetTick>
 8003134:	0003      	movs	r3, r0
 8003136:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800313a:	f7fe fd7f 	bl	8001c3c <HAL_GetTick>
 800313e:	0002      	movs	r2, r0
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e15d      	b.n	8003408 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800314c:	4b93      	ldr	r3, [pc, #588]	; (800339c <HAL_RCC_OscConfig+0x680>)
 800314e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003150:	2202      	movs	r2, #2
 8003152:	4013      	ands	r3, r2
 8003154:	d1f1      	bne.n	800313a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2204      	movs	r2, #4
 800315c:	4013      	ands	r3, r2
 800315e:	d100      	bne.n	8003162 <HAL_RCC_OscConfig+0x446>
 8003160:	e0ae      	b.n	80032c0 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003162:	2023      	movs	r0, #35	; 0x23
 8003164:	183b      	adds	r3, r7, r0
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800316a:	4b8c      	ldr	r3, [pc, #560]	; (800339c <HAL_RCC_OscConfig+0x680>)
 800316c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800316e:	2380      	movs	r3, #128	; 0x80
 8003170:	055b      	lsls	r3, r3, #21
 8003172:	4013      	ands	r3, r2
 8003174:	d109      	bne.n	800318a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003176:	4b89      	ldr	r3, [pc, #548]	; (800339c <HAL_RCC_OscConfig+0x680>)
 8003178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800317a:	4b88      	ldr	r3, [pc, #544]	; (800339c <HAL_RCC_OscConfig+0x680>)
 800317c:	2180      	movs	r1, #128	; 0x80
 800317e:	0549      	lsls	r1, r1, #21
 8003180:	430a      	orrs	r2, r1
 8003182:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003184:	183b      	adds	r3, r7, r0
 8003186:	2201      	movs	r2, #1
 8003188:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318a:	4b87      	ldr	r3, [pc, #540]	; (80033a8 <HAL_RCC_OscConfig+0x68c>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	2380      	movs	r3, #128	; 0x80
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	4013      	ands	r3, r2
 8003194:	d11a      	bne.n	80031cc <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003196:	4b84      	ldr	r3, [pc, #528]	; (80033a8 <HAL_RCC_OscConfig+0x68c>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	4b83      	ldr	r3, [pc, #524]	; (80033a8 <HAL_RCC_OscConfig+0x68c>)
 800319c:	2180      	movs	r1, #128	; 0x80
 800319e:	0049      	lsls	r1, r1, #1
 80031a0:	430a      	orrs	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a4:	f7fe fd4a 	bl	8001c3c <HAL_GetTick>
 80031a8:	0003      	movs	r3, r0
 80031aa:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ae:	f7fe fd45 	bl	8001c3c <HAL_GetTick>
 80031b2:	0002      	movs	r2, r0
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b64      	cmp	r3, #100	; 0x64
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e123      	b.n	8003408 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c0:	4b79      	ldr	r3, [pc, #484]	; (80033a8 <HAL_RCC_OscConfig+0x68c>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	4013      	ands	r3, r2
 80031ca:	d0f0      	beq.n	80031ae <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	2380      	movs	r3, #128	; 0x80
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d107      	bne.n	80031e8 <HAL_RCC_OscConfig+0x4cc>
 80031d8:	4b70      	ldr	r3, [pc, #448]	; (800339c <HAL_RCC_OscConfig+0x680>)
 80031da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031dc:	4b6f      	ldr	r3, [pc, #444]	; (800339c <HAL_RCC_OscConfig+0x680>)
 80031de:	2180      	movs	r1, #128	; 0x80
 80031e0:	0049      	lsls	r1, r1, #1
 80031e2:	430a      	orrs	r2, r1
 80031e4:	651a      	str	r2, [r3, #80]	; 0x50
 80031e6:	e031      	b.n	800324c <HAL_RCC_OscConfig+0x530>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10c      	bne.n	800320a <HAL_RCC_OscConfig+0x4ee>
 80031f0:	4b6a      	ldr	r3, [pc, #424]	; (800339c <HAL_RCC_OscConfig+0x680>)
 80031f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031f4:	4b69      	ldr	r3, [pc, #420]	; (800339c <HAL_RCC_OscConfig+0x680>)
 80031f6:	496b      	ldr	r1, [pc, #428]	; (80033a4 <HAL_RCC_OscConfig+0x688>)
 80031f8:	400a      	ands	r2, r1
 80031fa:	651a      	str	r2, [r3, #80]	; 0x50
 80031fc:	4b67      	ldr	r3, [pc, #412]	; (800339c <HAL_RCC_OscConfig+0x680>)
 80031fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003200:	4b66      	ldr	r3, [pc, #408]	; (800339c <HAL_RCC_OscConfig+0x680>)
 8003202:	496a      	ldr	r1, [pc, #424]	; (80033ac <HAL_RCC_OscConfig+0x690>)
 8003204:	400a      	ands	r2, r1
 8003206:	651a      	str	r2, [r3, #80]	; 0x50
 8003208:	e020      	b.n	800324c <HAL_RCC_OscConfig+0x530>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	23a0      	movs	r3, #160	; 0xa0
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	429a      	cmp	r2, r3
 8003214:	d10e      	bne.n	8003234 <HAL_RCC_OscConfig+0x518>
 8003216:	4b61      	ldr	r3, [pc, #388]	; (800339c <HAL_RCC_OscConfig+0x680>)
 8003218:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800321a:	4b60      	ldr	r3, [pc, #384]	; (800339c <HAL_RCC_OscConfig+0x680>)
 800321c:	2180      	movs	r1, #128	; 0x80
 800321e:	00c9      	lsls	r1, r1, #3
 8003220:	430a      	orrs	r2, r1
 8003222:	651a      	str	r2, [r3, #80]	; 0x50
 8003224:	4b5d      	ldr	r3, [pc, #372]	; (800339c <HAL_RCC_OscConfig+0x680>)
 8003226:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003228:	4b5c      	ldr	r3, [pc, #368]	; (800339c <HAL_RCC_OscConfig+0x680>)
 800322a:	2180      	movs	r1, #128	; 0x80
 800322c:	0049      	lsls	r1, r1, #1
 800322e:	430a      	orrs	r2, r1
 8003230:	651a      	str	r2, [r3, #80]	; 0x50
 8003232:	e00b      	b.n	800324c <HAL_RCC_OscConfig+0x530>
 8003234:	4b59      	ldr	r3, [pc, #356]	; (800339c <HAL_RCC_OscConfig+0x680>)
 8003236:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003238:	4b58      	ldr	r3, [pc, #352]	; (800339c <HAL_RCC_OscConfig+0x680>)
 800323a:	495a      	ldr	r1, [pc, #360]	; (80033a4 <HAL_RCC_OscConfig+0x688>)
 800323c:	400a      	ands	r2, r1
 800323e:	651a      	str	r2, [r3, #80]	; 0x50
 8003240:	4b56      	ldr	r3, [pc, #344]	; (800339c <HAL_RCC_OscConfig+0x680>)
 8003242:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003244:	4b55      	ldr	r3, [pc, #340]	; (800339c <HAL_RCC_OscConfig+0x680>)
 8003246:	4959      	ldr	r1, [pc, #356]	; (80033ac <HAL_RCC_OscConfig+0x690>)
 8003248:	400a      	ands	r2, r1
 800324a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d015      	beq.n	8003280 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003254:	f7fe fcf2 	bl	8001c3c <HAL_GetTick>
 8003258:	0003      	movs	r3, r0
 800325a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800325c:	e009      	b.n	8003272 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800325e:	f7fe fced 	bl	8001c3c <HAL_GetTick>
 8003262:	0002      	movs	r2, r0
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	4a51      	ldr	r2, [pc, #324]	; (80033b0 <HAL_RCC_OscConfig+0x694>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e0ca      	b.n	8003408 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003272:	4b4a      	ldr	r3, [pc, #296]	; (800339c <HAL_RCC_OscConfig+0x680>)
 8003274:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003276:	2380      	movs	r3, #128	; 0x80
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4013      	ands	r3, r2
 800327c:	d0ef      	beq.n	800325e <HAL_RCC_OscConfig+0x542>
 800327e:	e014      	b.n	80032aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003280:	f7fe fcdc 	bl	8001c3c <HAL_GetTick>
 8003284:	0003      	movs	r3, r0
 8003286:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003288:	e009      	b.n	800329e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800328a:	f7fe fcd7 	bl	8001c3c <HAL_GetTick>
 800328e:	0002      	movs	r2, r0
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	4a46      	ldr	r2, [pc, #280]	; (80033b0 <HAL_RCC_OscConfig+0x694>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e0b4      	b.n	8003408 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800329e:	4b3f      	ldr	r3, [pc, #252]	; (800339c <HAL_RCC_OscConfig+0x680>)
 80032a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032a2:	2380      	movs	r3, #128	; 0x80
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4013      	ands	r3, r2
 80032a8:	d1ef      	bne.n	800328a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032aa:	2323      	movs	r3, #35	; 0x23
 80032ac:	18fb      	adds	r3, r7, r3
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d105      	bne.n	80032c0 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b4:	4b39      	ldr	r3, [pc, #228]	; (800339c <HAL_RCC_OscConfig+0x680>)
 80032b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b8:	4b38      	ldr	r3, [pc, #224]	; (800339c <HAL_RCC_OscConfig+0x680>)
 80032ba:	493e      	ldr	r1, [pc, #248]	; (80033b4 <HAL_RCC_OscConfig+0x698>)
 80032bc:	400a      	ands	r2, r1
 80032be:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d100      	bne.n	80032ca <HAL_RCC_OscConfig+0x5ae>
 80032c8:	e09d      	b.n	8003406 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	2b0c      	cmp	r3, #12
 80032ce:	d100      	bne.n	80032d2 <HAL_RCC_OscConfig+0x5b6>
 80032d0:	e076      	b.n	80033c0 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d145      	bne.n	8003366 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032da:	4b30      	ldr	r3, [pc, #192]	; (800339c <HAL_RCC_OscConfig+0x680>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b2f      	ldr	r3, [pc, #188]	; (800339c <HAL_RCC_OscConfig+0x680>)
 80032e0:	4935      	ldr	r1, [pc, #212]	; (80033b8 <HAL_RCC_OscConfig+0x69c>)
 80032e2:	400a      	ands	r2, r1
 80032e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e6:	f7fe fca9 	bl	8001c3c <HAL_GetTick>
 80032ea:	0003      	movs	r3, r0
 80032ec:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f0:	f7fe fca4 	bl	8001c3c <HAL_GetTick>
 80032f4:	0002      	movs	r2, r0
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e082      	b.n	8003408 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003302:	4b26      	ldr	r3, [pc, #152]	; (800339c <HAL_RCC_OscConfig+0x680>)
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	2380      	movs	r3, #128	; 0x80
 8003308:	049b      	lsls	r3, r3, #18
 800330a:	4013      	ands	r3, r2
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800330e:	4b23      	ldr	r3, [pc, #140]	; (800339c <HAL_RCC_OscConfig+0x680>)
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	4a2a      	ldr	r2, [pc, #168]	; (80033bc <HAL_RCC_OscConfig+0x6a0>)
 8003314:	4013      	ands	r3, r2
 8003316:	0019      	movs	r1, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	431a      	orrs	r2, r3
 8003328:	4b1c      	ldr	r3, [pc, #112]	; (800339c <HAL_RCC_OscConfig+0x680>)
 800332a:	430a      	orrs	r2, r1
 800332c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800332e:	4b1b      	ldr	r3, [pc, #108]	; (800339c <HAL_RCC_OscConfig+0x680>)
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	4b1a      	ldr	r3, [pc, #104]	; (800339c <HAL_RCC_OscConfig+0x680>)
 8003334:	2180      	movs	r1, #128	; 0x80
 8003336:	0449      	lsls	r1, r1, #17
 8003338:	430a      	orrs	r2, r1
 800333a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333c:	f7fe fc7e 	bl	8001c3c <HAL_GetTick>
 8003340:	0003      	movs	r3, r0
 8003342:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003346:	f7fe fc79 	bl	8001c3c <HAL_GetTick>
 800334a:	0002      	movs	r2, r0
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e057      	b.n	8003408 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003358:	4b10      	ldr	r3, [pc, #64]	; (800339c <HAL_RCC_OscConfig+0x680>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	2380      	movs	r3, #128	; 0x80
 800335e:	049b      	lsls	r3, r3, #18
 8003360:	4013      	ands	r3, r2
 8003362:	d0f0      	beq.n	8003346 <HAL_RCC_OscConfig+0x62a>
 8003364:	e04f      	b.n	8003406 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003366:	4b0d      	ldr	r3, [pc, #52]	; (800339c <HAL_RCC_OscConfig+0x680>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	4b0c      	ldr	r3, [pc, #48]	; (800339c <HAL_RCC_OscConfig+0x680>)
 800336c:	4912      	ldr	r1, [pc, #72]	; (80033b8 <HAL_RCC_OscConfig+0x69c>)
 800336e:	400a      	ands	r2, r1
 8003370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003372:	f7fe fc63 	bl	8001c3c <HAL_GetTick>
 8003376:	0003      	movs	r3, r0
 8003378:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800337c:	f7fe fc5e 	bl	8001c3c <HAL_GetTick>
 8003380:	0002      	movs	r2, r0
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e03c      	b.n	8003408 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800338e:	4b03      	ldr	r3, [pc, #12]	; (800339c <HAL_RCC_OscConfig+0x680>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	2380      	movs	r3, #128	; 0x80
 8003394:	049b      	lsls	r3, r3, #18
 8003396:	4013      	ands	r3, r2
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x660>
 800339a:	e034      	b.n	8003406 <HAL_RCC_OscConfig+0x6ea>
 800339c:	40021000 	.word	0x40021000
 80033a0:	ffff1fff 	.word	0xffff1fff
 80033a4:	fffffeff 	.word	0xfffffeff
 80033a8:	40007000 	.word	0x40007000
 80033ac:	fffffbff 	.word	0xfffffbff
 80033b0:	00001388 	.word	0x00001388
 80033b4:	efffffff 	.word	0xefffffff
 80033b8:	feffffff 	.word	0xfeffffff
 80033bc:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e01d      	b.n	8003408 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033cc:	4b10      	ldr	r3, [pc, #64]	; (8003410 <HAL_RCC_OscConfig+0x6f4>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	2380      	movs	r3, #128	; 0x80
 80033d6:	025b      	lsls	r3, r3, #9
 80033d8:	401a      	ands	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	429a      	cmp	r2, r3
 80033e0:	d10f      	bne.n	8003402 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	23f0      	movs	r3, #240	; 0xf0
 80033e6:	039b      	lsls	r3, r3, #14
 80033e8:	401a      	ands	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d107      	bne.n	8003402 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	23c0      	movs	r3, #192	; 0xc0
 80033f6:	041b      	lsls	r3, r3, #16
 80033f8:	401a      	ands	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80033fe:	429a      	cmp	r2, r3
 8003400:	d001      	beq.n	8003406 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	0018      	movs	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	b00a      	add	sp, #40	; 0x28
 800340e:	bdb0      	pop	{r4, r5, r7, pc}
 8003410:	40021000 	.word	0x40021000

08003414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003414:	b5b0      	push	{r4, r5, r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e128      	b.n	800367a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003428:	4b96      	ldr	r3, [pc, #600]	; (8003684 <HAL_RCC_ClockConfig+0x270>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2201      	movs	r2, #1
 800342e:	4013      	ands	r3, r2
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d91e      	bls.n	8003474 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003436:	4b93      	ldr	r3, [pc, #588]	; (8003684 <HAL_RCC_ClockConfig+0x270>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2201      	movs	r2, #1
 800343c:	4393      	bics	r3, r2
 800343e:	0019      	movs	r1, r3
 8003440:	4b90      	ldr	r3, [pc, #576]	; (8003684 <HAL_RCC_ClockConfig+0x270>)
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003448:	f7fe fbf8 	bl	8001c3c <HAL_GetTick>
 800344c:	0003      	movs	r3, r0
 800344e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003450:	e009      	b.n	8003466 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003452:	f7fe fbf3 	bl	8001c3c <HAL_GetTick>
 8003456:	0002      	movs	r2, r0
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	4a8a      	ldr	r2, [pc, #552]	; (8003688 <HAL_RCC_ClockConfig+0x274>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e109      	b.n	800367a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003466:	4b87      	ldr	r3, [pc, #540]	; (8003684 <HAL_RCC_ClockConfig+0x270>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2201      	movs	r2, #1
 800346c:	4013      	ands	r3, r2
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d1ee      	bne.n	8003452 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2202      	movs	r2, #2
 800347a:	4013      	ands	r3, r2
 800347c:	d009      	beq.n	8003492 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800347e:	4b83      	ldr	r3, [pc, #524]	; (800368c <HAL_RCC_ClockConfig+0x278>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	22f0      	movs	r2, #240	; 0xf0
 8003484:	4393      	bics	r3, r2
 8003486:	0019      	movs	r1, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	4b7f      	ldr	r3, [pc, #508]	; (800368c <HAL_RCC_ClockConfig+0x278>)
 800348e:	430a      	orrs	r2, r1
 8003490:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2201      	movs	r2, #1
 8003498:	4013      	ands	r3, r2
 800349a:	d100      	bne.n	800349e <HAL_RCC_ClockConfig+0x8a>
 800349c:	e089      	b.n	80035b2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d107      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034a6:	4b79      	ldr	r3, [pc, #484]	; (800368c <HAL_RCC_ClockConfig+0x278>)
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	2380      	movs	r3, #128	; 0x80
 80034ac:	029b      	lsls	r3, r3, #10
 80034ae:	4013      	ands	r3, r2
 80034b0:	d120      	bne.n	80034f4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e0e1      	b.n	800367a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b03      	cmp	r3, #3
 80034bc:	d107      	bne.n	80034ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034be:	4b73      	ldr	r3, [pc, #460]	; (800368c <HAL_RCC_ClockConfig+0x278>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	2380      	movs	r3, #128	; 0x80
 80034c4:	049b      	lsls	r3, r3, #18
 80034c6:	4013      	ands	r3, r2
 80034c8:	d114      	bne.n	80034f4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e0d5      	b.n	800367a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d106      	bne.n	80034e4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034d6:	4b6d      	ldr	r3, [pc, #436]	; (800368c <HAL_RCC_ClockConfig+0x278>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2204      	movs	r2, #4
 80034dc:	4013      	ands	r3, r2
 80034de:	d109      	bne.n	80034f4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0ca      	b.n	800367a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80034e4:	4b69      	ldr	r3, [pc, #420]	; (800368c <HAL_RCC_ClockConfig+0x278>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	2380      	movs	r3, #128	; 0x80
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4013      	ands	r3, r2
 80034ee:	d101      	bne.n	80034f4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0c2      	b.n	800367a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034f4:	4b65      	ldr	r3, [pc, #404]	; (800368c <HAL_RCC_ClockConfig+0x278>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2203      	movs	r2, #3
 80034fa:	4393      	bics	r3, r2
 80034fc:	0019      	movs	r1, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	4b62      	ldr	r3, [pc, #392]	; (800368c <HAL_RCC_ClockConfig+0x278>)
 8003504:	430a      	orrs	r2, r1
 8003506:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003508:	f7fe fb98 	bl	8001c3c <HAL_GetTick>
 800350c:	0003      	movs	r3, r0
 800350e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b02      	cmp	r3, #2
 8003516:	d111      	bne.n	800353c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003518:	e009      	b.n	800352e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800351a:	f7fe fb8f 	bl	8001c3c <HAL_GetTick>
 800351e:	0002      	movs	r2, r0
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	4a58      	ldr	r2, [pc, #352]	; (8003688 <HAL_RCC_ClockConfig+0x274>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d901      	bls.n	800352e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e0a5      	b.n	800367a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800352e:	4b57      	ldr	r3, [pc, #348]	; (800368c <HAL_RCC_ClockConfig+0x278>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	220c      	movs	r2, #12
 8003534:	4013      	ands	r3, r2
 8003536:	2b08      	cmp	r3, #8
 8003538:	d1ef      	bne.n	800351a <HAL_RCC_ClockConfig+0x106>
 800353a:	e03a      	b.n	80035b2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b03      	cmp	r3, #3
 8003542:	d111      	bne.n	8003568 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003544:	e009      	b.n	800355a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003546:	f7fe fb79 	bl	8001c3c <HAL_GetTick>
 800354a:	0002      	movs	r2, r0
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	4a4d      	ldr	r2, [pc, #308]	; (8003688 <HAL_RCC_ClockConfig+0x274>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d901      	bls.n	800355a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e08f      	b.n	800367a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800355a:	4b4c      	ldr	r3, [pc, #304]	; (800368c <HAL_RCC_ClockConfig+0x278>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	220c      	movs	r2, #12
 8003560:	4013      	ands	r3, r2
 8003562:	2b0c      	cmp	r3, #12
 8003564:	d1ef      	bne.n	8003546 <HAL_RCC_ClockConfig+0x132>
 8003566:	e024      	b.n	80035b2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d11b      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003570:	e009      	b.n	8003586 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003572:	f7fe fb63 	bl	8001c3c <HAL_GetTick>
 8003576:	0002      	movs	r2, r0
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	4a42      	ldr	r2, [pc, #264]	; (8003688 <HAL_RCC_ClockConfig+0x274>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e079      	b.n	800367a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003586:	4b41      	ldr	r3, [pc, #260]	; (800368c <HAL_RCC_ClockConfig+0x278>)
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	220c      	movs	r2, #12
 800358c:	4013      	ands	r3, r2
 800358e:	2b04      	cmp	r3, #4
 8003590:	d1ef      	bne.n	8003572 <HAL_RCC_ClockConfig+0x15e>
 8003592:	e00e      	b.n	80035b2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003594:	f7fe fb52 	bl	8001c3c <HAL_GetTick>
 8003598:	0002      	movs	r2, r0
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	4a3a      	ldr	r2, [pc, #232]	; (8003688 <HAL_RCC_ClockConfig+0x274>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e068      	b.n	800367a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80035a8:	4b38      	ldr	r3, [pc, #224]	; (800368c <HAL_RCC_ClockConfig+0x278>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	220c      	movs	r2, #12
 80035ae:	4013      	ands	r3, r2
 80035b0:	d1f0      	bne.n	8003594 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035b2:	4b34      	ldr	r3, [pc, #208]	; (8003684 <HAL_RCC_ClockConfig+0x270>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2201      	movs	r2, #1
 80035b8:	4013      	ands	r3, r2
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d21e      	bcs.n	80035fe <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c0:	4b30      	ldr	r3, [pc, #192]	; (8003684 <HAL_RCC_ClockConfig+0x270>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2201      	movs	r2, #1
 80035c6:	4393      	bics	r3, r2
 80035c8:	0019      	movs	r1, r3
 80035ca:	4b2e      	ldr	r3, [pc, #184]	; (8003684 <HAL_RCC_ClockConfig+0x270>)
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035d2:	f7fe fb33 	bl	8001c3c <HAL_GetTick>
 80035d6:	0003      	movs	r3, r0
 80035d8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035da:	e009      	b.n	80035f0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035dc:	f7fe fb2e 	bl	8001c3c <HAL_GetTick>
 80035e0:	0002      	movs	r2, r0
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	4a28      	ldr	r2, [pc, #160]	; (8003688 <HAL_RCC_ClockConfig+0x274>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e044      	b.n	800367a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f0:	4b24      	ldr	r3, [pc, #144]	; (8003684 <HAL_RCC_ClockConfig+0x270>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2201      	movs	r2, #1
 80035f6:	4013      	ands	r3, r2
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d1ee      	bne.n	80035dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2204      	movs	r2, #4
 8003604:	4013      	ands	r3, r2
 8003606:	d009      	beq.n	800361c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003608:	4b20      	ldr	r3, [pc, #128]	; (800368c <HAL_RCC_ClockConfig+0x278>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	4a20      	ldr	r2, [pc, #128]	; (8003690 <HAL_RCC_ClockConfig+0x27c>)
 800360e:	4013      	ands	r3, r2
 8003610:	0019      	movs	r1, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	4b1d      	ldr	r3, [pc, #116]	; (800368c <HAL_RCC_ClockConfig+0x278>)
 8003618:	430a      	orrs	r2, r1
 800361a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2208      	movs	r2, #8
 8003622:	4013      	ands	r3, r2
 8003624:	d00a      	beq.n	800363c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003626:	4b19      	ldr	r3, [pc, #100]	; (800368c <HAL_RCC_ClockConfig+0x278>)
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	4a1a      	ldr	r2, [pc, #104]	; (8003694 <HAL_RCC_ClockConfig+0x280>)
 800362c:	4013      	ands	r3, r2
 800362e:	0019      	movs	r1, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	00da      	lsls	r2, r3, #3
 8003636:	4b15      	ldr	r3, [pc, #84]	; (800368c <HAL_RCC_ClockConfig+0x278>)
 8003638:	430a      	orrs	r2, r1
 800363a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800363c:	f000 f832 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 8003640:	0001      	movs	r1, r0
 8003642:	4b12      	ldr	r3, [pc, #72]	; (800368c <HAL_RCC_ClockConfig+0x278>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	091b      	lsrs	r3, r3, #4
 8003648:	220f      	movs	r2, #15
 800364a:	4013      	ands	r3, r2
 800364c:	4a12      	ldr	r2, [pc, #72]	; (8003698 <HAL_RCC_ClockConfig+0x284>)
 800364e:	5cd3      	ldrb	r3, [r2, r3]
 8003650:	000a      	movs	r2, r1
 8003652:	40da      	lsrs	r2, r3
 8003654:	4b11      	ldr	r3, [pc, #68]	; (800369c <HAL_RCC_ClockConfig+0x288>)
 8003656:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003658:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <HAL_RCC_ClockConfig+0x28c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	250b      	movs	r5, #11
 800365e:	197c      	adds	r4, r7, r5
 8003660:	0018      	movs	r0, r3
 8003662:	f7fe faa5 	bl	8001bb0 <HAL_InitTick>
 8003666:	0003      	movs	r3, r0
 8003668:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800366a:	197b      	adds	r3, r7, r5
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003672:	197b      	adds	r3, r7, r5
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	e000      	b.n	800367a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	0018      	movs	r0, r3
 800367c:	46bd      	mov	sp, r7
 800367e:	b004      	add	sp, #16
 8003680:	bdb0      	pop	{r4, r5, r7, pc}
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	40022000 	.word	0x40022000
 8003688:	00001388 	.word	0x00001388
 800368c:	40021000 	.word	0x40021000
 8003690:	fffff8ff 	.word	0xfffff8ff
 8003694:	ffffc7ff 	.word	0xffffc7ff
 8003698:	08005054 	.word	0x08005054
 800369c:	20000118 	.word	0x20000118
 80036a0:	2000011c 	.word	0x2000011c

080036a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a4:	b5b0      	push	{r4, r5, r7, lr}
 80036a6:	b08e      	sub	sp, #56	; 0x38
 80036a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80036aa:	4b4c      	ldr	r3, [pc, #304]	; (80037dc <HAL_RCC_GetSysClockFreq+0x138>)
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036b2:	230c      	movs	r3, #12
 80036b4:	4013      	ands	r3, r2
 80036b6:	2b0c      	cmp	r3, #12
 80036b8:	d014      	beq.n	80036e4 <HAL_RCC_GetSysClockFreq+0x40>
 80036ba:	d900      	bls.n	80036be <HAL_RCC_GetSysClockFreq+0x1a>
 80036bc:	e07b      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0x112>
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d002      	beq.n	80036c8 <HAL_RCC_GetSysClockFreq+0x24>
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d00b      	beq.n	80036de <HAL_RCC_GetSysClockFreq+0x3a>
 80036c6:	e076      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80036c8:	4b44      	ldr	r3, [pc, #272]	; (80037dc <HAL_RCC_GetSysClockFreq+0x138>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2210      	movs	r2, #16
 80036ce:	4013      	ands	r3, r2
 80036d0:	d002      	beq.n	80036d8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80036d2:	4b43      	ldr	r3, [pc, #268]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80036d4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80036d6:	e07c      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80036d8:	4b42      	ldr	r3, [pc, #264]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x140>)
 80036da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80036dc:	e079      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036de:	4b42      	ldr	r3, [pc, #264]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x144>)
 80036e0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80036e2:	e076      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80036e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e6:	0c9a      	lsrs	r2, r3, #18
 80036e8:	230f      	movs	r3, #15
 80036ea:	401a      	ands	r2, r3
 80036ec:	4b3f      	ldr	r3, [pc, #252]	; (80037ec <HAL_RCC_GetSysClockFreq+0x148>)
 80036ee:	5c9b      	ldrb	r3, [r3, r2]
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80036f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f4:	0d9a      	lsrs	r2, r3, #22
 80036f6:	2303      	movs	r3, #3
 80036f8:	4013      	ands	r3, r2
 80036fa:	3301      	adds	r3, #1
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036fe:	4b37      	ldr	r3, [pc, #220]	; (80037dc <HAL_RCC_GetSysClockFreq+0x138>)
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	2380      	movs	r3, #128	; 0x80
 8003704:	025b      	lsls	r3, r3, #9
 8003706:	4013      	ands	r3, r2
 8003708:	d01a      	beq.n	8003740 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370c:	61bb      	str	r3, [r7, #24]
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
 8003712:	4a35      	ldr	r2, [pc, #212]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x144>)
 8003714:	2300      	movs	r3, #0
 8003716:	69b8      	ldr	r0, [r7, #24]
 8003718:	69f9      	ldr	r1, [r7, #28]
 800371a:	f7fc fda1 	bl	8000260 <__aeabi_lmul>
 800371e:	0002      	movs	r2, r0
 8003720:	000b      	movs	r3, r1
 8003722:	0010      	movs	r0, r2
 8003724:	0019      	movs	r1, r3
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	613b      	str	r3, [r7, #16]
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f7fc fd75 	bl	8000220 <__aeabi_uldivmod>
 8003736:	0002      	movs	r2, r0
 8003738:	000b      	movs	r3, r1
 800373a:	0013      	movs	r3, r2
 800373c:	637b      	str	r3, [r7, #52]	; 0x34
 800373e:	e037      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003740:	4b26      	ldr	r3, [pc, #152]	; (80037dc <HAL_RCC_GetSysClockFreq+0x138>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2210      	movs	r2, #16
 8003746:	4013      	ands	r3, r2
 8003748:	d01a      	beq.n	8003780 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	4a23      	ldr	r2, [pc, #140]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003754:	2300      	movs	r3, #0
 8003756:	68b8      	ldr	r0, [r7, #8]
 8003758:	68f9      	ldr	r1, [r7, #12]
 800375a:	f7fc fd81 	bl	8000260 <__aeabi_lmul>
 800375e:	0002      	movs	r2, r0
 8003760:	000b      	movs	r3, r1
 8003762:	0010      	movs	r0, r2
 8003764:	0019      	movs	r1, r3
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	603b      	str	r3, [r7, #0]
 800376a:	2300      	movs	r3, #0
 800376c:	607b      	str	r3, [r7, #4]
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f7fc fd55 	bl	8000220 <__aeabi_uldivmod>
 8003776:	0002      	movs	r2, r0
 8003778:	000b      	movs	r3, r1
 800377a:	0013      	movs	r3, r2
 800377c:	637b      	str	r3, [r7, #52]	; 0x34
 800377e:	e017      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003782:	0018      	movs	r0, r3
 8003784:	2300      	movs	r3, #0
 8003786:	0019      	movs	r1, r3
 8003788:	4a16      	ldr	r2, [pc, #88]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x140>)
 800378a:	2300      	movs	r3, #0
 800378c:	f7fc fd68 	bl	8000260 <__aeabi_lmul>
 8003790:	0002      	movs	r2, r0
 8003792:	000b      	movs	r3, r1
 8003794:	0010      	movs	r0, r2
 8003796:	0019      	movs	r1, r3
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	001c      	movs	r4, r3
 800379c:	2300      	movs	r3, #0
 800379e:	001d      	movs	r5, r3
 80037a0:	0022      	movs	r2, r4
 80037a2:	002b      	movs	r3, r5
 80037a4:	f7fc fd3c 	bl	8000220 <__aeabi_uldivmod>
 80037a8:	0002      	movs	r2, r0
 80037aa:	000b      	movs	r3, r1
 80037ac:	0013      	movs	r3, r2
 80037ae:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80037b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037b4:	e00d      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80037b6:	4b09      	ldr	r3, [pc, #36]	; (80037dc <HAL_RCC_GetSysClockFreq+0x138>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	0b5b      	lsrs	r3, r3, #13
 80037bc:	2207      	movs	r2, #7
 80037be:	4013      	ands	r3, r2
 80037c0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	3301      	adds	r3, #1
 80037c6:	2280      	movs	r2, #128	; 0x80
 80037c8:	0212      	lsls	r2, r2, #8
 80037ca:	409a      	lsls	r2, r3
 80037cc:	0013      	movs	r3, r2
 80037ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037d0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80037d4:	0018      	movs	r0, r3
 80037d6:	46bd      	mov	sp, r7
 80037d8:	b00e      	add	sp, #56	; 0x38
 80037da:	bdb0      	pop	{r4, r5, r7, pc}
 80037dc:	40021000 	.word	0x40021000
 80037e0:	003d0900 	.word	0x003d0900
 80037e4:	00f42400 	.word	0x00f42400
 80037e8:	007a1200 	.word	0x007a1200
 80037ec:	0800506c 	.word	0x0800506c

080037f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f4:	4b02      	ldr	r3, [pc, #8]	; (8003800 <HAL_RCC_GetHCLKFreq+0x10>)
 80037f6:	681b      	ldr	r3, [r3, #0]
}
 80037f8:	0018      	movs	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	20000118 	.word	0x20000118

08003804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003808:	f7ff fff2 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 800380c:	0001      	movs	r1, r0
 800380e:	4b06      	ldr	r3, [pc, #24]	; (8003828 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	0a1b      	lsrs	r3, r3, #8
 8003814:	2207      	movs	r2, #7
 8003816:	4013      	ands	r3, r2
 8003818:	4a04      	ldr	r2, [pc, #16]	; (800382c <HAL_RCC_GetPCLK1Freq+0x28>)
 800381a:	5cd3      	ldrb	r3, [r2, r3]
 800381c:	40d9      	lsrs	r1, r3
 800381e:	000b      	movs	r3, r1
}
 8003820:	0018      	movs	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	40021000 	.word	0x40021000
 800382c:	08005064 	.word	0x08005064

08003830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003834:	f7ff ffdc 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 8003838:	0001      	movs	r1, r0
 800383a:	4b06      	ldr	r3, [pc, #24]	; (8003854 <HAL_RCC_GetPCLK2Freq+0x24>)
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	0adb      	lsrs	r3, r3, #11
 8003840:	2207      	movs	r2, #7
 8003842:	4013      	ands	r3, r2
 8003844:	4a04      	ldr	r2, [pc, #16]	; (8003858 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003846:	5cd3      	ldrb	r3, [r2, r3]
 8003848:	40d9      	lsrs	r1, r3
 800384a:	000b      	movs	r3, r1
}
 800384c:	0018      	movs	r0, r3
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	40021000 	.word	0x40021000
 8003858:	08005064 	.word	0x08005064

0800385c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003864:	2017      	movs	r0, #23
 8003866:	183b      	adds	r3, r7, r0
 8003868:	2200      	movs	r2, #0
 800386a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2220      	movs	r2, #32
 8003872:	4013      	ands	r3, r2
 8003874:	d100      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003876:	e0c7      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003878:	4b84      	ldr	r3, [pc, #528]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800387a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800387c:	2380      	movs	r3, #128	; 0x80
 800387e:	055b      	lsls	r3, r3, #21
 8003880:	4013      	ands	r3, r2
 8003882:	d109      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003884:	4b81      	ldr	r3, [pc, #516]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003888:	4b80      	ldr	r3, [pc, #512]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800388a:	2180      	movs	r1, #128	; 0x80
 800388c:	0549      	lsls	r1, r1, #21
 800388e:	430a      	orrs	r2, r1
 8003890:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003892:	183b      	adds	r3, r7, r0
 8003894:	2201      	movs	r2, #1
 8003896:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003898:	4b7d      	ldr	r3, [pc, #500]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	2380      	movs	r3, #128	; 0x80
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	4013      	ands	r3, r2
 80038a2:	d11a      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038a4:	4b7a      	ldr	r3, [pc, #488]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	4b79      	ldr	r3, [pc, #484]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80038aa:	2180      	movs	r1, #128	; 0x80
 80038ac:	0049      	lsls	r1, r1, #1
 80038ae:	430a      	orrs	r2, r1
 80038b0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038b2:	f7fe f9c3 	bl	8001c3c <HAL_GetTick>
 80038b6:	0003      	movs	r3, r0
 80038b8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ba:	e008      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038bc:	f7fe f9be 	bl	8001c3c <HAL_GetTick>
 80038c0:	0002      	movs	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b64      	cmp	r3, #100	; 0x64
 80038c8:	d901      	bls.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e0d9      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ce:	4b70      	ldr	r3, [pc, #448]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	2380      	movs	r3, #128	; 0x80
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	4013      	ands	r3, r2
 80038d8:	d0f0      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80038da:	4b6c      	ldr	r3, [pc, #432]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	23c0      	movs	r3, #192	; 0xc0
 80038e0:	039b      	lsls	r3, r3, #14
 80038e2:	4013      	ands	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	23c0      	movs	r3, #192	; 0xc0
 80038ec:	039b      	lsls	r3, r3, #14
 80038ee:	4013      	ands	r3, r2
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d013      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	23c0      	movs	r3, #192	; 0xc0
 80038fc:	029b      	lsls	r3, r3, #10
 80038fe:	401a      	ands	r2, r3
 8003900:	23c0      	movs	r3, #192	; 0xc0
 8003902:	029b      	lsls	r3, r3, #10
 8003904:	429a      	cmp	r2, r3
 8003906:	d10a      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003908:	4b60      	ldr	r3, [pc, #384]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	2380      	movs	r3, #128	; 0x80
 800390e:	029b      	lsls	r3, r3, #10
 8003910:	401a      	ands	r2, r3
 8003912:	2380      	movs	r3, #128	; 0x80
 8003914:	029b      	lsls	r3, r3, #10
 8003916:	429a      	cmp	r2, r3
 8003918:	d101      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e0b1      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800391e:	4b5b      	ldr	r3, [pc, #364]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003920:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003922:	23c0      	movs	r3, #192	; 0xc0
 8003924:	029b      	lsls	r3, r3, #10
 8003926:	4013      	ands	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d03b      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	23c0      	movs	r3, #192	; 0xc0
 8003936:	029b      	lsls	r3, r3, #10
 8003938:	4013      	ands	r3, r2
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	429a      	cmp	r2, r3
 800393e:	d033      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2220      	movs	r2, #32
 8003946:	4013      	ands	r3, r2
 8003948:	d02e      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800394a:	4b50      	ldr	r3, [pc, #320]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800394c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800394e:	4a51      	ldr	r2, [pc, #324]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003950:	4013      	ands	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003954:	4b4d      	ldr	r3, [pc, #308]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003956:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003958:	4b4c      	ldr	r3, [pc, #304]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800395a:	2180      	movs	r1, #128	; 0x80
 800395c:	0309      	lsls	r1, r1, #12
 800395e:	430a      	orrs	r2, r1
 8003960:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003962:	4b4a      	ldr	r3, [pc, #296]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003964:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003966:	4b49      	ldr	r3, [pc, #292]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003968:	494b      	ldr	r1, [pc, #300]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800396a:	400a      	ands	r2, r1
 800396c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800396e:	4b47      	ldr	r3, [pc, #284]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	2380      	movs	r3, #128	; 0x80
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	4013      	ands	r3, r2
 800397c:	d014      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397e:	f7fe f95d 	bl	8001c3c <HAL_GetTick>
 8003982:	0003      	movs	r3, r0
 8003984:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003986:	e009      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003988:	f7fe f958 	bl	8001c3c <HAL_GetTick>
 800398c:	0002      	movs	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	4a42      	ldr	r2, [pc, #264]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d901      	bls.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e072      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800399c:	4b3b      	ldr	r3, [pc, #236]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800399e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039a0:	2380      	movs	r3, #128	; 0x80
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4013      	ands	r3, r2
 80039a6:	d0ef      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2220      	movs	r2, #32
 80039ae:	4013      	ands	r3, r2
 80039b0:	d01f      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	23c0      	movs	r3, #192	; 0xc0
 80039b8:	029b      	lsls	r3, r3, #10
 80039ba:	401a      	ands	r2, r3
 80039bc:	23c0      	movs	r3, #192	; 0xc0
 80039be:	029b      	lsls	r3, r3, #10
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d10c      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x182>
 80039c4:	4b31      	ldr	r3, [pc, #196]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a35      	ldr	r2, [pc, #212]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80039ca:	4013      	ands	r3, r2
 80039cc:	0019      	movs	r1, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	23c0      	movs	r3, #192	; 0xc0
 80039d4:	039b      	lsls	r3, r3, #14
 80039d6:	401a      	ands	r2, r3
 80039d8:	4b2c      	ldr	r3, [pc, #176]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039da:	430a      	orrs	r2, r1
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	4b2b      	ldr	r3, [pc, #172]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039e0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	23c0      	movs	r3, #192	; 0xc0
 80039e8:	029b      	lsls	r3, r3, #10
 80039ea:	401a      	ands	r2, r3
 80039ec:	4b27      	ldr	r3, [pc, #156]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039ee:	430a      	orrs	r2, r1
 80039f0:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039f2:	2317      	movs	r3, #23
 80039f4:	18fb      	adds	r3, r7, r3
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d105      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039fc:	4b23      	ldr	r3, [pc, #140]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a00:	4b22      	ldr	r3, [pc, #136]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a02:	4928      	ldr	r1, [pc, #160]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a04:	400a      	ands	r2, r1
 8003a06:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d009      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a12:	4b1e      	ldr	r3, [pc, #120]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a16:	220c      	movs	r2, #12
 8003a18:	4393      	bics	r3, r2
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	4b1a      	ldr	r3, [pc, #104]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a22:	430a      	orrs	r2, r1
 8003a24:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2204      	movs	r2, #4
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d009      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a30:	4b16      	ldr	r3, [pc, #88]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a34:	4a1c      	ldr	r2, [pc, #112]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	0019      	movs	r1, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	4b13      	ldr	r3, [pc, #76]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a40:	430a      	orrs	r2, r1
 8003a42:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2208      	movs	r2, #8
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d009      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a4e:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a52:	4a16      	ldr	r2, [pc, #88]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	0019      	movs	r1, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2280      	movs	r2, #128	; 0x80
 8003a68:	4013      	ands	r3, r2
 8003a6a:	d009      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003a6c:	4b07      	ldr	r3, [pc, #28]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a70:	4a0f      	ldr	r2, [pc, #60]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a72:	4013      	ands	r3, r2
 8003a74:	0019      	movs	r1, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	4b04      	ldr	r3, [pc, #16]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	0018      	movs	r0, r3
 8003a84:	46bd      	mov	sp, r7
 8003a86:	b006      	add	sp, #24
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	40007000 	.word	0x40007000
 8003a94:	fffcffff 	.word	0xfffcffff
 8003a98:	fff7ffff 	.word	0xfff7ffff
 8003a9c:	00001388 	.word	0x00001388
 8003aa0:	ffcfffff 	.word	0xffcfffff
 8003aa4:	efffffff 	.word	0xefffffff
 8003aa8:	fffff3ff 	.word	0xfffff3ff
 8003aac:	ffffcfff 	.word	0xffffcfff
 8003ab0:	fff3ffff 	.word	0xfff3ffff

08003ab4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003ab4:	b5b0      	push	{r4, r5, r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003abc:	230f      	movs	r3, #15
 8003abe:	18fb      	adds	r3, r7, r3
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e088      	b.n	8003be0 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2221      	movs	r2, #33	; 0x21
 8003ad2:	5c9b      	ldrb	r3, [r3, r2]
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d107      	bne.n	8003aea <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2220      	movs	r2, #32
 8003ade:	2100      	movs	r1, #0
 8003ae0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f7fd ff35 	bl	8001954 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2221      	movs	r2, #33	; 0x21
 8003aee:	2102      	movs	r1, #2
 8003af0:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	2210      	movs	r2, #16
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b10      	cmp	r3, #16
 8003afe:	d05f      	beq.n	8003bc0 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	22ca      	movs	r2, #202	; 0xca
 8003b06:	625a      	str	r2, [r3, #36]	; 0x24
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2253      	movs	r2, #83	; 0x53
 8003b0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003b10:	250f      	movs	r5, #15
 8003b12:	197c      	adds	r4, r7, r5
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	0018      	movs	r0, r3
 8003b18:	f000 f890 	bl	8003c3c <RTC_EnterInitMode>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8003b20:	0028      	movs	r0, r5
 8003b22:	183b      	adds	r3, r7, r0
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d12c      	bne.n	8003b84 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	492c      	ldr	r1, [pc, #176]	; (8003be8 <HAL_RTC_Init+0x134>)
 8003b36:	400a      	ands	r2, r1
 8003b38:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6899      	ldr	r1, [r3, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	68d2      	ldr	r2, [r2, #12]
 8003b60:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6919      	ldr	r1, [r3, #16]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	041a      	lsls	r2, r3, #16
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003b76:	183c      	adds	r4, r7, r0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f000 f8a2 	bl	8003cc4 <RTC_ExitInitMode>
 8003b80:	0003      	movs	r3, r0
 8003b82:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8003b84:	230f      	movs	r3, #15
 8003b86:	18fb      	adds	r3, r7, r3
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d113      	bne.n	8003bb6 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2103      	movs	r1, #3
 8003b9a:	438a      	bics	r2, r1
 8003b9c:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69da      	ldr	r2, [r3, #28]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	22ff      	movs	r2, #255	; 0xff
 8003bbc:	625a      	str	r2, [r3, #36]	; 0x24
 8003bbe:	e003      	b.n	8003bc8 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003bc0:	230f      	movs	r3, #15
 8003bc2:	18fb      	adds	r3, r7, r3
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8003bc8:	230f      	movs	r3, #15
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d103      	bne.n	8003bda <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2221      	movs	r2, #33	; 0x21
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003bda:	230f      	movs	r3, #15
 8003bdc:	18fb      	adds	r3, r7, r3
 8003bde:	781b      	ldrb	r3, [r3, #0]
}
 8003be0:	0018      	movs	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b004      	add	sp, #16
 8003be6:	bdb0      	pop	{r4, r5, r7, pc}
 8003be8:	ff8fffbf 	.word	0xff8fffbf

08003bec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a0e      	ldr	r2, [pc, #56]	; (8003c38 <HAL_RTC_WaitForSynchro+0x4c>)
 8003bfe:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c00:	f7fe f81c 	bl	8001c3c <HAL_GetTick>
 8003c04:	0003      	movs	r3, r0
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003c08:	e00a      	b.n	8003c20 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c0a:	f7fe f817 	bl	8001c3c <HAL_GetTick>
 8003c0e:	0002      	movs	r2, r0
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	1ad2      	subs	r2, r2, r3
 8003c14:	23fa      	movs	r3, #250	; 0xfa
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d901      	bls.n	8003c20 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e006      	b.n	8003c2e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	4013      	ands	r3, r2
 8003c2a:	d0ee      	beq.n	8003c0a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	0018      	movs	r0, r3
 8003c30:	46bd      	mov	sp, r7
 8003c32:	b004      	add	sp, #16
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	0001ff5f 	.word	0x0001ff5f

08003c3c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003c48:	230f      	movs	r3, #15
 8003c4a:	18fb      	adds	r3, r7, r3
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	2240      	movs	r2, #64	; 0x40
 8003c58:	4013      	ands	r3, r2
 8003c5a:	d12c      	bne.n	8003cb6 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2180      	movs	r1, #128	; 0x80
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c6c:	f7fd ffe6 	bl	8001c3c <HAL_GetTick>
 8003c70:	0003      	movs	r3, r0
 8003c72:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003c74:	e014      	b.n	8003ca0 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c76:	f7fd ffe1 	bl	8001c3c <HAL_GetTick>
 8003c7a:	0002      	movs	r2, r0
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	1ad2      	subs	r2, r2, r3
 8003c80:	200f      	movs	r0, #15
 8003c82:	183b      	adds	r3, r7, r0
 8003c84:	1839      	adds	r1, r7, r0
 8003c86:	7809      	ldrb	r1, [r1, #0]
 8003c88:	7019      	strb	r1, [r3, #0]
 8003c8a:	23fa      	movs	r3, #250	; 0xfa
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d906      	bls.n	8003ca0 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2221      	movs	r2, #33	; 0x21
 8003c96:	2104      	movs	r1, #4
 8003c98:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8003c9a:	183b      	adds	r3, r7, r0
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	2240      	movs	r2, #64	; 0x40
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d104      	bne.n	8003cb6 <RTC_EnterInitMode+0x7a>
 8003cac:	230f      	movs	r3, #15
 8003cae:	18fb      	adds	r3, r7, r3
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d1df      	bne.n	8003c76 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8003cb6:	230f      	movs	r3, #15
 8003cb8:	18fb      	adds	r3, r7, r3
 8003cba:	781b      	ldrb	r3, [r3, #0]
}
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	b004      	add	sp, #16
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003cc4:	b590      	push	{r4, r7, lr}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ccc:	240f      	movs	r4, #15
 8003cce:	193b      	adds	r3, r7, r4
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2180      	movs	r1, #128	; 0x80
 8003ce0:	438a      	bics	r2, r1
 8003ce2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	2220      	movs	r2, #32
 8003cec:	4013      	ands	r3, r2
 8003cee:	d10c      	bne.n	8003d0a <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f7ff ff7a 	bl	8003bec <HAL_RTC_WaitForSynchro>
 8003cf8:	1e03      	subs	r3, r0, #0
 8003cfa:	d006      	beq.n	8003d0a <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2221      	movs	r2, #33	; 0x21
 8003d00:	2104      	movs	r1, #4
 8003d02:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8003d04:	193b      	adds	r3, r7, r4
 8003d06:	2201      	movs	r2, #1
 8003d08:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003d0a:	230f      	movs	r3, #15
 8003d0c:	18fb      	adds	r3, r7, r3
 8003d0e:	781b      	ldrb	r3, [r3, #0]
}
 8003d10:	0018      	movs	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	b005      	add	sp, #20
 8003d16:	bd90      	pop	{r4, r7, pc}

08003d18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e032      	b.n	8003d90 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2239      	movs	r2, #57	; 0x39
 8003d2e:	5c9b      	ldrb	r3, [r3, r2]
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d107      	bne.n	8003d46 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2238      	movs	r2, #56	; 0x38
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	0018      	movs	r0, r3
 8003d42:	f7fd fe1f 	bl	8001984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2239      	movs	r2, #57	; 0x39
 8003d4a:	2102      	movs	r1, #2
 8003d4c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3304      	adds	r3, #4
 8003d56:	0019      	movs	r1, r3
 8003d58:	0010      	movs	r0, r2
 8003d5a:	f000 f9ff 	bl	800415c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	223e      	movs	r2, #62	; 0x3e
 8003d62:	2101      	movs	r1, #1
 8003d64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	223a      	movs	r2, #58	; 0x3a
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	5499      	strb	r1, [r3, r2]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	223b      	movs	r2, #59	; 0x3b
 8003d72:	2101      	movs	r1, #1
 8003d74:	5499      	strb	r1, [r3, r2]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	223c      	movs	r2, #60	; 0x3c
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	5499      	strb	r1, [r3, r2]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	223d      	movs	r2, #61	; 0x3d
 8003d82:	2101      	movs	r1, #1
 8003d84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2239      	movs	r2, #57	; 0x39
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	0018      	movs	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b002      	add	sp, #8
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e032      	b.n	8003e10 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2239      	movs	r2, #57	; 0x39
 8003dae:	5c9b      	ldrb	r3, [r3, r2]
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d107      	bne.n	8003dc6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2238      	movs	r2, #56	; 0x38
 8003dba:	2100      	movs	r1, #0
 8003dbc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f000 f829 	bl	8003e18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2239      	movs	r2, #57	; 0x39
 8003dca:	2102      	movs	r1, #2
 8003dcc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	0010      	movs	r0, r2
 8003dda:	f000 f9bf 	bl	800415c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	223e      	movs	r2, #62	; 0x3e
 8003de2:	2101      	movs	r1, #1
 8003de4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	223a      	movs	r2, #58	; 0x3a
 8003dea:	2101      	movs	r1, #1
 8003dec:	5499      	strb	r1, [r3, r2]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	223b      	movs	r2, #59	; 0x3b
 8003df2:	2101      	movs	r1, #1
 8003df4:	5499      	strb	r1, [r3, r2]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	223c      	movs	r2, #60	; 0x3c
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	5499      	strb	r1, [r3, r2]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	223d      	movs	r2, #61	; 0x3d
 8003e02:	2101      	movs	r1, #1
 8003e04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2239      	movs	r2, #57	; 0x39
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	0018      	movs	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b002      	add	sp, #8
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e20:	46c0      	nop			; (mov r8, r8)
 8003e22:	46bd      	mov	sp, r7
 8003e24:	b002      	add	sp, #8
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e34:	2317      	movs	r3, #23
 8003e36:	18fb      	adds	r3, r7, r3
 8003e38:	2200      	movs	r2, #0
 8003e3a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2238      	movs	r2, #56	; 0x38
 8003e40:	5c9b      	ldrb	r3, [r3, r2]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d101      	bne.n	8003e4a <HAL_TIM_PWM_ConfigChannel+0x22>
 8003e46:	2302      	movs	r3, #2
 8003e48:	e0ad      	b.n	8003fa6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2238      	movs	r2, #56	; 0x38
 8003e4e:	2101      	movs	r1, #1
 8003e50:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b0c      	cmp	r3, #12
 8003e56:	d100      	bne.n	8003e5a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003e58:	e076      	b.n	8003f48 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b0c      	cmp	r3, #12
 8003e5e:	d900      	bls.n	8003e62 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003e60:	e095      	b.n	8003f8e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d04e      	beq.n	8003f06 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d900      	bls.n	8003e70 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003e6e:	e08e      	b.n	8003f8e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_TIM_PWM_ConfigChannel+0x56>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d021      	beq.n	8003ec0 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003e7c:	e087      	b.n	8003f8e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	0011      	movs	r1, r2
 8003e86:	0018      	movs	r0, r3
 8003e88:	f000 f9b2 	bl	80041f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2108      	movs	r1, #8
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2104      	movs	r1, #4
 8003ea8:	438a      	bics	r2, r1
 8003eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6999      	ldr	r1, [r3, #24]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	619a      	str	r2, [r3, #24]
      break;
 8003ebe:	e06b      	b.n	8003f98 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	0011      	movs	r1, r2
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f000 f9cd 	bl	8004268 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699a      	ldr	r2, [r3, #24]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2180      	movs	r1, #128	; 0x80
 8003eda:	0109      	lsls	r1, r1, #4
 8003edc:	430a      	orrs	r2, r1
 8003ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699a      	ldr	r2, [r3, #24]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4931      	ldr	r1, [pc, #196]	; (8003fb0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003eec:	400a      	ands	r2, r1
 8003eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6999      	ldr	r1, [r3, #24]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	021a      	lsls	r2, r3, #8
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	619a      	str	r2, [r3, #24]
      break;
 8003f04:	e048      	b.n	8003f98 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	0011      	movs	r1, r2
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f000 f9ec 	bl	80042ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	69da      	ldr	r2, [r3, #28]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2108      	movs	r1, #8
 8003f20:	430a      	orrs	r2, r1
 8003f22:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	69da      	ldr	r2, [r3, #28]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2104      	movs	r1, #4
 8003f30:	438a      	bics	r2, r1
 8003f32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	69d9      	ldr	r1, [r3, #28]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	61da      	str	r2, [r3, #28]
      break;
 8003f46:	e027      	b.n	8003f98 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	0011      	movs	r1, r2
 8003f50:	0018      	movs	r0, r3
 8003f52:	f000 fa0b 	bl	800436c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69da      	ldr	r2, [r3, #28]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2180      	movs	r1, #128	; 0x80
 8003f62:	0109      	lsls	r1, r1, #4
 8003f64:	430a      	orrs	r2, r1
 8003f66:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	69da      	ldr	r2, [r3, #28]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	490f      	ldr	r1, [pc, #60]	; (8003fb0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003f74:	400a      	ands	r2, r1
 8003f76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69d9      	ldr	r1, [r3, #28]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	021a      	lsls	r2, r3, #8
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	61da      	str	r2, [r3, #28]
      break;
 8003f8c:	e004      	b.n	8003f98 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003f8e:	2317      	movs	r3, #23
 8003f90:	18fb      	adds	r3, r7, r3
 8003f92:	2201      	movs	r2, #1
 8003f94:	701a      	strb	r2, [r3, #0]
      break;
 8003f96:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2238      	movs	r2, #56	; 0x38
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	5499      	strb	r1, [r3, r2]

  return status;
 8003fa0:	2317      	movs	r3, #23
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	781b      	ldrb	r3, [r3, #0]
}
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	b006      	add	sp, #24
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	46c0      	nop			; (mov r8, r8)
 8003fb0:	fffffbff 	.word	0xfffffbff

08003fb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fbe:	230f      	movs	r3, #15
 8003fc0:	18fb      	adds	r3, r7, r3
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2238      	movs	r2, #56	; 0x38
 8003fca:	5c9b      	ldrb	r3, [r3, r2]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_TIM_ConfigClockSource+0x20>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e0bc      	b.n	800414e <HAL_TIM_ConfigClockSource+0x19a>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2238      	movs	r2, #56	; 0x38
 8003fd8:	2101      	movs	r1, #1
 8003fda:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2239      	movs	r2, #57	; 0x39
 8003fe0:	2102      	movs	r1, #2
 8003fe2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2277      	movs	r2, #119	; 0x77
 8003ff0:	4393      	bics	r3, r2
 8003ff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	4a58      	ldr	r2, [pc, #352]	; (8004158 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2280      	movs	r2, #128	; 0x80
 800400a:	0192      	lsls	r2, r2, #6
 800400c:	4293      	cmp	r3, r2
 800400e:	d040      	beq.n	8004092 <HAL_TIM_ConfigClockSource+0xde>
 8004010:	2280      	movs	r2, #128	; 0x80
 8004012:	0192      	lsls	r2, r2, #6
 8004014:	4293      	cmp	r3, r2
 8004016:	d900      	bls.n	800401a <HAL_TIM_ConfigClockSource+0x66>
 8004018:	e088      	b.n	800412c <HAL_TIM_ConfigClockSource+0x178>
 800401a:	2280      	movs	r2, #128	; 0x80
 800401c:	0152      	lsls	r2, r2, #5
 800401e:	4293      	cmp	r3, r2
 8004020:	d100      	bne.n	8004024 <HAL_TIM_ConfigClockSource+0x70>
 8004022:	e088      	b.n	8004136 <HAL_TIM_ConfigClockSource+0x182>
 8004024:	2280      	movs	r2, #128	; 0x80
 8004026:	0152      	lsls	r2, r2, #5
 8004028:	4293      	cmp	r3, r2
 800402a:	d900      	bls.n	800402e <HAL_TIM_ConfigClockSource+0x7a>
 800402c:	e07e      	b.n	800412c <HAL_TIM_ConfigClockSource+0x178>
 800402e:	2b70      	cmp	r3, #112	; 0x70
 8004030:	d018      	beq.n	8004064 <HAL_TIM_ConfigClockSource+0xb0>
 8004032:	d900      	bls.n	8004036 <HAL_TIM_ConfigClockSource+0x82>
 8004034:	e07a      	b.n	800412c <HAL_TIM_ConfigClockSource+0x178>
 8004036:	2b60      	cmp	r3, #96	; 0x60
 8004038:	d04f      	beq.n	80040da <HAL_TIM_ConfigClockSource+0x126>
 800403a:	d900      	bls.n	800403e <HAL_TIM_ConfigClockSource+0x8a>
 800403c:	e076      	b.n	800412c <HAL_TIM_ConfigClockSource+0x178>
 800403e:	2b50      	cmp	r3, #80	; 0x50
 8004040:	d03b      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x106>
 8004042:	d900      	bls.n	8004046 <HAL_TIM_ConfigClockSource+0x92>
 8004044:	e072      	b.n	800412c <HAL_TIM_ConfigClockSource+0x178>
 8004046:	2b40      	cmp	r3, #64	; 0x40
 8004048:	d057      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0x146>
 800404a:	d900      	bls.n	800404e <HAL_TIM_ConfigClockSource+0x9a>
 800404c:	e06e      	b.n	800412c <HAL_TIM_ConfigClockSource+0x178>
 800404e:	2b30      	cmp	r3, #48	; 0x30
 8004050:	d063      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x166>
 8004052:	d86b      	bhi.n	800412c <HAL_TIM_ConfigClockSource+0x178>
 8004054:	2b20      	cmp	r3, #32
 8004056:	d060      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x166>
 8004058:	d868      	bhi.n	800412c <HAL_TIM_ConfigClockSource+0x178>
 800405a:	2b00      	cmp	r3, #0
 800405c:	d05d      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x166>
 800405e:	2b10      	cmp	r3, #16
 8004060:	d05b      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x166>
 8004062:	e063      	b.n	800412c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004074:	f000 fa3a 	bl	80044ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2277      	movs	r2, #119	; 0x77
 8004084:	4313      	orrs	r3, r2
 8004086:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	609a      	str	r2, [r3, #8]
      break;
 8004090:	e052      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040a2:	f000 fa23 	bl	80044ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2180      	movs	r1, #128	; 0x80
 80040b2:	01c9      	lsls	r1, r1, #7
 80040b4:	430a      	orrs	r2, r1
 80040b6:	609a      	str	r2, [r3, #8]
      break;
 80040b8:	e03e      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040c6:	001a      	movs	r2, r3
 80040c8:	f000 f996 	bl	80043f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2150      	movs	r1, #80	; 0x50
 80040d2:	0018      	movs	r0, r3
 80040d4:	f000 f9f0 	bl	80044b8 <TIM_ITRx_SetConfig>
      break;
 80040d8:	e02e      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040e6:	001a      	movs	r2, r3
 80040e8:	f000 f9b4 	bl	8004454 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2160      	movs	r1, #96	; 0x60
 80040f2:	0018      	movs	r0, r3
 80040f4:	f000 f9e0 	bl	80044b8 <TIM_ITRx_SetConfig>
      break;
 80040f8:	e01e      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004106:	001a      	movs	r2, r3
 8004108:	f000 f976 	bl	80043f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2140      	movs	r1, #64	; 0x40
 8004112:	0018      	movs	r0, r3
 8004114:	f000 f9d0 	bl	80044b8 <TIM_ITRx_SetConfig>
      break;
 8004118:	e00e      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	0019      	movs	r1, r3
 8004124:	0010      	movs	r0, r2
 8004126:	f000 f9c7 	bl	80044b8 <TIM_ITRx_SetConfig>
      break;
 800412a:	e005      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800412c:	230f      	movs	r3, #15
 800412e:	18fb      	adds	r3, r7, r3
 8004130:	2201      	movs	r2, #1
 8004132:	701a      	strb	r2, [r3, #0]
      break;
 8004134:	e000      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004136:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2239      	movs	r2, #57	; 0x39
 800413c:	2101      	movs	r1, #1
 800413e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2238      	movs	r2, #56	; 0x38
 8004144:	2100      	movs	r1, #0
 8004146:	5499      	strb	r1, [r3, r2]

  return status;
 8004148:	230f      	movs	r3, #15
 800414a:	18fb      	adds	r3, r7, r3
 800414c:	781b      	ldrb	r3, [r3, #0]
}
 800414e:	0018      	movs	r0, r3
 8004150:	46bd      	mov	sp, r7
 8004152:	b004      	add	sp, #16
 8004154:	bd80      	pop	{r7, pc}
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	ffff00ff 	.word	0xffff00ff

0800415c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	2380      	movs	r3, #128	; 0x80
 8004170:	05db      	lsls	r3, r3, #23
 8004172:	429a      	cmp	r2, r3
 8004174:	d003      	beq.n	800417e <TIM_Base_SetConfig+0x22>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a1b      	ldr	r2, [pc, #108]	; (80041e8 <TIM_Base_SetConfig+0x8c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d108      	bne.n	8004190 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2270      	movs	r2, #112	; 0x70
 8004182:	4393      	bics	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4313      	orrs	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	2380      	movs	r3, #128	; 0x80
 8004194:	05db      	lsls	r3, r3, #23
 8004196:	429a      	cmp	r2, r3
 8004198:	d003      	beq.n	80041a2 <TIM_Base_SetConfig+0x46>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a12      	ldr	r2, [pc, #72]	; (80041e8 <TIM_Base_SetConfig+0x8c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d108      	bne.n	80041b4 <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4a11      	ldr	r2, [pc, #68]	; (80041ec <TIM_Base_SetConfig+0x90>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2280      	movs	r2, #128	; 0x80
 80041b8:	4393      	bics	r3, r2
 80041ba:	001a      	movs	r2, r3
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	689a      	ldr	r2, [r3, #8]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	615a      	str	r2, [r3, #20]
}
 80041e0:	46c0      	nop			; (mov r8, r8)
 80041e2:	46bd      	mov	sp, r7
 80041e4:	b004      	add	sp, #16
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40010800 	.word	0x40010800
 80041ec:	fffffcff 	.word	0xfffffcff

080041f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	2201      	movs	r2, #1
 8004200:	4393      	bics	r3, r2
 8004202:	001a      	movs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2270      	movs	r2, #112	; 0x70
 800421e:	4393      	bics	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2203      	movs	r2, #3
 8004226:	4393      	bics	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4313      	orrs	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2202      	movs	r2, #2
 8004238:	4393      	bics	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	4313      	orrs	r3, r2
 8004244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	621a      	str	r2, [r3, #32]
}
 8004260:	46c0      	nop			; (mov r8, r8)
 8004262:	46bd      	mov	sp, r7
 8004264:	b006      	add	sp, #24
 8004266:	bd80      	pop	{r7, pc}

08004268 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	2210      	movs	r2, #16
 8004278:	4393      	bics	r3, r2
 800427a:	001a      	movs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4a13      	ldr	r2, [pc, #76]	; (80042e4 <TIM_OC2_SetConfig+0x7c>)
 8004296:	4013      	ands	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4a12      	ldr	r2, [pc, #72]	; (80042e8 <TIM_OC2_SetConfig+0x80>)
 800429e:	4013      	ands	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	021b      	lsls	r3, r3, #8
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2220      	movs	r2, #32
 80042b2:	4393      	bics	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	4313      	orrs	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	621a      	str	r2, [r3, #32]
}
 80042dc:	46c0      	nop			; (mov r8, r8)
 80042de:	46bd      	mov	sp, r7
 80042e0:	b006      	add	sp, #24
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	ffff8fff 	.word	0xffff8fff
 80042e8:	fffffcff 	.word	0xfffffcff

080042ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	4a1a      	ldr	r2, [pc, #104]	; (8004364 <TIM_OC3_SetConfig+0x78>)
 80042fc:	401a      	ands	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2270      	movs	r2, #112	; 0x70
 8004318:	4393      	bics	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2203      	movs	r2, #3
 8004320:	4393      	bics	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	4a0d      	ldr	r2, [pc, #52]	; (8004368 <TIM_OC3_SetConfig+0x7c>)
 8004332:	4013      	ands	r3, r2
 8004334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	4313      	orrs	r3, r2
 8004340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	621a      	str	r2, [r3, #32]
}
 800435c:	46c0      	nop			; (mov r8, r8)
 800435e:	46bd      	mov	sp, r7
 8004360:	b006      	add	sp, #24
 8004362:	bd80      	pop	{r7, pc}
 8004364:	fffffeff 	.word	0xfffffeff
 8004368:	fffffdff 	.word	0xfffffdff

0800436c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	4a1b      	ldr	r2, [pc, #108]	; (80043e8 <TIM_OC4_SetConfig+0x7c>)
 800437c:	401a      	ands	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4a15      	ldr	r2, [pc, #84]	; (80043ec <TIM_OC4_SetConfig+0x80>)
 8004398:	4013      	ands	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4a14      	ldr	r2, [pc, #80]	; (80043f0 <TIM_OC4_SetConfig+0x84>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	021b      	lsls	r3, r3, #8
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	4a10      	ldr	r2, [pc, #64]	; (80043f4 <TIM_OC4_SetConfig+0x88>)
 80043b4:	4013      	ands	r3, r2
 80043b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	031b      	lsls	r3, r3, #12
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	621a      	str	r2, [r3, #32]
}
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	46bd      	mov	sp, r7
 80043e2:	b006      	add	sp, #24
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	ffffefff 	.word	0xffffefff
 80043ec:	ffff8fff 	.word	0xffff8fff
 80043f0:	fffffcff 	.word	0xfffffcff
 80043f4:	ffffdfff 	.word	0xffffdfff

080043f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	2201      	movs	r2, #1
 8004410:	4393      	bics	r3, r2
 8004412:	001a      	movs	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	22f0      	movs	r2, #240	; 0xf0
 8004422:	4393      	bics	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4313      	orrs	r3, r2
 800442e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	220a      	movs	r2, #10
 8004434:	4393      	bics	r3, r2
 8004436:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	4313      	orrs	r3, r2
 800443e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	621a      	str	r2, [r3, #32]
}
 800444c:	46c0      	nop			; (mov r8, r8)
 800444e:	46bd      	mov	sp, r7
 8004450:	b006      	add	sp, #24
 8004452:	bd80      	pop	{r7, pc}

08004454 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	2210      	movs	r2, #16
 8004466:	4393      	bics	r3, r2
 8004468:	001a      	movs	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	4a0d      	ldr	r2, [pc, #52]	; (80044b4 <TIM_TI2_ConfigInputStage+0x60>)
 800447e:	4013      	ands	r3, r2
 8004480:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	031b      	lsls	r3, r3, #12
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	4313      	orrs	r3, r2
 800448a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	22a0      	movs	r2, #160	; 0xa0
 8004490:	4393      	bics	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	621a      	str	r2, [r3, #32]
}
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	46bd      	mov	sp, r7
 80044ae:	b006      	add	sp, #24
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	46c0      	nop			; (mov r8, r8)
 80044b4:	ffff0fff 	.word	0xffff0fff

080044b8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2270      	movs	r2, #112	; 0x70
 80044cc:	4393      	bics	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	2207      	movs	r2, #7
 80044d8:	4313      	orrs	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	609a      	str	r2, [r3, #8]
}
 80044e2:	46c0      	nop			; (mov r8, r8)
 80044e4:	46bd      	mov	sp, r7
 80044e6:	b004      	add	sp, #16
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	4a09      	ldr	r2, [pc, #36]	; (8004528 <TIM_ETR_SetConfig+0x3c>)
 8004504:	4013      	ands	r3, r2
 8004506:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	021a      	lsls	r2, r3, #8
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	431a      	orrs	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4313      	orrs	r3, r2
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	609a      	str	r2, [r3, #8]
}
 8004520:	46c0      	nop			; (mov r8, r8)
 8004522:	46bd      	mov	sp, r7
 8004524:	b006      	add	sp, #24
 8004526:	bd80      	pop	{r7, pc}
 8004528:	ffff00ff 	.word	0xffff00ff

0800452c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2238      	movs	r2, #56	; 0x38
 800453a:	5c9b      	ldrb	r3, [r3, r2]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004540:	2302      	movs	r3, #2
 8004542:	e03d      	b.n	80045c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2238      	movs	r2, #56	; 0x38
 8004548:	2101      	movs	r1, #1
 800454a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2239      	movs	r2, #57	; 0x39
 8004550:	2102      	movs	r1, #2
 8004552:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2270      	movs	r2, #112	; 0x70
 8004568:	4393      	bics	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	2380      	movs	r3, #128	; 0x80
 8004584:	05db      	lsls	r3, r3, #23
 8004586:	429a      	cmp	r2, r3
 8004588:	d004      	beq.n	8004594 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a0e      	ldr	r2, [pc, #56]	; (80045c8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d10c      	bne.n	80045ae <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2280      	movs	r2, #128	; 0x80
 8004598:	4393      	bics	r3, r2
 800459a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2239      	movs	r2, #57	; 0x39
 80045b2:	2101      	movs	r1, #1
 80045b4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2238      	movs	r2, #56	; 0x38
 80045ba:	2100      	movs	r1, #0
 80045bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	0018      	movs	r0, r3
 80045c2:	46bd      	mov	sp, r7
 80045c4:	b004      	add	sp, #16
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40010800 	.word	0x40010800

080045cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e044      	b.n	8004668 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d107      	bne.n	80045f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2278      	movs	r2, #120	; 0x78
 80045ea:	2100      	movs	r1, #0
 80045ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	0018      	movs	r0, r3
 80045f2:	f7fd fa1b 	bl	8001a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2224      	movs	r2, #36	; 0x24
 80045fa:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2101      	movs	r1, #1
 8004608:	438a      	bics	r2, r1
 800460a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	0018      	movs	r0, r3
 8004610:	f000 f830 	bl	8004674 <UART_SetConfig>
 8004614:	0003      	movs	r3, r0
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e024      	b.n	8004668 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	0018      	movs	r0, r3
 800462a:	f000 fa6d 	bl	8004b08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	490d      	ldr	r1, [pc, #52]	; (8004670 <HAL_UART_Init+0xa4>)
 800463a:	400a      	ands	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	212a      	movs	r1, #42	; 0x2a
 800464a:	438a      	bics	r2, r1
 800464c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2101      	movs	r1, #1
 800465a:	430a      	orrs	r2, r1
 800465c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	0018      	movs	r0, r3
 8004662:	f000 fb05 	bl	8004c70 <UART_CheckIdleState>
 8004666:	0003      	movs	r3, r0
}
 8004668:	0018      	movs	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	b002      	add	sp, #8
 800466e:	bd80      	pop	{r7, pc}
 8004670:	ffffb7ff 	.word	0xffffb7ff

08004674 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004674:	b5b0      	push	{r4, r5, r7, lr}
 8004676:	b08e      	sub	sp, #56	; 0x38
 8004678:	af00      	add	r7, sp, #0
 800467a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800467c:	231a      	movs	r3, #26
 800467e:	2218      	movs	r2, #24
 8004680:	189b      	adds	r3, r3, r2
 8004682:	19db      	adds	r3, r3, r7
 8004684:	2200      	movs	r2, #0
 8004686:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	431a      	orrs	r2, r3
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	431a      	orrs	r2, r3
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	4313      	orrs	r3, r2
 800469e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4ab4      	ldr	r2, [pc, #720]	; (8004978 <UART_SetConfig+0x304>)
 80046a8:	4013      	ands	r3, r2
 80046aa:	0019      	movs	r1, r3
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046b2:	430a      	orrs	r2, r1
 80046b4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	4aaf      	ldr	r2, [pc, #700]	; (800497c <UART_SetConfig+0x308>)
 80046be:	4013      	ands	r3, r2
 80046c0:	0019      	movs	r1, r3
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4aa9      	ldr	r2, [pc, #676]	; (8004980 <UART_SetConfig+0x30c>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d004      	beq.n	80046e8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046e4:	4313      	orrs	r3, r2
 80046e6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	4aa5      	ldr	r2, [pc, #660]	; (8004984 <UART_SetConfig+0x310>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	0019      	movs	r1, r3
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046fa:	430a      	orrs	r2, r1
 80046fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4aa1      	ldr	r2, [pc, #644]	; (8004988 <UART_SetConfig+0x314>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d131      	bne.n	800476c <UART_SetConfig+0xf8>
 8004708:	4ba0      	ldr	r3, [pc, #640]	; (800498c <UART_SetConfig+0x318>)
 800470a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470c:	220c      	movs	r2, #12
 800470e:	4013      	ands	r3, r2
 8004710:	2b0c      	cmp	r3, #12
 8004712:	d01d      	beq.n	8004750 <UART_SetConfig+0xdc>
 8004714:	d823      	bhi.n	800475e <UART_SetConfig+0xea>
 8004716:	2b08      	cmp	r3, #8
 8004718:	d00c      	beq.n	8004734 <UART_SetConfig+0xc0>
 800471a:	d820      	bhi.n	800475e <UART_SetConfig+0xea>
 800471c:	2b00      	cmp	r3, #0
 800471e:	d002      	beq.n	8004726 <UART_SetConfig+0xb2>
 8004720:	2b04      	cmp	r3, #4
 8004722:	d00e      	beq.n	8004742 <UART_SetConfig+0xce>
 8004724:	e01b      	b.n	800475e <UART_SetConfig+0xea>
 8004726:	231b      	movs	r3, #27
 8004728:	2218      	movs	r2, #24
 800472a:	189b      	adds	r3, r3, r2
 800472c:	19db      	adds	r3, r3, r7
 800472e:	2200      	movs	r2, #0
 8004730:	701a      	strb	r2, [r3, #0]
 8004732:	e065      	b.n	8004800 <UART_SetConfig+0x18c>
 8004734:	231b      	movs	r3, #27
 8004736:	2218      	movs	r2, #24
 8004738:	189b      	adds	r3, r3, r2
 800473a:	19db      	adds	r3, r3, r7
 800473c:	2202      	movs	r2, #2
 800473e:	701a      	strb	r2, [r3, #0]
 8004740:	e05e      	b.n	8004800 <UART_SetConfig+0x18c>
 8004742:	231b      	movs	r3, #27
 8004744:	2218      	movs	r2, #24
 8004746:	189b      	adds	r3, r3, r2
 8004748:	19db      	adds	r3, r3, r7
 800474a:	2204      	movs	r2, #4
 800474c:	701a      	strb	r2, [r3, #0]
 800474e:	e057      	b.n	8004800 <UART_SetConfig+0x18c>
 8004750:	231b      	movs	r3, #27
 8004752:	2218      	movs	r2, #24
 8004754:	189b      	adds	r3, r3, r2
 8004756:	19db      	adds	r3, r3, r7
 8004758:	2208      	movs	r2, #8
 800475a:	701a      	strb	r2, [r3, #0]
 800475c:	e050      	b.n	8004800 <UART_SetConfig+0x18c>
 800475e:	231b      	movs	r3, #27
 8004760:	2218      	movs	r2, #24
 8004762:	189b      	adds	r3, r3, r2
 8004764:	19db      	adds	r3, r3, r7
 8004766:	2210      	movs	r2, #16
 8004768:	701a      	strb	r2, [r3, #0]
 800476a:	e049      	b.n	8004800 <UART_SetConfig+0x18c>
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a83      	ldr	r2, [pc, #524]	; (8004980 <UART_SetConfig+0x30c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d13e      	bne.n	80047f4 <UART_SetConfig+0x180>
 8004776:	4b85      	ldr	r3, [pc, #532]	; (800498c <UART_SetConfig+0x318>)
 8004778:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800477a:	23c0      	movs	r3, #192	; 0xc0
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	4013      	ands	r3, r2
 8004780:	22c0      	movs	r2, #192	; 0xc0
 8004782:	0112      	lsls	r2, r2, #4
 8004784:	4293      	cmp	r3, r2
 8004786:	d027      	beq.n	80047d8 <UART_SetConfig+0x164>
 8004788:	22c0      	movs	r2, #192	; 0xc0
 800478a:	0112      	lsls	r2, r2, #4
 800478c:	4293      	cmp	r3, r2
 800478e:	d82a      	bhi.n	80047e6 <UART_SetConfig+0x172>
 8004790:	2280      	movs	r2, #128	; 0x80
 8004792:	0112      	lsls	r2, r2, #4
 8004794:	4293      	cmp	r3, r2
 8004796:	d011      	beq.n	80047bc <UART_SetConfig+0x148>
 8004798:	2280      	movs	r2, #128	; 0x80
 800479a:	0112      	lsls	r2, r2, #4
 800479c:	4293      	cmp	r3, r2
 800479e:	d822      	bhi.n	80047e6 <UART_SetConfig+0x172>
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d004      	beq.n	80047ae <UART_SetConfig+0x13a>
 80047a4:	2280      	movs	r2, #128	; 0x80
 80047a6:	00d2      	lsls	r2, r2, #3
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d00e      	beq.n	80047ca <UART_SetConfig+0x156>
 80047ac:	e01b      	b.n	80047e6 <UART_SetConfig+0x172>
 80047ae:	231b      	movs	r3, #27
 80047b0:	2218      	movs	r2, #24
 80047b2:	189b      	adds	r3, r3, r2
 80047b4:	19db      	adds	r3, r3, r7
 80047b6:	2200      	movs	r2, #0
 80047b8:	701a      	strb	r2, [r3, #0]
 80047ba:	e021      	b.n	8004800 <UART_SetConfig+0x18c>
 80047bc:	231b      	movs	r3, #27
 80047be:	2218      	movs	r2, #24
 80047c0:	189b      	adds	r3, r3, r2
 80047c2:	19db      	adds	r3, r3, r7
 80047c4:	2202      	movs	r2, #2
 80047c6:	701a      	strb	r2, [r3, #0]
 80047c8:	e01a      	b.n	8004800 <UART_SetConfig+0x18c>
 80047ca:	231b      	movs	r3, #27
 80047cc:	2218      	movs	r2, #24
 80047ce:	189b      	adds	r3, r3, r2
 80047d0:	19db      	adds	r3, r3, r7
 80047d2:	2204      	movs	r2, #4
 80047d4:	701a      	strb	r2, [r3, #0]
 80047d6:	e013      	b.n	8004800 <UART_SetConfig+0x18c>
 80047d8:	231b      	movs	r3, #27
 80047da:	2218      	movs	r2, #24
 80047dc:	189b      	adds	r3, r3, r2
 80047de:	19db      	adds	r3, r3, r7
 80047e0:	2208      	movs	r2, #8
 80047e2:	701a      	strb	r2, [r3, #0]
 80047e4:	e00c      	b.n	8004800 <UART_SetConfig+0x18c>
 80047e6:	231b      	movs	r3, #27
 80047e8:	2218      	movs	r2, #24
 80047ea:	189b      	adds	r3, r3, r2
 80047ec:	19db      	adds	r3, r3, r7
 80047ee:	2210      	movs	r2, #16
 80047f0:	701a      	strb	r2, [r3, #0]
 80047f2:	e005      	b.n	8004800 <UART_SetConfig+0x18c>
 80047f4:	231b      	movs	r3, #27
 80047f6:	2218      	movs	r2, #24
 80047f8:	189b      	adds	r3, r3, r2
 80047fa:	19db      	adds	r3, r3, r7
 80047fc:	2210      	movs	r2, #16
 80047fe:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a5e      	ldr	r2, [pc, #376]	; (8004980 <UART_SetConfig+0x30c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d000      	beq.n	800480c <UART_SetConfig+0x198>
 800480a:	e084      	b.n	8004916 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800480c:	231b      	movs	r3, #27
 800480e:	2218      	movs	r2, #24
 8004810:	189b      	adds	r3, r3, r2
 8004812:	19db      	adds	r3, r3, r7
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2b08      	cmp	r3, #8
 8004818:	d01d      	beq.n	8004856 <UART_SetConfig+0x1e2>
 800481a:	dc20      	bgt.n	800485e <UART_SetConfig+0x1ea>
 800481c:	2b04      	cmp	r3, #4
 800481e:	d015      	beq.n	800484c <UART_SetConfig+0x1d8>
 8004820:	dc1d      	bgt.n	800485e <UART_SetConfig+0x1ea>
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <UART_SetConfig+0x1b8>
 8004826:	2b02      	cmp	r3, #2
 8004828:	d005      	beq.n	8004836 <UART_SetConfig+0x1c2>
 800482a:	e018      	b.n	800485e <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800482c:	f7fe ffea 	bl	8003804 <HAL_RCC_GetPCLK1Freq>
 8004830:	0003      	movs	r3, r0
 8004832:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004834:	e01c      	b.n	8004870 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004836:	4b55      	ldr	r3, [pc, #340]	; (800498c <UART_SetConfig+0x318>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2210      	movs	r2, #16
 800483c:	4013      	ands	r3, r2
 800483e:	d002      	beq.n	8004846 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004840:	4b53      	ldr	r3, [pc, #332]	; (8004990 <UART_SetConfig+0x31c>)
 8004842:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004844:	e014      	b.n	8004870 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8004846:	4b53      	ldr	r3, [pc, #332]	; (8004994 <UART_SetConfig+0x320>)
 8004848:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800484a:	e011      	b.n	8004870 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800484c:	f7fe ff2a 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 8004850:	0003      	movs	r3, r0
 8004852:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004854:	e00c      	b.n	8004870 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004856:	2380      	movs	r3, #128	; 0x80
 8004858:	021b      	lsls	r3, r3, #8
 800485a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800485c:	e008      	b.n	8004870 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004862:	231a      	movs	r3, #26
 8004864:	2218      	movs	r2, #24
 8004866:	189b      	adds	r3, r3, r2
 8004868:	19db      	adds	r3, r3, r7
 800486a:	2201      	movs	r2, #1
 800486c:	701a      	strb	r2, [r3, #0]
        break;
 800486e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004872:	2b00      	cmp	r3, #0
 8004874:	d100      	bne.n	8004878 <UART_SetConfig+0x204>
 8004876:	e12f      	b.n	8004ad8 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	0013      	movs	r3, r2
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	189b      	adds	r3, r3, r2
 8004882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004884:	429a      	cmp	r2, r3
 8004886:	d305      	bcc.n	8004894 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800488e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004890:	429a      	cmp	r2, r3
 8004892:	d906      	bls.n	80048a2 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8004894:	231a      	movs	r3, #26
 8004896:	2218      	movs	r2, #24
 8004898:	189b      	adds	r3, r3, r2
 800489a:	19db      	adds	r3, r3, r7
 800489c:	2201      	movs	r2, #1
 800489e:	701a      	strb	r2, [r3, #0]
 80048a0:	e11a      	b.n	8004ad8 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a4:	613b      	str	r3, [r7, #16]
 80048a6:	2300      	movs	r3, #0
 80048a8:	617b      	str	r3, [r7, #20]
 80048aa:	6939      	ldr	r1, [r7, #16]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	000b      	movs	r3, r1
 80048b0:	0e1b      	lsrs	r3, r3, #24
 80048b2:	0010      	movs	r0, r2
 80048b4:	0205      	lsls	r5, r0, #8
 80048b6:	431d      	orrs	r5, r3
 80048b8:	000b      	movs	r3, r1
 80048ba:	021c      	lsls	r4, r3, #8
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	085b      	lsrs	r3, r3, #1
 80048c2:	60bb      	str	r3, [r7, #8]
 80048c4:	2300      	movs	r3, #0
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	68b8      	ldr	r0, [r7, #8]
 80048ca:	68f9      	ldr	r1, [r7, #12]
 80048cc:	1900      	adds	r0, r0, r4
 80048ce:	4169      	adcs	r1, r5
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	603b      	str	r3, [r7, #0]
 80048d6:	2300      	movs	r3, #0
 80048d8:	607b      	str	r3, [r7, #4]
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f7fb fc9f 	bl	8000220 <__aeabi_uldivmod>
 80048e2:	0002      	movs	r2, r0
 80048e4:	000b      	movs	r3, r1
 80048e6:	0013      	movs	r3, r2
 80048e8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048ec:	23c0      	movs	r3, #192	; 0xc0
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d309      	bcc.n	8004908 <UART_SetConfig+0x294>
 80048f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048f6:	2380      	movs	r3, #128	; 0x80
 80048f8:	035b      	lsls	r3, r3, #13
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d204      	bcs.n	8004908 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004904:	60da      	str	r2, [r3, #12]
 8004906:	e0e7      	b.n	8004ad8 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8004908:	231a      	movs	r3, #26
 800490a:	2218      	movs	r2, #24
 800490c:	189b      	adds	r3, r3, r2
 800490e:	19db      	adds	r3, r3, r7
 8004910:	2201      	movs	r2, #1
 8004912:	701a      	strb	r2, [r3, #0]
 8004914:	e0e0      	b.n	8004ad8 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	69da      	ldr	r2, [r3, #28]
 800491a:	2380      	movs	r3, #128	; 0x80
 800491c:	021b      	lsls	r3, r3, #8
 800491e:	429a      	cmp	r2, r3
 8004920:	d000      	beq.n	8004924 <UART_SetConfig+0x2b0>
 8004922:	e082      	b.n	8004a2a <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8004924:	231b      	movs	r3, #27
 8004926:	2218      	movs	r2, #24
 8004928:	189b      	adds	r3, r3, r2
 800492a:	19db      	adds	r3, r3, r7
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b08      	cmp	r3, #8
 8004930:	d834      	bhi.n	800499c <UART_SetConfig+0x328>
 8004932:	009a      	lsls	r2, r3, #2
 8004934:	4b18      	ldr	r3, [pc, #96]	; (8004998 <UART_SetConfig+0x324>)
 8004936:	18d3      	adds	r3, r2, r3
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800493c:	f7fe ff62 	bl	8003804 <HAL_RCC_GetPCLK1Freq>
 8004940:	0003      	movs	r3, r0
 8004942:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004944:	e033      	b.n	80049ae <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004946:	f7fe ff73 	bl	8003830 <HAL_RCC_GetPCLK2Freq>
 800494a:	0003      	movs	r3, r0
 800494c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800494e:	e02e      	b.n	80049ae <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004950:	4b0e      	ldr	r3, [pc, #56]	; (800498c <UART_SetConfig+0x318>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2210      	movs	r2, #16
 8004956:	4013      	ands	r3, r2
 8004958:	d002      	beq.n	8004960 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800495a:	4b0d      	ldr	r3, [pc, #52]	; (8004990 <UART_SetConfig+0x31c>)
 800495c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800495e:	e026      	b.n	80049ae <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8004960:	4b0c      	ldr	r3, [pc, #48]	; (8004994 <UART_SetConfig+0x320>)
 8004962:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004964:	e023      	b.n	80049ae <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004966:	f7fe fe9d 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 800496a:	0003      	movs	r3, r0
 800496c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800496e:	e01e      	b.n	80049ae <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004970:	2380      	movs	r3, #128	; 0x80
 8004972:	021b      	lsls	r3, r3, #8
 8004974:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004976:	e01a      	b.n	80049ae <UART_SetConfig+0x33a>
 8004978:	efff69f3 	.word	0xefff69f3
 800497c:	ffffcfff 	.word	0xffffcfff
 8004980:	40004800 	.word	0x40004800
 8004984:	fffff4ff 	.word	0xfffff4ff
 8004988:	40004400 	.word	0x40004400
 800498c:	40021000 	.word	0x40021000
 8004990:	003d0900 	.word	0x003d0900
 8004994:	00f42400 	.word	0x00f42400
 8004998:	08005078 	.word	0x08005078
      default:
        pclk = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80049a0:	231a      	movs	r3, #26
 80049a2:	2218      	movs	r2, #24
 80049a4:	189b      	adds	r3, r3, r2
 80049a6:	19db      	adds	r3, r3, r7
 80049a8:	2201      	movs	r2, #1
 80049aa:	701a      	strb	r2, [r3, #0]
        break;
 80049ac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d100      	bne.n	80049b6 <UART_SetConfig+0x342>
 80049b4:	e090      	b.n	8004ad8 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b8:	005a      	lsls	r2, r3, #1
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	085b      	lsrs	r3, r3, #1
 80049c0:	18d2      	adds	r2, r2, r3
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	0019      	movs	r1, r3
 80049c8:	0010      	movs	r0, r2
 80049ca:	f7fb fb9d 	bl	8000108 <__udivsi3>
 80049ce:	0003      	movs	r3, r0
 80049d0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d4:	2b0f      	cmp	r3, #15
 80049d6:	d921      	bls.n	8004a1c <UART_SetConfig+0x3a8>
 80049d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049da:	2380      	movs	r3, #128	; 0x80
 80049dc:	025b      	lsls	r3, r3, #9
 80049de:	429a      	cmp	r2, r3
 80049e0:	d21c      	bcs.n	8004a1c <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	200e      	movs	r0, #14
 80049e8:	2418      	movs	r4, #24
 80049ea:	1903      	adds	r3, r0, r4
 80049ec:	19db      	adds	r3, r3, r7
 80049ee:	210f      	movs	r1, #15
 80049f0:	438a      	bics	r2, r1
 80049f2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f6:	085b      	lsrs	r3, r3, #1
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2207      	movs	r2, #7
 80049fc:	4013      	ands	r3, r2
 80049fe:	b299      	uxth	r1, r3
 8004a00:	1903      	adds	r3, r0, r4
 8004a02:	19db      	adds	r3, r3, r7
 8004a04:	1902      	adds	r2, r0, r4
 8004a06:	19d2      	adds	r2, r2, r7
 8004a08:	8812      	ldrh	r2, [r2, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	1902      	adds	r2, r0, r4
 8004a14:	19d2      	adds	r2, r2, r7
 8004a16:	8812      	ldrh	r2, [r2, #0]
 8004a18:	60da      	str	r2, [r3, #12]
 8004a1a:	e05d      	b.n	8004ad8 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8004a1c:	231a      	movs	r3, #26
 8004a1e:	2218      	movs	r2, #24
 8004a20:	189b      	adds	r3, r3, r2
 8004a22:	19db      	adds	r3, r3, r7
 8004a24:	2201      	movs	r2, #1
 8004a26:	701a      	strb	r2, [r3, #0]
 8004a28:	e056      	b.n	8004ad8 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a2a:	231b      	movs	r3, #27
 8004a2c:	2218      	movs	r2, #24
 8004a2e:	189b      	adds	r3, r3, r2
 8004a30:	19db      	adds	r3, r3, r7
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d822      	bhi.n	8004a7e <UART_SetConfig+0x40a>
 8004a38:	009a      	lsls	r2, r3, #2
 8004a3a:	4b2f      	ldr	r3, [pc, #188]	; (8004af8 <UART_SetConfig+0x484>)
 8004a3c:	18d3      	adds	r3, r2, r3
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a42:	f7fe fedf 	bl	8003804 <HAL_RCC_GetPCLK1Freq>
 8004a46:	0003      	movs	r3, r0
 8004a48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a4a:	e021      	b.n	8004a90 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a4c:	f7fe fef0 	bl	8003830 <HAL_RCC_GetPCLK2Freq>
 8004a50:	0003      	movs	r3, r0
 8004a52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a54:	e01c      	b.n	8004a90 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a56:	4b29      	ldr	r3, [pc, #164]	; (8004afc <UART_SetConfig+0x488>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2210      	movs	r2, #16
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	d002      	beq.n	8004a66 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004a60:	4b27      	ldr	r3, [pc, #156]	; (8004b00 <UART_SetConfig+0x48c>)
 8004a62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a64:	e014      	b.n	8004a90 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8004a66:	4b27      	ldr	r3, [pc, #156]	; (8004b04 <UART_SetConfig+0x490>)
 8004a68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a6a:	e011      	b.n	8004a90 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a6c:	f7fe fe1a 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 8004a70:	0003      	movs	r3, r0
 8004a72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a74:	e00c      	b.n	8004a90 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a76:	2380      	movs	r3, #128	; 0x80
 8004a78:	021b      	lsls	r3, r3, #8
 8004a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a7c:	e008      	b.n	8004a90 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004a82:	231a      	movs	r3, #26
 8004a84:	2218      	movs	r2, #24
 8004a86:	189b      	adds	r3, r3, r2
 8004a88:	19db      	adds	r3, r3, r7
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	701a      	strb	r2, [r3, #0]
        break;
 8004a8e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d020      	beq.n	8004ad8 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	085a      	lsrs	r2, r3, #1
 8004a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9e:	18d2      	adds	r2, r2, r3
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	0019      	movs	r1, r3
 8004aa6:	0010      	movs	r0, r2
 8004aa8:	f7fb fb2e 	bl	8000108 <__udivsi3>
 8004aac:	0003      	movs	r3, r0
 8004aae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	2b0f      	cmp	r3, #15
 8004ab4:	d90a      	bls.n	8004acc <UART_SetConfig+0x458>
 8004ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ab8:	2380      	movs	r3, #128	; 0x80
 8004aba:	025b      	lsls	r3, r3, #9
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d205      	bcs.n	8004acc <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	60da      	str	r2, [r3, #12]
 8004aca:	e005      	b.n	8004ad8 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8004acc:	231a      	movs	r3, #26
 8004ace:	2218      	movs	r2, #24
 8004ad0:	189b      	adds	r3, r3, r2
 8004ad2:	19db      	adds	r3, r3, r7
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	2200      	movs	r2, #0
 8004adc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004ae4:	231a      	movs	r3, #26
 8004ae6:	2218      	movs	r2, #24
 8004ae8:	189b      	adds	r3, r3, r2
 8004aea:	19db      	adds	r3, r3, r7
 8004aec:	781b      	ldrb	r3, [r3, #0]
}
 8004aee:	0018      	movs	r0, r3
 8004af0:	46bd      	mov	sp, r7
 8004af2:	b00e      	add	sp, #56	; 0x38
 8004af4:	bdb0      	pop	{r4, r5, r7, pc}
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	0800509c 	.word	0x0800509c
 8004afc:	40021000 	.word	0x40021000
 8004b00:	003d0900 	.word	0x003d0900
 8004b04:	00f42400 	.word	0x00f42400

08004b08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	2201      	movs	r2, #1
 8004b16:	4013      	ands	r3, r2
 8004b18:	d00b      	beq.n	8004b32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	4a4a      	ldr	r2, [pc, #296]	; (8004c4c <UART_AdvFeatureConfig+0x144>)
 8004b22:	4013      	ands	r3, r2
 8004b24:	0019      	movs	r1, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	2202      	movs	r2, #2
 8004b38:	4013      	ands	r3, r2
 8004b3a:	d00b      	beq.n	8004b54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	4a43      	ldr	r2, [pc, #268]	; (8004c50 <UART_AdvFeatureConfig+0x148>)
 8004b44:	4013      	ands	r3, r2
 8004b46:	0019      	movs	r1, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	2204      	movs	r2, #4
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d00b      	beq.n	8004b76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	4a3b      	ldr	r2, [pc, #236]	; (8004c54 <UART_AdvFeatureConfig+0x14c>)
 8004b66:	4013      	ands	r3, r2
 8004b68:	0019      	movs	r1, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	2208      	movs	r2, #8
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	d00b      	beq.n	8004b98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	4a34      	ldr	r2, [pc, #208]	; (8004c58 <UART_AdvFeatureConfig+0x150>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	0019      	movs	r1, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	2210      	movs	r2, #16
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	d00b      	beq.n	8004bba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	4a2c      	ldr	r2, [pc, #176]	; (8004c5c <UART_AdvFeatureConfig+0x154>)
 8004baa:	4013      	ands	r3, r2
 8004bac:	0019      	movs	r1, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	d00b      	beq.n	8004bdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	4a25      	ldr	r2, [pc, #148]	; (8004c60 <UART_AdvFeatureConfig+0x158>)
 8004bcc:	4013      	ands	r3, r2
 8004bce:	0019      	movs	r1, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	2240      	movs	r2, #64	; 0x40
 8004be2:	4013      	ands	r3, r2
 8004be4:	d01d      	beq.n	8004c22 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	4a1d      	ldr	r2, [pc, #116]	; (8004c64 <UART_AdvFeatureConfig+0x15c>)
 8004bee:	4013      	ands	r3, r2
 8004bf0:	0019      	movs	r1, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c02:	2380      	movs	r3, #128	; 0x80
 8004c04:	035b      	lsls	r3, r3, #13
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d10b      	bne.n	8004c22 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	4a15      	ldr	r2, [pc, #84]	; (8004c68 <UART_AdvFeatureConfig+0x160>)
 8004c12:	4013      	ands	r3, r2
 8004c14:	0019      	movs	r1, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	2280      	movs	r2, #128	; 0x80
 8004c28:	4013      	ands	r3, r2
 8004c2a:	d00b      	beq.n	8004c44 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	4a0e      	ldr	r2, [pc, #56]	; (8004c6c <UART_AdvFeatureConfig+0x164>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	0019      	movs	r1, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	605a      	str	r2, [r3, #4]
  }
}
 8004c44:	46c0      	nop			; (mov r8, r8)
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b002      	add	sp, #8
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	fffdffff 	.word	0xfffdffff
 8004c50:	fffeffff 	.word	0xfffeffff
 8004c54:	fffbffff 	.word	0xfffbffff
 8004c58:	ffff7fff 	.word	0xffff7fff
 8004c5c:	ffffefff 	.word	0xffffefff
 8004c60:	ffffdfff 	.word	0xffffdfff
 8004c64:	ffefffff 	.word	0xffefffff
 8004c68:	ff9fffff 	.word	0xff9fffff
 8004c6c:	fff7ffff 	.word	0xfff7ffff

08004c70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b092      	sub	sp, #72	; 0x48
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2284      	movs	r2, #132	; 0x84
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c80:	f7fc ffdc 	bl	8001c3c <HAL_GetTick>
 8004c84:	0003      	movs	r3, r0
 8004c86:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2208      	movs	r2, #8
 8004c90:	4013      	ands	r3, r2
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d12c      	bne.n	8004cf0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c98:	2280      	movs	r2, #128	; 0x80
 8004c9a:	0391      	lsls	r1, r2, #14
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	4a46      	ldr	r2, [pc, #280]	; (8004db8 <UART_CheckIdleState+0x148>)
 8004ca0:	9200      	str	r2, [sp, #0]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f000 f88c 	bl	8004dc0 <UART_WaitOnFlagUntilTimeout>
 8004ca8:	1e03      	subs	r3, r0, #0
 8004caa:	d021      	beq.n	8004cf0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cac:	f3ef 8310 	mrs	r3, PRIMASK
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004cb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbc:	f383 8810 	msr	PRIMASK, r3
}
 8004cc0:	46c0      	nop			; (mov r8, r8)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2180      	movs	r1, #128	; 0x80
 8004cce:	438a      	bics	r2, r1
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd8:	f383 8810 	msr	PRIMASK, r3
}
 8004cdc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2278      	movs	r2, #120	; 0x78
 8004ce8:	2100      	movs	r1, #0
 8004cea:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e05f      	b.n	8004db0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2204      	movs	r2, #4
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d146      	bne.n	8004d8c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d00:	2280      	movs	r2, #128	; 0x80
 8004d02:	03d1      	lsls	r1, r2, #15
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	4a2c      	ldr	r2, [pc, #176]	; (8004db8 <UART_CheckIdleState+0x148>)
 8004d08:	9200      	str	r2, [sp, #0]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f000 f858 	bl	8004dc0 <UART_WaitOnFlagUntilTimeout>
 8004d10:	1e03      	subs	r3, r0, #0
 8004d12:	d03b      	beq.n	8004d8c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d14:	f3ef 8310 	mrs	r3, PRIMASK
 8004d18:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d1e:	2301      	movs	r3, #1
 8004d20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f383 8810 	msr	PRIMASK, r3
}
 8004d28:	46c0      	nop			; (mov r8, r8)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4921      	ldr	r1, [pc, #132]	; (8004dbc <UART_CheckIdleState+0x14c>)
 8004d36:	400a      	ands	r2, r1
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f383 8810 	msr	PRIMASK, r3
}
 8004d44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d46:	f3ef 8310 	mrs	r3, PRIMASK
 8004d4a:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d4c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d4e:	633b      	str	r3, [r7, #48]	; 0x30
 8004d50:	2301      	movs	r3, #1
 8004d52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	f383 8810 	msr	PRIMASK, r3
}
 8004d5a:	46c0      	nop			; (mov r8, r8)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2101      	movs	r1, #1
 8004d68:	438a      	bics	r2, r1
 8004d6a:	609a      	str	r2, [r3, #8]
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	f383 8810 	msr	PRIMASK, r3
}
 8004d76:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2280      	movs	r2, #128	; 0x80
 8004d7c:	2120      	movs	r1, #32
 8004d7e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2278      	movs	r2, #120	; 0x78
 8004d84:	2100      	movs	r1, #0
 8004d86:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e011      	b.n	8004db0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2280      	movs	r2, #128	; 0x80
 8004d96:	2120      	movs	r1, #32
 8004d98:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2278      	movs	r2, #120	; 0x78
 8004daa:	2100      	movs	r1, #0
 8004dac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	0018      	movs	r0, r3
 8004db2:	46bd      	mov	sp, r7
 8004db4:	b010      	add	sp, #64	; 0x40
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	01ffffff 	.word	0x01ffffff
 8004dbc:	fffffedf 	.word	0xfffffedf

08004dc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	603b      	str	r3, [r7, #0]
 8004dcc:	1dfb      	adds	r3, r7, #7
 8004dce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dd0:	e04b      	b.n	8004e6a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	d048      	beq.n	8004e6a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd8:	f7fc ff30 	bl	8001c3c <HAL_GetTick>
 8004ddc:	0002      	movs	r2, r0
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d302      	bcc.n	8004dee <UART_WaitOnFlagUntilTimeout+0x2e>
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e04b      	b.n	8004e8a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2204      	movs	r2, #4
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	d035      	beq.n	8004e6a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	2208      	movs	r2, #8
 8004e06:	4013      	ands	r3, r2
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d111      	bne.n	8004e30 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2208      	movs	r2, #8
 8004e12:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	0018      	movs	r0, r3
 8004e18:	f000 f83c 	bl	8004e94 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2284      	movs	r2, #132	; 0x84
 8004e20:	2108      	movs	r1, #8
 8004e22:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2278      	movs	r2, #120	; 0x78
 8004e28:	2100      	movs	r1, #0
 8004e2a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e02c      	b.n	8004e8a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	69da      	ldr	r2, [r3, #28]
 8004e36:	2380      	movs	r3, #128	; 0x80
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	401a      	ands	r2, r3
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	011b      	lsls	r3, r3, #4
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d112      	bne.n	8004e6a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2280      	movs	r2, #128	; 0x80
 8004e4a:	0112      	lsls	r2, r2, #4
 8004e4c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	0018      	movs	r0, r3
 8004e52:	f000 f81f 	bl	8004e94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2284      	movs	r2, #132	; 0x84
 8004e5a:	2120      	movs	r1, #32
 8004e5c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2278      	movs	r2, #120	; 0x78
 8004e62:	2100      	movs	r1, #0
 8004e64:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e00f      	b.n	8004e8a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	4013      	ands	r3, r2
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	425a      	negs	r2, r3
 8004e7a:	4153      	adcs	r3, r2
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	001a      	movs	r2, r3
 8004e80:	1dfb      	adds	r3, r7, #7
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d0a4      	beq.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	b004      	add	sp, #16
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b08e      	sub	sp, #56	; 0x38
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8004ea0:	617b      	str	r3, [r7, #20]
  return(result);
 8004ea2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	f383 8810 	msr	PRIMASK, r3
}
 8004eb0:	46c0      	nop			; (mov r8, r8)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4926      	ldr	r1, [pc, #152]	; (8004f58 <UART_EndRxTransfer+0xc4>)
 8004ebe:	400a      	ands	r2, r1
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	f383 8810 	msr	PRIMASK, r3
}
 8004ecc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ece:	f3ef 8310 	mrs	r3, PRIMASK
 8004ed2:	623b      	str	r3, [r7, #32]
  return(result);
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed6:	633b      	str	r3, [r7, #48]	; 0x30
 8004ed8:	2301      	movs	r3, #1
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	f383 8810 	msr	PRIMASK, r3
}
 8004ee2:	46c0      	nop			; (mov r8, r8)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2101      	movs	r1, #1
 8004ef0:	438a      	bics	r2, r1
 8004ef2:	609a      	str	r2, [r3, #8]
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efa:	f383 8810 	msr	PRIMASK, r3
}
 8004efe:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d118      	bne.n	8004f3a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f08:	f3ef 8310 	mrs	r3, PRIMASK
 8004f0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f0e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f12:	2301      	movs	r3, #1
 8004f14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f383 8810 	msr	PRIMASK, r3
}
 8004f1c:	46c0      	nop			; (mov r8, r8)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2110      	movs	r1, #16
 8004f2a:	438a      	bics	r2, r1
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	f383 8810 	msr	PRIMASK, r3
}
 8004f38:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2280      	movs	r2, #128	; 0x80
 8004f3e:	2120      	movs	r1, #32
 8004f40:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f4e:	46c0      	nop			; (mov r8, r8)
 8004f50:	46bd      	mov	sp, r7
 8004f52:	b00e      	add	sp, #56	; 0x38
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	fffffedf 	.word	0xfffffedf

08004f5c <memset>:
 8004f5c:	0003      	movs	r3, r0
 8004f5e:	1882      	adds	r2, r0, r2
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d100      	bne.n	8004f66 <memset+0xa>
 8004f64:	4770      	bx	lr
 8004f66:	7019      	strb	r1, [r3, #0]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	e7f9      	b.n	8004f60 <memset+0x4>

08004f6c <__libc_init_array>:
 8004f6c:	b570      	push	{r4, r5, r6, lr}
 8004f6e:	2600      	movs	r6, #0
 8004f70:	4c0c      	ldr	r4, [pc, #48]	; (8004fa4 <__libc_init_array+0x38>)
 8004f72:	4d0d      	ldr	r5, [pc, #52]	; (8004fa8 <__libc_init_array+0x3c>)
 8004f74:	1b64      	subs	r4, r4, r5
 8004f76:	10a4      	asrs	r4, r4, #2
 8004f78:	42a6      	cmp	r6, r4
 8004f7a:	d109      	bne.n	8004f90 <__libc_init_array+0x24>
 8004f7c:	2600      	movs	r6, #0
 8004f7e:	f000 f819 	bl	8004fb4 <_init>
 8004f82:	4c0a      	ldr	r4, [pc, #40]	; (8004fac <__libc_init_array+0x40>)
 8004f84:	4d0a      	ldr	r5, [pc, #40]	; (8004fb0 <__libc_init_array+0x44>)
 8004f86:	1b64      	subs	r4, r4, r5
 8004f88:	10a4      	asrs	r4, r4, #2
 8004f8a:	42a6      	cmp	r6, r4
 8004f8c:	d105      	bne.n	8004f9a <__libc_init_array+0x2e>
 8004f8e:	bd70      	pop	{r4, r5, r6, pc}
 8004f90:	00b3      	lsls	r3, r6, #2
 8004f92:	58eb      	ldr	r3, [r5, r3]
 8004f94:	4798      	blx	r3
 8004f96:	3601      	adds	r6, #1
 8004f98:	e7ee      	b.n	8004f78 <__libc_init_array+0xc>
 8004f9a:	00b3      	lsls	r3, r6, #2
 8004f9c:	58eb      	ldr	r3, [r5, r3]
 8004f9e:	4798      	blx	r3
 8004fa0:	3601      	adds	r6, #1
 8004fa2:	e7f2      	b.n	8004f8a <__libc_init_array+0x1e>
 8004fa4:	080050c8 	.word	0x080050c8
 8004fa8:	080050c8 	.word	0x080050c8
 8004fac:	080050cc 	.word	0x080050cc
 8004fb0:	080050c8 	.word	0x080050c8

08004fb4 <_init>:
 8004fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb6:	46c0      	nop			; (mov r8, r8)
 8004fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fba:	bc08      	pop	{r3}
 8004fbc:	469e      	mov	lr, r3
 8004fbe:	4770      	bx	lr

08004fc0 <_fini>:
 8004fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc2:	46c0      	nop			; (mov r8, r8)
 8004fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc6:	bc08      	pop	{r3}
 8004fc8:	469e      	mov	lr, r3
 8004fca:	4770      	bx	lr
