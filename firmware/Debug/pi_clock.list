
pi_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005250  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08005310  08005310  00015310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800542c  0800542c  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800542c  0800542c  0001542c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005434  08005434  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005434  08005434  00015434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005438  08005438  00015438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800543c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000180  080055bc  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  080055bc  00020478  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010ddb  00000000  00000000  000201eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000268b  00000000  00000000  00030fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  00033658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c62  00000000  00000000  00034640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000136ce  00000000  00000000  000352a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001423e  00000000  00000000  00048970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00073d7d  00000000  00000000  0005cbae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f70  00000000  00000000  000d092c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000d489c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000180 	.word	0x20000180
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080052f8 	.word	0x080052f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000184 	.word	0x20000184
 8000104:	080052f8 	.word	0x080052f8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <segment_write>:
		{ 1, 0, 0, 1, 0, 0, 0, 1 }, // Y (31)
		{ 1, 0, 1, 0, 0, 1, 0, 0 }, // Z (32)
		{ 1, 1, 1, 1, 1, 1, 1, 1 }, // BLANK (33)
		{ 1, 0, 0, 1, 1, 1, 0, 0 } }; // DEG (34)

void segment_write(seven_segment *seg) {
 80004a8:	b5b0      	push	{r4, r5, r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(seg->enable_port, seg->enable_pin, 0);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	6958      	ldr	r0, [r3, #20]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	8b1b      	ldrh	r3, [r3, #24]
 80004b8:	2200      	movs	r2, #0
 80004ba:	0019      	movs	r1, r3
 80004bc:	f001 fbb7 	bl	8001c2e <HAL_GPIO_WritePin>

	for (uint8_t i = 0; i < 8; i++) {
 80004c0:	230f      	movs	r3, #15
 80004c2:	18fb      	adds	r3, r7, r3
 80004c4:	2200      	movs	r2, #0
 80004c6:	701a      	strb	r2, [r3, #0]
 80004c8:	e026      	b.n	8000518 <segment_write+0x70>
		HAL_GPIO_WritePin(seg->a_port, seg->a_pin, segment_data[seg->data][i]);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	68d8      	ldr	r0, [r3, #12]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	8a1c      	ldrh	r4, [r3, #16]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	001a      	movs	r2, r3
 80004d8:	250f      	movs	r5, #15
 80004da:	197b      	adds	r3, r7, r5
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	4917      	ldr	r1, [pc, #92]	; (800053c <segment_write+0x94>)
 80004e0:	00d2      	lsls	r2, r2, #3
 80004e2:	188a      	adds	r2, r1, r2
 80004e4:	5cd3      	ldrb	r3, [r2, r3]
 80004e6:	001a      	movs	r2, r3
 80004e8:	0021      	movs	r1, r4
 80004ea:	f001 fba0 	bl	8001c2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(seg->clock_port, seg->clock_pin, 0);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	6858      	ldr	r0, [r3, #4]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	891b      	ldrh	r3, [r3, #8]
 80004f6:	2200      	movs	r2, #0
 80004f8:	0019      	movs	r1, r3
 80004fa:	f001 fb98 	bl	8001c2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(seg->clock_port, seg->clock_pin, 1);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	6858      	ldr	r0, [r3, #4]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	891b      	ldrh	r3, [r3, #8]
 8000506:	2201      	movs	r2, #1
 8000508:	0019      	movs	r1, r3
 800050a:	f001 fb90 	bl	8001c2e <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 8; i++) {
 800050e:	197b      	adds	r3, r7, r5
 8000510:	781a      	ldrb	r2, [r3, #0]
 8000512:	197b      	adds	r3, r7, r5
 8000514:	3201      	adds	r2, #1
 8000516:	701a      	strb	r2, [r3, #0]
 8000518:	230f      	movs	r3, #15
 800051a:	18fb      	adds	r3, r7, r3
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b07      	cmp	r3, #7
 8000520:	d9d3      	bls.n	80004ca <segment_write+0x22>
	}
	HAL_GPIO_WritePin(seg->enable_port, seg->enable_pin, seg->enable_segment);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	6958      	ldr	r0, [r3, #20]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	8b19      	ldrh	r1, [r3, #24]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	789b      	ldrb	r3, [r3, #2]
 800052e:	001a      	movs	r2, r3
 8000530:	f001 fb7d 	bl	8001c2e <HAL_GPIO_WritePin>
}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b004      	add	sp, #16
 800053a:	bdb0      	pop	{r4, r5, r7, pc}
 800053c:	20000000 	.word	0x20000000

08000540 <display_write_segment>:
//		segment_write(disp->second_one);
//		disp->second_one->data_old = disp->second_one->data;
//	}
//}

void display_write_segment(display_segment *disp_segment) {
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	uint8_t data = disp_segment->data;
 8000548:	210f      	movs	r1, #15
 800054a:	187b      	adds	r3, r7, r1
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	7812      	ldrb	r2, [r2, #0]
 8000550:	701a      	strb	r2, [r3, #0]
	if (data != disp_segment->data_old) {
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	785b      	ldrb	r3, [r3, #1]
 8000556:	187a      	adds	r2, r7, r1
 8000558:	7812      	ldrb	r2, [r2, #0]
 800055a:	429a      	cmp	r2, r3
 800055c:	d027      	beq.n	80005ae <display_write_segment+0x6e>
		disp_segment->data_old = disp_segment->data;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	781a      	ldrb	r2, [r3, #0]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	705a      	strb	r2, [r3, #1]

		disp_segment->one->data = data % 10;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	689c      	ldr	r4, [r3, #8]
 800056a:	000d      	movs	r5, r1
 800056c:	197b      	adds	r3, r7, r5
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	210a      	movs	r1, #10
 8000572:	0018      	movs	r0, r3
 8000574:	f7ff fe4e 	bl	8000214 <__aeabi_uidivmod>
 8000578:	000b      	movs	r3, r1
 800057a:	b2db      	uxtb	r3, r3
 800057c:	7023      	strb	r3, [r4, #0]
		data /= 10;
 800057e:	197c      	adds	r4, r7, r5
 8000580:	197b      	adds	r3, r7, r5
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	210a      	movs	r1, #10
 8000586:	0018      	movs	r0, r3
 8000588:	f7ff fdbe 	bl	8000108 <__udivsi3>
 800058c:	0003      	movs	r3, r0
 800058e:	7023      	strb	r3, [r4, #0]
		disp_segment->ten->data = data;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	197a      	adds	r2, r7, r5
 8000596:	7812      	ldrb	r2, [r2, #0]
 8000598:	701a      	strb	r2, [r3, #0]

		segment_write(disp_segment->one);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	689b      	ldr	r3, [r3, #8]
 800059e:	0018      	movs	r0, r3
 80005a0:	f7ff ff82 	bl	80004a8 <segment_write>
		segment_write(disp_segment->ten);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	0018      	movs	r0, r3
 80005aa:	f7ff ff7d 	bl	80004a8 <segment_write>
	}
}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b004      	add	sp, #16
 80005b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080005b8 <process_button>:
	temp_value = HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port, BTN_RIGHT_Pin);
	*button_value |= (temp_value << 0);
	return 0;
}

void process_button(Button *btn) {
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	uint8_t raw_state = HAL_GPIO_ReadPin(btn->port, btn->pin);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	691a      	ldr	r2, [r3, #16]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	8a9b      	ldrh	r3, [r3, #20]
 80005c8:	210f      	movs	r1, #15
 80005ca:	187c      	adds	r4, r7, r1
 80005cc:	0019      	movs	r1, r3
 80005ce:	0010      	movs	r0, r2
 80005d0:	f001 fb10 	bl	8001bf4 <HAL_GPIO_ReadPin>
 80005d4:	0003      	movs	r3, r0
 80005d6:	7023      	strb	r3, [r4, #0]
	uint32_t now = HAL_GetTick();
 80005d8:	f001 f892 	bl	8001700 <HAL_GetTick>
 80005dc:	0003      	movs	r3, r0
 80005de:	60bb      	str	r3, [r7, #8]

	switch (btn->state) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b04      	cmp	r3, #4
 80005e6:	d900      	bls.n	80005ea <process_button+0x32>
 80005e8:	e073      	b.n	80006d2 <process_button+0x11a>
 80005ea:	009a      	lsls	r2, r3, #2
 80005ec:	4b3b      	ldr	r3, [pc, #236]	; (80006dc <process_button+0x124>)
 80005ee:	18d3      	adds	r3, r2, r3
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	469f      	mov	pc, r3
	case BUTTON_IDLE:
		if (raw_state != btn->last_raw_state) {
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	7b1b      	ldrb	r3, [r3, #12]
 80005f8:	220f      	movs	r2, #15
 80005fa:	18ba      	adds	r2, r7, r2
 80005fc:	7812      	ldrb	r2, [r2, #0]
 80005fe:	429a      	cmp	r2, r3
 8000600:	d060      	beq.n	80006c4 <process_button+0x10c>
			btn->last_change_time = now;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	68ba      	ldr	r2, [r7, #8]
 8000606:	605a      	str	r2, [r3, #4]
			btn->state = BUTTON_DEBOUNCING;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2201      	movs	r2, #1
 800060c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800060e:	e059      	b.n	80006c4 <process_button+0x10c>

	case BUTTON_DEBOUNCING:
		if ((now - btn->last_change_time) >= DEBOUNCE_TIME_MS) {
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	68ba      	ldr	r2, [r7, #8]
 8000616:	1ad3      	subs	r3, r2, r3
 8000618:	2b1d      	cmp	r3, #29
 800061a:	d955      	bls.n	80006c8 <process_button+0x110>
			if (raw_state != btn->last_raw_state) {
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	7b1b      	ldrb	r3, [r3, #12]
 8000620:	210f      	movs	r1, #15
 8000622:	187a      	adds	r2, r7, r1
 8000624:	7812      	ldrb	r2, [r2, #0]
 8000626:	429a      	cmp	r2, r3
 8000628:	d012      	beq.n	8000650 <process_button+0x98>
				btn->last_raw_state = raw_state;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	187a      	adds	r2, r7, r1
 800062e:	7812      	ldrb	r2, [r2, #0]
 8000630:	731a      	strb	r2, [r3, #12]
				if (raw_state) {  // Button pressed
 8000632:	187b      	adds	r3, r7, r1
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d006      	beq.n	8000648 <process_button+0x90>
					btn->press_time = now;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	68ba      	ldr	r2, [r7, #8]
 800063e:	609a      	str	r2, [r3, #8]
					btn->state = BUTTON_PRESSED;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2202      	movs	r2, #2
 8000644:	701a      	strb	r2, [r3, #0]
				}
			} else {
				btn->state = BUTTON_IDLE;
			}
		}
		break;
 8000646:	e03f      	b.n	80006c8 <process_button+0x110>
					btn->state = BUTTON_IDLE;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
		break;
 800064e:	e03b      	b.n	80006c8 <process_button+0x110>
				btn->state = BUTTON_IDLE;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
		break;
 8000656:	e037      	b.n	80006c8 <process_button+0x110>

	case BUTTON_PRESSED:
		if (!raw_state) {
 8000658:	230f      	movs	r3, #15
 800065a:	18fb      	adds	r3, r7, r3
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d10f      	bne.n	8000682 <process_button+0xca>
			if ((now - btn->press_time) < LONG_PRESS_TIME_MS) {
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	68ba      	ldr	r2, [r7, #8]
 8000668:	1ad2      	subs	r2, r2, r3
 800066a:	23fa      	movs	r3, #250	; 0xfa
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	429a      	cmp	r2, r3
 8000670:	d203      	bcs.n	800067a <process_button+0xc2>
				printf("Short Press Detected\n");
 8000672:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <process_button+0x128>)
 8000674:	0018      	movs	r0, r3
 8000676:	f004 fa6f 	bl	8004b58 <puts>
			}
			btn->state = BUTTON_RELEASED;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2204      	movs	r2, #4
 800067e:	701a      	strb	r2, [r3, #0]
		} else if ((now - btn->press_time) >= LONG_PRESS_TIME_MS) {
			printf("Long Press Detected\n");
			btn->state = BUTTON_LONG_PRESS;
		}
		break;
 8000680:	e024      	b.n	80006cc <process_button+0x114>
		} else if ((now - btn->press_time) >= LONG_PRESS_TIME_MS) {
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	689b      	ldr	r3, [r3, #8]
 8000686:	68ba      	ldr	r2, [r7, #8]
 8000688:	1ad2      	subs	r2, r2, r3
 800068a:	23fa      	movs	r3, #250	; 0xfa
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	429a      	cmp	r2, r3
 8000690:	d31c      	bcc.n	80006cc <process_button+0x114>
			printf("Long Press Detected\n");
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <process_button+0x12c>)
 8000694:	0018      	movs	r0, r3
 8000696:	f004 fa5f 	bl	8004b58 <puts>
			btn->state = BUTTON_LONG_PRESS;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2203      	movs	r2, #3
 800069e:	701a      	strb	r2, [r3, #0]
		break;
 80006a0:	e014      	b.n	80006cc <process_button+0x114>

	case BUTTON_LONG_PRESS:
		if (!raw_state) {
 80006a2:	230f      	movs	r3, #15
 80006a4:	18fb      	adds	r3, r7, r3
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d111      	bne.n	80006d0 <process_button+0x118>
			btn->state = BUTTON_RELEASED;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2204      	movs	r2, #4
 80006b0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80006b2:	e00d      	b.n	80006d0 <process_button+0x118>

	case BUTTON_RELEASED:
		printf("Button Released\n");
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <process_button+0x130>)
 80006b6:	0018      	movs	r0, r3
 80006b8:	f004 fa4e 	bl	8004b58 <puts>
		btn->state = BUTTON_IDLE;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
		break;
 80006c2:	e006      	b.n	80006d2 <process_button+0x11a>
		break;
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	e004      	b.n	80006d2 <process_button+0x11a>
		break;
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	e002      	b.n	80006d2 <process_button+0x11a>
		break;
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	e000      	b.n	80006d2 <process_button+0x11a>
		break;
 80006d0:	46c0      	nop			; (mov r8, r8)
	}
}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b005      	add	sp, #20
 80006d8:	bd90      	pop	{r4, r7, pc}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	080053ac 	.word	0x080053ac
 80006e0:	08005310 	.word	0x08005310
 80006e4:	08005328 	.word	0x08005328
 80006e8:	0800533c 	.word	0x0800533c

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ee:	b0d3      	sub	sp, #332	; 0x14c
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	clock_value = 0;
 80006f2:	4bea      	ldr	r3, [pc, #936]	; (8000a9c <main+0x3b0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f8:	f000 ff9c 	bl	8001634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fc:	f000 fa0a 	bl	8000b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f000 fc60 	bl	8000fc4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000704:	f000 fa8e 	bl	8000c24 <MX_I2C1_Init>
  MX_RTC_Init();
 8000708:	f000 facc 	bl	8000ca4 <MX_RTC_Init>
  MX_TIM2_Init();
 800070c:	f000 fb2e 	bl	8000d6c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000710:	f000 fc28 	bl	8000f64 <MX_USART2_UART_Init>
  MX_TIM21_Init();
 8000714:	f000 fbaa 	bl	8000e6c <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(EN_HO_GPIO_Port, EN_HO_Pin, 0);
 8000718:	4be1      	ldr	r3, [pc, #900]	; (8000aa0 <main+0x3b4>)
 800071a:	2200      	movs	r2, #0
 800071c:	2110      	movs	r1, #16
 800071e:	0018      	movs	r0, r3
 8000720:	f001 fa85 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_HT_GPIO_Port, EN_HT_Pin, 0);
 8000724:	23a0      	movs	r3, #160	; 0xa0
 8000726:	05db      	lsls	r3, r3, #23
 8000728:	2200      	movs	r2, #0
 800072a:	2108      	movs	r1, #8
 800072c:	0018      	movs	r0, r3
 800072e:	f001 fa7e 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_MO_GPIO_Port, EN_MO_Pin, 0);
 8000732:	2380      	movs	r3, #128	; 0x80
 8000734:	015b      	lsls	r3, r3, #5
 8000736:	48da      	ldr	r0, [pc, #872]	; (8000aa0 <main+0x3b4>)
 8000738:	2200      	movs	r2, #0
 800073a:	0019      	movs	r1, r3
 800073c:	f001 fa77 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_MT_GPIO_Port, EN_MT_Pin, 0);
 8000740:	4bd7      	ldr	r3, [pc, #860]	; (8000aa0 <main+0x3b4>)
 8000742:	2200      	movs	r2, #0
 8000744:	2120      	movs	r1, #32
 8000746:	0018      	movs	r0, r3
 8000748:	f001 fa71 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_SO_GPIO_Port, EN_SO_Pin, 0);
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	01db      	lsls	r3, r3, #7
 8000750:	48d3      	ldr	r0, [pc, #844]	; (8000aa0 <main+0x3b4>)
 8000752:	2200      	movs	r2, #0
 8000754:	0019      	movs	r1, r3
 8000756:	f001 fa6a 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_ST_GPIO_Port, EN_ST_Pin, 0);
 800075a:	2380      	movs	r3, #128	; 0x80
 800075c:	019b      	lsls	r3, r3, #6
 800075e:	48d0      	ldr	r0, [pc, #832]	; (8000aa0 <main+0x3b4>)
 8000760:	2200      	movs	r2, #0
 8000762:	0019      	movs	r1, r3
 8000764:	f001 fa63 	bl	8001c2e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(A_HT_GPIO_Port, A_HT_Pin, 1);
 8000768:	23a0      	movs	r3, #160	; 0xa0
 800076a:	05db      	lsls	r3, r3, #23
 800076c:	2201      	movs	r2, #1
 800076e:	2102      	movs	r1, #2
 8000770:	0018      	movs	r0, r3
 8000772:	f001 fa5c 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLEAR_GPIO_Port, CLEAR_Pin, 1);
 8000776:	23a0      	movs	r3, #160	; 0xa0
 8000778:	05db      	lsls	r3, r3, #23
 800077a:	2201      	movs	r2, #1
 800077c:	2101      	movs	r1, #1
 800077e:	0018      	movs	r0, r3
 8000780:	f001 fa55 	bl	8001c2e <HAL_GPIO_WritePin>

	RTC_TimeTypeDef sTimeStamp;
	RTC_DateTypeDef sTimeStampDate;

	sTimeStamp.Hours = 23;
 8000784:	2198      	movs	r1, #152	; 0x98
 8000786:	0049      	lsls	r1, r1, #1
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2217      	movs	r2, #23
 800078c:	701a      	strb	r2, [r3, #0]
	sTimeStamp.Minutes = 59;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	223b      	movs	r2, #59	; 0x3b
 8000792:	705a      	strb	r2, [r3, #1]
	sTimeStamp.Seconds = 58;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	223a      	movs	r2, #58	; 0x3a
 8000798:	709a      	strb	r2, [r3, #2]

	sTimeStamp.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
	sTimeStamp.StoreOperation = RTC_STOREOPERATION_SET;
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	02d2      	lsls	r2, r2, #11
 80007a6:	611a      	str	r2, [r3, #16]

	sTimeStamp.StoreOperation = RTC_STOREOPERATION_SET;
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2280      	movs	r2, #128	; 0x80
 80007ac:	02d2      	lsls	r2, r2, #11
 80007ae:	611a      	str	r2, [r3, #16]
	HAL_StatusTypeDef result;

	result = HAL_RTC_SetTime(&hrtc, &sTimeStamp, RTC_FORMAT_BIN);
 80007b0:	25a3      	movs	r5, #163	; 0xa3
 80007b2:	006d      	lsls	r5, r5, #1
 80007b4:	197c      	adds	r4, r7, r5
 80007b6:	1879      	adds	r1, r7, r1
 80007b8:	4bba      	ldr	r3, [pc, #744]	; (8000aa4 <main+0x3b8>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	0018      	movs	r0, r3
 80007be:	f002 fb1d 	bl	8002dfc <HAL_RTC_SetTime>
 80007c2:	0003      	movs	r3, r0
 80007c4:	7023      	strb	r3, [r4, #0]
	if(result != HAL_OK){
 80007c6:	197b      	adds	r3, r7, r5
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d000      	beq.n	80007d0 <main+0xe4>
		while(1);
 80007ce:	e7fe      	b.n	80007ce <main+0xe2>

	display_segment disp_hour;
	display_segment disp_minute;
	display_segment disp_second;

	hour_ten.a_port = A_HT_GPIO_Port;
 80007d0:	2188      	movs	r1, #136	; 0x88
 80007d2:	0049      	lsls	r1, r1, #1
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	22a0      	movs	r2, #160	; 0xa0
 80007d8:	05d2      	lsls	r2, r2, #23
 80007da:	60da      	str	r2, [r3, #12]
	hour_ten.a_pin = A_HT_Pin;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2202      	movs	r2, #2
 80007e0:	821a      	strh	r2, [r3, #16]
	hour_ten.clock_port = CLK_A_HT_GPIO_Port;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	22a0      	movs	r2, #160	; 0xa0
 80007e6:	05d2      	lsls	r2, r2, #23
 80007e8:	605a      	str	r2, [r3, #4]
	hour_ten.clock_pin = CLK_A_HT_Pin;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2204      	movs	r2, #4
 80007ee:	811a      	strh	r2, [r3, #8]
	hour_ten.enable_port = EN_HT_GPIO_Port;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	22a0      	movs	r2, #160	; 0xa0
 80007f4:	05d2      	lsls	r2, r2, #23
 80007f6:	615a      	str	r2, [r3, #20]
	hour_ten.enable_pin = EN_HT_Pin;
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2208      	movs	r2, #8
 80007fc:	831a      	strh	r2, [r3, #24]
	hour_ten.enable_segment = 1;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2201      	movs	r2, #1
 8000802:	709a      	strb	r2, [r3, #2]

	hour_one.a_port = A_HO_GPIO_Port;
 8000804:	20f4      	movs	r0, #244	; 0xf4
 8000806:	183b      	adds	r3, r7, r0
 8000808:	22a0      	movs	r2, #160	; 0xa0
 800080a:	05d2      	lsls	r2, r2, #23
 800080c:	60da      	str	r2, [r3, #12]
	hour_one.a_pin = A_HO_Pin;
 800080e:	183b      	adds	r3, r7, r0
 8000810:	2210      	movs	r2, #16
 8000812:	821a      	strh	r2, [r3, #16]
	hour_one.clock_port = CLK_A_HO_GPIO_Port;
 8000814:	183b      	adds	r3, r7, r0
 8000816:	22a0      	movs	r2, #160	; 0xa0
 8000818:	05d2      	lsls	r2, r2, #23
 800081a:	605a      	str	r2, [r3, #4]
	hour_one.clock_pin = CLK_A_HO_Pin;
 800081c:	183b      	adds	r3, r7, r0
 800081e:	2220      	movs	r2, #32
 8000820:	811a      	strh	r2, [r3, #8]
	hour_one.enable_port = EN_HO_GPIO_Port;
 8000822:	183b      	adds	r3, r7, r0
 8000824:	4a9e      	ldr	r2, [pc, #632]	; (8000aa0 <main+0x3b4>)
 8000826:	615a      	str	r2, [r3, #20]
	hour_one.enable_pin = EN_HO_Pin;
 8000828:	183b      	adds	r3, r7, r0
 800082a:	2210      	movs	r2, #16
 800082c:	831a      	strh	r2, [r3, #24]
	hour_one.enable_segment = 1;
 800082e:	183b      	adds	r3, r7, r0
 8000830:	2201      	movs	r2, #1
 8000832:	709a      	strb	r2, [r3, #2]

	minute_ten.a_port = A_MT_GPIO_Port;
 8000834:	24d8      	movs	r4, #216	; 0xd8
 8000836:	193b      	adds	r3, r7, r4
 8000838:	22a0      	movs	r2, #160	; 0xa0
 800083a:	05d2      	lsls	r2, r2, #23
 800083c:	60da      	str	r2, [r3, #12]
	minute_ten.a_pin = A_MT_Pin;
 800083e:	193b      	adds	r3, r7, r4
 8000840:	2240      	movs	r2, #64	; 0x40
 8000842:	821a      	strh	r2, [r3, #16]
	minute_ten.clock_port = CLK_A_MT_GPIO_Port;
 8000844:	193b      	adds	r3, r7, r4
 8000846:	22a0      	movs	r2, #160	; 0xa0
 8000848:	05d2      	lsls	r2, r2, #23
 800084a:	605a      	str	r2, [r3, #4]
	minute_ten.clock_pin = CLK_A_MT_Pin;
 800084c:	193b      	adds	r3, r7, r4
 800084e:	2280      	movs	r2, #128	; 0x80
 8000850:	811a      	strh	r2, [r3, #8]
	minute_ten.enable_port = EN_MT_GPIO_Port;
 8000852:	193b      	adds	r3, r7, r4
 8000854:	4a92      	ldr	r2, [pc, #584]	; (8000aa0 <main+0x3b4>)
 8000856:	615a      	str	r2, [r3, #20]
	minute_ten.enable_pin = EN_MT_Pin;
 8000858:	193b      	adds	r3, r7, r4
 800085a:	2220      	movs	r2, #32
 800085c:	831a      	strh	r2, [r3, #24]
	minute_ten.enable_segment = 1;
 800085e:	193b      	adds	r3, r7, r4
 8000860:	2201      	movs	r2, #1
 8000862:	709a      	strb	r2, [r3, #2]

	minute_one.a_port = A_MO_GPIO_Port;
 8000864:	25bc      	movs	r5, #188	; 0xbc
 8000866:	197b      	adds	r3, r7, r5
 8000868:	22a0      	movs	r2, #160	; 0xa0
 800086a:	05d2      	lsls	r2, r2, #23
 800086c:	60da      	str	r2, [r3, #12]
	minute_one.a_pin = A_MO_Pin;
 800086e:	197b      	adds	r3, r7, r5
 8000870:	2280      	movs	r2, #128	; 0x80
 8000872:	0052      	lsls	r2, r2, #1
 8000874:	821a      	strh	r2, [r3, #16]
	minute_one.clock_port = CLK_A_MO_GPIO_Port;
 8000876:	197b      	adds	r3, r7, r5
 8000878:	22a0      	movs	r2, #160	; 0xa0
 800087a:	05d2      	lsls	r2, r2, #23
 800087c:	605a      	str	r2, [r3, #4]
	minute_one.clock_pin = CLK_A_MO_Pin;
 800087e:	197b      	adds	r3, r7, r5
 8000880:	2280      	movs	r2, #128	; 0x80
 8000882:	0092      	lsls	r2, r2, #2
 8000884:	811a      	strh	r2, [r3, #8]
	minute_one.enable_port = EN_MO_GPIO_Port;
 8000886:	197b      	adds	r3, r7, r5
 8000888:	4a85      	ldr	r2, [pc, #532]	; (8000aa0 <main+0x3b4>)
 800088a:	615a      	str	r2, [r3, #20]
	minute_one.enable_pin = EN_MO_Pin;
 800088c:	197b      	adds	r3, r7, r5
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	0152      	lsls	r2, r2, #5
 8000892:	831a      	strh	r2, [r3, #24]
	minute_one.enable_segment = 1;
 8000894:	197b      	adds	r3, r7, r5
 8000896:	2201      	movs	r2, #1
 8000898:	709a      	strb	r2, [r3, #2]

	second_ten.a_port = A_ST_GPIO_Port;
 800089a:	26a0      	movs	r6, #160	; 0xa0
 800089c:	19bb      	adds	r3, r7, r6
 800089e:	22a0      	movs	r2, #160	; 0xa0
 80008a0:	05d2      	lsls	r2, r2, #23
 80008a2:	60da      	str	r2, [r3, #12]
	second_ten.a_pin = A_ST_Pin;
 80008a4:	19bb      	adds	r3, r7, r6
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	00d2      	lsls	r2, r2, #3
 80008aa:	821a      	strh	r2, [r3, #16]
	second_ten.clock_port = CLK_A_ST_GPIO_Port;
 80008ac:	19bb      	adds	r3, r7, r6
 80008ae:	22a0      	movs	r2, #160	; 0xa0
 80008b0:	05d2      	lsls	r2, r2, #23
 80008b2:	605a      	str	r2, [r3, #4]
	second_ten.clock_pin = CLK_A_ST_Pin;
 80008b4:	19bb      	adds	r3, r7, r6
 80008b6:	2280      	movs	r2, #128	; 0x80
 80008b8:	0112      	lsls	r2, r2, #4
 80008ba:	811a      	strh	r2, [r3, #8]
	second_ten.enable_port = EN_ST_GPIO_Port;
 80008bc:	19bb      	adds	r3, r7, r6
 80008be:	4a78      	ldr	r2, [pc, #480]	; (8000aa0 <main+0x3b4>)
 80008c0:	615a      	str	r2, [r3, #20]
	second_ten.enable_pin = EN_ST_Pin;
 80008c2:	19bb      	adds	r3, r7, r6
 80008c4:	2280      	movs	r2, #128	; 0x80
 80008c6:	0192      	lsls	r2, r2, #6
 80008c8:	831a      	strh	r2, [r3, #24]
	second_ten.enable_segment = 1;
 80008ca:	19bb      	adds	r3, r7, r6
 80008cc:	2201      	movs	r2, #1
 80008ce:	709a      	strb	r2, [r3, #2]

	second_one.a_port = A_SO_GPIO_Port;
 80008d0:	2384      	movs	r3, #132	; 0x84
 80008d2:	18fb      	adds	r3, r7, r3
 80008d4:	22a0      	movs	r2, #160	; 0xa0
 80008d6:	05d2      	lsls	r2, r2, #23
 80008d8:	60da      	str	r2, [r3, #12]
	second_one.a_pin = A_SO_Pin;
 80008da:	2384      	movs	r3, #132	; 0x84
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	2280      	movs	r2, #128	; 0x80
 80008e0:	0152      	lsls	r2, r2, #5
 80008e2:	821a      	strh	r2, [r3, #16]
	second_one.clock_port = CLK_A_SO_GPIO_Port;
 80008e4:	2384      	movs	r3, #132	; 0x84
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	22a0      	movs	r2, #160	; 0xa0
 80008ea:	05d2      	lsls	r2, r2, #23
 80008ec:	605a      	str	r2, [r3, #4]
	second_one.clock_pin = CLK_A_SO_Pin;
 80008ee:	2384      	movs	r3, #132	; 0x84
 80008f0:	18fb      	adds	r3, r7, r3
 80008f2:	4a6d      	ldr	r2, [pc, #436]	; (8000aa8 <main+0x3bc>)
 80008f4:	811a      	strh	r2, [r3, #8]
	second_one.enable_port = EN_SO_GPIO_Port;
 80008f6:	2384      	movs	r3, #132	; 0x84
 80008f8:	18fb      	adds	r3, r7, r3
 80008fa:	4a69      	ldr	r2, [pc, #420]	; (8000aa0 <main+0x3b4>)
 80008fc:	615a      	str	r2, [r3, #20]
	second_one.enable_pin = EN_SO_Pin;
 80008fe:	2384      	movs	r3, #132	; 0x84
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	2280      	movs	r2, #128	; 0x80
 8000904:	01d2      	lsls	r2, r2, #7
 8000906:	831a      	strh	r2, [r3, #24]
	second_one.enable_segment = 1;
 8000908:	2384      	movs	r3, #132	; 0x84
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	2201      	movs	r2, #1
 800090e:	709a      	strb	r2, [r3, #2]

	disp_hour.ten = &hour_ten;
 8000910:	2278      	movs	r2, #120	; 0x78
 8000912:	18bb      	adds	r3, r7, r2
 8000914:	187a      	adds	r2, r7, r1
 8000916:	605a      	str	r2, [r3, #4]
	disp_hour.one = &hour_one;
 8000918:	2178      	movs	r1, #120	; 0x78
 800091a:	187b      	adds	r3, r7, r1
 800091c:	183a      	adds	r2, r7, r0
 800091e:	609a      	str	r2, [r3, #8]
	disp_hour.data = 00;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
	disp_hour.data_old = 255;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	22ff      	movs	r2, #255	; 0xff
 800092a:	705a      	strb	r2, [r3, #1]

	disp_minute.ten = &minute_ten;
 800092c:	216c      	movs	r1, #108	; 0x6c
 800092e:	187b      	adds	r3, r7, r1
 8000930:	193a      	adds	r2, r7, r4
 8000932:	605a      	str	r2, [r3, #4]
	disp_minute.one = &minute_one;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	197a      	adds	r2, r7, r5
 8000938:	609a      	str	r2, [r3, #8]
	disp_minute.data = 00;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]
	disp_minute.data_old = 255;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	22ff      	movs	r2, #255	; 0xff
 8000944:	705a      	strb	r2, [r3, #1]

	disp_second.ten = &second_ten;
 8000946:	2160      	movs	r1, #96	; 0x60
 8000948:	187b      	adds	r3, r7, r1
 800094a:	19ba      	adds	r2, r7, r6
 800094c:	605a      	str	r2, [r3, #4]
	disp_second.one = &second_one;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2284      	movs	r2, #132	; 0x84
 8000952:	18ba      	adds	r2, r7, r2
 8000954:	609a      	str	r2, [r3, #8]
	disp_second.data = 00;
 8000956:	187b      	adds	r3, r7, r1
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
	disp_second.data_old = 255;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	22ff      	movs	r2, #255	; 0xff
 8000960:	705a      	strb	r2, [r3, #1]

	Button button_up = {
 8000962:	4b52      	ldr	r3, [pc, #328]	; (8000aac <main+0x3c0>)
 8000964:	25a4      	movs	r5, #164	; 0xa4
 8000966:	006d      	lsls	r5, r5, #1
 8000968:	195b      	adds	r3, r3, r5
 800096a:	19db      	adds	r3, r3, r7
 800096c:	4a50      	ldr	r2, [pc, #320]	; (8000ab0 <main+0x3c4>)
 800096e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000970:	c313      	stmia	r3!, {r0, r1, r4}
 8000972:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000974:	c313      	stmia	r3!, {r0, r1, r4}
			0,
			BTN_UP_GPIO_Port,
			BTN_UP_Pin
	};

	Button button_down = {
 8000976:	4b4f      	ldr	r3, [pc, #316]	; (8000ab4 <main+0x3c8>)
 8000978:	195b      	adds	r3, r3, r5
 800097a:	19db      	adds	r3, r3, r7
 800097c:	4a4e      	ldr	r2, [pc, #312]	; (8000ab8 <main+0x3cc>)
 800097e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000980:	c313      	stmia	r3!, {r0, r1, r4}
 8000982:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000984:	c313      	stmia	r3!, {r0, r1, r4}
			0,
			0,
			BTN_DOWN_GPIO_Port,
			BTN_DOWN_Pin
	};
	Button button_left = {
 8000986:	4b4d      	ldr	r3, [pc, #308]	; (8000abc <main+0x3d0>)
 8000988:	195b      	adds	r3, r3, r5
 800098a:	19db      	adds	r3, r3, r7
 800098c:	4a4c      	ldr	r2, [pc, #304]	; (8000ac0 <main+0x3d4>)
 800098e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000990:	c313      	stmia	r3!, {r0, r1, r4}
 8000992:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000994:	c313      	stmia	r3!, {r0, r1, r4}
			0,
			0,
			BTN_LEFT_GPIO_Port,
			BTN_LEFT_Pin
	};
	Button button_right = {
 8000996:	4b4b      	ldr	r3, [pc, #300]	; (8000ac4 <main+0x3d8>)
 8000998:	195b      	adds	r3, r3, r5
 800099a:	19db      	adds	r3, r3, r7
 800099c:	4a4a      	ldr	r2, [pc, #296]	; (8000ac8 <main+0x3dc>)
 800099e:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009a0:	c313      	stmia	r3!, {r0, r1, r4}
 80009a2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009a4:	c313      	stmia	r3!, {r0, r1, r4}
			0,
			BTN_RIGHT_GPIO_Port,
			BTN_RIGHT_Pin
	};

	button_up.state_old = 0;
 80009a6:	4b41      	ldr	r3, [pc, #260]	; (8000aac <main+0x3c0>)
 80009a8:	195b      	adds	r3, r3, r5
 80009aa:	19db      	adds	r3, r3, r7
 80009ac:	2200      	movs	r2, #0
 80009ae:	705a      	strb	r2, [r3, #1]
	uint8_t display_mode = 0;
 80009b0:	2348      	movs	r3, #72	; 0x48
 80009b2:	33ff      	adds	r3, #255	; 0xff
 80009b4:	18fb      	adds	r3, r7, r3
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		process_button(&button_up);
 80009ba:	2348      	movs	r3, #72	; 0x48
 80009bc:	18fb      	adds	r3, r7, r3
 80009be:	0018      	movs	r0, r3
 80009c0:	f7ff fdfa 	bl	80005b8 <process_button>
		process_button(&button_down);
 80009c4:	2330      	movs	r3, #48	; 0x30
 80009c6:	18fb      	adds	r3, r7, r3
 80009c8:	0018      	movs	r0, r3
 80009ca:	f7ff fdf5 	bl	80005b8 <process_button>
		process_button(&button_left);
 80009ce:	2318      	movs	r3, #24
 80009d0:	18fb      	adds	r3, r7, r3
 80009d2:	0018      	movs	r0, r3
 80009d4:	f7ff fdf0 	bl	80005b8 <process_button>
		process_button(&button_right);
 80009d8:	003b      	movs	r3, r7
 80009da:	0018      	movs	r0, r3
 80009dc:	f7ff fdec 	bl	80005b8 <process_button>

		if(button_up.state == BUTTON_PRESSED){
 80009e0:	4b32      	ldr	r3, [pc, #200]	; (8000aac <main+0x3c0>)
 80009e2:	22a4      	movs	r2, #164	; 0xa4
 80009e4:	0052      	lsls	r2, r2, #1
 80009e6:	189b      	adds	r3, r3, r2
 80009e8:	19db      	adds	r3, r3, r7
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d11a      	bne.n	8000a26 <main+0x33a>
			if(button_up.state_old == 0){
 80009f0:	4b2e      	ldr	r3, [pc, #184]	; (8000aac <main+0x3c0>)
 80009f2:	189b      	adds	r3, r3, r2
 80009f4:	19db      	adds	r3, r3, r7
 80009f6:	785b      	ldrb	r3, [r3, #1]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d121      	bne.n	8000a40 <main+0x354>
				button_up.state_old = 1;
 80009fc:	4b2b      	ldr	r3, [pc, #172]	; (8000aac <main+0x3c0>)
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	19db      	adds	r3, r3, r7
 8000a02:	2201      	movs	r2, #1
 8000a04:	705a      	strb	r2, [r3, #1]
				if(display_mode){
 8000a06:	2248      	movs	r2, #72	; 0x48
 8000a08:	32ff      	adds	r2, #255	; 0xff
 8000a0a:	18bb      	adds	r3, r7, r2
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d003      	beq.n	8000a1a <main+0x32e>
					display_mode = 0;
 8000a12:	18bb      	adds	r3, r7, r2
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]
 8000a18:	e012      	b.n	8000a40 <main+0x354>
				}else{
					display_mode = 1;
 8000a1a:	2348      	movs	r3, #72	; 0x48
 8000a1c:	33ff      	adds	r3, #255	; 0xff
 8000a1e:	18fb      	adds	r3, r7, r3
 8000a20:	2201      	movs	r2, #1
 8000a22:	701a      	strb	r2, [r3, #0]
 8000a24:	e00c      	b.n	8000a40 <main+0x354>
				}
			}
		}else if(button_up.state == BUTTON_RELEASED){
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <main+0x3c0>)
 8000a28:	22a4      	movs	r2, #164	; 0xa4
 8000a2a:	0052      	lsls	r2, r2, #1
 8000a2c:	189b      	adds	r3, r3, r2
 8000a2e:	19db      	adds	r3, r3, r7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	d104      	bne.n	8000a40 <main+0x354>
			button_up.state_old = 0;
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <main+0x3c0>)
 8000a38:	189b      	adds	r3, r3, r2
 8000a3a:	19db      	adds	r3, r3, r7
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	705a      	strb	r2, [r3, #1]
		}

		if (button_left.state == BUTTON_LONG_PRESS) {
		}

		result = HAL_RTC_GetDate(&hrtc, &sTimeStampDate, RTC_FORMAT_BIN);
 8000a40:	25a3      	movs	r5, #163	; 0xa3
 8000a42:	006d      	lsls	r5, r5, #1
 8000a44:	197c      	adds	r4, r7, r5
 8000a46:	2396      	movs	r3, #150	; 0x96
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	18f9      	adds	r1, r7, r3
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <main+0x3b8>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	0018      	movs	r0, r3
 8000a52:	f002 fb6f 	bl	8003134 <HAL_RTC_GetDate>
 8000a56:	0003      	movs	r3, r0
 8000a58:	7023      	strb	r3, [r4, #0]
		result = HAL_RTC_GetTime(&hrtc, &sTimeStamp, RTC_FORMAT_BIN);
 8000a5a:	197c      	adds	r4, r7, r5
 8000a5c:	2598      	movs	r5, #152	; 0x98
 8000a5e:	006d      	lsls	r5, r5, #1
 8000a60:	1979      	adds	r1, r7, r5
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <main+0x3b8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	0018      	movs	r0, r3
 8000a68:	f002 fa72 	bl	8002f50 <HAL_RTC_GetTime>
 8000a6c:	0003      	movs	r3, r0
 8000a6e:	7023      	strb	r3, [r4, #0]

		if(display_mode){
 8000a70:	2348      	movs	r3, #72	; 0x48
 8000a72:	33ff      	adds	r3, #255	; 0xff
 8000a74:	18fb      	adds	r3, r7, r3
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d027      	beq.n	8000acc <main+0x3e0>
			disp_hour.data = sTimeStamp.Hours;
 8000a7c:	197b      	adds	r3, r7, r5
 8000a7e:	781a      	ldrb	r2, [r3, #0]
 8000a80:	2378      	movs	r3, #120	; 0x78
 8000a82:	18fb      	adds	r3, r7, r3
 8000a84:	701a      	strb	r2, [r3, #0]
			disp_minute.data = sTimeStamp.Minutes;
 8000a86:	197b      	adds	r3, r7, r5
 8000a88:	785a      	ldrb	r2, [r3, #1]
 8000a8a:	236c      	movs	r3, #108	; 0x6c
 8000a8c:	18fb      	adds	r3, r7, r3
 8000a8e:	701a      	strb	r2, [r3, #0]
			disp_second.data = sTimeStamp.Seconds;
 8000a90:	197b      	adds	r3, r7, r5
 8000a92:	789a      	ldrb	r2, [r3, #2]
 8000a94:	2360      	movs	r3, #96	; 0x60
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	701a      	strb	r2, [r3, #0]
 8000a9a:	e028      	b.n	8000aee <main+0x402>
 8000a9c:	20000320 	.word	0x20000320
 8000aa0:	50000400 	.word	0x50000400
 8000aa4:	200001f0 	.word	0x200001f0
 8000aa8:	ffff8000 	.word	0xffff8000
 8000aac:	ffffff00 	.word	0xffffff00
 8000ab0:	0800534c 	.word	0x0800534c
 8000ab4:	fffffee8 	.word	0xfffffee8
 8000ab8:	08005364 	.word	0x08005364
 8000abc:	fffffed0 	.word	0xfffffed0
 8000ac0:	0800537c 	.word	0x0800537c
 8000ac4:	fffffeb8 	.word	0xfffffeb8
 8000ac8:	08005394 	.word	0x08005394
		}else{
			disp_hour.data = sTimeStampDate.Date;
 8000acc:	2196      	movs	r1, #150	; 0x96
 8000ace:	0049      	lsls	r1, r1, #1
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	789a      	ldrb	r2, [r3, #2]
 8000ad4:	2378      	movs	r3, #120	; 0x78
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	701a      	strb	r2, [r3, #0]
			disp_minute.data = sTimeStampDate.Month;
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	785a      	ldrb	r2, [r3, #1]
 8000ade:	236c      	movs	r3, #108	; 0x6c
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	701a      	strb	r2, [r3, #0]
			disp_second.data = sTimeStampDate.Year;
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	78da      	ldrb	r2, [r3, #3]
 8000ae8:	2360      	movs	r3, #96	; 0x60
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	701a      	strb	r2, [r3, #0]
		}

		display_write_segment(&disp_hour);
 8000aee:	2378      	movs	r3, #120	; 0x78
 8000af0:	18fb      	adds	r3, r7, r3
 8000af2:	0018      	movs	r0, r3
 8000af4:	f7ff fd24 	bl	8000540 <display_write_segment>
		display_write_segment(&disp_minute);
 8000af8:	236c      	movs	r3, #108	; 0x6c
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	0018      	movs	r0, r3
 8000afe:	f7ff fd1f 	bl	8000540 <display_write_segment>
		display_write_segment(&disp_second);
 8000b02:	2360      	movs	r3, #96	; 0x60
 8000b04:	18fb      	adds	r3, r7, r3
 8000b06:	0018      	movs	r0, r3
 8000b08:	f7ff fd1a 	bl	8000540 <display_write_segment>

		HAL_Delay(10);
 8000b0c:	200a      	movs	r0, #10
 8000b0e:	f000 fe01 	bl	8001714 <HAL_Delay>
		process_button(&button_up);
 8000b12:	e752      	b.n	80009ba <main+0x2ce>

08000b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b099      	sub	sp, #100	; 0x64
 8000b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1a:	242c      	movs	r4, #44	; 0x2c
 8000b1c:	193b      	adds	r3, r7, r4
 8000b1e:	0018      	movs	r0, r3
 8000b20:	2334      	movs	r3, #52	; 0x34
 8000b22:	001a      	movs	r2, r3
 8000b24:	2100      	movs	r1, #0
 8000b26:	f004 f913 	bl	8004d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b2a:	2318      	movs	r3, #24
 8000b2c:	18fb      	adds	r3, r7, r3
 8000b2e:	0018      	movs	r0, r3
 8000b30:	2314      	movs	r3, #20
 8000b32:	001a      	movs	r2, r3
 8000b34:	2100      	movs	r1, #0
 8000b36:	f004 f90b 	bl	8004d50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b3a:	003b      	movs	r3, r7
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	2318      	movs	r3, #24
 8000b40:	001a      	movs	r2, r3
 8000b42:	2100      	movs	r1, #0
 8000b44:	f004 f904 	bl	8004d50 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b48:	4b33      	ldr	r3, [pc, #204]	; (8000c18 <SystemClock_Config+0x104>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a33      	ldr	r2, [pc, #204]	; (8000c1c <SystemClock_Config+0x108>)
 8000b4e:	401a      	ands	r2, r3
 8000b50:	4b31      	ldr	r3, [pc, #196]	; (8000c18 <SystemClock_Config+0x104>)
 8000b52:	2180      	movs	r1, #128	; 0x80
 8000b54:	0109      	lsls	r1, r1, #4
 8000b56:	430a      	orrs	r2, r1
 8000b58:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b5a:	f001 f9d9 	bl	8001f10 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b5e:	4b30      	ldr	r3, [pc, #192]	; (8000c20 <SystemClock_Config+0x10c>)
 8000b60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000b62:	4b2f      	ldr	r3, [pc, #188]	; (8000c20 <SystemClock_Config+0x10c>)
 8000b64:	492d      	ldr	r1, [pc, #180]	; (8000c1c <SystemClock_Config+0x108>)
 8000b66:	400a      	ands	r2, r1
 8000b68:	651a      	str	r2, [r3, #80]	; 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000b6a:	193b      	adds	r3, r7, r4
 8000b6c:	2206      	movs	r2, #6
 8000b6e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	2280      	movs	r2, #128	; 0x80
 8000b74:	0052      	lsls	r2, r2, #1
 8000b76:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b78:	0021      	movs	r1, r4
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	2210      	movs	r2, #16
 8000b84:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	2202      	movs	r2, #2
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2200      	movs	r2, #0
 8000b90:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2280      	movs	r2, #128	; 0x80
 8000b96:	02d2      	lsls	r2, r2, #11
 8000b98:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2280      	movs	r2, #128	; 0x80
 8000b9e:	03d2      	lsls	r2, r2, #15
 8000ba0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f001 f9c1 	bl	8001f2c <HAL_RCC_OscConfig>
 8000baa:	1e03      	subs	r3, r0, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bae:	f000 fac5 	bl	800113c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb2:	2118      	movs	r1, #24
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	220f      	movs	r2, #15
 8000bb8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f001 fd24 	bl	8002624 <HAL_RCC_ClockConfig>
 8000bdc:	1e03      	subs	r3, r0, #0
 8000bde:	d001      	beq.n	8000be4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000be0:	f000 faac 	bl	800113c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000be4:	003b      	movs	r3, r7
 8000be6:	222a      	movs	r2, #42	; 0x2a
 8000be8:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bea:	003b      	movs	r3, r7
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bf0:	003b      	movs	r3, r7
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000bf6:	003b      	movs	r3, r7
 8000bf8:	2280      	movs	r2, #128	; 0x80
 8000bfa:	0252      	lsls	r2, r2, #9
 8000bfc:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bfe:	003b      	movs	r3, r7
 8000c00:	0018      	movs	r0, r3
 8000c02:	f001 ff33 	bl	8002a6c <HAL_RCCEx_PeriphCLKConfig>
 8000c06:	1e03      	subs	r3, r0, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000c0a:	f000 fa97 	bl	800113c <Error_Handler>
  }
}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	b019      	add	sp, #100	; 0x64
 8000c14:	bd90      	pop	{r4, r7, pc}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	40007000 	.word	0x40007000
 8000c1c:	ffffe7ff 	.word	0xffffe7ff
 8000c20:	40021000 	.word	0x40021000

08000c24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <MX_I2C1_Init+0x74>)
 8000c2a:	4a1c      	ldr	r2, [pc, #112]	; (8000c9c <MX_I2C1_Init+0x78>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <MX_I2C1_Init+0x74>)
 8000c30:	4a1b      	ldr	r2, [pc, #108]	; (8000ca0 <MX_I2C1_Init+0x7c>)
 8000c32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c34:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <MX_I2C1_Init+0x74>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <MX_I2C1_Init+0x74>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <MX_I2C1_Init+0x74>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_I2C1_Init+0x74>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <MX_I2C1_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <MX_I2C1_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <MX_I2C1_Init+0x74>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <MX_I2C1_Init+0x74>)
 8000c60:	0018      	movs	r0, r3
 8000c62:	f001 f827 	bl	8001cb4 <HAL_I2C_Init>
 8000c66:	1e03      	subs	r3, r0, #0
 8000c68:	d001      	beq.n	8000c6e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c6a:	f000 fa67 	bl	800113c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <MX_I2C1_Init+0x74>)
 8000c70:	2100      	movs	r1, #0
 8000c72:	0018      	movs	r0, r3
 8000c74:	f001 f8b4 	bl	8001de0 <HAL_I2CEx_ConfigAnalogFilter>
 8000c78:	1e03      	subs	r3, r0, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c7c:	f000 fa5e 	bl	800113c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <MX_I2C1_Init+0x74>)
 8000c82:	2100      	movs	r1, #0
 8000c84:	0018      	movs	r0, r3
 8000c86:	f001 f8f7 	bl	8001e78 <HAL_I2CEx_ConfigDigitalFilter>
 8000c8a:	1e03      	subs	r3, r0, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c8e:	f000 fa55 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	2000019c 	.word	0x2000019c
 8000c9c:	40005400 	.word	0x40005400
 8000ca0:	00707cbb 	.word	0x00707cbb

08000ca4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	0018      	movs	r0, r3
 8000cae:	2314      	movs	r3, #20
 8000cb0:	001a      	movs	r2, r3
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	f004 f84c 	bl	8004d50 <memset>
  RTC_DateTypeDef sDate = {0};
 8000cb8:	003b      	movs	r3, r7
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000cbe:	4b29      	ldr	r3, [pc, #164]	; (8000d64 <MX_RTC_Init+0xc0>)
 8000cc0:	4a29      	ldr	r2, [pc, #164]	; (8000d68 <MX_RTC_Init+0xc4>)
 8000cc2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cc4:	4b27      	ldr	r3, [pc, #156]	; (8000d64 <MX_RTC_Init+0xc0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000cca:	4b26      	ldr	r3, [pc, #152]	; (8000d64 <MX_RTC_Init+0xc0>)
 8000ccc:	227f      	movs	r2, #127	; 0x7f
 8000cce:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000cd0:	4b24      	ldr	r3, [pc, #144]	; (8000d64 <MX_RTC_Init+0xc0>)
 8000cd2:	22ff      	movs	r2, #255	; 0xff
 8000cd4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cd6:	4b23      	ldr	r3, [pc, #140]	; (8000d64 <MX_RTC_Init+0xc0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000cdc:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <MX_RTC_Init+0xc0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ce2:	4b20      	ldr	r3, [pc, #128]	; (8000d64 <MX_RTC_Init+0xc0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ce8:	4b1e      	ldr	r3, [pc, #120]	; (8000d64 <MX_RTC_Init+0xc0>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cee:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <MX_RTC_Init+0xc0>)
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f001 ffe7 	bl	8002cc4 <HAL_RTC_Init>
 8000cf6:	1e03      	subs	r3, r0, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8000cfa:	f000 fa1f 	bl	800113c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	2200      	movs	r2, #0
 8000d08:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d1c:	1d39      	adds	r1, r7, #4
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_RTC_Init+0xc0>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	0018      	movs	r0, r3
 8000d24:	f002 f86a 	bl	8002dfc <HAL_RTC_SetTime>
 8000d28:	1e03      	subs	r3, r0, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8000d2c:	f000 fa06 	bl	800113c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d30:	003b      	movs	r3, r7
 8000d32:	2201      	movs	r2, #1
 8000d34:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000d36:	003b      	movs	r3, r7
 8000d38:	2201      	movs	r2, #1
 8000d3a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000d3c:	003b      	movs	r3, r7
 8000d3e:	2201      	movs	r2, #1
 8000d40:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x25;
 8000d42:	003b      	movs	r3, r7
 8000d44:	2225      	movs	r2, #37	; 0x25
 8000d46:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d48:	0039      	movs	r1, r7
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_RTC_Init+0xc0>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f002 f95c 	bl	800300c <HAL_RTC_SetDate>
 8000d54:	1e03      	subs	r3, r0, #0
 8000d56:	d001      	beq.n	8000d5c <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000d58:	f000 f9f0 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b006      	add	sp, #24
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	200001f0 	.word	0x200001f0
 8000d68:	40002800 	.word	0x40002800

08000d6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d72:	2318      	movs	r3, #24
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	0018      	movs	r0, r3
 8000d78:	2310      	movs	r3, #16
 8000d7a:	001a      	movs	r2, r3
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	f003 ffe7 	bl	8004d50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d82:	2310      	movs	r3, #16
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	0018      	movs	r0, r3
 8000d88:	2308      	movs	r3, #8
 8000d8a:	001a      	movs	r2, r3
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	f003 ffdf 	bl	8004d50 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d92:	003b      	movs	r3, r7
 8000d94:	0018      	movs	r0, r3
 8000d96:	2310      	movs	r3, #16
 8000d98:	001a      	movs	r2, r3
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	f003 ffd8 	bl	8004d50 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000da0:	4b30      	ldr	r3, [pc, #192]	; (8000e64 <MX_TIM2_Init+0xf8>)
 8000da2:	2280      	movs	r2, #128	; 0x80
 8000da4:	05d2      	lsls	r2, r2, #23
 8000da6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8000da8:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <MX_TIM2_Init+0xf8>)
 8000daa:	221f      	movs	r2, #31
 8000dac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dae:	4b2d      	ldr	r3, [pc, #180]	; (8000e64 <MX_TIM2_Init+0xf8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000db4:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <MX_TIM2_Init+0xf8>)
 8000db6:	4a2c      	ldr	r2, [pc, #176]	; (8000e68 <MX_TIM2_Init+0xfc>)
 8000db8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dba:	4b2a      	ldr	r3, [pc, #168]	; (8000e64 <MX_TIM2_Init+0xf8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dc0:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <MX_TIM2_Init+0xf8>)
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dc6:	4b27      	ldr	r3, [pc, #156]	; (8000e64 <MX_TIM2_Init+0xf8>)
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f002 fad9 	bl	8003380 <HAL_TIM_Base_Init>
 8000dce:	1e03      	subs	r3, r0, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000dd2:	f000 f9b3 	bl	800113c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd6:	2118      	movs	r1, #24
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2280      	movs	r2, #128	; 0x80
 8000ddc:	0152      	lsls	r2, r2, #5
 8000dde:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000de0:	187a      	adds	r2, r7, r1
 8000de2:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <MX_TIM2_Init+0xf8>)
 8000de4:	0011      	movs	r1, r2
 8000de6:	0018      	movs	r0, r3
 8000de8:	f002 fda0 	bl	800392c <HAL_TIM_ConfigClockSource>
 8000dec:	1e03      	subs	r3, r0, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000df0:	f000 f9a4 	bl	800113c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <MX_TIM2_Init+0xf8>)
 8000df6:	0018      	movs	r0, r3
 8000df8:	f002 fb4a 	bl	8003490 <HAL_TIM_PWM_Init>
 8000dfc:	1e03      	subs	r3, r0, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000e00:	f000 f99c 	bl	800113c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e04:	2110      	movs	r1, #16
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	2200      	movs	r2, #0
 8000e10:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e12:	187a      	adds	r2, r7, r1
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <MX_TIM2_Init+0xf8>)
 8000e16:	0011      	movs	r1, r2
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f003 f86b 	bl	8003ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1e:	1e03      	subs	r3, r0, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000e22:	f000 f98b 	bl	800113c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e26:	003b      	movs	r3, r7
 8000e28:	2260      	movs	r2, #96	; 0x60
 8000e2a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 499;
 8000e2c:	003b      	movs	r3, r7
 8000e2e:	22f4      	movs	r2, #244	; 0xf4
 8000e30:	32ff      	adds	r2, #255	; 0xff
 8000e32:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e34:	003b      	movs	r3, r7
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e3a:	003b      	movs	r3, r7
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e40:	0039      	movs	r1, r7
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <MX_TIM2_Init+0xf8>)
 8000e44:	2208      	movs	r2, #8
 8000e46:	0018      	movs	r0, r3
 8000e48:	f002 fcaa 	bl	80037a0 <HAL_TIM_PWM_ConfigChannel>
 8000e4c:	1e03      	subs	r3, r0, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000e50:	f000 f974 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <MX_TIM2_Init+0xf8>)
 8000e56:	0018      	movs	r0, r3
 8000e58:	f000 fa14 	bl	8001284 <HAL_TIM_MspPostInit>

}
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b00a      	add	sp, #40	; 0x28
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000214 	.word	0x20000214
 8000e68:	000003e7 	.word	0x000003e7

08000e6c <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e72:	2318      	movs	r3, #24
 8000e74:	18fb      	adds	r3, r7, r3
 8000e76:	0018      	movs	r0, r3
 8000e78:	2310      	movs	r3, #16
 8000e7a:	001a      	movs	r2, r3
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	f003 ff67 	bl	8004d50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e82:	2310      	movs	r3, #16
 8000e84:	18fb      	adds	r3, r7, r3
 8000e86:	0018      	movs	r0, r3
 8000e88:	2308      	movs	r3, #8
 8000e8a:	001a      	movs	r2, r3
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	f003 ff5f 	bl	8004d50 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e92:	003b      	movs	r3, r7
 8000e94:	0018      	movs	r0, r3
 8000e96:	2310      	movs	r3, #16
 8000e98:	001a      	movs	r2, r3
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	f003 ff58 	bl	8004d50 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000ea0:	4b2e      	ldr	r3, [pc, #184]	; (8000f5c <MX_TIM21_Init+0xf0>)
 8000ea2:	4a2f      	ldr	r2, [pc, #188]	; (8000f60 <MX_TIM21_Init+0xf4>)
 8000ea4:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 31;
 8000ea6:	4b2d      	ldr	r3, [pc, #180]	; (8000f5c <MX_TIM21_Init+0xf0>)
 8000ea8:	221f      	movs	r2, #31
 8000eaa:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eac:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <MX_TIM21_Init+0xf0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 1000;
 8000eb2:	4b2a      	ldr	r3, [pc, #168]	; (8000f5c <MX_TIM21_Init+0xf0>)
 8000eb4:	22fa      	movs	r2, #250	; 0xfa
 8000eb6:	0092      	lsls	r2, r2, #2
 8000eb8:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eba:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <MX_TIM21_Init+0xf0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec0:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <MX_TIM21_Init+0xf0>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000ec6:	4b25      	ldr	r3, [pc, #148]	; (8000f5c <MX_TIM21_Init+0xf0>)
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f002 fa59 	bl	8003380 <HAL_TIM_Base_Init>
 8000ece:	1e03      	subs	r3, r0, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM21_Init+0x6a>
  {
    Error_Handler();
 8000ed2:	f000 f933 	bl	800113c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed6:	2118      	movs	r1, #24
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	2280      	movs	r2, #128	; 0x80
 8000edc:	0152      	lsls	r2, r2, #5
 8000ede:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000ee0:	187a      	adds	r2, r7, r1
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <MX_TIM21_Init+0xf0>)
 8000ee4:	0011      	movs	r1, r2
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f002 fd20 	bl	800392c <HAL_TIM_ConfigClockSource>
 8000eec:	1e03      	subs	r3, r0, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM21_Init+0x88>
  {
    Error_Handler();
 8000ef0:	f000 f924 	bl	800113c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <MX_TIM21_Init+0xf0>)
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f002 fa82 	bl	8003400 <HAL_TIM_OC_Init>
 8000efc:	1e03      	subs	r3, r0, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM21_Init+0x98>
  {
    Error_Handler();
 8000f00:	f000 f91c 	bl	800113c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f04:	2110      	movs	r1, #16
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	2200      	movs	r2, #0
 8000f10:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000f12:	187a      	adds	r2, r7, r1
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_TIM21_Init+0xf0>)
 8000f16:	0011      	movs	r1, r2
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f002 ffeb 	bl	8003ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f1e:	1e03      	subs	r3, r0, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM21_Init+0xba>
  {
    Error_Handler();
 8000f22:	f000 f90b 	bl	800113c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000f26:	003b      	movs	r3, r7
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000f2c:	003b      	movs	r3, r7
 8000f2e:	2200      	movs	r2, #0
 8000f30:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f32:	003b      	movs	r3, r7
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f38:	003b      	movs	r3, r7
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f3e:	0039      	movs	r1, r7
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_TIM21_Init+0xf0>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	0018      	movs	r0, r3
 8000f46:	f002 fbd3 	bl	80036f0 <HAL_TIM_OC_ConfigChannel>
 8000f4a:	1e03      	subs	r3, r0, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM21_Init+0xe6>
  {
    Error_Handler();
 8000f4e:	f000 f8f5 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b00a      	add	sp, #40	; 0x28
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	20000254 	.word	0x20000254
 8000f60:	40010800 	.word	0x40010800

08000f64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_USART2_UART_Init+0x58>)
 8000f6a:	4a15      	ldr	r2, [pc, #84]	; (8000fc0 <MX_USART2_UART_Init+0x5c>)
 8000f6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <MX_USART2_UART_Init+0x58>)
 8000f70:	22e1      	movs	r2, #225	; 0xe1
 8000f72:	0252      	lsls	r2, r2, #9
 8000f74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_USART2_UART_Init+0x58>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MX_USART2_UART_Init+0x58>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <MX_USART2_UART_Init+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <MX_USART2_UART_Init+0x58>)
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <MX_USART2_UART_Init+0x58>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_USART2_UART_Init+0x58>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <MX_USART2_UART_Init+0x58>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_USART2_UART_Init+0x58>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fa6:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <MX_USART2_UART_Init+0x58>)
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f002 fff3 	bl	8003f94 <HAL_UART_Init>
 8000fae:	1e03      	subs	r3, r0, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fb2:	f000 f8c3 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000294 	.word	0x20000294
 8000fc0:	40004400 	.word	0x40004400

08000fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	240c      	movs	r4, #12
 8000fcc:	193b      	adds	r3, r7, r4
 8000fce:	0018      	movs	r0, r3
 8000fd0:	2314      	movs	r3, #20
 8000fd2:	001a      	movs	r2, r3
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	f003 febb 	bl	8004d50 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fda:	4b52      	ldr	r3, [pc, #328]	; (8001124 <MX_GPIO_Init+0x160>)
 8000fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fde:	4b51      	ldr	r3, [pc, #324]	; (8001124 <MX_GPIO_Init+0x160>)
 8000fe0:	2104      	movs	r1, #4
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fe6:	4b4f      	ldr	r3, [pc, #316]	; (8001124 <MX_GPIO_Init+0x160>)
 8000fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fea:	2204      	movs	r2, #4
 8000fec:	4013      	ands	r3, r2
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	4b4c      	ldr	r3, [pc, #304]	; (8001124 <MX_GPIO_Init+0x160>)
 8000ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ff6:	4b4b      	ldr	r3, [pc, #300]	; (8001124 <MX_GPIO_Init+0x160>)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ffe:	4b49      	ldr	r3, [pc, #292]	; (8001124 <MX_GPIO_Init+0x160>)
 8001000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001002:	2201      	movs	r2, #1
 8001004:	4013      	ands	r3, r2
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	4b46      	ldr	r3, [pc, #280]	; (8001124 <MX_GPIO_Init+0x160>)
 800100c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800100e:	4b45      	ldr	r3, [pc, #276]	; (8001124 <MX_GPIO_Init+0x160>)
 8001010:	2102      	movs	r1, #2
 8001012:	430a      	orrs	r2, r1
 8001014:	62da      	str	r2, [r3, #44]	; 0x2c
 8001016:	4b43      	ldr	r3, [pc, #268]	; (8001124 <MX_GPIO_Init+0x160>)
 8001018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101a:	2202      	movs	r2, #2
 800101c:	4013      	ands	r3, r2
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLEAR_Pin|A_HT_Pin|CLK_A_HT_Pin|EN_HT_Pin
 8001022:	4941      	ldr	r1, [pc, #260]	; (8001128 <MX_GPIO_Init+0x164>)
 8001024:	23a0      	movs	r3, #160	; 0xa0
 8001026:	05db      	lsls	r3, r3, #23
 8001028:	2200      	movs	r2, #0
 800102a:	0018      	movs	r0, r3
 800102c:	f000 fdff 	bl	8001c2e <HAL_GPIO_WritePin>
                          |A_HO_Pin|CLK_A_HO_Pin|A_MT_Pin|CLK_A_MT_Pin
                          |A_MO_Pin|CLK_A_MO_Pin|A_ST_Pin|CLK_A_ST_Pin
                          |A_SO_Pin|CLK_A_SO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|EN_MO_Pin|EN_ST_Pin|EN_SO_Pin
 8001030:	493e      	ldr	r1, [pc, #248]	; (800112c <MX_GPIO_Init+0x168>)
 8001032:	4b3f      	ldr	r3, [pc, #252]	; (8001130 <MX_GPIO_Init+0x16c>)
 8001034:	2200      	movs	r2, #0
 8001036:	0018      	movs	r0, r3
 8001038:	f000 fdf9 	bl	8001c2e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CLEAR_Pin A_HT_Pin CLK_A_HT_Pin A_HO_Pin
                           CLK_A_HO_Pin A_MT_Pin CLK_A_MT_Pin A_MO_Pin
                           CLK_A_MO_Pin A_ST_Pin CLK_A_ST_Pin A_SO_Pin
                           CLK_A_SO_Pin */
  GPIO_InitStruct.Pin = CLEAR_Pin|A_HT_Pin|CLK_A_HT_Pin|A_HO_Pin
 800103c:	193b      	adds	r3, r7, r4
 800103e:	4a3d      	ldr	r2, [pc, #244]	; (8001134 <MX_GPIO_Init+0x170>)
 8001040:	601a      	str	r2, [r3, #0]
                          |CLK_A_HO_Pin|A_MT_Pin|CLK_A_MT_Pin|A_MO_Pin
                          |CLK_A_MO_Pin|A_ST_Pin|CLK_A_ST_Pin|A_SO_Pin
                          |CLK_A_SO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	193b      	adds	r3, r7, r4
 8001044:	2201      	movs	r2, #1
 8001046:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	193b      	adds	r3, r7, r4
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800104e:	193b      	adds	r3, r7, r4
 8001050:	2202      	movs	r2, #2
 8001052:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001054:	193a      	adds	r2, r7, r4
 8001056:	23a0      	movs	r3, #160	; 0xa0
 8001058:	05db      	lsls	r3, r3, #23
 800105a:	0011      	movs	r1, r2
 800105c:	0018      	movs	r0, r3
 800105e:	f000 fc5b 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_HT_Pin */
  GPIO_InitStruct.Pin = EN_HT_Pin;
 8001062:	193b      	adds	r3, r7, r4
 8001064:	2208      	movs	r2, #8
 8001066:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001068:	193b      	adds	r3, r7, r4
 800106a:	2201      	movs	r2, #1
 800106c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	193b      	adds	r3, r7, r4
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	193b      	adds	r3, r7, r4
 8001076:	2203      	movs	r2, #3
 8001078:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EN_HT_GPIO_Port, &GPIO_InitStruct);
 800107a:	193a      	adds	r2, r7, r4
 800107c:	23a0      	movs	r3, #160	; 0xa0
 800107e:	05db      	lsls	r3, r3, #23
 8001080:	0011      	movs	r1, r2
 8001082:	0018      	movs	r0, r3
 8001084:	f000 fc48 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_UP_Pin BTN_DOWN_Pin BTN_LEFT_Pin BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_DOWN_Pin|BTN_LEFT_Pin|BTN_RIGHT_Pin;
 8001088:	0021      	movs	r1, r4
 800108a:	187b      	adds	r3, r7, r1
 800108c:	220f      	movs	r2, #15
 800108e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001090:	187b      	adds	r3, r7, r1
 8001092:	2288      	movs	r2, #136	; 0x88
 8001094:	0352      	lsls	r2, r2, #13
 8001096:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	187b      	adds	r3, r7, r1
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109e:	000c      	movs	r4, r1
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	4a23      	ldr	r2, [pc, #140]	; (8001130 <MX_GPIO_Init+0x16c>)
 80010a4:	0019      	movs	r1, r3
 80010a6:	0010      	movs	r0, r2
 80010a8:	f000 fc36 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010ac:	0021      	movs	r1, r4
 80010ae:	187b      	adds	r3, r7, r1
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	0112      	lsls	r2, r2, #4
 80010b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b6:	000c      	movs	r4, r1
 80010b8:	193b      	adds	r3, r7, r4
 80010ba:	2201      	movs	r2, #1
 80010bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	193b      	adds	r3, r7, r4
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	193b      	adds	r3, r7, r4
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ca:	193b      	adds	r3, r7, r4
 80010cc:	4a18      	ldr	r2, [pc, #96]	; (8001130 <MX_GPIO_Init+0x16c>)
 80010ce:	0019      	movs	r1, r3
 80010d0:	0010      	movs	r0, r2
 80010d2:	f000 fc21 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_MO_Pin EN_ST_Pin EN_SO_Pin EN_HO_Pin
                           EN_MT_Pin */
  GPIO_InitStruct.Pin = EN_MO_Pin|EN_ST_Pin|EN_SO_Pin|EN_HO_Pin
 80010d6:	0021      	movs	r1, r4
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	4a17      	ldr	r2, [pc, #92]	; (8001138 <MX_GPIO_Init+0x174>)
 80010dc:	601a      	str	r2, [r3, #0]
                          |EN_MT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	2201      	movs	r2, #1
 80010e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	2202      	movs	r2, #2
 80010ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f0:	187b      	adds	r3, r7, r1
 80010f2:	4a0f      	ldr	r2, [pc, #60]	; (8001130 <MX_GPIO_Init+0x16c>)
 80010f4:	0019      	movs	r1, r3
 80010f6:	0010      	movs	r0, r2
 80010f8:	f000 fc0e 	bl	8001918 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2100      	movs	r1, #0
 8001100:	2005      	movs	r0, #5
 8001102:	f000 fbd7 	bl	80018b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001106:	2005      	movs	r0, #5
 8001108:	f000 fbe9 	bl	80018de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	2100      	movs	r1, #0
 8001110:	2006      	movs	r0, #6
 8001112:	f000 fbcf 	bl	80018b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001116:	2006      	movs	r0, #6
 8001118:	f000 fbe1 	bl	80018de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800111c:	46c0      	nop			; (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	b009      	add	sp, #36	; 0x24
 8001122:	bd90      	pop	{r4, r7, pc}
 8001124:	40021000 	.word	0x40021000
 8001128:	00009fff 	.word	0x00009fff
 800112c:	00007830 	.word	0x00007830
 8001130:	50000400 	.word	0x50000400
 8001134:	00009ff7 	.word	0x00009ff7
 8001138:	00007030 	.word	0x00007030

0800113c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
}
 8001142:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001144:	e7fe      	b.n	8001144 <Error_Handler+0x8>
	...

08001148 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <HAL_MspInit+0x24>)
 800114e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_MspInit+0x24>)
 8001152:	2101      	movs	r1, #1
 8001154:	430a      	orrs	r2, r1
 8001156:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <HAL_MspInit+0x24>)
 800115a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <HAL_MspInit+0x24>)
 800115e:	2180      	movs	r1, #128	; 0x80
 8001160:	0549      	lsls	r1, r1, #21
 8001162:	430a      	orrs	r2, r1
 8001164:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40021000 	.word	0x40021000

08001170 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b089      	sub	sp, #36	; 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	240c      	movs	r4, #12
 800117a:	193b      	adds	r3, r7, r4
 800117c:	0018      	movs	r0, r3
 800117e:	2314      	movs	r3, #20
 8001180:	001a      	movs	r2, r3
 8001182:	2100      	movs	r1, #0
 8001184:	f003 fde4 	bl	8004d50 <memset>
  if(hi2c->Instance==I2C1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a18      	ldr	r2, [pc, #96]	; (80011f0 <HAL_I2C_MspInit+0x80>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d129      	bne.n	80011e6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <HAL_I2C_MspInit+0x84>)
 8001194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <HAL_I2C_MspInit+0x84>)
 8001198:	2102      	movs	r1, #2
 800119a:	430a      	orrs	r2, r1
 800119c:	62da      	str	r2, [r3, #44]	; 0x2c
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <HAL_I2C_MspInit+0x84>)
 80011a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a2:	2202      	movs	r2, #2
 80011a4:	4013      	ands	r3, r2
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011aa:	193b      	adds	r3, r7, r4
 80011ac:	22c0      	movs	r2, #192	; 0xc0
 80011ae:	0092      	lsls	r2, r2, #2
 80011b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b2:	0021      	movs	r1, r4
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	2212      	movs	r2, #18
 80011b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	187b      	adds	r3, r7, r1
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	2203      	movs	r2, #3
 80011c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011c6:	187b      	adds	r3, r7, r1
 80011c8:	2204      	movs	r2, #4
 80011ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011cc:	187b      	adds	r3, r7, r1
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <HAL_I2C_MspInit+0x88>)
 80011d0:	0019      	movs	r1, r3
 80011d2:	0010      	movs	r0, r2
 80011d4:	f000 fba0 	bl	8001918 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_I2C_MspInit+0x84>)
 80011da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <HAL_I2C_MspInit+0x84>)
 80011de:	2180      	movs	r1, #128	; 0x80
 80011e0:	0389      	lsls	r1, r1, #14
 80011e2:	430a      	orrs	r2, r1
 80011e4:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b009      	add	sp, #36	; 0x24
 80011ec:	bd90      	pop	{r4, r7, pc}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	40005400 	.word	0x40005400
 80011f4:	40021000 	.word	0x40021000
 80011f8:	50000400 	.word	0x50000400

080011fc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a06      	ldr	r2, [pc, #24]	; (8001224 <HAL_RTC_MspInit+0x28>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d106      	bne.n	800121c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_RTC_MspInit+0x2c>)
 8001210:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_RTC_MspInit+0x2c>)
 8001214:	2180      	movs	r1, #128	; 0x80
 8001216:	02c9      	lsls	r1, r1, #11
 8001218:	430a      	orrs	r2, r1
 800121a:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	b002      	add	sp, #8
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40002800 	.word	0x40002800
 8001228:	40021000 	.word	0x40021000

0800122c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	05db      	lsls	r3, r3, #23
 800123c:	429a      	cmp	r2, r3
 800123e:	d106      	bne.n	800124e <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <HAL_TIM_Base_MspInit+0x50>)
 8001242:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001244:	4b0d      	ldr	r3, [pc, #52]	; (800127c <HAL_TIM_Base_MspInit+0x50>)
 8001246:	2101      	movs	r1, #1
 8001248:	430a      	orrs	r2, r1
 800124a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 800124c:	e012      	b.n	8001274 <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM21)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <HAL_TIM_Base_MspInit+0x54>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d10d      	bne.n	8001274 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <HAL_TIM_Base_MspInit+0x50>)
 800125a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <HAL_TIM_Base_MspInit+0x50>)
 800125e:	2104      	movs	r1, #4
 8001260:	430a      	orrs	r2, r1
 8001262:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2100      	movs	r1, #0
 8001268:	2014      	movs	r0, #20
 800126a:	f000 fb23 	bl	80018b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 800126e:	2014      	movs	r0, #20
 8001270:	f000 fb35 	bl	80018de <HAL_NVIC_EnableIRQ>
}
 8001274:	46c0      	nop			; (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	b002      	add	sp, #8
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40021000 	.word	0x40021000
 8001280:	40010800 	.word	0x40010800

08001284 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	240c      	movs	r4, #12
 800128e:	193b      	adds	r3, r7, r4
 8001290:	0018      	movs	r0, r3
 8001292:	2314      	movs	r3, #20
 8001294:	001a      	movs	r2, r3
 8001296:	2100      	movs	r1, #0
 8001298:	f003 fd5a 	bl	8004d50 <memset>
  if(htim->Instance==TIM2)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	05db      	lsls	r3, r3, #23
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d122      	bne.n	80012ee <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <HAL_TIM_MspPostInit+0x74>)
 80012aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_TIM_MspPostInit+0x74>)
 80012ae:	2102      	movs	r1, #2
 80012b0:	430a      	orrs	r2, r1
 80012b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80012b4:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <HAL_TIM_MspPostInit+0x74>)
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	2202      	movs	r2, #2
 80012ba:	4013      	ands	r3, r2
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012c0:	193b      	adds	r3, r7, r4
 80012c2:	2280      	movs	r2, #128	; 0x80
 80012c4:	00d2      	lsls	r2, r2, #3
 80012c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	0021      	movs	r1, r4
 80012ca:	187b      	adds	r3, r7, r1
 80012cc:	2202      	movs	r2, #2
 80012ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	187b      	adds	r3, r7, r1
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	187b      	adds	r3, r7, r1
 80012d8:	2200      	movs	r2, #0
 80012da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80012dc:	187b      	adds	r3, r7, r1
 80012de:	2202      	movs	r2, #2
 80012e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	187b      	adds	r3, r7, r1
 80012e4:	4a05      	ldr	r2, [pc, #20]	; (80012fc <HAL_TIM_MspPostInit+0x78>)
 80012e6:	0019      	movs	r1, r3
 80012e8:	0010      	movs	r0, r2
 80012ea:	f000 fb15 	bl	8001918 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b009      	add	sp, #36	; 0x24
 80012f4:	bd90      	pop	{r4, r7, pc}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	40021000 	.word	0x40021000
 80012fc:	50000400 	.word	0x50000400

08001300 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b089      	sub	sp, #36	; 0x24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	240c      	movs	r4, #12
 800130a:	193b      	adds	r3, r7, r4
 800130c:	0018      	movs	r0, r3
 800130e:	2314      	movs	r3, #20
 8001310:	001a      	movs	r2, r3
 8001312:	2100      	movs	r1, #0
 8001314:	f003 fd1c 	bl	8004d50 <memset>
  if(huart->Instance==USART2)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a17      	ldr	r2, [pc, #92]	; (800137c <HAL_UART_MspInit+0x7c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d128      	bne.n	8001374 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001322:	4b17      	ldr	r3, [pc, #92]	; (8001380 <HAL_UART_MspInit+0x80>)
 8001324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <HAL_UART_MspInit+0x80>)
 8001328:	2180      	movs	r1, #128	; 0x80
 800132a:	0289      	lsls	r1, r1, #10
 800132c:	430a      	orrs	r2, r1
 800132e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001330:	4b13      	ldr	r3, [pc, #76]	; (8001380 <HAL_UART_MspInit+0x80>)
 8001332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_UART_MspInit+0x80>)
 8001336:	2102      	movs	r1, #2
 8001338:	430a      	orrs	r2, r1
 800133a:	62da      	str	r2, [r3, #44]	; 0x2c
 800133c:	4b10      	ldr	r3, [pc, #64]	; (8001380 <HAL_UART_MspInit+0x80>)
 800133e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001340:	2202      	movs	r2, #2
 8001342:	4013      	ands	r3, r2
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB6     ------> USART2_TX
    PB7     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001348:	0021      	movs	r1, r4
 800134a:	187b      	adds	r3, r7, r1
 800134c:	22c0      	movs	r2, #192	; 0xc0
 800134e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	187b      	adds	r3, r7, r1
 8001352:	2202      	movs	r2, #2
 8001354:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	187b      	adds	r3, r7, r1
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135c:	187b      	adds	r3, r7, r1
 800135e:	2203      	movs	r2, #3
 8001360:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8001362:	187b      	adds	r3, r7, r1
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001368:	187b      	adds	r3, r7, r1
 800136a:	4a06      	ldr	r2, [pc, #24]	; (8001384 <HAL_UART_MspInit+0x84>)
 800136c:	0019      	movs	r1, r3
 800136e:	0010      	movs	r0, r2
 8001370:	f000 fad2 	bl	8001918 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001374:	46c0      	nop			; (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	b009      	add	sp, #36	; 0x24
 800137a:	bd90      	pop	{r4, r7, pc}
 800137c:	40004400 	.word	0x40004400
 8001380:	40021000 	.word	0x40021000
 8001384:	50000400 	.word	0x50000400

08001388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800138c:	e7fe      	b.n	800138c <NMI_Handler+0x4>

0800138e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001392:	e7fe      	b.n	8001392 <HardFault_Handler+0x4>

08001394 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001398:	46c0      	nop			; (mov r8, r8)
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ac:	f000 f996 	bl	80016dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b0:	46c0      	nop			; (mov r8, r8)
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

	ext_btn_up_value = HAL_GPIO_ReadPin(BTN_UP_GPIO_Port, BTN_UP_Pin);
 80013bc:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <EXTI0_1_IRQHandler+0x3c>)
 80013be:	2101      	movs	r1, #1
 80013c0:	0018      	movs	r0, r3
 80013c2:	f000 fc17 	bl	8001bf4 <HAL_GPIO_ReadPin>
 80013c6:	0003      	movs	r3, r0
 80013c8:	001a      	movs	r2, r3
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <EXTI0_1_IRQHandler+0x40>)
 80013cc:	701a      	strb	r2, [r3, #0]
	ext_btn_down_value = HAL_GPIO_ReadPin(BTN_DOWN_GPIO_Port, BTN_DOWN_Pin);
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <EXTI0_1_IRQHandler+0x3c>)
 80013d0:	2102      	movs	r1, #2
 80013d2:	0018      	movs	r0, r3
 80013d4:	f000 fc0e 	bl	8001bf4 <HAL_GPIO_ReadPin>
 80013d8:	0003      	movs	r3, r0
 80013da:	001a      	movs	r2, r3
 80013dc:	4b07      	ldr	r3, [pc, #28]	; (80013fc <EXTI0_1_IRQHandler+0x44>)
 80013de:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_UP_Pin);
 80013e0:	2001      	movs	r0, #1
 80013e2:	f000 fc41 	bl	8001c68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_DOWN_Pin);
 80013e6:	2002      	movs	r0, #2
 80013e8:	f000 fc3e 	bl	8001c68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80013ec:	46c0      	nop			; (mov r8, r8)
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	50000400 	.word	0x50000400
 80013f8:	2000031c 	.word	0x2000031c
 80013fc:	2000031d 	.word	0x2000031d

08001400 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

	ext_btn_left_value = HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port, BTN_LEFT_Pin);
 8001404:	4b0d      	ldr	r3, [pc, #52]	; (800143c <EXTI2_3_IRQHandler+0x3c>)
 8001406:	2104      	movs	r1, #4
 8001408:	0018      	movs	r0, r3
 800140a:	f000 fbf3 	bl	8001bf4 <HAL_GPIO_ReadPin>
 800140e:	0003      	movs	r3, r0
 8001410:	001a      	movs	r2, r3
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <EXTI2_3_IRQHandler+0x40>)
 8001414:	701a      	strb	r2, [r3, #0]
	ext_btn_right_value = HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port, BTN_RIGHT_Pin);
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <EXTI2_3_IRQHandler+0x3c>)
 8001418:	2108      	movs	r1, #8
 800141a:	0018      	movs	r0, r3
 800141c:	f000 fbea 	bl	8001bf4 <HAL_GPIO_ReadPin>
 8001420:	0003      	movs	r3, r0
 8001422:	001a      	movs	r2, r3
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <EXTI2_3_IRQHandler+0x44>)
 8001426:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_LEFT_Pin);
 8001428:	2004      	movs	r0, #4
 800142a:	f000 fc1d 	bl	8001c68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_RIGHT_Pin);
 800142e:	2008      	movs	r0, #8
 8001430:	f000 fc1a 	bl	8001c68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001434:	46c0      	nop			; (mov r8, r8)
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	50000400 	.word	0x50000400
 8001440:	2000031e 	.word	0x2000031e
 8001444:	2000031f 	.word	0x2000031f

08001448 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */
	clock_value++;
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <TIM21_IRQHandler+0x1c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	4b04      	ldr	r3, [pc, #16]	; (8001464 <TIM21_IRQHandler+0x1c>)
 8001454:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <TIM21_IRQHandler+0x20>)
 8001458:	0018      	movs	r0, r3
 800145a:	f002 f861 	bl	8003520 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000320 	.word	0x20000320
 8001468:	20000254 	.word	0x20000254

0800146c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	e00a      	b.n	8001494 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800147e:	e000      	b.n	8001482 <_read+0x16>
 8001480:	bf00      	nop
 8001482:	0001      	movs	r1, r0
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	60ba      	str	r2, [r7, #8]
 800148a:	b2ca      	uxtb	r2, r1
 800148c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	3301      	adds	r3, #1
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	429a      	cmp	r2, r3
 800149a:	dbf0      	blt.n	800147e <_read+0x12>
  }

  return len;
 800149c:	687b      	ldr	r3, [r7, #4]
}
 800149e:	0018      	movs	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b006      	add	sp, #24
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	60f8      	str	r0, [r7, #12]
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	e009      	b.n	80014cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	60ba      	str	r2, [r7, #8]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	0018      	movs	r0, r3
 80014c2:	e000      	b.n	80014c6 <_write+0x20>
 80014c4:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3301      	adds	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	dbf1      	blt.n	80014b8 <_write+0x12>
  }
  return len;
 80014d4:	687b      	ldr	r3, [r7, #4]
}
 80014d6:	0018      	movs	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	b006      	add	sp, #24
 80014dc:	bd80      	pop	{r7, pc}

080014de <_close>:

int _close(int file)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014e6:	2301      	movs	r3, #1
 80014e8:	425b      	negs	r3, r3
}
 80014ea:	0018      	movs	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b002      	add	sp, #8
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	2280      	movs	r2, #128	; 0x80
 8001500:	0192      	lsls	r2, r2, #6
 8001502:	605a      	str	r2, [r3, #4]
  return 0;
 8001504:	2300      	movs	r3, #0
}
 8001506:	0018      	movs	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	b002      	add	sp, #8
 800150c:	bd80      	pop	{r7, pc}

0800150e <_isatty>:

int _isatty(int file)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001516:	2301      	movs	r3, #1
}
 8001518:	0018      	movs	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	b002      	add	sp, #8
 800151e:	bd80      	pop	{r7, pc}

08001520 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800152c:	2300      	movs	r3, #0
}
 800152e:	0018      	movs	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	b004      	add	sp, #16
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001540:	4a14      	ldr	r2, [pc, #80]	; (8001594 <_sbrk+0x5c>)
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <_sbrk+0x60>)
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <_sbrk+0x64>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d102      	bne.n	800155a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <_sbrk+0x64>)
 8001556:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <_sbrk+0x68>)
 8001558:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <_sbrk+0x64>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	18d3      	adds	r3, r2, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	429a      	cmp	r2, r3
 8001566:	d207      	bcs.n	8001578 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001568:	f003 fc48 	bl	8004dfc <__errno>
 800156c:	0003      	movs	r3, r0
 800156e:	220c      	movs	r2, #12
 8001570:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001572:	2301      	movs	r3, #1
 8001574:	425b      	negs	r3, r3
 8001576:	e009      	b.n	800158c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <_sbrk+0x64>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800157e:	4b07      	ldr	r3, [pc, #28]	; (800159c <_sbrk+0x64>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	18d2      	adds	r2, r2, r3
 8001586:	4b05      	ldr	r3, [pc, #20]	; (800159c <_sbrk+0x64>)
 8001588:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800158a:	68fb      	ldr	r3, [r7, #12]
}
 800158c:	0018      	movs	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	b006      	add	sp, #24
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20002000 	.word	0x20002000
 8001598:	00000400 	.word	0x00000400
 800159c:	20000324 	.word	0x20000324
 80015a0:	20000478 	.word	0x20000478

080015a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a8:	46c0      	nop			; (mov r8, r8)
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80015b0:	4813      	ldr	r0, [pc, #76]	; (8001600 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80015b2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015b4:	f7ff fff6 	bl	80015a4 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80015b8:	4812      	ldr	r0, [pc, #72]	; (8001604 <LoopForever+0x6>)
    LDR R1, [R0]
 80015ba:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80015bc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80015be:	4a12      	ldr	r2, [pc, #72]	; (8001608 <LoopForever+0xa>)
    CMP R1, R2
 80015c0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80015c2:	d105      	bne.n	80015d0 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80015c4:	4811      	ldr	r0, [pc, #68]	; (800160c <LoopForever+0xe>)
    LDR R1,=0x00000001
 80015c6:	4912      	ldr	r1, [pc, #72]	; (8001610 <LoopForever+0x12>)
    STR R1, [R0]
 80015c8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80015ca:	4812      	ldr	r0, [pc, #72]	; (8001614 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80015cc:	4912      	ldr	r1, [pc, #72]	; (8001618 <LoopForever+0x1a>)
    STR R1, [R0]
 80015ce:	6001      	str	r1, [r0, #0]

080015d0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015d0:	4812      	ldr	r0, [pc, #72]	; (800161c <LoopForever+0x1e>)
  ldr r1, =_edata
 80015d2:	4913      	ldr	r1, [pc, #76]	; (8001620 <LoopForever+0x22>)
  ldr r2, =_sidata
 80015d4:	4a13      	ldr	r2, [pc, #76]	; (8001624 <LoopForever+0x26>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d8:	e002      	b.n	80015e0 <LoopCopyDataInit>

080015da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015de:	3304      	adds	r3, #4

080015e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e4:	d3f9      	bcc.n	80015da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e6:	4a10      	ldr	r2, [pc, #64]	; (8001628 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80015e8:	4c10      	ldr	r4, [pc, #64]	; (800162c <LoopForever+0x2e>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ec:	e001      	b.n	80015f2 <LoopFillZerobss>

080015ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f0:	3204      	adds	r2, #4

080015f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f4:	d3fb      	bcc.n	80015ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015f6:	f003 fc07 	bl	8004e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015fa:	f7ff f877 	bl	80006ec <main>

080015fe <LoopForever>:

LoopForever:
    b LoopForever
 80015fe:	e7fe      	b.n	80015fe <LoopForever>
   ldr   r0, =_estack
 8001600:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8001604:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001608:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 800160c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001610:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001614:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001618:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800161c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001620:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001624:	0800543c 	.word	0x0800543c
  ldr r2, =_sbss
 8001628:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800162c:	20000478 	.word	0x20000478

08001630 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001630:	e7fe      	b.n	8001630 <ADC1_IRQHandler>
	...

08001634 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800163a:	1dfb      	adds	r3, r7, #7
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_Init+0x3c>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <HAL_Init+0x3c>)
 8001646:	2140      	movs	r1, #64	; 0x40
 8001648:	430a      	orrs	r2, r1
 800164a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800164c:	2003      	movs	r0, #3
 800164e:	f000 f811 	bl	8001674 <HAL_InitTick>
 8001652:	1e03      	subs	r3, r0, #0
 8001654:	d003      	beq.n	800165e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001656:	1dfb      	adds	r3, r7, #7
 8001658:	2201      	movs	r2, #1
 800165a:	701a      	strb	r2, [r3, #0]
 800165c:	e001      	b.n	8001662 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800165e:	f7ff fd73 	bl	8001148 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001662:	1dfb      	adds	r3, r7, #7
 8001664:	781b      	ldrb	r3, [r3, #0]
}
 8001666:	0018      	movs	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	b002      	add	sp, #8
 800166c:	bd80      	pop	{r7, pc}
 800166e:	46c0      	nop			; (mov r8, r8)
 8001670:	40022000 	.word	0x40022000

08001674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <HAL_InitTick+0x5c>)
 800167e:	681c      	ldr	r4, [r3, #0]
 8001680:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <HAL_InitTick+0x60>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	0019      	movs	r1, r3
 8001686:	23fa      	movs	r3, #250	; 0xfa
 8001688:	0098      	lsls	r0, r3, #2
 800168a:	f7fe fd3d 	bl	8000108 <__udivsi3>
 800168e:	0003      	movs	r3, r0
 8001690:	0019      	movs	r1, r3
 8001692:	0020      	movs	r0, r4
 8001694:	f7fe fd38 	bl	8000108 <__udivsi3>
 8001698:	0003      	movs	r3, r0
 800169a:	0018      	movs	r0, r3
 800169c:	f000 f92f 	bl	80018fe <HAL_SYSTICK_Config>
 80016a0:	1e03      	subs	r3, r0, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e00f      	b.n	80016c8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d80b      	bhi.n	80016c6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	2301      	movs	r3, #1
 80016b2:	425b      	negs	r3, r3
 80016b4:	2200      	movs	r2, #0
 80016b6:	0018      	movs	r0, r3
 80016b8:	f000 f8fc 	bl	80018b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_InitTick+0x64>)
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e000      	b.n	80016c8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	0018      	movs	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b003      	add	sp, #12
 80016ce:	bd90      	pop	{r4, r7, pc}
 80016d0:	20000118 	.word	0x20000118
 80016d4:	20000120 	.word	0x20000120
 80016d8:	2000011c 	.word	0x2000011c

080016dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_IncTick+0x1c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	001a      	movs	r2, r3
 80016e6:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_IncTick+0x20>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	18d2      	adds	r2, r2, r3
 80016ec:	4b03      	ldr	r3, [pc, #12]	; (80016fc <HAL_IncTick+0x20>)
 80016ee:	601a      	str	r2, [r3, #0]
}
 80016f0:	46c0      	nop			; (mov r8, r8)
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	20000120 	.word	0x20000120
 80016fc:	20000328 	.word	0x20000328

08001700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;
 8001704:	4b02      	ldr	r3, [pc, #8]	; (8001710 <HAL_GetTick+0x10>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	0018      	movs	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	20000328 	.word	0x20000328

08001714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800171c:	f7ff fff0 	bl	8001700 <HAL_GetTick>
 8001720:	0003      	movs	r3, r0
 8001722:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	3301      	adds	r3, #1
 800172c:	d005      	beq.n	800173a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <HAL_Delay+0x44>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	001a      	movs	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	189b      	adds	r3, r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	f7ff ffe0 	bl	8001700 <HAL_GetTick>
 8001740:	0002      	movs	r2, r0
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	429a      	cmp	r2, r3
 800174a:	d8f7      	bhi.n	800173c <HAL_Delay+0x28>
  {
  }
}
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	46bd      	mov	sp, r7
 8001752:	b004      	add	sp, #16
 8001754:	bd80      	pop	{r7, pc}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	20000120 	.word	0x20000120

0800175c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	0002      	movs	r2, r0
 8001764:	1dfb      	adds	r3, r7, #7
 8001766:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001768:	1dfb      	adds	r3, r7, #7
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b7f      	cmp	r3, #127	; 0x7f
 800176e:	d809      	bhi.n	8001784 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001770:	1dfb      	adds	r3, r7, #7
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	001a      	movs	r2, r3
 8001776:	231f      	movs	r3, #31
 8001778:	401a      	ands	r2, r3
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <__NVIC_EnableIRQ+0x30>)
 800177c:	2101      	movs	r1, #1
 800177e:	4091      	lsls	r1, r2
 8001780:	000a      	movs	r2, r1
 8001782:	601a      	str	r2, [r3, #0]
  }
}
 8001784:	46c0      	nop			; (mov r8, r8)
 8001786:	46bd      	mov	sp, r7
 8001788:	b002      	add	sp, #8
 800178a:	bd80      	pop	{r7, pc}
 800178c:	e000e100 	.word	0xe000e100

08001790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001790:	b590      	push	{r4, r7, lr}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	0002      	movs	r2, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	1dfb      	adds	r3, r7, #7
 800179c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800179e:	1dfb      	adds	r3, r7, #7
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b7f      	cmp	r3, #127	; 0x7f
 80017a4:	d828      	bhi.n	80017f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017a6:	4a2f      	ldr	r2, [pc, #188]	; (8001864 <__NVIC_SetPriority+0xd4>)
 80017a8:	1dfb      	adds	r3, r7, #7
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	089b      	lsrs	r3, r3, #2
 80017b0:	33c0      	adds	r3, #192	; 0xc0
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	589b      	ldr	r3, [r3, r2]
 80017b6:	1dfa      	adds	r2, r7, #7
 80017b8:	7812      	ldrb	r2, [r2, #0]
 80017ba:	0011      	movs	r1, r2
 80017bc:	2203      	movs	r2, #3
 80017be:	400a      	ands	r2, r1
 80017c0:	00d2      	lsls	r2, r2, #3
 80017c2:	21ff      	movs	r1, #255	; 0xff
 80017c4:	4091      	lsls	r1, r2
 80017c6:	000a      	movs	r2, r1
 80017c8:	43d2      	mvns	r2, r2
 80017ca:	401a      	ands	r2, r3
 80017cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	019b      	lsls	r3, r3, #6
 80017d2:	22ff      	movs	r2, #255	; 0xff
 80017d4:	401a      	ands	r2, r3
 80017d6:	1dfb      	adds	r3, r7, #7
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	0018      	movs	r0, r3
 80017dc:	2303      	movs	r3, #3
 80017de:	4003      	ands	r3, r0
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017e4:	481f      	ldr	r0, [pc, #124]	; (8001864 <__NVIC_SetPriority+0xd4>)
 80017e6:	1dfb      	adds	r3, r7, #7
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	b25b      	sxtb	r3, r3
 80017ec:	089b      	lsrs	r3, r3, #2
 80017ee:	430a      	orrs	r2, r1
 80017f0:	33c0      	adds	r3, #192	; 0xc0
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80017f6:	e031      	b.n	800185c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017f8:	4a1b      	ldr	r2, [pc, #108]	; (8001868 <__NVIC_SetPriority+0xd8>)
 80017fa:	1dfb      	adds	r3, r7, #7
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	0019      	movs	r1, r3
 8001800:	230f      	movs	r3, #15
 8001802:	400b      	ands	r3, r1
 8001804:	3b08      	subs	r3, #8
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	3306      	adds	r3, #6
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	18d3      	adds	r3, r2, r3
 800180e:	3304      	adds	r3, #4
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	1dfa      	adds	r2, r7, #7
 8001814:	7812      	ldrb	r2, [r2, #0]
 8001816:	0011      	movs	r1, r2
 8001818:	2203      	movs	r2, #3
 800181a:	400a      	ands	r2, r1
 800181c:	00d2      	lsls	r2, r2, #3
 800181e:	21ff      	movs	r1, #255	; 0xff
 8001820:	4091      	lsls	r1, r2
 8001822:	000a      	movs	r2, r1
 8001824:	43d2      	mvns	r2, r2
 8001826:	401a      	ands	r2, r3
 8001828:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	019b      	lsls	r3, r3, #6
 800182e:	22ff      	movs	r2, #255	; 0xff
 8001830:	401a      	ands	r2, r3
 8001832:	1dfb      	adds	r3, r7, #7
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	0018      	movs	r0, r3
 8001838:	2303      	movs	r3, #3
 800183a:	4003      	ands	r3, r0
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001840:	4809      	ldr	r0, [pc, #36]	; (8001868 <__NVIC_SetPriority+0xd8>)
 8001842:	1dfb      	adds	r3, r7, #7
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	001c      	movs	r4, r3
 8001848:	230f      	movs	r3, #15
 800184a:	4023      	ands	r3, r4
 800184c:	3b08      	subs	r3, #8
 800184e:	089b      	lsrs	r3, r3, #2
 8001850:	430a      	orrs	r2, r1
 8001852:	3306      	adds	r3, #6
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	18c3      	adds	r3, r0, r3
 8001858:	3304      	adds	r3, #4
 800185a:	601a      	str	r2, [r3, #0]
}
 800185c:	46c0      	nop			; (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	b003      	add	sp, #12
 8001862:	bd90      	pop	{r4, r7, pc}
 8001864:	e000e100 	.word	0xe000e100
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	1e5a      	subs	r2, r3, #1
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	045b      	lsls	r3, r3, #17
 800187c:	429a      	cmp	r2, r3
 800187e:	d301      	bcc.n	8001884 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001880:	2301      	movs	r3, #1
 8001882:	e010      	b.n	80018a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001884:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <SysTick_Config+0x44>)
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	3a01      	subs	r2, #1
 800188a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800188c:	2301      	movs	r3, #1
 800188e:	425b      	negs	r3, r3
 8001890:	2103      	movs	r1, #3
 8001892:	0018      	movs	r0, r3
 8001894:	f7ff ff7c 	bl	8001790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <SysTick_Config+0x44>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800189e:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <SysTick_Config+0x44>)
 80018a0:	2207      	movs	r2, #7
 80018a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	0018      	movs	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b002      	add	sp, #8
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	e000e010 	.word	0xe000e010

080018b4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	210f      	movs	r1, #15
 80018c0:	187b      	adds	r3, r7, r1
 80018c2:	1c02      	adds	r2, r0, #0
 80018c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	187b      	adds	r3, r7, r1
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b25b      	sxtb	r3, r3
 80018ce:	0011      	movs	r1, r2
 80018d0:	0018      	movs	r0, r3
 80018d2:	f7ff ff5d 	bl	8001790 <__NVIC_SetPriority>
}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	46bd      	mov	sp, r7
 80018da:	b004      	add	sp, #16
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	0002      	movs	r2, r0
 80018e6:	1dfb      	adds	r3, r7, #7
 80018e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ea:	1dfb      	adds	r3, r7, #7
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	b25b      	sxtb	r3, r3
 80018f0:	0018      	movs	r0, r3
 80018f2:	f7ff ff33 	bl	800175c <__NVIC_EnableIRQ>
}
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	46bd      	mov	sp, r7
 80018fa:	b002      	add	sp, #8
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	0018      	movs	r0, r3
 800190a:	f7ff ffaf 	bl	800186c <SysTick_Config>
 800190e:	0003      	movs	r3, r0
}
 8001910:	0018      	movs	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	b002      	add	sp, #8
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800192e:	e149      	b.n	8001bc4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2101      	movs	r1, #1
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	4091      	lsls	r1, r2
 800193a:	000a      	movs	r2, r1
 800193c:	4013      	ands	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d100      	bne.n	8001948 <HAL_GPIO_Init+0x30>
 8001946:	e13a      	b.n	8001bbe <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2203      	movs	r2, #3
 800194e:	4013      	ands	r3, r2
 8001950:	2b01      	cmp	r3, #1
 8001952:	d005      	beq.n	8001960 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2203      	movs	r2, #3
 800195a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800195c:	2b02      	cmp	r3, #2
 800195e:	d130      	bne.n	80019c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	2203      	movs	r2, #3
 800196c:	409a      	lsls	r2, r3
 800196e:	0013      	movs	r3, r2
 8001970:	43da      	mvns	r2, r3
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	409a      	lsls	r2, r3
 8001982:	0013      	movs	r3, r2
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001996:	2201      	movs	r2, #1
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	409a      	lsls	r2, r3
 800199c:	0013      	movs	r3, r2
 800199e:	43da      	mvns	r2, r3
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	091b      	lsrs	r3, r3, #4
 80019ac:	2201      	movs	r2, #1
 80019ae:	401a      	ands	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	409a      	lsls	r2, r3
 80019b4:	0013      	movs	r3, r2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2203      	movs	r2, #3
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d017      	beq.n	80019fe <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	2203      	movs	r2, #3
 80019da:	409a      	lsls	r2, r3
 80019dc:	0013      	movs	r3, r2
 80019de:	43da      	mvns	r2, r3
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	409a      	lsls	r2, r3
 80019f0:	0013      	movs	r3, r2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2203      	movs	r2, #3
 8001a04:	4013      	ands	r3, r2
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d123      	bne.n	8001a52 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	08da      	lsrs	r2, r3, #3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3208      	adds	r2, #8
 8001a12:	0092      	lsls	r2, r2, #2
 8001a14:	58d3      	ldr	r3, [r2, r3]
 8001a16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	2207      	movs	r2, #7
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	220f      	movs	r2, #15
 8001a22:	409a      	lsls	r2, r3
 8001a24:	0013      	movs	r3, r2
 8001a26:	43da      	mvns	r2, r3
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	691a      	ldr	r2, [r3, #16]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	2107      	movs	r1, #7
 8001a36:	400b      	ands	r3, r1
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	0013      	movs	r3, r2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	08da      	lsrs	r2, r3, #3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3208      	adds	r2, #8
 8001a4c:	0092      	lsls	r2, r2, #2
 8001a4e:	6939      	ldr	r1, [r7, #16]
 8001a50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	0013      	movs	r3, r2
 8001a62:	43da      	mvns	r2, r3
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2203      	movs	r2, #3
 8001a70:	401a      	ands	r2, r3
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	409a      	lsls	r2, r3
 8001a78:	0013      	movs	r3, r2
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	23c0      	movs	r3, #192	; 0xc0
 8001a8c:	029b      	lsls	r3, r3, #10
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d100      	bne.n	8001a94 <HAL_GPIO_Init+0x17c>
 8001a92:	e094      	b.n	8001bbe <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a94:	4b51      	ldr	r3, [pc, #324]	; (8001bdc <HAL_GPIO_Init+0x2c4>)
 8001a96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a98:	4b50      	ldr	r3, [pc, #320]	; (8001bdc <HAL_GPIO_Init+0x2c4>)
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aa0:	4a4f      	ldr	r2, [pc, #316]	; (8001be0 <HAL_GPIO_Init+0x2c8>)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	589b      	ldr	r3, [r3, r2]
 8001aac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	220f      	movs	r2, #15
 8001ab8:	409a      	lsls	r2, r3
 8001aba:	0013      	movs	r3, r2
 8001abc:	43da      	mvns	r2, r3
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	23a0      	movs	r3, #160	; 0xa0
 8001ac8:	05db      	lsls	r3, r3, #23
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d013      	beq.n	8001af6 <HAL_GPIO_Init+0x1de>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a44      	ldr	r2, [pc, #272]	; (8001be4 <HAL_GPIO_Init+0x2cc>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d00d      	beq.n	8001af2 <HAL_GPIO_Init+0x1da>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a43      	ldr	r2, [pc, #268]	; (8001be8 <HAL_GPIO_Init+0x2d0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d007      	beq.n	8001aee <HAL_GPIO_Init+0x1d6>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a42      	ldr	r2, [pc, #264]	; (8001bec <HAL_GPIO_Init+0x2d4>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d101      	bne.n	8001aea <HAL_GPIO_Init+0x1d2>
 8001ae6:	2305      	movs	r3, #5
 8001ae8:	e006      	b.n	8001af8 <HAL_GPIO_Init+0x1e0>
 8001aea:	2306      	movs	r3, #6
 8001aec:	e004      	b.n	8001af8 <HAL_GPIO_Init+0x1e0>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e002      	b.n	8001af8 <HAL_GPIO_Init+0x1e0>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <HAL_GPIO_Init+0x1e0>
 8001af6:	2300      	movs	r3, #0
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	2103      	movs	r1, #3
 8001afc:	400a      	ands	r2, r1
 8001afe:	0092      	lsls	r2, r2, #2
 8001b00:	4093      	lsls	r3, r2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b08:	4935      	ldr	r1, [pc, #212]	; (8001be0 <HAL_GPIO_Init+0x2c8>)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	089b      	lsrs	r3, r3, #2
 8001b0e:	3302      	adds	r3, #2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <HAL_GPIO_Init+0x2d8>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	43da      	mvns	r2, r3
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	035b      	lsls	r3, r3, #13
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <HAL_GPIO_Init+0x2d8>)
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b40:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <HAL_GPIO_Init+0x2d8>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	43da      	mvns	r2, r3
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	2380      	movs	r3, #128	; 0x80
 8001b56:	039b      	lsls	r3, r3, #14
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b64:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <HAL_GPIO_Init+0x2d8>)
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001b6a:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <HAL_GPIO_Init+0x2d8>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	43da      	mvns	r2, r3
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	2380      	movs	r3, #128	; 0x80
 8001b80:	029b      	lsls	r3, r3, #10
 8001b82:	4013      	ands	r3, r2
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b8e:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <HAL_GPIO_Init+0x2d8>)
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <HAL_GPIO_Init+0x2d8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	43da      	mvns	r2, r3
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	025b      	lsls	r3, r3, #9
 8001bac:	4013      	ands	r3, r2
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <HAL_GPIO_Init+0x2d8>)
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	40da      	lsrs	r2, r3
 8001bcc:	1e13      	subs	r3, r2, #0
 8001bce:	d000      	beq.n	8001bd2 <HAL_GPIO_Init+0x2ba>
 8001bd0:	e6ae      	b.n	8001930 <HAL_GPIO_Init+0x18>
  }
}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	46c0      	nop			; (mov r8, r8)
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b006      	add	sp, #24
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40010000 	.word	0x40010000
 8001be4:	50000400 	.word	0x50000400
 8001be8:	50000800 	.word	0x50000800
 8001bec:	50001c00 	.word	0x50001c00
 8001bf0:	40010400 	.word	0x40010400

08001bf4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	000a      	movs	r2, r1
 8001bfe:	1cbb      	adds	r3, r7, #2
 8001c00:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	1cba      	adds	r2, r7, #2
 8001c08:	8812      	ldrh	r2, [r2, #0]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d004      	beq.n	8001c18 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001c0e:	230f      	movs	r3, #15
 8001c10:	18fb      	adds	r3, r7, r3
 8001c12:	2201      	movs	r2, #1
 8001c14:	701a      	strb	r2, [r3, #0]
 8001c16:	e003      	b.n	8001c20 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c18:	230f      	movs	r3, #15
 8001c1a:	18fb      	adds	r3, r7, r3
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001c20:	230f      	movs	r3, #15
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	781b      	ldrb	r3, [r3, #0]
}
 8001c26:	0018      	movs	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	b004      	add	sp, #16
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	0008      	movs	r0, r1
 8001c38:	0011      	movs	r1, r2
 8001c3a:	1cbb      	adds	r3, r7, #2
 8001c3c:	1c02      	adds	r2, r0, #0
 8001c3e:	801a      	strh	r2, [r3, #0]
 8001c40:	1c7b      	adds	r3, r7, #1
 8001c42:	1c0a      	adds	r2, r1, #0
 8001c44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c46:	1c7b      	adds	r3, r7, #1
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d004      	beq.n	8001c58 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c4e:	1cbb      	adds	r3, r7, #2
 8001c50:	881a      	ldrh	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001c56:	e003      	b.n	8001c60 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001c58:	1cbb      	adds	r3, r7, #2
 8001c5a:	881a      	ldrh	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c60:	46c0      	nop			; (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b002      	add	sp, #8
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	0002      	movs	r2, r0
 8001c70:	1dbb      	adds	r3, r7, #6
 8001c72:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	1dba      	adds	r2, r7, #6
 8001c7a:	8812      	ldrh	r2, [r2, #0]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d008      	beq.n	8001c92 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001c82:	1dba      	adds	r2, r7, #6
 8001c84:	8812      	ldrh	r2, [r2, #0]
 8001c86:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c88:	1dbb      	adds	r3, r7, #6
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f000 f807 	bl	8001ca0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	46bd      	mov	sp, r7
 8001c96:	b002      	add	sp, #8
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	40010400 	.word	0x40010400

08001ca0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	0002      	movs	r2, r0
 8001ca8:	1dbb      	adds	r3, r7, #6
 8001caa:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001cac:	46c0      	nop			; (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b002      	add	sp, #8
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e082      	b.n	8001dcc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2241      	movs	r2, #65	; 0x41
 8001cca:	5c9b      	ldrb	r3, [r3, r2]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d107      	bne.n	8001ce2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2240      	movs	r2, #64	; 0x40
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f7ff fa47 	bl	8001170 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2241      	movs	r2, #65	; 0x41
 8001ce6:	2124      	movs	r1, #36	; 0x24
 8001ce8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	438a      	bics	r2, r1
 8001cf8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4934      	ldr	r1, [pc, #208]	; (8001dd4 <HAL_I2C_Init+0x120>)
 8001d04:	400a      	ands	r2, r1
 8001d06:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4931      	ldr	r1, [pc, #196]	; (8001dd8 <HAL_I2C_Init+0x124>)
 8001d14:	400a      	ands	r2, r1
 8001d16:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d108      	bne.n	8001d32 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2180      	movs	r1, #128	; 0x80
 8001d2a:	0209      	lsls	r1, r1, #8
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	e007      	b.n	8001d42 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2184      	movs	r1, #132	; 0x84
 8001d3c:	0209      	lsls	r1, r1, #8
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d104      	bne.n	8001d54 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2280      	movs	r2, #128	; 0x80
 8001d50:	0112      	lsls	r2, r2, #4
 8001d52:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	491f      	ldr	r1, [pc, #124]	; (8001ddc <HAL_I2C_Init+0x128>)
 8001d60:	430a      	orrs	r2, r1
 8001d62:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	491a      	ldr	r1, [pc, #104]	; (8001dd8 <HAL_I2C_Init+0x124>)
 8001d70:	400a      	ands	r2, r1
 8001d72:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69d9      	ldr	r1, [r3, #28]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1a      	ldr	r2, [r3, #32]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2101      	movs	r1, #1
 8001daa:	430a      	orrs	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2241      	movs	r2, #65	; 0x41
 8001db8:	2120      	movs	r1, #32
 8001dba:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2242      	movs	r2, #66	; 0x42
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	0018      	movs	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b002      	add	sp, #8
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	f0ffffff 	.word	0xf0ffffff
 8001dd8:	ffff7fff 	.word	0xffff7fff
 8001ddc:	02008000 	.word	0x02008000

08001de0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2241      	movs	r2, #65	; 0x41
 8001dee:	5c9b      	ldrb	r3, [r3, r2]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	d138      	bne.n	8001e68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2240      	movs	r2, #64	; 0x40
 8001dfa:	5c9b      	ldrb	r3, [r3, r2]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e032      	b.n	8001e6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2240      	movs	r2, #64	; 0x40
 8001e08:	2101      	movs	r1, #1
 8001e0a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2241      	movs	r2, #65	; 0x41
 8001e10:	2124      	movs	r1, #36	; 0x24
 8001e12:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2101      	movs	r1, #1
 8001e20:	438a      	bics	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4911      	ldr	r1, [pc, #68]	; (8001e74 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e30:	400a      	ands	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6819      	ldr	r1, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2101      	movs	r1, #1
 8001e50:	430a      	orrs	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2241      	movs	r2, #65	; 0x41
 8001e58:	2120      	movs	r1, #32
 8001e5a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2240      	movs	r2, #64	; 0x40
 8001e60:	2100      	movs	r1, #0
 8001e62:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	e000      	b.n	8001e6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e68:	2302      	movs	r3, #2
  }
}
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b002      	add	sp, #8
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	ffffefff 	.word	0xffffefff

08001e78 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2241      	movs	r2, #65	; 0x41
 8001e86:	5c9b      	ldrb	r3, [r3, r2]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b20      	cmp	r3, #32
 8001e8c:	d139      	bne.n	8001f02 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2240      	movs	r2, #64	; 0x40
 8001e92:	5c9b      	ldrb	r3, [r3, r2]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d101      	bne.n	8001e9c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	e033      	b.n	8001f04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2240      	movs	r2, #64	; 0x40
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2241      	movs	r2, #65	; 0x41
 8001ea8:	2124      	movs	r1, #36	; 0x24
 8001eaa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	438a      	bics	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4a11      	ldr	r2, [pc, #68]	; (8001f0c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2101      	movs	r1, #1
 8001eea:	430a      	orrs	r2, r1
 8001eec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2241      	movs	r2, #65	; 0x41
 8001ef2:	2120      	movs	r1, #32
 8001ef4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2240      	movs	r2, #64	; 0x40
 8001efa:	2100      	movs	r1, #0
 8001efc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	e000      	b.n	8001f04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f02:	2302      	movs	r3, #2
  }
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b004      	add	sp, #16
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	fffff0ff 	.word	0xfffff0ff

08001f10 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b03      	ldr	r3, [pc, #12]	; (8001f28 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001f1a:	2180      	movs	r1, #128	; 0x80
 8001f1c:	0049      	lsls	r1, r1, #1
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	601a      	str	r2, [r3, #0]
}
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40007000 	.word	0x40007000

08001f2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f2c:	b5b0      	push	{r4, r5, r7, lr}
 8001f2e:	b08a      	sub	sp, #40	; 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d102      	bne.n	8001f40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	f000 fb6c 	bl	8002618 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f40:	4bc8      	ldr	r3, [pc, #800]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	220c      	movs	r2, #12
 8001f46:	4013      	ands	r3, r2
 8001f48:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f4a:	4bc6      	ldr	r3, [pc, #792]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	025b      	lsls	r3, r3, #9
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d100      	bne.n	8001f62 <HAL_RCC_OscConfig+0x36>
 8001f60:	e07d      	b.n	800205e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d007      	beq.n	8001f78 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	2b0c      	cmp	r3, #12
 8001f6c:	d112      	bne.n	8001f94 <HAL_RCC_OscConfig+0x68>
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	025b      	lsls	r3, r3, #9
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d10d      	bne.n	8001f94 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f78:	4bba      	ldr	r3, [pc, #744]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	029b      	lsls	r3, r3, #10
 8001f80:	4013      	ands	r3, r2
 8001f82:	d100      	bne.n	8001f86 <HAL_RCC_OscConfig+0x5a>
 8001f84:	e06a      	b.n	800205c <HAL_RCC_OscConfig+0x130>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d166      	bne.n	800205c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	f000 fb42 	bl	8002618 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	2380      	movs	r3, #128	; 0x80
 8001f9a:	025b      	lsls	r3, r3, #9
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d107      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x84>
 8001fa0:	4bb0      	ldr	r3, [pc, #704]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4baf      	ldr	r3, [pc, #700]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 8001fa6:	2180      	movs	r1, #128	; 0x80
 8001fa8:	0249      	lsls	r1, r1, #9
 8001faa:	430a      	orrs	r2, r1
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	e027      	b.n	8002000 <HAL_RCC_OscConfig+0xd4>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	23a0      	movs	r3, #160	; 0xa0
 8001fb6:	02db      	lsls	r3, r3, #11
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d10e      	bne.n	8001fda <HAL_RCC_OscConfig+0xae>
 8001fbc:	4ba9      	ldr	r3, [pc, #676]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4ba8      	ldr	r3, [pc, #672]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 8001fc2:	2180      	movs	r1, #128	; 0x80
 8001fc4:	02c9      	lsls	r1, r1, #11
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	4ba6      	ldr	r3, [pc, #664]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	4ba5      	ldr	r3, [pc, #660]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 8001fd0:	2180      	movs	r1, #128	; 0x80
 8001fd2:	0249      	lsls	r1, r1, #9
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	e012      	b.n	8002000 <HAL_RCC_OscConfig+0xd4>
 8001fda:	4ba2      	ldr	r3, [pc, #648]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	4ba1      	ldr	r3, [pc, #644]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 8001fe0:	49a1      	ldr	r1, [pc, #644]	; (8002268 <HAL_RCC_OscConfig+0x33c>)
 8001fe2:	400a      	ands	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	4b9f      	ldr	r3, [pc, #636]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	025b      	lsls	r3, r3, #9
 8001fee:	4013      	ands	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4b9b      	ldr	r3, [pc, #620]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b9a      	ldr	r3, [pc, #616]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 8001ffa:	499c      	ldr	r1, [pc, #624]	; (800226c <HAL_RCC_OscConfig+0x340>)
 8001ffc:	400a      	ands	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d014      	beq.n	8002032 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7ff fb7a 	bl	8001700 <HAL_GetTick>
 800200c:	0003      	movs	r3, r0
 800200e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002012:	f7ff fb75 	bl	8001700 <HAL_GetTick>
 8002016:	0002      	movs	r2, r0
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b64      	cmp	r3, #100	; 0x64
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e2f9      	b.n	8002618 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002024:	4b8f      	ldr	r3, [pc, #572]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	029b      	lsls	r3, r3, #10
 800202c:	4013      	ands	r3, r2
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0xe6>
 8002030:	e015      	b.n	800205e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7ff fb65 	bl	8001700 <HAL_GetTick>
 8002036:	0003      	movs	r3, r0
 8002038:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800203c:	f7ff fb60 	bl	8001700 <HAL_GetTick>
 8002040:	0002      	movs	r2, r0
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b64      	cmp	r3, #100	; 0x64
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e2e4      	b.n	8002618 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800204e:	4b85      	ldr	r3, [pc, #532]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	029b      	lsls	r3, r3, #10
 8002056:	4013      	ands	r3, r2
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x110>
 800205a:	e000      	b.n	800205e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2202      	movs	r2, #2
 8002064:	4013      	ands	r3, r2
 8002066:	d100      	bne.n	800206a <HAL_RCC_OscConfig+0x13e>
 8002068:	e099      	b.n	800219e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	2220      	movs	r2, #32
 8002074:	4013      	ands	r3, r2
 8002076:	d009      	beq.n	800208c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002078:	4b7a      	ldr	r3, [pc, #488]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b79      	ldr	r3, [pc, #484]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 800207e:	2120      	movs	r1, #32
 8002080:	430a      	orrs	r2, r1
 8002082:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	2220      	movs	r2, #32
 8002088:	4393      	bics	r3, r2
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	2b04      	cmp	r3, #4
 8002090:	d005      	beq.n	800209e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	2b0c      	cmp	r3, #12
 8002096:	d13e      	bne.n	8002116 <HAL_RCC_OscConfig+0x1ea>
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d13b      	bne.n	8002116 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800209e:	4b71      	ldr	r3, [pc, #452]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2204      	movs	r2, #4
 80020a4:	4013      	ands	r3, r2
 80020a6:	d004      	beq.n	80020b2 <HAL_RCC_OscConfig+0x186>
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e2b2      	b.n	8002618 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b2:	4b6c      	ldr	r3, [pc, #432]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4a6e      	ldr	r2, [pc, #440]	; (8002270 <HAL_RCC_OscConfig+0x344>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	0019      	movs	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	021a      	lsls	r2, r3, #8
 80020c2:	4b68      	ldr	r3, [pc, #416]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 80020c4:	430a      	orrs	r2, r1
 80020c6:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80020c8:	4b66      	ldr	r3, [pc, #408]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2209      	movs	r2, #9
 80020ce:	4393      	bics	r3, r2
 80020d0:	0019      	movs	r1, r3
 80020d2:	4b64      	ldr	r3, [pc, #400]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 80020d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d6:	430a      	orrs	r2, r1
 80020d8:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020da:	f000 fbeb 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 80020de:	0001      	movs	r1, r0
 80020e0:	4b60      	ldr	r3, [pc, #384]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	091b      	lsrs	r3, r3, #4
 80020e6:	220f      	movs	r2, #15
 80020e8:	4013      	ands	r3, r2
 80020ea:	4a62      	ldr	r2, [pc, #392]	; (8002274 <HAL_RCC_OscConfig+0x348>)
 80020ec:	5cd3      	ldrb	r3, [r2, r3]
 80020ee:	000a      	movs	r2, r1
 80020f0:	40da      	lsrs	r2, r3
 80020f2:	4b61      	ldr	r3, [pc, #388]	; (8002278 <HAL_RCC_OscConfig+0x34c>)
 80020f4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80020f6:	4b61      	ldr	r3, [pc, #388]	; (800227c <HAL_RCC_OscConfig+0x350>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2513      	movs	r5, #19
 80020fc:	197c      	adds	r4, r7, r5
 80020fe:	0018      	movs	r0, r3
 8002100:	f7ff fab8 	bl	8001674 <HAL_InitTick>
 8002104:	0003      	movs	r3, r0
 8002106:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002108:	197b      	adds	r3, r7, r5
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d046      	beq.n	800219e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002110:	197b      	adds	r3, r7, r5
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	e280      	b.n	8002618 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	2b00      	cmp	r3, #0
 800211a:	d027      	beq.n	800216c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800211c:	4b51      	ldr	r3, [pc, #324]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2209      	movs	r2, #9
 8002122:	4393      	bics	r3, r2
 8002124:	0019      	movs	r1, r3
 8002126:	4b4f      	ldr	r3, [pc, #316]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 8002128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800212a:	430a      	orrs	r2, r1
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7ff fae7 	bl	8001700 <HAL_GetTick>
 8002132:	0003      	movs	r3, r0
 8002134:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002138:	f7ff fae2 	bl	8001700 <HAL_GetTick>
 800213c:	0002      	movs	r2, r0
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e266      	b.n	8002618 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800214a:	4b46      	ldr	r3, [pc, #280]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2204      	movs	r2, #4
 8002150:	4013      	ands	r3, r2
 8002152:	d0f1      	beq.n	8002138 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002154:	4b43      	ldr	r3, [pc, #268]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	4a45      	ldr	r2, [pc, #276]	; (8002270 <HAL_RCC_OscConfig+0x344>)
 800215a:	4013      	ands	r3, r2
 800215c:	0019      	movs	r1, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	021a      	lsls	r2, r3, #8
 8002164:	4b3f      	ldr	r3, [pc, #252]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 8002166:	430a      	orrs	r2, r1
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	e018      	b.n	800219e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216c:	4b3d      	ldr	r3, [pc, #244]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4b3c      	ldr	r3, [pc, #240]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 8002172:	2101      	movs	r1, #1
 8002174:	438a      	bics	r2, r1
 8002176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002178:	f7ff fac2 	bl	8001700 <HAL_GetTick>
 800217c:	0003      	movs	r3, r0
 800217e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002182:	f7ff fabd 	bl	8001700 <HAL_GetTick>
 8002186:	0002      	movs	r2, r0
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e241      	b.n	8002618 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002194:	4b33      	ldr	r3, [pc, #204]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2204      	movs	r2, #4
 800219a:	4013      	ands	r3, r2
 800219c:	d1f1      	bne.n	8002182 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2210      	movs	r2, #16
 80021a4:	4013      	ands	r3, r2
 80021a6:	d100      	bne.n	80021aa <HAL_RCC_OscConfig+0x27e>
 80021a8:	e0a1      	b.n	80022ee <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d140      	bne.n	8002232 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021b0:	4b2c      	ldr	r3, [pc, #176]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4013      	ands	r3, r2
 80021ba:	d005      	beq.n	80021c8 <HAL_RCC_OscConfig+0x29c>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e227      	b.n	8002618 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021c8:	4b26      	ldr	r3, [pc, #152]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4a2c      	ldr	r2, [pc, #176]	; (8002280 <HAL_RCC_OscConfig+0x354>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	0019      	movs	r1, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1a      	ldr	r2, [r3, #32]
 80021d6:	4b23      	ldr	r3, [pc, #140]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 80021d8:	430a      	orrs	r2, r1
 80021da:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021dc:	4b21      	ldr	r3, [pc, #132]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	021b      	lsls	r3, r3, #8
 80021e2:	0a19      	lsrs	r1, r3, #8
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	061a      	lsls	r2, r3, #24
 80021ea:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 80021ec:	430a      	orrs	r2, r1
 80021ee:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	0b5b      	lsrs	r3, r3, #13
 80021f6:	3301      	adds	r3, #1
 80021f8:	2280      	movs	r2, #128	; 0x80
 80021fa:	0212      	lsls	r2, r2, #8
 80021fc:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80021fe:	4b19      	ldr	r3, [pc, #100]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	091b      	lsrs	r3, r3, #4
 8002204:	210f      	movs	r1, #15
 8002206:	400b      	ands	r3, r1
 8002208:	491a      	ldr	r1, [pc, #104]	; (8002274 <HAL_RCC_OscConfig+0x348>)
 800220a:	5ccb      	ldrb	r3, [r1, r3]
 800220c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800220e:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <HAL_RCC_OscConfig+0x34c>)
 8002210:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002212:	4b1a      	ldr	r3, [pc, #104]	; (800227c <HAL_RCC_OscConfig+0x350>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2513      	movs	r5, #19
 8002218:	197c      	adds	r4, r7, r5
 800221a:	0018      	movs	r0, r3
 800221c:	f7ff fa2a 	bl	8001674 <HAL_InitTick>
 8002220:	0003      	movs	r3, r0
 8002222:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002224:	197b      	adds	r3, r7, r5
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d060      	beq.n	80022ee <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 800222c:	197b      	adds	r3, r7, r5
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	e1f2      	b.n	8002618 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d03f      	beq.n	80022ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	4b09      	ldr	r3, [pc, #36]	; (8002264 <HAL_RCC_OscConfig+0x338>)
 8002240:	2180      	movs	r1, #128	; 0x80
 8002242:	0049      	lsls	r1, r1, #1
 8002244:	430a      	orrs	r2, r1
 8002246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002248:	f7ff fa5a 	bl	8001700 <HAL_GetTick>
 800224c:	0003      	movs	r3, r0
 800224e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002250:	e018      	b.n	8002284 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002252:	f7ff fa55 	bl	8001700 <HAL_GetTick>
 8002256:	0002      	movs	r2, r0
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d911      	bls.n	8002284 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e1d9      	b.n	8002618 <HAL_RCC_OscConfig+0x6ec>
 8002264:	40021000 	.word	0x40021000
 8002268:	fffeffff 	.word	0xfffeffff
 800226c:	fffbffff 	.word	0xfffbffff
 8002270:	ffffe0ff 	.word	0xffffe0ff
 8002274:	080053c0 	.word	0x080053c0
 8002278:	20000118 	.word	0x20000118
 800227c:	2000011c 	.word	0x2000011c
 8002280:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002284:	4bc9      	ldr	r3, [pc, #804]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4013      	ands	r3, r2
 800228e:	d0e0      	beq.n	8002252 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002290:	4bc6      	ldr	r3, [pc, #792]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	4ac6      	ldr	r2, [pc, #792]	; (80025b0 <HAL_RCC_OscConfig+0x684>)
 8002296:	4013      	ands	r3, r2
 8002298:	0019      	movs	r1, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1a      	ldr	r2, [r3, #32]
 800229e:	4bc3      	ldr	r3, [pc, #780]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 80022a0:	430a      	orrs	r2, r1
 80022a2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022a4:	4bc1      	ldr	r3, [pc, #772]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	021b      	lsls	r3, r3, #8
 80022aa:	0a19      	lsrs	r1, r3, #8
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	061a      	lsls	r2, r3, #24
 80022b2:	4bbe      	ldr	r3, [pc, #760]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 80022b4:	430a      	orrs	r2, r1
 80022b6:	605a      	str	r2, [r3, #4]
 80022b8:	e019      	b.n	80022ee <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022ba:	4bbc      	ldr	r3, [pc, #752]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	4bbb      	ldr	r3, [pc, #748]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 80022c0:	49bc      	ldr	r1, [pc, #752]	; (80025b4 <HAL_RCC_OscConfig+0x688>)
 80022c2:	400a      	ands	r2, r1
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c6:	f7ff fa1b 	bl	8001700 <HAL_GetTick>
 80022ca:	0003      	movs	r3, r0
 80022cc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022d0:	f7ff fa16 	bl	8001700 <HAL_GetTick>
 80022d4:	0002      	movs	r2, r0
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e19a      	b.n	8002618 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80022e2:	4bb2      	ldr	r3, [pc, #712]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	2380      	movs	r3, #128	; 0x80
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4013      	ands	r3, r2
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2208      	movs	r2, #8
 80022f4:	4013      	ands	r3, r2
 80022f6:	d036      	beq.n	8002366 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d019      	beq.n	8002334 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002300:	4baa      	ldr	r3, [pc, #680]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 8002302:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002304:	4ba9      	ldr	r3, [pc, #676]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 8002306:	2101      	movs	r1, #1
 8002308:	430a      	orrs	r2, r1
 800230a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230c:	f7ff f9f8 	bl	8001700 <HAL_GetTick>
 8002310:	0003      	movs	r3, r0
 8002312:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002316:	f7ff f9f3 	bl	8001700 <HAL_GetTick>
 800231a:	0002      	movs	r2, r0
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e177      	b.n	8002618 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002328:	4ba0      	ldr	r3, [pc, #640]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 800232a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800232c:	2202      	movs	r2, #2
 800232e:	4013      	ands	r3, r2
 8002330:	d0f1      	beq.n	8002316 <HAL_RCC_OscConfig+0x3ea>
 8002332:	e018      	b.n	8002366 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002334:	4b9d      	ldr	r3, [pc, #628]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 8002336:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002338:	4b9c      	ldr	r3, [pc, #624]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 800233a:	2101      	movs	r1, #1
 800233c:	438a      	bics	r2, r1
 800233e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002340:	f7ff f9de 	bl	8001700 <HAL_GetTick>
 8002344:	0003      	movs	r3, r0
 8002346:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800234a:	f7ff f9d9 	bl	8001700 <HAL_GetTick>
 800234e:	0002      	movs	r2, r0
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e15d      	b.n	8002618 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800235c:	4b93      	ldr	r3, [pc, #588]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 800235e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002360:	2202      	movs	r2, #2
 8002362:	4013      	ands	r3, r2
 8002364:	d1f1      	bne.n	800234a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2204      	movs	r2, #4
 800236c:	4013      	ands	r3, r2
 800236e:	d100      	bne.n	8002372 <HAL_RCC_OscConfig+0x446>
 8002370:	e0ae      	b.n	80024d0 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002372:	2023      	movs	r0, #35	; 0x23
 8002374:	183b      	adds	r3, r7, r0
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800237a:	4b8c      	ldr	r3, [pc, #560]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 800237c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800237e:	2380      	movs	r3, #128	; 0x80
 8002380:	055b      	lsls	r3, r3, #21
 8002382:	4013      	ands	r3, r2
 8002384:	d109      	bne.n	800239a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002386:	4b89      	ldr	r3, [pc, #548]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 8002388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800238a:	4b88      	ldr	r3, [pc, #544]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 800238c:	2180      	movs	r1, #128	; 0x80
 800238e:	0549      	lsls	r1, r1, #21
 8002390:	430a      	orrs	r2, r1
 8002392:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002394:	183b      	adds	r3, r7, r0
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239a:	4b87      	ldr	r3, [pc, #540]	; (80025b8 <HAL_RCC_OscConfig+0x68c>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4013      	ands	r3, r2
 80023a4:	d11a      	bne.n	80023dc <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a6:	4b84      	ldr	r3, [pc, #528]	; (80025b8 <HAL_RCC_OscConfig+0x68c>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	4b83      	ldr	r3, [pc, #524]	; (80025b8 <HAL_RCC_OscConfig+0x68c>)
 80023ac:	2180      	movs	r1, #128	; 0x80
 80023ae:	0049      	lsls	r1, r1, #1
 80023b0:	430a      	orrs	r2, r1
 80023b2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b4:	f7ff f9a4 	bl	8001700 <HAL_GetTick>
 80023b8:	0003      	movs	r3, r0
 80023ba:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023be:	f7ff f99f 	bl	8001700 <HAL_GetTick>
 80023c2:	0002      	movs	r2, r0
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b64      	cmp	r3, #100	; 0x64
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e123      	b.n	8002618 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d0:	4b79      	ldr	r3, [pc, #484]	; (80025b8 <HAL_RCC_OscConfig+0x68c>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4013      	ands	r3, r2
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d107      	bne.n	80023f8 <HAL_RCC_OscConfig+0x4cc>
 80023e8:	4b70      	ldr	r3, [pc, #448]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 80023ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023ec:	4b6f      	ldr	r3, [pc, #444]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 80023ee:	2180      	movs	r1, #128	; 0x80
 80023f0:	0049      	lsls	r1, r1, #1
 80023f2:	430a      	orrs	r2, r1
 80023f4:	651a      	str	r2, [r3, #80]	; 0x50
 80023f6:	e031      	b.n	800245c <HAL_RCC_OscConfig+0x530>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10c      	bne.n	800241a <HAL_RCC_OscConfig+0x4ee>
 8002400:	4b6a      	ldr	r3, [pc, #424]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 8002402:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002404:	4b69      	ldr	r3, [pc, #420]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 8002406:	496b      	ldr	r1, [pc, #428]	; (80025b4 <HAL_RCC_OscConfig+0x688>)
 8002408:	400a      	ands	r2, r1
 800240a:	651a      	str	r2, [r3, #80]	; 0x50
 800240c:	4b67      	ldr	r3, [pc, #412]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 800240e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002410:	4b66      	ldr	r3, [pc, #408]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 8002412:	496a      	ldr	r1, [pc, #424]	; (80025bc <HAL_RCC_OscConfig+0x690>)
 8002414:	400a      	ands	r2, r1
 8002416:	651a      	str	r2, [r3, #80]	; 0x50
 8002418:	e020      	b.n	800245c <HAL_RCC_OscConfig+0x530>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	23a0      	movs	r3, #160	; 0xa0
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	429a      	cmp	r2, r3
 8002424:	d10e      	bne.n	8002444 <HAL_RCC_OscConfig+0x518>
 8002426:	4b61      	ldr	r3, [pc, #388]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 8002428:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800242a:	4b60      	ldr	r3, [pc, #384]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 800242c:	2180      	movs	r1, #128	; 0x80
 800242e:	00c9      	lsls	r1, r1, #3
 8002430:	430a      	orrs	r2, r1
 8002432:	651a      	str	r2, [r3, #80]	; 0x50
 8002434:	4b5d      	ldr	r3, [pc, #372]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 8002436:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002438:	4b5c      	ldr	r3, [pc, #368]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 800243a:	2180      	movs	r1, #128	; 0x80
 800243c:	0049      	lsls	r1, r1, #1
 800243e:	430a      	orrs	r2, r1
 8002440:	651a      	str	r2, [r3, #80]	; 0x50
 8002442:	e00b      	b.n	800245c <HAL_RCC_OscConfig+0x530>
 8002444:	4b59      	ldr	r3, [pc, #356]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 8002446:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002448:	4b58      	ldr	r3, [pc, #352]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 800244a:	495a      	ldr	r1, [pc, #360]	; (80025b4 <HAL_RCC_OscConfig+0x688>)
 800244c:	400a      	ands	r2, r1
 800244e:	651a      	str	r2, [r3, #80]	; 0x50
 8002450:	4b56      	ldr	r3, [pc, #344]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 8002452:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002454:	4b55      	ldr	r3, [pc, #340]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 8002456:	4959      	ldr	r1, [pc, #356]	; (80025bc <HAL_RCC_OscConfig+0x690>)
 8002458:	400a      	ands	r2, r1
 800245a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d015      	beq.n	8002490 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002464:	f7ff f94c 	bl	8001700 <HAL_GetTick>
 8002468:	0003      	movs	r3, r0
 800246a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800246c:	e009      	b.n	8002482 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800246e:	f7ff f947 	bl	8001700 <HAL_GetTick>
 8002472:	0002      	movs	r2, r0
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	4a51      	ldr	r2, [pc, #324]	; (80025c0 <HAL_RCC_OscConfig+0x694>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e0ca      	b.n	8002618 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002482:	4b4a      	ldr	r3, [pc, #296]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 8002484:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4013      	ands	r3, r2
 800248c:	d0ef      	beq.n	800246e <HAL_RCC_OscConfig+0x542>
 800248e:	e014      	b.n	80024ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002490:	f7ff f936 	bl	8001700 <HAL_GetTick>
 8002494:	0003      	movs	r3, r0
 8002496:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002498:	e009      	b.n	80024ae <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7ff f931 	bl	8001700 <HAL_GetTick>
 800249e:	0002      	movs	r2, r0
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	4a46      	ldr	r2, [pc, #280]	; (80025c0 <HAL_RCC_OscConfig+0x694>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e0b4      	b.n	8002618 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024ae:	4b3f      	ldr	r3, [pc, #252]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 80024b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4013      	ands	r3, r2
 80024b8:	d1ef      	bne.n	800249a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024ba:	2323      	movs	r3, #35	; 0x23
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d105      	bne.n	80024d0 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c4:	4b39      	ldr	r3, [pc, #228]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 80024c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024c8:	4b38      	ldr	r3, [pc, #224]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 80024ca:	493e      	ldr	r1, [pc, #248]	; (80025c4 <HAL_RCC_OscConfig+0x698>)
 80024cc:	400a      	ands	r2, r1
 80024ce:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d100      	bne.n	80024da <HAL_RCC_OscConfig+0x5ae>
 80024d8:	e09d      	b.n	8002616 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	2b0c      	cmp	r3, #12
 80024de:	d100      	bne.n	80024e2 <HAL_RCC_OscConfig+0x5b6>
 80024e0:	e076      	b.n	80025d0 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d145      	bne.n	8002576 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ea:	4b30      	ldr	r3, [pc, #192]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	4b2f      	ldr	r3, [pc, #188]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 80024f0:	4935      	ldr	r1, [pc, #212]	; (80025c8 <HAL_RCC_OscConfig+0x69c>)
 80024f2:	400a      	ands	r2, r1
 80024f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f6:	f7ff f903 	bl	8001700 <HAL_GetTick>
 80024fa:	0003      	movs	r3, r0
 80024fc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002500:	f7ff f8fe 	bl	8001700 <HAL_GetTick>
 8002504:	0002      	movs	r2, r0
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e082      	b.n	8002618 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002512:	4b26      	ldr	r3, [pc, #152]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	049b      	lsls	r3, r3, #18
 800251a:	4013      	ands	r3, r2
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800251e:	4b23      	ldr	r3, [pc, #140]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	4a2a      	ldr	r2, [pc, #168]	; (80025cc <HAL_RCC_OscConfig+0x6a0>)
 8002524:	4013      	ands	r3, r2
 8002526:	0019      	movs	r1, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	431a      	orrs	r2, r3
 8002538:	4b1c      	ldr	r3, [pc, #112]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 800253a:	430a      	orrs	r2, r1
 800253c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800253e:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 8002544:	2180      	movs	r1, #128	; 0x80
 8002546:	0449      	lsls	r1, r1, #17
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7ff f8d8 	bl	8001700 <HAL_GetTick>
 8002550:	0003      	movs	r3, r0
 8002552:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002556:	f7ff f8d3 	bl	8001700 <HAL_GetTick>
 800255a:	0002      	movs	r2, r0
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e057      	b.n	8002618 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002568:	4b10      	ldr	r3, [pc, #64]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	049b      	lsls	r3, r3, #18
 8002570:	4013      	ands	r3, r2
 8002572:	d0f0      	beq.n	8002556 <HAL_RCC_OscConfig+0x62a>
 8002574:	e04f      	b.n	8002616 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002576:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 800257c:	4912      	ldr	r1, [pc, #72]	; (80025c8 <HAL_RCC_OscConfig+0x69c>)
 800257e:	400a      	ands	r2, r1
 8002580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002582:	f7ff f8bd 	bl	8001700 <HAL_GetTick>
 8002586:	0003      	movs	r3, r0
 8002588:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800258c:	f7ff f8b8 	bl	8001700 <HAL_GetTick>
 8002590:	0002      	movs	r2, r0
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e03c      	b.n	8002618 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800259e:	4b03      	ldr	r3, [pc, #12]	; (80025ac <HAL_RCC_OscConfig+0x680>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	049b      	lsls	r3, r3, #18
 80025a6:	4013      	ands	r3, r2
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0x660>
 80025aa:	e034      	b.n	8002616 <HAL_RCC_OscConfig+0x6ea>
 80025ac:	40021000 	.word	0x40021000
 80025b0:	ffff1fff 	.word	0xffff1fff
 80025b4:	fffffeff 	.word	0xfffffeff
 80025b8:	40007000 	.word	0x40007000
 80025bc:	fffffbff 	.word	0xfffffbff
 80025c0:	00001388 	.word	0x00001388
 80025c4:	efffffff 	.word	0xefffffff
 80025c8:	feffffff 	.word	0xfeffffff
 80025cc:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d101      	bne.n	80025dc <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e01d      	b.n	8002618 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025dc:	4b10      	ldr	r3, [pc, #64]	; (8002620 <HAL_RCC_OscConfig+0x6f4>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	2380      	movs	r3, #128	; 0x80
 80025e6:	025b      	lsls	r3, r3, #9
 80025e8:	401a      	ands	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d10f      	bne.n	8002612 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	23f0      	movs	r3, #240	; 0xf0
 80025f6:	039b      	lsls	r3, r3, #14
 80025f8:	401a      	ands	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d107      	bne.n	8002612 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	23c0      	movs	r3, #192	; 0xc0
 8002606:	041b      	lsls	r3, r3, #16
 8002608:	401a      	ands	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d001      	beq.n	8002616 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	0018      	movs	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	b00a      	add	sp, #40	; 0x28
 800261e:	bdb0      	pop	{r4, r5, r7, pc}
 8002620:	40021000 	.word	0x40021000

08002624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002624:	b5b0      	push	{r4, r5, r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e128      	b.n	800288a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002638:	4b96      	ldr	r3, [pc, #600]	; (8002894 <HAL_RCC_ClockConfig+0x270>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2201      	movs	r2, #1
 800263e:	4013      	ands	r3, r2
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d91e      	bls.n	8002684 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002646:	4b93      	ldr	r3, [pc, #588]	; (8002894 <HAL_RCC_ClockConfig+0x270>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2201      	movs	r2, #1
 800264c:	4393      	bics	r3, r2
 800264e:	0019      	movs	r1, r3
 8002650:	4b90      	ldr	r3, [pc, #576]	; (8002894 <HAL_RCC_ClockConfig+0x270>)
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002658:	f7ff f852 	bl	8001700 <HAL_GetTick>
 800265c:	0003      	movs	r3, r0
 800265e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002660:	e009      	b.n	8002676 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002662:	f7ff f84d 	bl	8001700 <HAL_GetTick>
 8002666:	0002      	movs	r2, r0
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	4a8a      	ldr	r2, [pc, #552]	; (8002898 <HAL_RCC_ClockConfig+0x274>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e109      	b.n	800288a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002676:	4b87      	ldr	r3, [pc, #540]	; (8002894 <HAL_RCC_ClockConfig+0x270>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2201      	movs	r2, #1
 800267c:	4013      	ands	r3, r2
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d1ee      	bne.n	8002662 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2202      	movs	r2, #2
 800268a:	4013      	ands	r3, r2
 800268c:	d009      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800268e:	4b83      	ldr	r3, [pc, #524]	; (800289c <HAL_RCC_ClockConfig+0x278>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	22f0      	movs	r2, #240	; 0xf0
 8002694:	4393      	bics	r3, r2
 8002696:	0019      	movs	r1, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	4b7f      	ldr	r3, [pc, #508]	; (800289c <HAL_RCC_ClockConfig+0x278>)
 800269e:	430a      	orrs	r2, r1
 80026a0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2201      	movs	r2, #1
 80026a8:	4013      	ands	r3, r2
 80026aa:	d100      	bne.n	80026ae <HAL_RCC_ClockConfig+0x8a>
 80026ac:	e089      	b.n	80027c2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d107      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026b6:	4b79      	ldr	r3, [pc, #484]	; (800289c <HAL_RCC_ClockConfig+0x278>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	029b      	lsls	r3, r3, #10
 80026be:	4013      	ands	r3, r2
 80026c0:	d120      	bne.n	8002704 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e0e1      	b.n	800288a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	d107      	bne.n	80026de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026ce:	4b73      	ldr	r3, [pc, #460]	; (800289c <HAL_RCC_ClockConfig+0x278>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	049b      	lsls	r3, r3, #18
 80026d6:	4013      	ands	r3, r2
 80026d8:	d114      	bne.n	8002704 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e0d5      	b.n	800288a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d106      	bne.n	80026f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026e6:	4b6d      	ldr	r3, [pc, #436]	; (800289c <HAL_RCC_ClockConfig+0x278>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2204      	movs	r2, #4
 80026ec:	4013      	ands	r3, r2
 80026ee:	d109      	bne.n	8002704 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0ca      	b.n	800288a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80026f4:	4b69      	ldr	r3, [pc, #420]	; (800289c <HAL_RCC_ClockConfig+0x278>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	2380      	movs	r3, #128	; 0x80
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4013      	ands	r3, r2
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0c2      	b.n	800288a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002704:	4b65      	ldr	r3, [pc, #404]	; (800289c <HAL_RCC_ClockConfig+0x278>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2203      	movs	r2, #3
 800270a:	4393      	bics	r3, r2
 800270c:	0019      	movs	r1, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	4b62      	ldr	r3, [pc, #392]	; (800289c <HAL_RCC_ClockConfig+0x278>)
 8002714:	430a      	orrs	r2, r1
 8002716:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002718:	f7fe fff2 	bl	8001700 <HAL_GetTick>
 800271c:	0003      	movs	r3, r0
 800271e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b02      	cmp	r3, #2
 8002726:	d111      	bne.n	800274c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002728:	e009      	b.n	800273e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800272a:	f7fe ffe9 	bl	8001700 <HAL_GetTick>
 800272e:	0002      	movs	r2, r0
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	4a58      	ldr	r2, [pc, #352]	; (8002898 <HAL_RCC_ClockConfig+0x274>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e0a5      	b.n	800288a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800273e:	4b57      	ldr	r3, [pc, #348]	; (800289c <HAL_RCC_ClockConfig+0x278>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	220c      	movs	r2, #12
 8002744:	4013      	ands	r3, r2
 8002746:	2b08      	cmp	r3, #8
 8002748:	d1ef      	bne.n	800272a <HAL_RCC_ClockConfig+0x106>
 800274a:	e03a      	b.n	80027c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b03      	cmp	r3, #3
 8002752:	d111      	bne.n	8002778 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002754:	e009      	b.n	800276a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002756:	f7fe ffd3 	bl	8001700 <HAL_GetTick>
 800275a:	0002      	movs	r2, r0
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	4a4d      	ldr	r2, [pc, #308]	; (8002898 <HAL_RCC_ClockConfig+0x274>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e08f      	b.n	800288a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800276a:	4b4c      	ldr	r3, [pc, #304]	; (800289c <HAL_RCC_ClockConfig+0x278>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	220c      	movs	r2, #12
 8002770:	4013      	ands	r3, r2
 8002772:	2b0c      	cmp	r3, #12
 8002774:	d1ef      	bne.n	8002756 <HAL_RCC_ClockConfig+0x132>
 8002776:	e024      	b.n	80027c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d11b      	bne.n	80027b8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002780:	e009      	b.n	8002796 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002782:	f7fe ffbd 	bl	8001700 <HAL_GetTick>
 8002786:	0002      	movs	r2, r0
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	4a42      	ldr	r2, [pc, #264]	; (8002898 <HAL_RCC_ClockConfig+0x274>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e079      	b.n	800288a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002796:	4b41      	ldr	r3, [pc, #260]	; (800289c <HAL_RCC_ClockConfig+0x278>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	220c      	movs	r2, #12
 800279c:	4013      	ands	r3, r2
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d1ef      	bne.n	8002782 <HAL_RCC_ClockConfig+0x15e>
 80027a2:	e00e      	b.n	80027c2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a4:	f7fe ffac 	bl	8001700 <HAL_GetTick>
 80027a8:	0002      	movs	r2, r0
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	4a3a      	ldr	r2, [pc, #232]	; (8002898 <HAL_RCC_ClockConfig+0x274>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e068      	b.n	800288a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80027b8:	4b38      	ldr	r3, [pc, #224]	; (800289c <HAL_RCC_ClockConfig+0x278>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	220c      	movs	r2, #12
 80027be:	4013      	ands	r3, r2
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027c2:	4b34      	ldr	r3, [pc, #208]	; (8002894 <HAL_RCC_ClockConfig+0x270>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2201      	movs	r2, #1
 80027c8:	4013      	ands	r3, r2
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d21e      	bcs.n	800280e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d0:	4b30      	ldr	r3, [pc, #192]	; (8002894 <HAL_RCC_ClockConfig+0x270>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2201      	movs	r2, #1
 80027d6:	4393      	bics	r3, r2
 80027d8:	0019      	movs	r1, r3
 80027da:	4b2e      	ldr	r3, [pc, #184]	; (8002894 <HAL_RCC_ClockConfig+0x270>)
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027e2:	f7fe ff8d 	bl	8001700 <HAL_GetTick>
 80027e6:	0003      	movs	r3, r0
 80027e8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ea:	e009      	b.n	8002800 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ec:	f7fe ff88 	bl	8001700 <HAL_GetTick>
 80027f0:	0002      	movs	r2, r0
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	4a28      	ldr	r2, [pc, #160]	; (8002898 <HAL_RCC_ClockConfig+0x274>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e044      	b.n	800288a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002800:	4b24      	ldr	r3, [pc, #144]	; (8002894 <HAL_RCC_ClockConfig+0x270>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2201      	movs	r2, #1
 8002806:	4013      	ands	r3, r2
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d1ee      	bne.n	80027ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2204      	movs	r2, #4
 8002814:	4013      	ands	r3, r2
 8002816:	d009      	beq.n	800282c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002818:	4b20      	ldr	r3, [pc, #128]	; (800289c <HAL_RCC_ClockConfig+0x278>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4a20      	ldr	r2, [pc, #128]	; (80028a0 <HAL_RCC_ClockConfig+0x27c>)
 800281e:	4013      	ands	r3, r2
 8002820:	0019      	movs	r1, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	4b1d      	ldr	r3, [pc, #116]	; (800289c <HAL_RCC_ClockConfig+0x278>)
 8002828:	430a      	orrs	r2, r1
 800282a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2208      	movs	r2, #8
 8002832:	4013      	ands	r3, r2
 8002834:	d00a      	beq.n	800284c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002836:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_RCC_ClockConfig+0x278>)
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	4a1a      	ldr	r2, [pc, #104]	; (80028a4 <HAL_RCC_ClockConfig+0x280>)
 800283c:	4013      	ands	r3, r2
 800283e:	0019      	movs	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	00da      	lsls	r2, r3, #3
 8002846:	4b15      	ldr	r3, [pc, #84]	; (800289c <HAL_RCC_ClockConfig+0x278>)
 8002848:	430a      	orrs	r2, r1
 800284a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800284c:	f000 f832 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 8002850:	0001      	movs	r1, r0
 8002852:	4b12      	ldr	r3, [pc, #72]	; (800289c <HAL_RCC_ClockConfig+0x278>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	091b      	lsrs	r3, r3, #4
 8002858:	220f      	movs	r2, #15
 800285a:	4013      	ands	r3, r2
 800285c:	4a12      	ldr	r2, [pc, #72]	; (80028a8 <HAL_RCC_ClockConfig+0x284>)
 800285e:	5cd3      	ldrb	r3, [r2, r3]
 8002860:	000a      	movs	r2, r1
 8002862:	40da      	lsrs	r2, r3
 8002864:	4b11      	ldr	r3, [pc, #68]	; (80028ac <HAL_RCC_ClockConfig+0x288>)
 8002866:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002868:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <HAL_RCC_ClockConfig+0x28c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	250b      	movs	r5, #11
 800286e:	197c      	adds	r4, r7, r5
 8002870:	0018      	movs	r0, r3
 8002872:	f7fe feff 	bl	8001674 <HAL_InitTick>
 8002876:	0003      	movs	r3, r0
 8002878:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800287a:	197b      	adds	r3, r7, r5
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d002      	beq.n	8002888 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002882:	197b      	adds	r3, r7, r5
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	e000      	b.n	800288a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	0018      	movs	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	b004      	add	sp, #16
 8002890:	bdb0      	pop	{r4, r5, r7, pc}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	40022000 	.word	0x40022000
 8002898:	00001388 	.word	0x00001388
 800289c:	40021000 	.word	0x40021000
 80028a0:	fffff8ff 	.word	0xfffff8ff
 80028a4:	ffffc7ff 	.word	0xffffc7ff
 80028a8:	080053c0 	.word	0x080053c0
 80028ac:	20000118 	.word	0x20000118
 80028b0:	2000011c 	.word	0x2000011c

080028b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b4:	b5b0      	push	{r4, r5, r7, lr}
 80028b6:	b08e      	sub	sp, #56	; 0x38
 80028b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80028ba:	4b4c      	ldr	r3, [pc, #304]	; (80029ec <HAL_RCC_GetSysClockFreq+0x138>)
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028c2:	230c      	movs	r3, #12
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b0c      	cmp	r3, #12
 80028c8:	d014      	beq.n	80028f4 <HAL_RCC_GetSysClockFreq+0x40>
 80028ca:	d900      	bls.n	80028ce <HAL_RCC_GetSysClockFreq+0x1a>
 80028cc:	e07b      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0x112>
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d002      	beq.n	80028d8 <HAL_RCC_GetSysClockFreq+0x24>
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d00b      	beq.n	80028ee <HAL_RCC_GetSysClockFreq+0x3a>
 80028d6:	e076      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80028d8:	4b44      	ldr	r3, [pc, #272]	; (80029ec <HAL_RCC_GetSysClockFreq+0x138>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2210      	movs	r2, #16
 80028de:	4013      	ands	r3, r2
 80028e0:	d002      	beq.n	80028e8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80028e2:	4b43      	ldr	r3, [pc, #268]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80028e4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80028e6:	e07c      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80028e8:	4b42      	ldr	r3, [pc, #264]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x140>)
 80028ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028ec:	e079      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028ee:	4b42      	ldr	r3, [pc, #264]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x144>)
 80028f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028f2:	e076      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80028f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f6:	0c9a      	lsrs	r2, r3, #18
 80028f8:	230f      	movs	r3, #15
 80028fa:	401a      	ands	r2, r3
 80028fc:	4b3f      	ldr	r3, [pc, #252]	; (80029fc <HAL_RCC_GetSysClockFreq+0x148>)
 80028fe:	5c9b      	ldrb	r3, [r3, r2]
 8002900:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002904:	0d9a      	lsrs	r2, r3, #22
 8002906:	2303      	movs	r3, #3
 8002908:	4013      	ands	r3, r2
 800290a:	3301      	adds	r3, #1
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800290e:	4b37      	ldr	r3, [pc, #220]	; (80029ec <HAL_RCC_GetSysClockFreq+0x138>)
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	2380      	movs	r3, #128	; 0x80
 8002914:	025b      	lsls	r3, r3, #9
 8002916:	4013      	ands	r3, r2
 8002918:	d01a      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800291a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	2300      	movs	r3, #0
 8002920:	61fb      	str	r3, [r7, #28]
 8002922:	4a35      	ldr	r2, [pc, #212]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x144>)
 8002924:	2300      	movs	r3, #0
 8002926:	69b8      	ldr	r0, [r7, #24]
 8002928:	69f9      	ldr	r1, [r7, #28]
 800292a:	f7fd fc99 	bl	8000260 <__aeabi_lmul>
 800292e:	0002      	movs	r2, r0
 8002930:	000b      	movs	r3, r1
 8002932:	0010      	movs	r0, r2
 8002934:	0019      	movs	r1, r3
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f7fd fc6d 	bl	8000220 <__aeabi_uldivmod>
 8002946:	0002      	movs	r2, r0
 8002948:	000b      	movs	r3, r1
 800294a:	0013      	movs	r3, r2
 800294c:	637b      	str	r3, [r7, #52]	; 0x34
 800294e:	e037      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002950:	4b26      	ldr	r3, [pc, #152]	; (80029ec <HAL_RCC_GetSysClockFreq+0x138>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2210      	movs	r2, #16
 8002956:	4013      	ands	r3, r2
 8002958:	d01a      	beq.n	8002990 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	4a23      	ldr	r2, [pc, #140]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002964:	2300      	movs	r3, #0
 8002966:	68b8      	ldr	r0, [r7, #8]
 8002968:	68f9      	ldr	r1, [r7, #12]
 800296a:	f7fd fc79 	bl	8000260 <__aeabi_lmul>
 800296e:	0002      	movs	r2, r0
 8002970:	000b      	movs	r3, r1
 8002972:	0010      	movs	r0, r2
 8002974:	0019      	movs	r1, r3
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	603b      	str	r3, [r7, #0]
 800297a:	2300      	movs	r3, #0
 800297c:	607b      	str	r3, [r7, #4]
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f7fd fc4d 	bl	8000220 <__aeabi_uldivmod>
 8002986:	0002      	movs	r2, r0
 8002988:	000b      	movs	r3, r1
 800298a:	0013      	movs	r3, r2
 800298c:	637b      	str	r3, [r7, #52]	; 0x34
 800298e:	e017      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002992:	0018      	movs	r0, r3
 8002994:	2300      	movs	r3, #0
 8002996:	0019      	movs	r1, r3
 8002998:	4a16      	ldr	r2, [pc, #88]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x140>)
 800299a:	2300      	movs	r3, #0
 800299c:	f7fd fc60 	bl	8000260 <__aeabi_lmul>
 80029a0:	0002      	movs	r2, r0
 80029a2:	000b      	movs	r3, r1
 80029a4:	0010      	movs	r0, r2
 80029a6:	0019      	movs	r1, r3
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	001c      	movs	r4, r3
 80029ac:	2300      	movs	r3, #0
 80029ae:	001d      	movs	r5, r3
 80029b0:	0022      	movs	r2, r4
 80029b2:	002b      	movs	r3, r5
 80029b4:	f7fd fc34 	bl	8000220 <__aeabi_uldivmod>
 80029b8:	0002      	movs	r2, r0
 80029ba:	000b      	movs	r3, r1
 80029bc:	0013      	movs	r3, r2
 80029be:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80029c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029c4:	e00d      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <HAL_RCC_GetSysClockFreq+0x138>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	0b5b      	lsrs	r3, r3, #13
 80029cc:	2207      	movs	r2, #7
 80029ce:	4013      	ands	r3, r2
 80029d0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	3301      	adds	r3, #1
 80029d6:	2280      	movs	r2, #128	; 0x80
 80029d8:	0212      	lsls	r2, r2, #8
 80029da:	409a      	lsls	r2, r3
 80029dc:	0013      	movs	r3, r2
 80029de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029e0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80029e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80029e4:	0018      	movs	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b00e      	add	sp, #56	; 0x38
 80029ea:	bdb0      	pop	{r4, r5, r7, pc}
 80029ec:	40021000 	.word	0x40021000
 80029f0:	003d0900 	.word	0x003d0900
 80029f4:	00f42400 	.word	0x00f42400
 80029f8:	007a1200 	.word	0x007a1200
 80029fc:	080053d8 	.word	0x080053d8

08002a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a04:	4b02      	ldr	r3, [pc, #8]	; (8002a10 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	0018      	movs	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	20000118 	.word	0x20000118

08002a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a18:	f7ff fff2 	bl	8002a00 <HAL_RCC_GetHCLKFreq>
 8002a1c:	0001      	movs	r1, r0
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	0a1b      	lsrs	r3, r3, #8
 8002a24:	2207      	movs	r2, #7
 8002a26:	4013      	ands	r3, r2
 8002a28:	4a04      	ldr	r2, [pc, #16]	; (8002a3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a2a:	5cd3      	ldrb	r3, [r2, r3]
 8002a2c:	40d9      	lsrs	r1, r3
 8002a2e:	000b      	movs	r3, r1
}
 8002a30:	0018      	movs	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	080053d0 	.word	0x080053d0

08002a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a44:	f7ff ffdc 	bl	8002a00 <HAL_RCC_GetHCLKFreq>
 8002a48:	0001      	movs	r1, r0
 8002a4a:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	0adb      	lsrs	r3, r3, #11
 8002a50:	2207      	movs	r2, #7
 8002a52:	4013      	ands	r3, r2
 8002a54:	4a04      	ldr	r2, [pc, #16]	; (8002a68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a56:	5cd3      	ldrb	r3, [r2, r3]
 8002a58:	40d9      	lsrs	r1, r3
 8002a5a:	000b      	movs	r3, r1
}
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	40021000 	.word	0x40021000
 8002a68:	080053d0 	.word	0x080053d0

08002a6c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002a74:	2017      	movs	r0, #23
 8002a76:	183b      	adds	r3, r7, r0
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2220      	movs	r2, #32
 8002a82:	4013      	ands	r3, r2
 8002a84:	d100      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002a86:	e0c7      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a88:	4b84      	ldr	r3, [pc, #528]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a8c:	2380      	movs	r3, #128	; 0x80
 8002a8e:	055b      	lsls	r3, r3, #21
 8002a90:	4013      	ands	r3, r2
 8002a92:	d109      	bne.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a94:	4b81      	ldr	r3, [pc, #516]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a98:	4b80      	ldr	r3, [pc, #512]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a9a:	2180      	movs	r1, #128	; 0x80
 8002a9c:	0549      	lsls	r1, r1, #21
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002aa2:	183b      	adds	r3, r7, r0
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa8:	4b7d      	ldr	r3, [pc, #500]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d11a      	bne.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ab4:	4b7a      	ldr	r3, [pc, #488]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4b79      	ldr	r3, [pc, #484]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002aba:	2180      	movs	r1, #128	; 0x80
 8002abc:	0049      	lsls	r1, r1, #1
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac2:	f7fe fe1d 	bl	8001700 <HAL_GetTick>
 8002ac6:	0003      	movs	r3, r0
 8002ac8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aca:	e008      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002acc:	f7fe fe18 	bl	8001700 <HAL_GetTick>
 8002ad0:	0002      	movs	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b64      	cmp	r3, #100	; 0x64
 8002ad8:	d901      	bls.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e0d9      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ade:	4b70      	ldr	r3, [pc, #448]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	2380      	movs	r3, #128	; 0x80
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002aea:	4b6c      	ldr	r3, [pc, #432]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	23c0      	movs	r3, #192	; 0xc0
 8002af0:	039b      	lsls	r3, r3, #14
 8002af2:	4013      	ands	r3, r2
 8002af4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	23c0      	movs	r3, #192	; 0xc0
 8002afc:	039b      	lsls	r3, r3, #14
 8002afe:	4013      	ands	r3, r2
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d013      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	23c0      	movs	r3, #192	; 0xc0
 8002b0c:	029b      	lsls	r3, r3, #10
 8002b0e:	401a      	ands	r2, r3
 8002b10:	23c0      	movs	r3, #192	; 0xc0
 8002b12:	029b      	lsls	r3, r3, #10
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d10a      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002b18:	4b60      	ldr	r3, [pc, #384]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	029b      	lsls	r3, r3, #10
 8002b20:	401a      	ands	r2, r3
 8002b22:	2380      	movs	r3, #128	; 0x80
 8002b24:	029b      	lsls	r3, r3, #10
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d101      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e0b1      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002b2e:	4b5b      	ldr	r3, [pc, #364]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b32:	23c0      	movs	r3, #192	; 0xc0
 8002b34:	029b      	lsls	r3, r3, #10
 8002b36:	4013      	ands	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d03b      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	23c0      	movs	r3, #192	; 0xc0
 8002b46:	029b      	lsls	r3, r3, #10
 8002b48:	4013      	ands	r3, r2
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d033      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2220      	movs	r2, #32
 8002b56:	4013      	ands	r3, r2
 8002b58:	d02e      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002b5a:	4b50      	ldr	r3, [pc, #320]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b5e:	4a51      	ldr	r2, [pc, #324]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b64:	4b4d      	ldr	r3, [pc, #308]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b68:	4b4c      	ldr	r3, [pc, #304]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b6a:	2180      	movs	r1, #128	; 0x80
 8002b6c:	0309      	lsls	r1, r1, #12
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b72:	4b4a      	ldr	r3, [pc, #296]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b76:	4b49      	ldr	r3, [pc, #292]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b78:	494b      	ldr	r1, [pc, #300]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b7a:	400a      	ands	r2, r1
 8002b7c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002b7e:	4b47      	ldr	r3, [pc, #284]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	2380      	movs	r3, #128	; 0x80
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d014      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8e:	f7fe fdb7 	bl	8001700 <HAL_GetTick>
 8002b92:	0003      	movs	r3, r0
 8002b94:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b96:	e009      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b98:	f7fe fdb2 	bl	8001700 <HAL_GetTick>
 8002b9c:	0002      	movs	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	4a42      	ldr	r2, [pc, #264]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e072      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bac:	4b3b      	ldr	r3, [pc, #236]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bb0:	2380      	movs	r3, #128	; 0x80
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	d0ef      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d01f      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	23c0      	movs	r3, #192	; 0xc0
 8002bc8:	029b      	lsls	r3, r3, #10
 8002bca:	401a      	ands	r2, r3
 8002bcc:	23c0      	movs	r3, #192	; 0xc0
 8002bce:	029b      	lsls	r3, r3, #10
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d10c      	bne.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002bd4:	4b31      	ldr	r3, [pc, #196]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a35      	ldr	r2, [pc, #212]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	0019      	movs	r1, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	23c0      	movs	r3, #192	; 0xc0
 8002be4:	039b      	lsls	r3, r3, #14
 8002be6:	401a      	ands	r2, r3
 8002be8:	4b2c      	ldr	r3, [pc, #176]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bea:	430a      	orrs	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	4b2b      	ldr	r3, [pc, #172]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bf0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	23c0      	movs	r3, #192	; 0xc0
 8002bf8:	029b      	lsls	r3, r3, #10
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	4b27      	ldr	r3, [pc, #156]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c02:	2317      	movs	r3, #23
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d105      	bne.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0c:	4b23      	ldr	r3, [pc, #140]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c10:	4b22      	ldr	r3, [pc, #136]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c12:	4928      	ldr	r1, [pc, #160]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c14:	400a      	ands	r2, r1
 8002c16:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d009      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c22:	4b1e      	ldr	r3, [pc, #120]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c26:	220c      	movs	r2, #12
 8002c28:	4393      	bics	r3, r2
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c32:	430a      	orrs	r2, r1
 8002c34:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2204      	movs	r2, #4
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d009      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c40:	4b16      	ldr	r3, [pc, #88]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c44:	4a1c      	ldr	r2, [pc, #112]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	0019      	movs	r1, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c50:	430a      	orrs	r2, r1
 8002c52:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2208      	movs	r2, #8
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d009      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c5e:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c62:	4a16      	ldr	r2, [pc, #88]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	0019      	movs	r1, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2280      	movs	r2, #128	; 0x80
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d009      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002c7c:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c80:	4a0f      	ldr	r2, [pc, #60]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	0019      	movs	r1, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695a      	ldr	r2, [r3, #20]
 8002c8a:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	0018      	movs	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b006      	add	sp, #24
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40007000 	.word	0x40007000
 8002ca4:	fffcffff 	.word	0xfffcffff
 8002ca8:	fff7ffff 	.word	0xfff7ffff
 8002cac:	00001388 	.word	0x00001388
 8002cb0:	ffcfffff 	.word	0xffcfffff
 8002cb4:	efffffff 	.word	0xefffffff
 8002cb8:	fffff3ff 	.word	0xfffff3ff
 8002cbc:	ffffcfff 	.word	0xffffcfff
 8002cc0:	fff3ffff 	.word	0xfff3ffff

08002cc4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002cc4:	b5b0      	push	{r4, r5, r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ccc:	230f      	movs	r3, #15
 8002cce:	18fb      	adds	r3, r7, r3
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e088      	b.n	8002df0 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2221      	movs	r2, #33	; 0x21
 8002ce2:	5c9b      	ldrb	r3, [r3, r2]
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d107      	bne.n	8002cfa <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2220      	movs	r2, #32
 8002cee:	2100      	movs	r1, #0
 8002cf0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f7fe fa81 	bl	80011fc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2221      	movs	r2, #33	; 0x21
 8002cfe:	2102      	movs	r1, #2
 8002d00:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2210      	movs	r2, #16
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b10      	cmp	r3, #16
 8002d0e:	d05f      	beq.n	8002dd0 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	22ca      	movs	r2, #202	; 0xca
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2253      	movs	r2, #83	; 0x53
 8002d1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002d20:	250f      	movs	r5, #15
 8002d22:	197c      	adds	r4, r7, r5
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	0018      	movs	r0, r3
 8002d28:	f000 fa7c 	bl	8003224 <RTC_EnterInitMode>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002d30:	0028      	movs	r0, r5
 8002d32:	183b      	adds	r3, r7, r0
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d12c      	bne.n	8002d94 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	492c      	ldr	r1, [pc, #176]	; (8002df8 <HAL_RTC_Init+0x134>)
 8002d46:	400a      	ands	r2, r1
 8002d48:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6899      	ldr	r1, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	68d2      	ldr	r2, [r2, #12]
 8002d70:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6919      	ldr	r1, [r3, #16]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	041a      	lsls	r2, r3, #16
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002d86:	183c      	adds	r4, r7, r0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f000 fa8e 	bl	80032ac <RTC_ExitInitMode>
 8002d90:	0003      	movs	r3, r0
 8002d92:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002d94:	230f      	movs	r3, #15
 8002d96:	18fb      	adds	r3, r7, r3
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d113      	bne.n	8002dc6 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2103      	movs	r1, #3
 8002daa:	438a      	bics	r2, r1
 8002dac:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69da      	ldr	r2, [r3, #28]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	22ff      	movs	r2, #255	; 0xff
 8002dcc:	625a      	str	r2, [r3, #36]	; 0x24
 8002dce:	e003      	b.n	8002dd8 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002dd0:	230f      	movs	r3, #15
 8002dd2:	18fb      	adds	r3, r7, r3
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002dd8:	230f      	movs	r3, #15
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d103      	bne.n	8002dea <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2221      	movs	r2, #33	; 0x21
 8002de6:	2101      	movs	r1, #1
 8002de8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002dea:	230f      	movs	r3, #15
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	781b      	ldrb	r3, [r3, #0]
}
 8002df0:	0018      	movs	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b004      	add	sp, #16
 8002df6:	bdb0      	pop	{r4, r5, r7, pc}
 8002df8:	ff8fffbf 	.word	0xff8fffbf

08002dfc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002dfc:	b5b0      	push	{r4, r5, r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	5c9b      	ldrb	r3, [r3, r2]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_RTC_SetTime+0x1e>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e092      	b.n	8002f40 <HAL_RTC_SetTime+0x144>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	2101      	movs	r1, #1
 8002e20:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2221      	movs	r2, #33	; 0x21
 8002e26:	2102      	movs	r1, #2
 8002e28:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d125      	bne.n	8002e7c <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2240      	movs	r2, #64	; 0x40
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d102      	bne.n	8002e42 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	0018      	movs	r0, r3
 8002e48:	f000 fa5a 	bl	8003300 <RTC_ByteToBcd2>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	785b      	ldrb	r3, [r3, #1]
 8002e54:	0018      	movs	r0, r3
 8002e56:	f000 fa53 	bl	8003300 <RTC_ByteToBcd2>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e5e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	789b      	ldrb	r3, [r3, #2]
 8002e64:	0018      	movs	r0, r3
 8002e66:	f000 fa4b 	bl	8003300 <RTC_ByteToBcd2>
 8002e6a:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e6c:	0022      	movs	r2, r4
 8002e6e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	78db      	ldrb	r3, [r3, #3]
 8002e74:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e76:	4313      	orrs	r3, r2
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	e017      	b.n	8002eac <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2240      	movs	r2, #64	; 0x40
 8002e84:	4013      	ands	r3, r2
 8002e86:	d102      	bne.n	8002e8e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	785b      	ldrb	r3, [r3, #1]
 8002e98:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002e9a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002ea0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	78db      	ldrb	r3, [r3, #3]
 8002ea6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	22ca      	movs	r2, #202	; 0xca
 8002eb2:	625a      	str	r2, [r3, #36]	; 0x24
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2253      	movs	r2, #83	; 0x53
 8002eba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002ebc:	2513      	movs	r5, #19
 8002ebe:	197c      	adds	r4, r7, r5
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f000 f9ae 	bl	8003224 <RTC_EnterInitMode>
 8002ec8:	0003      	movs	r3, r0
 8002eca:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002ecc:	0028      	movs	r0, r5
 8002ece:	183b      	adds	r3, r7, r0
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d120      	bne.n	8002f18 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	491a      	ldr	r1, [pc, #104]	; (8002f48 <HAL_RTC_SetTime+0x14c>)
 8002ede:	400a      	ands	r2, r1
 8002ee0:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4917      	ldr	r1, [pc, #92]	; (8002f4c <HAL_RTC_SetTime+0x150>)
 8002eee:	400a      	ands	r2, r1
 8002ef0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6899      	ldr	r1, [r3, #8]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	68da      	ldr	r2, [r3, #12]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	431a      	orrs	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002f0a:	183c      	adds	r4, r7, r0
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f000 f9cc 	bl	80032ac <RTC_ExitInitMode>
 8002f14:	0003      	movs	r3, r0
 8002f16:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002f18:	2313      	movs	r3, #19
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d103      	bne.n	8002f2a <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2221      	movs	r2, #33	; 0x21
 8002f26:	2101      	movs	r1, #1
 8002f28:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	22ff      	movs	r2, #255	; 0xff
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2220      	movs	r2, #32
 8002f36:	2100      	movs	r1, #0
 8002f38:	5499      	strb	r1, [r3, r2]

  return status;
 8002f3a:	2313      	movs	r3, #19
 8002f3c:	18fb      	adds	r3, r7, r3
 8002f3e:	781b      	ldrb	r3, [r3, #0]
}
 8002f40:	0018      	movs	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b006      	add	sp, #24
 8002f46:	bdb0      	pop	{r4, r5, r7, pc}
 8002f48:	007f7f7f 	.word	0x007f7f7f
 8002f4c:	fffbffff 	.word	0xfffbffff

08002f50 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	045b      	lsls	r3, r3, #17
 8002f72:	0c5a      	lsrs	r2, r3, #17
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a22      	ldr	r2, [pc, #136]	; (8003008 <HAL_RTC_GetTime+0xb8>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	0c1b      	lsrs	r3, r3, #16
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	223f      	movs	r2, #63	; 0x3f
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	0a1b      	lsrs	r3, r3, #8
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	227f      	movs	r2, #127	; 0x7f
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	227f      	movs	r2, #127	; 0x7f
 8002faa:	4013      	ands	r3, r2
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	0d9b      	lsrs	r3, r3, #22
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2201      	movs	r2, #1
 8002fba:	4013      	ands	r3, r2
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d11a      	bne.n	8002ffe <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f000 f9b8 	bl	8003342 <RTC_Bcd2ToByte>
 8002fd2:	0003      	movs	r3, r0
 8002fd4:	001a      	movs	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	785b      	ldrb	r3, [r3, #1]
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f000 f9af 	bl	8003342 <RTC_Bcd2ToByte>
 8002fe4:	0003      	movs	r3, r0
 8002fe6:	001a      	movs	r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	789b      	ldrb	r3, [r3, #2]
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f000 f9a6 	bl	8003342 <RTC_Bcd2ToByte>
 8002ff6:	0003      	movs	r3, r0
 8002ff8:	001a      	movs	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	0018      	movs	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	b006      	add	sp, #24
 8003006:	bd80      	pop	{r7, pc}
 8003008:	007f7f7f 	.word	0x007f7f7f

0800300c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800300c:	b5b0      	push	{r4, r5, r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2220      	movs	r2, #32
 8003020:	5c9b      	ldrb	r3, [r3, r2]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_RTC_SetDate+0x1e>
 8003026:	2302      	movs	r3, #2
 8003028:	e07e      	b.n	8003128 <HAL_RTC_SetDate+0x11c>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2220      	movs	r2, #32
 800302e:	2101      	movs	r1, #1
 8003030:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2221      	movs	r2, #33	; 0x21
 8003036:	2102      	movs	r1, #2
 8003038:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10e      	bne.n	800305e <HAL_RTC_SetDate+0x52>
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	785b      	ldrb	r3, [r3, #1]
 8003044:	001a      	movs	r2, r3
 8003046:	2310      	movs	r3, #16
 8003048:	4013      	ands	r3, r2
 800304a:	d008      	beq.n	800305e <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	785b      	ldrb	r3, [r3, #1]
 8003050:	2210      	movs	r2, #16
 8003052:	4393      	bics	r3, r2
 8003054:	b2db      	uxtb	r3, r3
 8003056:	330a      	adds	r3, #10
 8003058:	b2da      	uxtb	r2, r3
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d11c      	bne.n	800309e <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	78db      	ldrb	r3, [r3, #3]
 8003068:	0018      	movs	r0, r3
 800306a:	f000 f949 	bl	8003300 <RTC_ByteToBcd2>
 800306e:	0003      	movs	r3, r0
 8003070:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	785b      	ldrb	r3, [r3, #1]
 8003076:	0018      	movs	r0, r3
 8003078:	f000 f942 	bl	8003300 <RTC_ByteToBcd2>
 800307c:	0003      	movs	r3, r0
 800307e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003080:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	789b      	ldrb	r3, [r3, #2]
 8003086:	0018      	movs	r0, r3
 8003088:	f000 f93a 	bl	8003300 <RTC_ByteToBcd2>
 800308c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800308e:	0022      	movs	r2, r4
 8003090:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003098:	4313      	orrs	r3, r2
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	e00e      	b.n	80030bc <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	78db      	ldrb	r3, [r3, #3]
 80030a2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	785b      	ldrb	r3, [r3, #1]
 80030a8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80030aa:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80030b0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80030b8:	4313      	orrs	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	22ca      	movs	r2, #202	; 0xca
 80030c2:	625a      	str	r2, [r3, #36]	; 0x24
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2253      	movs	r2, #83	; 0x53
 80030ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80030cc:	2513      	movs	r5, #19
 80030ce:	197c      	adds	r4, r7, r5
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	0018      	movs	r0, r3
 80030d4:	f000 f8a6 	bl	8003224 <RTC_EnterInitMode>
 80030d8:	0003      	movs	r3, r0
 80030da:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80030dc:	0028      	movs	r0, r5
 80030de:	183b      	adds	r3, r7, r0
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10c      	bne.n	8003100 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4910      	ldr	r1, [pc, #64]	; (8003130 <HAL_RTC_SetDate+0x124>)
 80030ee:	400a      	ands	r2, r1
 80030f0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80030f2:	183c      	adds	r4, r7, r0
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	0018      	movs	r0, r3
 80030f8:	f000 f8d8 	bl	80032ac <RTC_ExitInitMode>
 80030fc:	0003      	movs	r3, r0
 80030fe:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8003100:	2313      	movs	r3, #19
 8003102:	18fb      	adds	r3, r7, r3
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d103      	bne.n	8003112 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2221      	movs	r2, #33	; 0x21
 800310e:	2101      	movs	r1, #1
 8003110:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	22ff      	movs	r2, #255	; 0xff
 8003118:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2220      	movs	r2, #32
 800311e:	2100      	movs	r1, #0
 8003120:	5499      	strb	r1, [r3, r2]

  return status;
 8003122:	2313      	movs	r3, #19
 8003124:	18fb      	adds	r3, r7, r3
 8003126:	781b      	ldrb	r3, [r3, #0]
}
 8003128:	0018      	movs	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	b006      	add	sp, #24
 800312e:	bdb0      	pop	{r4, r5, r7, pc}
 8003130:	00ffff3f 	.word	0x00ffff3f

08003134 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	4a21      	ldr	r2, [pc, #132]	; (80031d0 <HAL_RTC_GetDate+0x9c>)
 800314c:	4013      	ands	r3, r2
 800314e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	0c1b      	lsrs	r3, r3, #16
 8003154:	b2da      	uxtb	r2, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	0a1b      	lsrs	r3, r3, #8
 800315e:	b2db      	uxtb	r3, r3
 8003160:	221f      	movs	r2, #31
 8003162:	4013      	ands	r3, r2
 8003164:	b2da      	uxtb	r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	b2db      	uxtb	r3, r3
 800316e:	223f      	movs	r2, #63	; 0x3f
 8003170:	4013      	ands	r3, r2
 8003172:	b2da      	uxtb	r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	0b5b      	lsrs	r3, r3, #13
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2207      	movs	r2, #7
 8003180:	4013      	ands	r3, r2
 8003182:	b2da      	uxtb	r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d11a      	bne.n	80031c4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	78db      	ldrb	r3, [r3, #3]
 8003192:	0018      	movs	r0, r3
 8003194:	f000 f8d5 	bl	8003342 <RTC_Bcd2ToByte>
 8003198:	0003      	movs	r3, r0
 800319a:	001a      	movs	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	785b      	ldrb	r3, [r3, #1]
 80031a4:	0018      	movs	r0, r3
 80031a6:	f000 f8cc 	bl	8003342 <RTC_Bcd2ToByte>
 80031aa:	0003      	movs	r3, r0
 80031ac:	001a      	movs	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	789b      	ldrb	r3, [r3, #2]
 80031b6:	0018      	movs	r0, r3
 80031b8:	f000 f8c3 	bl	8003342 <RTC_Bcd2ToByte>
 80031bc:	0003      	movs	r3, r0
 80031be:	001a      	movs	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	0018      	movs	r0, r3
 80031c8:	46bd      	mov	sp, r7
 80031ca:	b006      	add	sp, #24
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	00ffff3f 	.word	0x00ffff3f

080031d4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a0e      	ldr	r2, [pc, #56]	; (8003220 <HAL_RTC_WaitForSynchro+0x4c>)
 80031e6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031e8:	f7fe fa8a 	bl	8001700 <HAL_GetTick>
 80031ec:	0003      	movs	r3, r0
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80031f0:	e00a      	b.n	8003208 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80031f2:	f7fe fa85 	bl	8001700 <HAL_GetTick>
 80031f6:	0002      	movs	r2, r0
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	1ad2      	subs	r2, r2, r3
 80031fc:	23fa      	movs	r3, #250	; 0xfa
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	429a      	cmp	r2, r3
 8003202:	d901      	bls.n	8003208 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e006      	b.n	8003216 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	4013      	ands	r3, r2
 8003212:	d0ee      	beq.n	80031f2 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	0018      	movs	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	b004      	add	sp, #16
 800321c:	bd80      	pop	{r7, pc}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	0001ff5f 	.word	0x0001ff5f

08003224 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003230:	230f      	movs	r3, #15
 8003232:	18fb      	adds	r3, r7, r3
 8003234:	2200      	movs	r2, #0
 8003236:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	2240      	movs	r2, #64	; 0x40
 8003240:	4013      	ands	r3, r2
 8003242:	d12c      	bne.n	800329e <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2180      	movs	r1, #128	; 0x80
 8003250:	430a      	orrs	r2, r1
 8003252:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003254:	f7fe fa54 	bl	8001700 <HAL_GetTick>
 8003258:	0003      	movs	r3, r0
 800325a:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800325c:	e014      	b.n	8003288 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800325e:	f7fe fa4f 	bl	8001700 <HAL_GetTick>
 8003262:	0002      	movs	r2, r0
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	1ad2      	subs	r2, r2, r3
 8003268:	200f      	movs	r0, #15
 800326a:	183b      	adds	r3, r7, r0
 800326c:	1839      	adds	r1, r7, r0
 800326e:	7809      	ldrb	r1, [r1, #0]
 8003270:	7019      	strb	r1, [r3, #0]
 8003272:	23fa      	movs	r3, #250	; 0xfa
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	429a      	cmp	r2, r3
 8003278:	d906      	bls.n	8003288 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2221      	movs	r2, #33	; 0x21
 800327e:	2104      	movs	r1, #4
 8003280:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8003282:	183b      	adds	r3, r7, r0
 8003284:	2201      	movs	r2, #1
 8003286:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	2240      	movs	r2, #64	; 0x40
 8003290:	4013      	ands	r3, r2
 8003292:	d104      	bne.n	800329e <RTC_EnterInitMode+0x7a>
 8003294:	230f      	movs	r3, #15
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d1df      	bne.n	800325e <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 800329e:	230f      	movs	r3, #15
 80032a0:	18fb      	adds	r3, r7, r3
 80032a2:	781b      	ldrb	r3, [r3, #0]
}
 80032a4:	0018      	movs	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	b004      	add	sp, #16
 80032aa:	bd80      	pop	{r7, pc}

080032ac <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80032ac:	b590      	push	{r4, r7, lr}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032b4:	240f      	movs	r4, #15
 80032b6:	193b      	adds	r3, r7, r4
 80032b8:	2200      	movs	r2, #0
 80032ba:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2180      	movs	r1, #128	; 0x80
 80032c8:	438a      	bics	r2, r1
 80032ca:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2220      	movs	r2, #32
 80032d4:	4013      	ands	r3, r2
 80032d6:	d10c      	bne.n	80032f2 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	0018      	movs	r0, r3
 80032dc:	f7ff ff7a 	bl	80031d4 <HAL_RTC_WaitForSynchro>
 80032e0:	1e03      	subs	r3, r0, #0
 80032e2:	d006      	beq.n	80032f2 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2221      	movs	r2, #33	; 0x21
 80032e8:	2104      	movs	r1, #4
 80032ea:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80032ec:	193b      	adds	r3, r7, r4
 80032ee:	2201      	movs	r2, #1
 80032f0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80032f2:	230f      	movs	r3, #15
 80032f4:	18fb      	adds	r3, r7, r3
 80032f6:	781b      	ldrb	r3, [r3, #0]
}
 80032f8:	0018      	movs	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b005      	add	sp, #20
 80032fe:	bd90      	pop	{r4, r7, pc}

08003300 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	0002      	movs	r2, r0
 8003308:	1dfb      	adds	r3, r7, #7
 800330a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003310:	e007      	b.n	8003322 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	3301      	adds	r3, #1
 8003316:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003318:	1dfb      	adds	r3, r7, #7
 800331a:	1dfa      	adds	r2, r7, #7
 800331c:	7812      	ldrb	r2, [r2, #0]
 800331e:	3a0a      	subs	r2, #10
 8003320:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8003322:	1dfb      	adds	r3, r7, #7
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b09      	cmp	r3, #9
 8003328:	d8f3      	bhi.n	8003312 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	b2da      	uxtb	r2, r3
 8003332:	1dfb      	adds	r3, r7, #7
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	4313      	orrs	r3, r2
 8003338:	b2db      	uxtb	r3, r3
}
 800333a:	0018      	movs	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	b004      	add	sp, #16
 8003340:	bd80      	pop	{r7, pc}

08003342 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b084      	sub	sp, #16
 8003346:	af00      	add	r7, sp, #0
 8003348:	0002      	movs	r2, r0
 800334a:	1dfb      	adds	r3, r7, #7
 800334c:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003352:	1dfb      	adds	r3, r7, #7
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	091b      	lsrs	r3, r3, #4
 8003358:	b2db      	uxtb	r3, r3
 800335a:	001a      	movs	r2, r3
 800335c:	0013      	movs	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	189b      	adds	r3, r3, r2
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	b2da      	uxtb	r2, r3
 800336a:	1dfb      	adds	r3, r7, #7
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	210f      	movs	r1, #15
 8003370:	400b      	ands	r3, r1
 8003372:	b2db      	uxtb	r3, r3
 8003374:	18d3      	adds	r3, r2, r3
 8003376:	b2db      	uxtb	r3, r3
}
 8003378:	0018      	movs	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	b004      	add	sp, #16
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e032      	b.n	80033f8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2239      	movs	r2, #57	; 0x39
 8003396:	5c9b      	ldrb	r3, [r3, r2]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d107      	bne.n	80033ae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2238      	movs	r2, #56	; 0x38
 80033a2:	2100      	movs	r1, #0
 80033a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	0018      	movs	r0, r3
 80033aa:	f7fd ff3f 	bl	800122c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2239      	movs	r2, #57	; 0x39
 80033b2:	2102      	movs	r1, #2
 80033b4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3304      	adds	r3, #4
 80033be:	0019      	movs	r1, r3
 80033c0:	0010      	movs	r0, r2
 80033c2:	f000 fbaf 	bl	8003b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	223e      	movs	r2, #62	; 0x3e
 80033ca:	2101      	movs	r1, #1
 80033cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	223a      	movs	r2, #58	; 0x3a
 80033d2:	2101      	movs	r1, #1
 80033d4:	5499      	strb	r1, [r3, r2]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	223b      	movs	r2, #59	; 0x3b
 80033da:	2101      	movs	r1, #1
 80033dc:	5499      	strb	r1, [r3, r2]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	223c      	movs	r2, #60	; 0x3c
 80033e2:	2101      	movs	r1, #1
 80033e4:	5499      	strb	r1, [r3, r2]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	223d      	movs	r2, #61	; 0x3d
 80033ea:	2101      	movs	r1, #1
 80033ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2239      	movs	r2, #57	; 0x39
 80033f2:	2101      	movs	r1, #1
 80033f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	0018      	movs	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b002      	add	sp, #8
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e032      	b.n	8003478 <HAL_TIM_OC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2239      	movs	r2, #57	; 0x39
 8003416:	5c9b      	ldrb	r3, [r3, r2]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d107      	bne.n	800342e <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2238      	movs	r2, #56	; 0x38
 8003422:	2100      	movs	r1, #0
 8003424:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	0018      	movs	r0, r3
 800342a:	f000 f829 	bl	8003480 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2239      	movs	r2, #57	; 0x39
 8003432:	2102      	movs	r1, #2
 8003434:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3304      	adds	r3, #4
 800343e:	0019      	movs	r1, r3
 8003440:	0010      	movs	r0, r2
 8003442:	f000 fb6f 	bl	8003b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	223e      	movs	r2, #62	; 0x3e
 800344a:	2101      	movs	r1, #1
 800344c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	223a      	movs	r2, #58	; 0x3a
 8003452:	2101      	movs	r1, #1
 8003454:	5499      	strb	r1, [r3, r2]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	223b      	movs	r2, #59	; 0x3b
 800345a:	2101      	movs	r1, #1
 800345c:	5499      	strb	r1, [r3, r2]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	223c      	movs	r2, #60	; 0x3c
 8003462:	2101      	movs	r1, #1
 8003464:	5499      	strb	r1, [r3, r2]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	223d      	movs	r2, #61	; 0x3d
 800346a:	2101      	movs	r1, #1
 800346c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2239      	movs	r2, #57	; 0x39
 8003472:	2101      	movs	r1, #1
 8003474:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	0018      	movs	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	b002      	add	sp, #8
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003488:	46c0      	nop			; (mov r8, r8)
 800348a:	46bd      	mov	sp, r7
 800348c:	b002      	add	sp, #8
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e032      	b.n	8003508 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2239      	movs	r2, #57	; 0x39
 80034a6:	5c9b      	ldrb	r3, [r3, r2]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d107      	bne.n	80034be <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2238      	movs	r2, #56	; 0x38
 80034b2:	2100      	movs	r1, #0
 80034b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	0018      	movs	r0, r3
 80034ba:	f000 f829 	bl	8003510 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2239      	movs	r2, #57	; 0x39
 80034c2:	2102      	movs	r1, #2
 80034c4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3304      	adds	r3, #4
 80034ce:	0019      	movs	r1, r3
 80034d0:	0010      	movs	r0, r2
 80034d2:	f000 fb27 	bl	8003b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	223e      	movs	r2, #62	; 0x3e
 80034da:	2101      	movs	r1, #1
 80034dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	223a      	movs	r2, #58	; 0x3a
 80034e2:	2101      	movs	r1, #1
 80034e4:	5499      	strb	r1, [r3, r2]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	223b      	movs	r2, #59	; 0x3b
 80034ea:	2101      	movs	r1, #1
 80034ec:	5499      	strb	r1, [r3, r2]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	223c      	movs	r2, #60	; 0x3c
 80034f2:	2101      	movs	r1, #1
 80034f4:	5499      	strb	r1, [r3, r2]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	223d      	movs	r2, #61	; 0x3d
 80034fa:	2101      	movs	r1, #1
 80034fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2239      	movs	r2, #57	; 0x39
 8003502:	2101      	movs	r1, #1
 8003504:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	b002      	add	sp, #8
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003518:	46c0      	nop			; (mov r8, r8)
 800351a:	46bd      	mov	sp, r7
 800351c:	b002      	add	sp, #8
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	2202      	movs	r2, #2
 8003530:	4013      	ands	r3, r2
 8003532:	2b02      	cmp	r3, #2
 8003534:	d124      	bne.n	8003580 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	2202      	movs	r2, #2
 800353e:	4013      	ands	r3, r2
 8003540:	2b02      	cmp	r3, #2
 8003542:	d11d      	bne.n	8003580 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2203      	movs	r2, #3
 800354a:	4252      	negs	r2, r2
 800354c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	2203      	movs	r2, #3
 800355c:	4013      	ands	r3, r2
 800355e:	d004      	beq.n	800356a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	0018      	movs	r0, r3
 8003564:	f000 fac6 	bl	8003af4 <HAL_TIM_IC_CaptureCallback>
 8003568:	e007      	b.n	800357a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	0018      	movs	r0, r3
 800356e:	f000 fab9 	bl	8003ae4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	0018      	movs	r0, r3
 8003576:	f000 fac5 	bl	8003b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	2204      	movs	r2, #4
 8003588:	4013      	ands	r3, r2
 800358a:	2b04      	cmp	r3, #4
 800358c:	d125      	bne.n	80035da <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	2204      	movs	r2, #4
 8003596:	4013      	ands	r3, r2
 8003598:	2b04      	cmp	r3, #4
 800359a:	d11e      	bne.n	80035da <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2205      	movs	r2, #5
 80035a2:	4252      	negs	r2, r2
 80035a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2202      	movs	r2, #2
 80035aa:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699a      	ldr	r2, [r3, #24]
 80035b2:	23c0      	movs	r3, #192	; 0xc0
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4013      	ands	r3, r2
 80035b8:	d004      	beq.n	80035c4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	0018      	movs	r0, r3
 80035be:	f000 fa99 	bl	8003af4 <HAL_TIM_IC_CaptureCallback>
 80035c2:	e007      	b.n	80035d4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	0018      	movs	r0, r3
 80035c8:	f000 fa8c 	bl	8003ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	0018      	movs	r0, r3
 80035d0:	f000 fa98 	bl	8003b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	2208      	movs	r2, #8
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d124      	bne.n	8003632 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	2208      	movs	r2, #8
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d11d      	bne.n	8003632 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2209      	movs	r2, #9
 80035fc:	4252      	negs	r2, r2
 80035fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2204      	movs	r2, #4
 8003604:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	2203      	movs	r2, #3
 800360e:	4013      	ands	r3, r2
 8003610:	d004      	beq.n	800361c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	0018      	movs	r0, r3
 8003616:	f000 fa6d 	bl	8003af4 <HAL_TIM_IC_CaptureCallback>
 800361a:	e007      	b.n	800362c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	0018      	movs	r0, r3
 8003620:	f000 fa60 	bl	8003ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	0018      	movs	r0, r3
 8003628:	f000 fa6c 	bl	8003b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	2210      	movs	r2, #16
 800363a:	4013      	ands	r3, r2
 800363c:	2b10      	cmp	r3, #16
 800363e:	d125      	bne.n	800368c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	2210      	movs	r2, #16
 8003648:	4013      	ands	r3, r2
 800364a:	2b10      	cmp	r3, #16
 800364c:	d11e      	bne.n	800368c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2211      	movs	r2, #17
 8003654:	4252      	negs	r2, r2
 8003656:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2208      	movs	r2, #8
 800365c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69da      	ldr	r2, [r3, #28]
 8003664:	23c0      	movs	r3, #192	; 0xc0
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4013      	ands	r3, r2
 800366a:	d004      	beq.n	8003676 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	0018      	movs	r0, r3
 8003670:	f000 fa40 	bl	8003af4 <HAL_TIM_IC_CaptureCallback>
 8003674:	e007      	b.n	8003686 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	0018      	movs	r0, r3
 800367a:	f000 fa33 	bl	8003ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	0018      	movs	r0, r3
 8003682:	f000 fa3f 	bl	8003b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	2201      	movs	r2, #1
 8003694:	4013      	ands	r3, r2
 8003696:	2b01      	cmp	r3, #1
 8003698:	d10f      	bne.n	80036ba <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d108      	bne.n	80036ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2202      	movs	r2, #2
 80036ae:	4252      	negs	r2, r2
 80036b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	0018      	movs	r0, r3
 80036b6:	f000 fa0d 	bl	8003ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	2240      	movs	r2, #64	; 0x40
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b40      	cmp	r3, #64	; 0x40
 80036c6:	d10f      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	2240      	movs	r2, #64	; 0x40
 80036d0:	4013      	ands	r3, r2
 80036d2:	2b40      	cmp	r3, #64	; 0x40
 80036d4:	d108      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2241      	movs	r2, #65	; 0x41
 80036dc:	4252      	negs	r2, r2
 80036de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	0018      	movs	r0, r3
 80036e4:	f000 fa16 	bl	8003b14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036e8:	46c0      	nop			; (mov r8, r8)
 80036ea:	46bd      	mov	sp, r7
 80036ec:	b002      	add	sp, #8
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036fc:	2317      	movs	r3, #23
 80036fe:	18fb      	adds	r3, r7, r3
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2238      	movs	r2, #56	; 0x38
 8003708:	5c9b      	ldrb	r3, [r3, r2]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_TIM_OC_ConfigChannel+0x22>
 800370e:	2302      	movs	r3, #2
 8003710:	e042      	b.n	8003798 <HAL_TIM_OC_ConfigChannel+0xa8>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2238      	movs	r2, #56	; 0x38
 8003716:	2101      	movs	r1, #1
 8003718:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b0c      	cmp	r3, #12
 800371e:	d027      	beq.n	8003770 <HAL_TIM_OC_ConfigChannel+0x80>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b0c      	cmp	r3, #12
 8003724:	d82c      	bhi.n	8003780 <HAL_TIM_OC_ConfigChannel+0x90>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b08      	cmp	r3, #8
 800372a:	d019      	beq.n	8003760 <HAL_TIM_OC_ConfigChannel+0x70>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b08      	cmp	r3, #8
 8003730:	d826      	bhi.n	8003780 <HAL_TIM_OC_ConfigChannel+0x90>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_TIM_OC_ConfigChannel+0x50>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b04      	cmp	r3, #4
 800373c:	d008      	beq.n	8003750 <HAL_TIM_OC_ConfigChannel+0x60>
 800373e:	e01f      	b.n	8003780 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	0011      	movs	r1, r2
 8003748:	0018      	movs	r0, r3
 800374a:	f000 fa35 	bl	8003bb8 <TIM_OC1_SetConfig>
      break;
 800374e:	e01c      	b.n	800378a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	0011      	movs	r1, r2
 8003758:	0018      	movs	r0, r3
 800375a:	f000 fa69 	bl	8003c30 <TIM_OC2_SetConfig>
      break;
 800375e:	e014      	b.n	800378a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	0011      	movs	r1, r2
 8003768:	0018      	movs	r0, r3
 800376a:	f000 faa3 	bl	8003cb4 <TIM_OC3_SetConfig>
      break;
 800376e:	e00c      	b.n	800378a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	0011      	movs	r1, r2
 8003778:	0018      	movs	r0, r3
 800377a:	f000 fadb 	bl	8003d34 <TIM_OC4_SetConfig>
      break;
 800377e:	e004      	b.n	800378a <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8003780:	2317      	movs	r3, #23
 8003782:	18fb      	adds	r3, r7, r3
 8003784:	2201      	movs	r2, #1
 8003786:	701a      	strb	r2, [r3, #0]
      break;
 8003788:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2238      	movs	r2, #56	; 0x38
 800378e:	2100      	movs	r1, #0
 8003790:	5499      	strb	r1, [r3, r2]

  return status;
 8003792:	2317      	movs	r3, #23
 8003794:	18fb      	adds	r3, r7, r3
 8003796:	781b      	ldrb	r3, [r3, #0]
}
 8003798:	0018      	movs	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	b006      	add	sp, #24
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037ac:	2317      	movs	r3, #23
 80037ae:	18fb      	adds	r3, r7, r3
 80037b0:	2200      	movs	r2, #0
 80037b2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2238      	movs	r2, #56	; 0x38
 80037b8:	5c9b      	ldrb	r3, [r3, r2]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80037be:	2302      	movs	r3, #2
 80037c0:	e0ad      	b.n	800391e <HAL_TIM_PWM_ConfigChannel+0x17e>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2238      	movs	r2, #56	; 0x38
 80037c6:	2101      	movs	r1, #1
 80037c8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b0c      	cmp	r3, #12
 80037ce:	d100      	bne.n	80037d2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80037d0:	e076      	b.n	80038c0 <HAL_TIM_PWM_ConfigChannel+0x120>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b0c      	cmp	r3, #12
 80037d6:	d900      	bls.n	80037da <HAL_TIM_PWM_ConfigChannel+0x3a>
 80037d8:	e095      	b.n	8003906 <HAL_TIM_PWM_ConfigChannel+0x166>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d04e      	beq.n	800387e <HAL_TIM_PWM_ConfigChannel+0xde>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d900      	bls.n	80037e8 <HAL_TIM_PWM_ConfigChannel+0x48>
 80037e6:	e08e      	b.n	8003906 <HAL_TIM_PWM_ConfigChannel+0x166>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_TIM_PWM_ConfigChannel+0x56>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d021      	beq.n	8003838 <HAL_TIM_PWM_ConfigChannel+0x98>
 80037f4:	e087      	b.n	8003906 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	0011      	movs	r1, r2
 80037fe:	0018      	movs	r0, r3
 8003800:	f000 f9da 	bl	8003bb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699a      	ldr	r2, [r3, #24]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2108      	movs	r1, #8
 8003810:	430a      	orrs	r2, r1
 8003812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699a      	ldr	r2, [r3, #24]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2104      	movs	r1, #4
 8003820:	438a      	bics	r2, r1
 8003822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6999      	ldr	r1, [r3, #24]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	619a      	str	r2, [r3, #24]
      break;
 8003836:	e06b      	b.n	8003910 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	0011      	movs	r1, r2
 8003840:	0018      	movs	r0, r3
 8003842:	f000 f9f5 	bl	8003c30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699a      	ldr	r2, [r3, #24]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2180      	movs	r1, #128	; 0x80
 8003852:	0109      	lsls	r1, r1, #4
 8003854:	430a      	orrs	r2, r1
 8003856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699a      	ldr	r2, [r3, #24]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4931      	ldr	r1, [pc, #196]	; (8003928 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003864:	400a      	ands	r2, r1
 8003866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6999      	ldr	r1, [r3, #24]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	021a      	lsls	r2, r3, #8
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	619a      	str	r2, [r3, #24]
      break;
 800387c:	e048      	b.n	8003910 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	0011      	movs	r1, r2
 8003886:	0018      	movs	r0, r3
 8003888:	f000 fa14 	bl	8003cb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	69da      	ldr	r2, [r3, #28]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2108      	movs	r1, #8
 8003898:	430a      	orrs	r2, r1
 800389a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	69da      	ldr	r2, [r3, #28]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2104      	movs	r1, #4
 80038a8:	438a      	bics	r2, r1
 80038aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69d9      	ldr	r1, [r3, #28]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	61da      	str	r2, [r3, #28]
      break;
 80038be:	e027      	b.n	8003910 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	0011      	movs	r1, r2
 80038c8:	0018      	movs	r0, r3
 80038ca:	f000 fa33 	bl	8003d34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	69da      	ldr	r2, [r3, #28]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2180      	movs	r1, #128	; 0x80
 80038da:	0109      	lsls	r1, r1, #4
 80038dc:	430a      	orrs	r2, r1
 80038de:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	69da      	ldr	r2, [r3, #28]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	490f      	ldr	r1, [pc, #60]	; (8003928 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80038ec:	400a      	ands	r2, r1
 80038ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	69d9      	ldr	r1, [r3, #28]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	021a      	lsls	r2, r3, #8
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	61da      	str	r2, [r3, #28]
      break;
 8003904:	e004      	b.n	8003910 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003906:	2317      	movs	r3, #23
 8003908:	18fb      	adds	r3, r7, r3
 800390a:	2201      	movs	r2, #1
 800390c:	701a      	strb	r2, [r3, #0]
      break;
 800390e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2238      	movs	r2, #56	; 0x38
 8003914:	2100      	movs	r1, #0
 8003916:	5499      	strb	r1, [r3, r2]

  return status;
 8003918:	2317      	movs	r3, #23
 800391a:	18fb      	adds	r3, r7, r3
 800391c:	781b      	ldrb	r3, [r3, #0]
}
 800391e:	0018      	movs	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	b006      	add	sp, #24
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	fffffbff 	.word	0xfffffbff

0800392c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003936:	230f      	movs	r3, #15
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	2200      	movs	r2, #0
 800393c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2238      	movs	r2, #56	; 0x38
 8003942:	5c9b      	ldrb	r3, [r3, r2]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_TIM_ConfigClockSource+0x20>
 8003948:	2302      	movs	r3, #2
 800394a:	e0bc      	b.n	8003ac6 <HAL_TIM_ConfigClockSource+0x19a>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2238      	movs	r2, #56	; 0x38
 8003950:	2101      	movs	r1, #1
 8003952:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2239      	movs	r2, #57	; 0x39
 8003958:	2102      	movs	r1, #2
 800395a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2277      	movs	r2, #119	; 0x77
 8003968:	4393      	bics	r3, r2
 800396a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	4a58      	ldr	r2, [pc, #352]	; (8003ad0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003970:	4013      	ands	r3, r2
 8003972:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2280      	movs	r2, #128	; 0x80
 8003982:	0192      	lsls	r2, r2, #6
 8003984:	4293      	cmp	r3, r2
 8003986:	d040      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0xde>
 8003988:	2280      	movs	r2, #128	; 0x80
 800398a:	0192      	lsls	r2, r2, #6
 800398c:	4293      	cmp	r3, r2
 800398e:	d900      	bls.n	8003992 <HAL_TIM_ConfigClockSource+0x66>
 8003990:	e088      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x178>
 8003992:	2280      	movs	r2, #128	; 0x80
 8003994:	0152      	lsls	r2, r2, #5
 8003996:	4293      	cmp	r3, r2
 8003998:	d100      	bne.n	800399c <HAL_TIM_ConfigClockSource+0x70>
 800399a:	e088      	b.n	8003aae <HAL_TIM_ConfigClockSource+0x182>
 800399c:	2280      	movs	r2, #128	; 0x80
 800399e:	0152      	lsls	r2, r2, #5
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d900      	bls.n	80039a6 <HAL_TIM_ConfigClockSource+0x7a>
 80039a4:	e07e      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x178>
 80039a6:	2b70      	cmp	r3, #112	; 0x70
 80039a8:	d018      	beq.n	80039dc <HAL_TIM_ConfigClockSource+0xb0>
 80039aa:	d900      	bls.n	80039ae <HAL_TIM_ConfigClockSource+0x82>
 80039ac:	e07a      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x178>
 80039ae:	2b60      	cmp	r3, #96	; 0x60
 80039b0:	d04f      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x126>
 80039b2:	d900      	bls.n	80039b6 <HAL_TIM_ConfigClockSource+0x8a>
 80039b4:	e076      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x178>
 80039b6:	2b50      	cmp	r3, #80	; 0x50
 80039b8:	d03b      	beq.n	8003a32 <HAL_TIM_ConfigClockSource+0x106>
 80039ba:	d900      	bls.n	80039be <HAL_TIM_ConfigClockSource+0x92>
 80039bc:	e072      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x178>
 80039be:	2b40      	cmp	r3, #64	; 0x40
 80039c0:	d057      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0x146>
 80039c2:	d900      	bls.n	80039c6 <HAL_TIM_ConfigClockSource+0x9a>
 80039c4:	e06e      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x178>
 80039c6:	2b30      	cmp	r3, #48	; 0x30
 80039c8:	d063      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x166>
 80039ca:	d86b      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x178>
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	d060      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x166>
 80039d0:	d868      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x178>
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d05d      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x166>
 80039d6:	2b10      	cmp	r3, #16
 80039d8:	d05b      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x166>
 80039da:	e063      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039ec:	f000 fa62 	bl	8003eb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2277      	movs	r2, #119	; 0x77
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	609a      	str	r2, [r3, #8]
      break;
 8003a08:	e052      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a1a:	f000 fa4b 	bl	8003eb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2180      	movs	r1, #128	; 0x80
 8003a2a:	01c9      	lsls	r1, r1, #7
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	609a      	str	r2, [r3, #8]
      break;
 8003a30:	e03e      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a3e:	001a      	movs	r2, r3
 8003a40:	f000 f9be 	bl	8003dc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2150      	movs	r1, #80	; 0x50
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f000 fa18 	bl	8003e80 <TIM_ITRx_SetConfig>
      break;
 8003a50:	e02e      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a5e:	001a      	movs	r2, r3
 8003a60:	f000 f9dc 	bl	8003e1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2160      	movs	r1, #96	; 0x60
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f000 fa08 	bl	8003e80 <TIM_ITRx_SetConfig>
      break;
 8003a70:	e01e      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a7e:	001a      	movs	r2, r3
 8003a80:	f000 f99e 	bl	8003dc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2140      	movs	r1, #64	; 0x40
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	f000 f9f8 	bl	8003e80 <TIM_ITRx_SetConfig>
      break;
 8003a90:	e00e      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	0019      	movs	r1, r3
 8003a9c:	0010      	movs	r0, r2
 8003a9e:	f000 f9ef 	bl	8003e80 <TIM_ITRx_SetConfig>
      break;
 8003aa2:	e005      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003aa4:	230f      	movs	r3, #15
 8003aa6:	18fb      	adds	r3, r7, r3
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	701a      	strb	r2, [r3, #0]
      break;
 8003aac:	e000      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003aae:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2239      	movs	r2, #57	; 0x39
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2238      	movs	r2, #56	; 0x38
 8003abc:	2100      	movs	r1, #0
 8003abe:	5499      	strb	r1, [r3, r2]

  return status;
 8003ac0:	230f      	movs	r3, #15
 8003ac2:	18fb      	adds	r3, r7, r3
 8003ac4:	781b      	ldrb	r3, [r3, #0]
}
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b004      	add	sp, #16
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	ffff00ff 	.word	0xffff00ff

08003ad4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003adc:	46c0      	nop			; (mov r8, r8)
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b002      	add	sp, #8
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003aec:	46c0      	nop			; (mov r8, r8)
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b002      	add	sp, #8
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003afc:	46c0      	nop			; (mov r8, r8)
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b002      	add	sp, #8
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b0c:	46c0      	nop			; (mov r8, r8)
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b002      	add	sp, #8
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b1c:	46c0      	nop			; (mov r8, r8)
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	b002      	add	sp, #8
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	2380      	movs	r3, #128	; 0x80
 8003b38:	05db      	lsls	r3, r3, #23
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d003      	beq.n	8003b46 <TIM_Base_SetConfig+0x22>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a1b      	ldr	r2, [pc, #108]	; (8003bb0 <TIM_Base_SetConfig+0x8c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d108      	bne.n	8003b58 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2270      	movs	r2, #112	; 0x70
 8003b4a:	4393      	bics	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	2380      	movs	r3, #128	; 0x80
 8003b5c:	05db      	lsls	r3, r3, #23
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d003      	beq.n	8003b6a <TIM_Base_SetConfig+0x46>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a12      	ldr	r2, [pc, #72]	; (8003bb0 <TIM_Base_SetConfig+0x8c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d108      	bne.n	8003b7c <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4a11      	ldr	r2, [pc, #68]	; (8003bb4 <TIM_Base_SetConfig+0x90>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2280      	movs	r2, #128	; 0x80
 8003b80:	4393      	bics	r3, r2
 8003b82:	001a      	movs	r2, r3
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	615a      	str	r2, [r3, #20]
}
 8003ba8:	46c0      	nop			; (mov r8, r8)
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b004      	add	sp, #16
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40010800 	.word	0x40010800
 8003bb4:	fffffcff 	.word	0xfffffcff

08003bb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	4393      	bics	r3, r2
 8003bca:	001a      	movs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2270      	movs	r2, #112	; 0x70
 8003be6:	4393      	bics	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2203      	movs	r2, #3
 8003bee:	4393      	bics	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	4393      	bics	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	621a      	str	r2, [r3, #32]
}
 8003c28:	46c0      	nop			; (mov r8, r8)
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b006      	add	sp, #24
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	2210      	movs	r2, #16
 8003c40:	4393      	bics	r3, r2
 8003c42:	001a      	movs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4a13      	ldr	r2, [pc, #76]	; (8003cac <TIM_OC2_SetConfig+0x7c>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4a12      	ldr	r2, [pc, #72]	; (8003cb0 <TIM_OC2_SetConfig+0x80>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	021b      	lsls	r3, r3, #8
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	4393      	bics	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	621a      	str	r2, [r3, #32]
}
 8003ca4:	46c0      	nop			; (mov r8, r8)
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	b006      	add	sp, #24
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	ffff8fff 	.word	0xffff8fff
 8003cb0:	fffffcff 	.word	0xfffffcff

08003cb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	4a1a      	ldr	r2, [pc, #104]	; (8003d2c <TIM_OC3_SetConfig+0x78>)
 8003cc4:	401a      	ands	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2270      	movs	r2, #112	; 0x70
 8003ce0:	4393      	bics	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	4393      	bics	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	4a0d      	ldr	r2, [pc, #52]	; (8003d30 <TIM_OC3_SetConfig+0x7c>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	021b      	lsls	r3, r3, #8
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	621a      	str	r2, [r3, #32]
}
 8003d24:	46c0      	nop			; (mov r8, r8)
 8003d26:	46bd      	mov	sp, r7
 8003d28:	b006      	add	sp, #24
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	fffffeff 	.word	0xfffffeff
 8003d30:	fffffdff 	.word	0xfffffdff

08003d34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	4a1b      	ldr	r2, [pc, #108]	; (8003db0 <TIM_OC4_SetConfig+0x7c>)
 8003d44:	401a      	ands	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4a15      	ldr	r2, [pc, #84]	; (8003db4 <TIM_OC4_SetConfig+0x80>)
 8003d60:	4013      	ands	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4a14      	ldr	r2, [pc, #80]	; (8003db8 <TIM_OC4_SetConfig+0x84>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	021b      	lsls	r3, r3, #8
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	4a10      	ldr	r2, [pc, #64]	; (8003dbc <TIM_OC4_SetConfig+0x88>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	031b      	lsls	r3, r3, #12
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	621a      	str	r2, [r3, #32]
}
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	46bd      	mov	sp, r7
 8003daa:	b006      	add	sp, #24
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	ffffefff 	.word	0xffffefff
 8003db4:	ffff8fff 	.word	0xffff8fff
 8003db8:	fffffcff 	.word	0xfffffcff
 8003dbc:	ffffdfff 	.word	0xffffdfff

08003dc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	4393      	bics	r3, r2
 8003dda:	001a      	movs	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	22f0      	movs	r2, #240	; 0xf0
 8003dea:	4393      	bics	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	220a      	movs	r2, #10
 8003dfc:	4393      	bics	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	621a      	str	r2, [r3, #32]
}
 8003e14:	46c0      	nop			; (mov r8, r8)
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b006      	add	sp, #24
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	2210      	movs	r2, #16
 8003e2e:	4393      	bics	r3, r2
 8003e30:	001a      	movs	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	4a0d      	ldr	r2, [pc, #52]	; (8003e7c <TIM_TI2_ConfigInputStage+0x60>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	031b      	lsls	r3, r3, #12
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	22a0      	movs	r2, #160	; 0xa0
 8003e58:	4393      	bics	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	621a      	str	r2, [r3, #32]
}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	46bd      	mov	sp, r7
 8003e76:	b006      	add	sp, #24
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	ffff0fff 	.word	0xffff0fff

08003e80 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2270      	movs	r2, #112	; 0x70
 8003e94:	4393      	bics	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	2207      	movs	r2, #7
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	609a      	str	r2, [r3, #8]
}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	46bd      	mov	sp, r7
 8003eae:	b004      	add	sp, #16
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	4a09      	ldr	r2, [pc, #36]	; (8003ef0 <TIM_ETR_SetConfig+0x3c>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	021a      	lsls	r2, r3, #8
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	609a      	str	r2, [r3, #8]
}
 8003ee8:	46c0      	nop			; (mov r8, r8)
 8003eea:	46bd      	mov	sp, r7
 8003eec:	b006      	add	sp, #24
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	ffff00ff 	.word	0xffff00ff

08003ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2238      	movs	r2, #56	; 0x38
 8003f02:	5c9b      	ldrb	r3, [r3, r2]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d101      	bne.n	8003f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e03d      	b.n	8003f88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2238      	movs	r2, #56	; 0x38
 8003f10:	2101      	movs	r1, #1
 8003f12:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2239      	movs	r2, #57	; 0x39
 8003f18:	2102      	movs	r1, #2
 8003f1a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2270      	movs	r2, #112	; 0x70
 8003f30:	4393      	bics	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	2380      	movs	r3, #128	; 0x80
 8003f4c:	05db      	lsls	r3, r3, #23
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d004      	beq.n	8003f5c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a0e      	ldr	r2, [pc, #56]	; (8003f90 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d10c      	bne.n	8003f76 <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	2280      	movs	r2, #128	; 0x80
 8003f60:	4393      	bics	r3, r2
 8003f62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2239      	movs	r2, #57	; 0x39
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2238      	movs	r2, #56	; 0x38
 8003f82:	2100      	movs	r1, #0
 8003f84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	0018      	movs	r0, r3
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	b004      	add	sp, #16
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40010800 	.word	0x40010800

08003f94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e044      	b.n	8004030 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d107      	bne.n	8003fbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2278      	movs	r2, #120	; 0x78
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f7fd f9a1 	bl	8001300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2224      	movs	r2, #36	; 0x24
 8003fc2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2101      	movs	r1, #1
 8003fd0:	438a      	bics	r2, r1
 8003fd2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f000 f830 	bl	800403c <UART_SetConfig>
 8003fdc:	0003      	movs	r3, r0
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e024      	b.n	8004030 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f000 fa6d 	bl	80044d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	490d      	ldr	r1, [pc, #52]	; (8004038 <HAL_UART_Init+0xa4>)
 8004002:	400a      	ands	r2, r1
 8004004:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	212a      	movs	r1, #42	; 0x2a
 8004012:	438a      	bics	r2, r1
 8004014:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2101      	movs	r1, #1
 8004022:	430a      	orrs	r2, r1
 8004024:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	0018      	movs	r0, r3
 800402a:	f000 fb05 	bl	8004638 <UART_CheckIdleState>
 800402e:	0003      	movs	r3, r0
}
 8004030:	0018      	movs	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	b002      	add	sp, #8
 8004036:	bd80      	pop	{r7, pc}
 8004038:	ffffb7ff 	.word	0xffffb7ff

0800403c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800403c:	b5b0      	push	{r4, r5, r7, lr}
 800403e:	b08e      	sub	sp, #56	; 0x38
 8004040:	af00      	add	r7, sp, #0
 8004042:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004044:	231a      	movs	r3, #26
 8004046:	2218      	movs	r2, #24
 8004048:	189b      	adds	r3, r3, r2
 800404a:	19db      	adds	r3, r3, r7
 800404c:	2200      	movs	r2, #0
 800404e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	431a      	orrs	r2, r3
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	431a      	orrs	r2, r3
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	4313      	orrs	r3, r2
 8004066:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4ab4      	ldr	r2, [pc, #720]	; (8004340 <UART_SetConfig+0x304>)
 8004070:	4013      	ands	r3, r2
 8004072:	0019      	movs	r1, r3
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800407a:	430a      	orrs	r2, r1
 800407c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	4aaf      	ldr	r2, [pc, #700]	; (8004344 <UART_SetConfig+0x308>)
 8004086:	4013      	ands	r3, r2
 8004088:	0019      	movs	r1, r3
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4aa9      	ldr	r2, [pc, #676]	; (8004348 <UART_SetConfig+0x30c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d004      	beq.n	80040b0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040ac:	4313      	orrs	r3, r2
 80040ae:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	4aa5      	ldr	r2, [pc, #660]	; (800434c <UART_SetConfig+0x310>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	0019      	movs	r1, r3
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040c2:	430a      	orrs	r2, r1
 80040c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4aa1      	ldr	r2, [pc, #644]	; (8004350 <UART_SetConfig+0x314>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d131      	bne.n	8004134 <UART_SetConfig+0xf8>
 80040d0:	4ba0      	ldr	r3, [pc, #640]	; (8004354 <UART_SetConfig+0x318>)
 80040d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d4:	220c      	movs	r2, #12
 80040d6:	4013      	ands	r3, r2
 80040d8:	2b0c      	cmp	r3, #12
 80040da:	d01d      	beq.n	8004118 <UART_SetConfig+0xdc>
 80040dc:	d823      	bhi.n	8004126 <UART_SetConfig+0xea>
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d00c      	beq.n	80040fc <UART_SetConfig+0xc0>
 80040e2:	d820      	bhi.n	8004126 <UART_SetConfig+0xea>
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d002      	beq.n	80040ee <UART_SetConfig+0xb2>
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d00e      	beq.n	800410a <UART_SetConfig+0xce>
 80040ec:	e01b      	b.n	8004126 <UART_SetConfig+0xea>
 80040ee:	231b      	movs	r3, #27
 80040f0:	2218      	movs	r2, #24
 80040f2:	189b      	adds	r3, r3, r2
 80040f4:	19db      	adds	r3, r3, r7
 80040f6:	2200      	movs	r2, #0
 80040f8:	701a      	strb	r2, [r3, #0]
 80040fa:	e065      	b.n	80041c8 <UART_SetConfig+0x18c>
 80040fc:	231b      	movs	r3, #27
 80040fe:	2218      	movs	r2, #24
 8004100:	189b      	adds	r3, r3, r2
 8004102:	19db      	adds	r3, r3, r7
 8004104:	2202      	movs	r2, #2
 8004106:	701a      	strb	r2, [r3, #0]
 8004108:	e05e      	b.n	80041c8 <UART_SetConfig+0x18c>
 800410a:	231b      	movs	r3, #27
 800410c:	2218      	movs	r2, #24
 800410e:	189b      	adds	r3, r3, r2
 8004110:	19db      	adds	r3, r3, r7
 8004112:	2204      	movs	r2, #4
 8004114:	701a      	strb	r2, [r3, #0]
 8004116:	e057      	b.n	80041c8 <UART_SetConfig+0x18c>
 8004118:	231b      	movs	r3, #27
 800411a:	2218      	movs	r2, #24
 800411c:	189b      	adds	r3, r3, r2
 800411e:	19db      	adds	r3, r3, r7
 8004120:	2208      	movs	r2, #8
 8004122:	701a      	strb	r2, [r3, #0]
 8004124:	e050      	b.n	80041c8 <UART_SetConfig+0x18c>
 8004126:	231b      	movs	r3, #27
 8004128:	2218      	movs	r2, #24
 800412a:	189b      	adds	r3, r3, r2
 800412c:	19db      	adds	r3, r3, r7
 800412e:	2210      	movs	r2, #16
 8004130:	701a      	strb	r2, [r3, #0]
 8004132:	e049      	b.n	80041c8 <UART_SetConfig+0x18c>
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a83      	ldr	r2, [pc, #524]	; (8004348 <UART_SetConfig+0x30c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d13e      	bne.n	80041bc <UART_SetConfig+0x180>
 800413e:	4b85      	ldr	r3, [pc, #532]	; (8004354 <UART_SetConfig+0x318>)
 8004140:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004142:	23c0      	movs	r3, #192	; 0xc0
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	4013      	ands	r3, r2
 8004148:	22c0      	movs	r2, #192	; 0xc0
 800414a:	0112      	lsls	r2, r2, #4
 800414c:	4293      	cmp	r3, r2
 800414e:	d027      	beq.n	80041a0 <UART_SetConfig+0x164>
 8004150:	22c0      	movs	r2, #192	; 0xc0
 8004152:	0112      	lsls	r2, r2, #4
 8004154:	4293      	cmp	r3, r2
 8004156:	d82a      	bhi.n	80041ae <UART_SetConfig+0x172>
 8004158:	2280      	movs	r2, #128	; 0x80
 800415a:	0112      	lsls	r2, r2, #4
 800415c:	4293      	cmp	r3, r2
 800415e:	d011      	beq.n	8004184 <UART_SetConfig+0x148>
 8004160:	2280      	movs	r2, #128	; 0x80
 8004162:	0112      	lsls	r2, r2, #4
 8004164:	4293      	cmp	r3, r2
 8004166:	d822      	bhi.n	80041ae <UART_SetConfig+0x172>
 8004168:	2b00      	cmp	r3, #0
 800416a:	d004      	beq.n	8004176 <UART_SetConfig+0x13a>
 800416c:	2280      	movs	r2, #128	; 0x80
 800416e:	00d2      	lsls	r2, r2, #3
 8004170:	4293      	cmp	r3, r2
 8004172:	d00e      	beq.n	8004192 <UART_SetConfig+0x156>
 8004174:	e01b      	b.n	80041ae <UART_SetConfig+0x172>
 8004176:	231b      	movs	r3, #27
 8004178:	2218      	movs	r2, #24
 800417a:	189b      	adds	r3, r3, r2
 800417c:	19db      	adds	r3, r3, r7
 800417e:	2200      	movs	r2, #0
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	e021      	b.n	80041c8 <UART_SetConfig+0x18c>
 8004184:	231b      	movs	r3, #27
 8004186:	2218      	movs	r2, #24
 8004188:	189b      	adds	r3, r3, r2
 800418a:	19db      	adds	r3, r3, r7
 800418c:	2202      	movs	r2, #2
 800418e:	701a      	strb	r2, [r3, #0]
 8004190:	e01a      	b.n	80041c8 <UART_SetConfig+0x18c>
 8004192:	231b      	movs	r3, #27
 8004194:	2218      	movs	r2, #24
 8004196:	189b      	adds	r3, r3, r2
 8004198:	19db      	adds	r3, r3, r7
 800419a:	2204      	movs	r2, #4
 800419c:	701a      	strb	r2, [r3, #0]
 800419e:	e013      	b.n	80041c8 <UART_SetConfig+0x18c>
 80041a0:	231b      	movs	r3, #27
 80041a2:	2218      	movs	r2, #24
 80041a4:	189b      	adds	r3, r3, r2
 80041a6:	19db      	adds	r3, r3, r7
 80041a8:	2208      	movs	r2, #8
 80041aa:	701a      	strb	r2, [r3, #0]
 80041ac:	e00c      	b.n	80041c8 <UART_SetConfig+0x18c>
 80041ae:	231b      	movs	r3, #27
 80041b0:	2218      	movs	r2, #24
 80041b2:	189b      	adds	r3, r3, r2
 80041b4:	19db      	adds	r3, r3, r7
 80041b6:	2210      	movs	r2, #16
 80041b8:	701a      	strb	r2, [r3, #0]
 80041ba:	e005      	b.n	80041c8 <UART_SetConfig+0x18c>
 80041bc:	231b      	movs	r3, #27
 80041be:	2218      	movs	r2, #24
 80041c0:	189b      	adds	r3, r3, r2
 80041c2:	19db      	adds	r3, r3, r7
 80041c4:	2210      	movs	r2, #16
 80041c6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a5e      	ldr	r2, [pc, #376]	; (8004348 <UART_SetConfig+0x30c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d000      	beq.n	80041d4 <UART_SetConfig+0x198>
 80041d2:	e084      	b.n	80042de <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041d4:	231b      	movs	r3, #27
 80041d6:	2218      	movs	r2, #24
 80041d8:	189b      	adds	r3, r3, r2
 80041da:	19db      	adds	r3, r3, r7
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b08      	cmp	r3, #8
 80041e0:	d01d      	beq.n	800421e <UART_SetConfig+0x1e2>
 80041e2:	dc20      	bgt.n	8004226 <UART_SetConfig+0x1ea>
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d015      	beq.n	8004214 <UART_SetConfig+0x1d8>
 80041e8:	dc1d      	bgt.n	8004226 <UART_SetConfig+0x1ea>
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <UART_SetConfig+0x1b8>
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d005      	beq.n	80041fe <UART_SetConfig+0x1c2>
 80041f2:	e018      	b.n	8004226 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041f4:	f7fe fc0e 	bl	8002a14 <HAL_RCC_GetPCLK1Freq>
 80041f8:	0003      	movs	r3, r0
 80041fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80041fc:	e01c      	b.n	8004238 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041fe:	4b55      	ldr	r3, [pc, #340]	; (8004354 <UART_SetConfig+0x318>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2210      	movs	r2, #16
 8004204:	4013      	ands	r3, r2
 8004206:	d002      	beq.n	800420e <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004208:	4b53      	ldr	r3, [pc, #332]	; (8004358 <UART_SetConfig+0x31c>)
 800420a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800420c:	e014      	b.n	8004238 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 800420e:	4b53      	ldr	r3, [pc, #332]	; (800435c <UART_SetConfig+0x320>)
 8004210:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004212:	e011      	b.n	8004238 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004214:	f7fe fb4e 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 8004218:	0003      	movs	r3, r0
 800421a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800421c:	e00c      	b.n	8004238 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800421e:	2380      	movs	r3, #128	; 0x80
 8004220:	021b      	lsls	r3, r3, #8
 8004222:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004224:	e008      	b.n	8004238 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800422a:	231a      	movs	r3, #26
 800422c:	2218      	movs	r2, #24
 800422e:	189b      	adds	r3, r3, r2
 8004230:	19db      	adds	r3, r3, r7
 8004232:	2201      	movs	r2, #1
 8004234:	701a      	strb	r2, [r3, #0]
        break;
 8004236:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423a:	2b00      	cmp	r3, #0
 800423c:	d100      	bne.n	8004240 <UART_SetConfig+0x204>
 800423e:	e12f      	b.n	80044a0 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	0013      	movs	r3, r2
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	189b      	adds	r3, r3, r2
 800424a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800424c:	429a      	cmp	r2, r3
 800424e:	d305      	bcc.n	800425c <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004258:	429a      	cmp	r2, r3
 800425a:	d906      	bls.n	800426a <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 800425c:	231a      	movs	r3, #26
 800425e:	2218      	movs	r2, #24
 8004260:	189b      	adds	r3, r3, r2
 8004262:	19db      	adds	r3, r3, r7
 8004264:	2201      	movs	r2, #1
 8004266:	701a      	strb	r2, [r3, #0]
 8004268:	e11a      	b.n	80044a0 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	2300      	movs	r3, #0
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	6939      	ldr	r1, [r7, #16]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	000b      	movs	r3, r1
 8004278:	0e1b      	lsrs	r3, r3, #24
 800427a:	0010      	movs	r0, r2
 800427c:	0205      	lsls	r5, r0, #8
 800427e:	431d      	orrs	r5, r3
 8004280:	000b      	movs	r3, r1
 8004282:	021c      	lsls	r4, r3, #8
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	085b      	lsrs	r3, r3, #1
 800428a:	60bb      	str	r3, [r7, #8]
 800428c:	2300      	movs	r3, #0
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	68b8      	ldr	r0, [r7, #8]
 8004292:	68f9      	ldr	r1, [r7, #12]
 8004294:	1900      	adds	r0, r0, r4
 8004296:	4169      	adcs	r1, r5
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	603b      	str	r3, [r7, #0]
 800429e:	2300      	movs	r3, #0
 80042a0:	607b      	str	r3, [r7, #4]
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f7fb ffbb 	bl	8000220 <__aeabi_uldivmod>
 80042aa:	0002      	movs	r2, r0
 80042ac:	000b      	movs	r3, r1
 80042ae:	0013      	movs	r3, r2
 80042b0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042b4:	23c0      	movs	r3, #192	; 0xc0
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d309      	bcc.n	80042d0 <UART_SetConfig+0x294>
 80042bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042be:	2380      	movs	r3, #128	; 0x80
 80042c0:	035b      	lsls	r3, r3, #13
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d204      	bcs.n	80042d0 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042cc:	60da      	str	r2, [r3, #12]
 80042ce:	e0e7      	b.n	80044a0 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 80042d0:	231a      	movs	r3, #26
 80042d2:	2218      	movs	r2, #24
 80042d4:	189b      	adds	r3, r3, r2
 80042d6:	19db      	adds	r3, r3, r7
 80042d8:	2201      	movs	r2, #1
 80042da:	701a      	strb	r2, [r3, #0]
 80042dc:	e0e0      	b.n	80044a0 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	69da      	ldr	r2, [r3, #28]
 80042e2:	2380      	movs	r3, #128	; 0x80
 80042e4:	021b      	lsls	r3, r3, #8
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d000      	beq.n	80042ec <UART_SetConfig+0x2b0>
 80042ea:	e082      	b.n	80043f2 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 80042ec:	231b      	movs	r3, #27
 80042ee:	2218      	movs	r2, #24
 80042f0:	189b      	adds	r3, r3, r2
 80042f2:	19db      	adds	r3, r3, r7
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d834      	bhi.n	8004364 <UART_SetConfig+0x328>
 80042fa:	009a      	lsls	r2, r3, #2
 80042fc:	4b18      	ldr	r3, [pc, #96]	; (8004360 <UART_SetConfig+0x324>)
 80042fe:	18d3      	adds	r3, r2, r3
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004304:	f7fe fb86 	bl	8002a14 <HAL_RCC_GetPCLK1Freq>
 8004308:	0003      	movs	r3, r0
 800430a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800430c:	e033      	b.n	8004376 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800430e:	f7fe fb97 	bl	8002a40 <HAL_RCC_GetPCLK2Freq>
 8004312:	0003      	movs	r3, r0
 8004314:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004316:	e02e      	b.n	8004376 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004318:	4b0e      	ldr	r3, [pc, #56]	; (8004354 <UART_SetConfig+0x318>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2210      	movs	r2, #16
 800431e:	4013      	ands	r3, r2
 8004320:	d002      	beq.n	8004328 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004322:	4b0d      	ldr	r3, [pc, #52]	; (8004358 <UART_SetConfig+0x31c>)
 8004324:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004326:	e026      	b.n	8004376 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8004328:	4b0c      	ldr	r3, [pc, #48]	; (800435c <UART_SetConfig+0x320>)
 800432a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800432c:	e023      	b.n	8004376 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800432e:	f7fe fac1 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 8004332:	0003      	movs	r3, r0
 8004334:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004336:	e01e      	b.n	8004376 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004338:	2380      	movs	r3, #128	; 0x80
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800433e:	e01a      	b.n	8004376 <UART_SetConfig+0x33a>
 8004340:	efff69f3 	.word	0xefff69f3
 8004344:	ffffcfff 	.word	0xffffcfff
 8004348:	40004800 	.word	0x40004800
 800434c:	fffff4ff 	.word	0xfffff4ff
 8004350:	40004400 	.word	0x40004400
 8004354:	40021000 	.word	0x40021000
 8004358:	003d0900 	.word	0x003d0900
 800435c:	00f42400 	.word	0x00f42400
 8004360:	080053e4 	.word	0x080053e4
      default:
        pclk = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004368:	231a      	movs	r3, #26
 800436a:	2218      	movs	r2, #24
 800436c:	189b      	adds	r3, r3, r2
 800436e:	19db      	adds	r3, r3, r7
 8004370:	2201      	movs	r2, #1
 8004372:	701a      	strb	r2, [r3, #0]
        break;
 8004374:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004378:	2b00      	cmp	r3, #0
 800437a:	d100      	bne.n	800437e <UART_SetConfig+0x342>
 800437c:	e090      	b.n	80044a0 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800437e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004380:	005a      	lsls	r2, r3, #1
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	085b      	lsrs	r3, r3, #1
 8004388:	18d2      	adds	r2, r2, r3
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	0019      	movs	r1, r3
 8004390:	0010      	movs	r0, r2
 8004392:	f7fb feb9 	bl	8000108 <__udivsi3>
 8004396:	0003      	movs	r3, r0
 8004398:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800439a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439c:	2b0f      	cmp	r3, #15
 800439e:	d921      	bls.n	80043e4 <UART_SetConfig+0x3a8>
 80043a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043a2:	2380      	movs	r3, #128	; 0x80
 80043a4:	025b      	lsls	r3, r3, #9
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d21c      	bcs.n	80043e4 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	200e      	movs	r0, #14
 80043b0:	2418      	movs	r4, #24
 80043b2:	1903      	adds	r3, r0, r4
 80043b4:	19db      	adds	r3, r3, r7
 80043b6:	210f      	movs	r1, #15
 80043b8:	438a      	bics	r2, r1
 80043ba:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	085b      	lsrs	r3, r3, #1
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2207      	movs	r2, #7
 80043c4:	4013      	ands	r3, r2
 80043c6:	b299      	uxth	r1, r3
 80043c8:	1903      	adds	r3, r0, r4
 80043ca:	19db      	adds	r3, r3, r7
 80043cc:	1902      	adds	r2, r0, r4
 80043ce:	19d2      	adds	r2, r2, r7
 80043d0:	8812      	ldrh	r2, [r2, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	1902      	adds	r2, r0, r4
 80043dc:	19d2      	adds	r2, r2, r7
 80043de:	8812      	ldrh	r2, [r2, #0]
 80043e0:	60da      	str	r2, [r3, #12]
 80043e2:	e05d      	b.n	80044a0 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80043e4:	231a      	movs	r3, #26
 80043e6:	2218      	movs	r2, #24
 80043e8:	189b      	adds	r3, r3, r2
 80043ea:	19db      	adds	r3, r3, r7
 80043ec:	2201      	movs	r2, #1
 80043ee:	701a      	strb	r2, [r3, #0]
 80043f0:	e056      	b.n	80044a0 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043f2:	231b      	movs	r3, #27
 80043f4:	2218      	movs	r2, #24
 80043f6:	189b      	adds	r3, r3, r2
 80043f8:	19db      	adds	r3, r3, r7
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d822      	bhi.n	8004446 <UART_SetConfig+0x40a>
 8004400:	009a      	lsls	r2, r3, #2
 8004402:	4b2f      	ldr	r3, [pc, #188]	; (80044c0 <UART_SetConfig+0x484>)
 8004404:	18d3      	adds	r3, r2, r3
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800440a:	f7fe fb03 	bl	8002a14 <HAL_RCC_GetPCLK1Freq>
 800440e:	0003      	movs	r3, r0
 8004410:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004412:	e021      	b.n	8004458 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004414:	f7fe fb14 	bl	8002a40 <HAL_RCC_GetPCLK2Freq>
 8004418:	0003      	movs	r3, r0
 800441a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800441c:	e01c      	b.n	8004458 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800441e:	4b29      	ldr	r3, [pc, #164]	; (80044c4 <UART_SetConfig+0x488>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2210      	movs	r2, #16
 8004424:	4013      	ands	r3, r2
 8004426:	d002      	beq.n	800442e <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004428:	4b27      	ldr	r3, [pc, #156]	; (80044c8 <UART_SetConfig+0x48c>)
 800442a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800442c:	e014      	b.n	8004458 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 800442e:	4b27      	ldr	r3, [pc, #156]	; (80044cc <UART_SetConfig+0x490>)
 8004430:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004432:	e011      	b.n	8004458 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004434:	f7fe fa3e 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 8004438:	0003      	movs	r3, r0
 800443a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800443c:	e00c      	b.n	8004458 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800443e:	2380      	movs	r3, #128	; 0x80
 8004440:	021b      	lsls	r3, r3, #8
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004444:	e008      	b.n	8004458 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8004446:	2300      	movs	r3, #0
 8004448:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800444a:	231a      	movs	r3, #26
 800444c:	2218      	movs	r2, #24
 800444e:	189b      	adds	r3, r3, r2
 8004450:	19db      	adds	r3, r3, r7
 8004452:	2201      	movs	r2, #1
 8004454:	701a      	strb	r2, [r3, #0]
        break;
 8004456:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445a:	2b00      	cmp	r3, #0
 800445c:	d020      	beq.n	80044a0 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	085a      	lsrs	r2, r3, #1
 8004464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004466:	18d2      	adds	r2, r2, r3
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	0019      	movs	r1, r3
 800446e:	0010      	movs	r0, r2
 8004470:	f7fb fe4a 	bl	8000108 <__udivsi3>
 8004474:	0003      	movs	r3, r0
 8004476:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447a:	2b0f      	cmp	r3, #15
 800447c:	d90a      	bls.n	8004494 <UART_SetConfig+0x458>
 800447e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004480:	2380      	movs	r3, #128	; 0x80
 8004482:	025b      	lsls	r3, r3, #9
 8004484:	429a      	cmp	r2, r3
 8004486:	d205      	bcs.n	8004494 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448a:	b29a      	uxth	r2, r3
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	60da      	str	r2, [r3, #12]
 8004492:	e005      	b.n	80044a0 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8004494:	231a      	movs	r3, #26
 8004496:	2218      	movs	r2, #24
 8004498:	189b      	adds	r3, r3, r2
 800449a:	19db      	adds	r3, r3, r7
 800449c:	2201      	movs	r2, #1
 800449e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	2200      	movs	r2, #0
 80044a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	2200      	movs	r2, #0
 80044aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80044ac:	231a      	movs	r3, #26
 80044ae:	2218      	movs	r2, #24
 80044b0:	189b      	adds	r3, r3, r2
 80044b2:	19db      	adds	r3, r3, r7
 80044b4:	781b      	ldrb	r3, [r3, #0]
}
 80044b6:	0018      	movs	r0, r3
 80044b8:	46bd      	mov	sp, r7
 80044ba:	b00e      	add	sp, #56	; 0x38
 80044bc:	bdb0      	pop	{r4, r5, r7, pc}
 80044be:	46c0      	nop			; (mov r8, r8)
 80044c0:	08005408 	.word	0x08005408
 80044c4:	40021000 	.word	0x40021000
 80044c8:	003d0900 	.word	0x003d0900
 80044cc:	00f42400 	.word	0x00f42400

080044d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	2201      	movs	r2, #1
 80044de:	4013      	ands	r3, r2
 80044e0:	d00b      	beq.n	80044fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	4a4a      	ldr	r2, [pc, #296]	; (8004614 <UART_AdvFeatureConfig+0x144>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	0019      	movs	r1, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	2202      	movs	r2, #2
 8004500:	4013      	ands	r3, r2
 8004502:	d00b      	beq.n	800451c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	4a43      	ldr	r2, [pc, #268]	; (8004618 <UART_AdvFeatureConfig+0x148>)
 800450c:	4013      	ands	r3, r2
 800450e:	0019      	movs	r1, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	2204      	movs	r2, #4
 8004522:	4013      	ands	r3, r2
 8004524:	d00b      	beq.n	800453e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	4a3b      	ldr	r2, [pc, #236]	; (800461c <UART_AdvFeatureConfig+0x14c>)
 800452e:	4013      	ands	r3, r2
 8004530:	0019      	movs	r1, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	2208      	movs	r2, #8
 8004544:	4013      	ands	r3, r2
 8004546:	d00b      	beq.n	8004560 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	4a34      	ldr	r2, [pc, #208]	; (8004620 <UART_AdvFeatureConfig+0x150>)
 8004550:	4013      	ands	r3, r2
 8004552:	0019      	movs	r1, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	2210      	movs	r2, #16
 8004566:	4013      	ands	r3, r2
 8004568:	d00b      	beq.n	8004582 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	4a2c      	ldr	r2, [pc, #176]	; (8004624 <UART_AdvFeatureConfig+0x154>)
 8004572:	4013      	ands	r3, r2
 8004574:	0019      	movs	r1, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	2220      	movs	r2, #32
 8004588:	4013      	ands	r3, r2
 800458a:	d00b      	beq.n	80045a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	4a25      	ldr	r2, [pc, #148]	; (8004628 <UART_AdvFeatureConfig+0x158>)
 8004594:	4013      	ands	r3, r2
 8004596:	0019      	movs	r1, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	2240      	movs	r2, #64	; 0x40
 80045aa:	4013      	ands	r3, r2
 80045ac:	d01d      	beq.n	80045ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	4a1d      	ldr	r2, [pc, #116]	; (800462c <UART_AdvFeatureConfig+0x15c>)
 80045b6:	4013      	ands	r3, r2
 80045b8:	0019      	movs	r1, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045ca:	2380      	movs	r3, #128	; 0x80
 80045cc:	035b      	lsls	r3, r3, #13
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d10b      	bne.n	80045ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	4a15      	ldr	r2, [pc, #84]	; (8004630 <UART_AdvFeatureConfig+0x160>)
 80045da:	4013      	ands	r3, r2
 80045dc:	0019      	movs	r1, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	2280      	movs	r2, #128	; 0x80
 80045f0:	4013      	ands	r3, r2
 80045f2:	d00b      	beq.n	800460c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	4a0e      	ldr	r2, [pc, #56]	; (8004634 <UART_AdvFeatureConfig+0x164>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	0019      	movs	r1, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	605a      	str	r2, [r3, #4]
  }
}
 800460c:	46c0      	nop			; (mov r8, r8)
 800460e:	46bd      	mov	sp, r7
 8004610:	b002      	add	sp, #8
 8004612:	bd80      	pop	{r7, pc}
 8004614:	fffdffff 	.word	0xfffdffff
 8004618:	fffeffff 	.word	0xfffeffff
 800461c:	fffbffff 	.word	0xfffbffff
 8004620:	ffff7fff 	.word	0xffff7fff
 8004624:	ffffefff 	.word	0xffffefff
 8004628:	ffffdfff 	.word	0xffffdfff
 800462c:	ffefffff 	.word	0xffefffff
 8004630:	ff9fffff 	.word	0xff9fffff
 8004634:	fff7ffff 	.word	0xfff7ffff

08004638 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b092      	sub	sp, #72	; 0x48
 800463c:	af02      	add	r7, sp, #8
 800463e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2284      	movs	r2, #132	; 0x84
 8004644:	2100      	movs	r1, #0
 8004646:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004648:	f7fd f85a 	bl	8001700 <HAL_GetTick>
 800464c:	0003      	movs	r3, r0
 800464e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2208      	movs	r2, #8
 8004658:	4013      	ands	r3, r2
 800465a:	2b08      	cmp	r3, #8
 800465c:	d12c      	bne.n	80046b8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800465e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004660:	2280      	movs	r2, #128	; 0x80
 8004662:	0391      	lsls	r1, r2, #14
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	4a46      	ldr	r2, [pc, #280]	; (8004780 <UART_CheckIdleState+0x148>)
 8004668:	9200      	str	r2, [sp, #0]
 800466a:	2200      	movs	r2, #0
 800466c:	f000 f88c 	bl	8004788 <UART_WaitOnFlagUntilTimeout>
 8004670:	1e03      	subs	r3, r0, #0
 8004672:	d021      	beq.n	80046b8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004674:	f3ef 8310 	mrs	r3, PRIMASK
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800467c:	63bb      	str	r3, [r7, #56]	; 0x38
 800467e:	2301      	movs	r3, #1
 8004680:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004684:	f383 8810 	msr	PRIMASK, r3
}
 8004688:	46c0      	nop			; (mov r8, r8)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2180      	movs	r1, #128	; 0x80
 8004696:	438a      	bics	r2, r1
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a0:	f383 8810 	msr	PRIMASK, r3
}
 80046a4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2278      	movs	r2, #120	; 0x78
 80046b0:	2100      	movs	r1, #0
 80046b2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e05f      	b.n	8004778 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2204      	movs	r2, #4
 80046c0:	4013      	ands	r3, r2
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d146      	bne.n	8004754 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c8:	2280      	movs	r2, #128	; 0x80
 80046ca:	03d1      	lsls	r1, r2, #15
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	4a2c      	ldr	r2, [pc, #176]	; (8004780 <UART_CheckIdleState+0x148>)
 80046d0:	9200      	str	r2, [sp, #0]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f000 f858 	bl	8004788 <UART_WaitOnFlagUntilTimeout>
 80046d8:	1e03      	subs	r3, r0, #0
 80046da:	d03b      	beq.n	8004754 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046dc:	f3ef 8310 	mrs	r3, PRIMASK
 80046e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80046e2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046e4:	637b      	str	r3, [r7, #52]	; 0x34
 80046e6:	2301      	movs	r3, #1
 80046e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f383 8810 	msr	PRIMASK, r3
}
 80046f0:	46c0      	nop			; (mov r8, r8)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4921      	ldr	r1, [pc, #132]	; (8004784 <UART_CheckIdleState+0x14c>)
 80046fe:	400a      	ands	r2, r1
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004704:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f383 8810 	msr	PRIMASK, r3
}
 800470c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800470e:	f3ef 8310 	mrs	r3, PRIMASK
 8004712:	61bb      	str	r3, [r7, #24]
  return(result);
 8004714:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004716:	633b      	str	r3, [r7, #48]	; 0x30
 8004718:	2301      	movs	r3, #1
 800471a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f383 8810 	msr	PRIMASK, r3
}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2101      	movs	r1, #1
 8004730:	438a      	bics	r2, r1
 8004732:	609a      	str	r2, [r3, #8]
 8004734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004736:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	f383 8810 	msr	PRIMASK, r3
}
 800473e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2280      	movs	r2, #128	; 0x80
 8004744:	2120      	movs	r1, #32
 8004746:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2278      	movs	r2, #120	; 0x78
 800474c:	2100      	movs	r1, #0
 800474e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e011      	b.n	8004778 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2220      	movs	r2, #32
 8004758:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2280      	movs	r2, #128	; 0x80
 800475e:	2120      	movs	r1, #32
 8004760:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2278      	movs	r2, #120	; 0x78
 8004772:	2100      	movs	r1, #0
 8004774:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	0018      	movs	r0, r3
 800477a:	46bd      	mov	sp, r7
 800477c:	b010      	add	sp, #64	; 0x40
 800477e:	bd80      	pop	{r7, pc}
 8004780:	01ffffff 	.word	0x01ffffff
 8004784:	fffffedf 	.word	0xfffffedf

08004788 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	1dfb      	adds	r3, r7, #7
 8004796:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004798:	e04b      	b.n	8004832 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	3301      	adds	r3, #1
 800479e:	d048      	beq.n	8004832 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a0:	f7fc ffae 	bl	8001700 <HAL_GetTick>
 80047a4:	0002      	movs	r2, r0
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d302      	bcc.n	80047b6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e04b      	b.n	8004852 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2204      	movs	r2, #4
 80047c2:	4013      	ands	r3, r2
 80047c4:	d035      	beq.n	8004832 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	2208      	movs	r2, #8
 80047ce:	4013      	ands	r3, r2
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d111      	bne.n	80047f8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2208      	movs	r2, #8
 80047da:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	0018      	movs	r0, r3
 80047e0:	f000 f83c 	bl	800485c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2284      	movs	r2, #132	; 0x84
 80047e8:	2108      	movs	r1, #8
 80047ea:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2278      	movs	r2, #120	; 0x78
 80047f0:	2100      	movs	r1, #0
 80047f2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e02c      	b.n	8004852 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	69da      	ldr	r2, [r3, #28]
 80047fe:	2380      	movs	r3, #128	; 0x80
 8004800:	011b      	lsls	r3, r3, #4
 8004802:	401a      	ands	r2, r3
 8004804:	2380      	movs	r3, #128	; 0x80
 8004806:	011b      	lsls	r3, r3, #4
 8004808:	429a      	cmp	r2, r3
 800480a:	d112      	bne.n	8004832 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2280      	movs	r2, #128	; 0x80
 8004812:	0112      	lsls	r2, r2, #4
 8004814:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	0018      	movs	r0, r3
 800481a:	f000 f81f 	bl	800485c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2284      	movs	r2, #132	; 0x84
 8004822:	2120      	movs	r1, #32
 8004824:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2278      	movs	r2, #120	; 0x78
 800482a:	2100      	movs	r1, #0
 800482c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e00f      	b.n	8004852 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	4013      	ands	r3, r2
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	425a      	negs	r2, r3
 8004842:	4153      	adcs	r3, r2
 8004844:	b2db      	uxtb	r3, r3
 8004846:	001a      	movs	r2, r3
 8004848:	1dfb      	adds	r3, r7, #7
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	429a      	cmp	r2, r3
 800484e:	d0a4      	beq.n	800479a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	0018      	movs	r0, r3
 8004854:	46bd      	mov	sp, r7
 8004856:	b004      	add	sp, #16
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b08e      	sub	sp, #56	; 0x38
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004864:	f3ef 8310 	mrs	r3, PRIMASK
 8004868:	617b      	str	r3, [r7, #20]
  return(result);
 800486a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800486c:	637b      	str	r3, [r7, #52]	; 0x34
 800486e:	2301      	movs	r3, #1
 8004870:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	f383 8810 	msr	PRIMASK, r3
}
 8004878:	46c0      	nop			; (mov r8, r8)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4926      	ldr	r1, [pc, #152]	; (8004920 <UART_EndRxTransfer+0xc4>)
 8004886:	400a      	ands	r2, r1
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	f383 8810 	msr	PRIMASK, r3
}
 8004894:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004896:	f3ef 8310 	mrs	r3, PRIMASK
 800489a:	623b      	str	r3, [r7, #32]
  return(result);
 800489c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489e:	633b      	str	r3, [r7, #48]	; 0x30
 80048a0:	2301      	movs	r3, #1
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	f383 8810 	msr	PRIMASK, r3
}
 80048aa:	46c0      	nop			; (mov r8, r8)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2101      	movs	r1, #1
 80048b8:	438a      	bics	r2, r1
 80048ba:	609a      	str	r2, [r3, #8]
 80048bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048be:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c2:	f383 8810 	msr	PRIMASK, r3
}
 80048c6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d118      	bne.n	8004902 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048d0:	f3ef 8310 	mrs	r3, PRIMASK
 80048d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80048d6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048da:	2301      	movs	r3, #1
 80048dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f383 8810 	msr	PRIMASK, r3
}
 80048e4:	46c0      	nop			; (mov r8, r8)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2110      	movs	r1, #16
 80048f2:	438a      	bics	r2, r1
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f383 8810 	msr	PRIMASK, r3
}
 8004900:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2280      	movs	r2, #128	; 0x80
 8004906:	2120      	movs	r1, #32
 8004908:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004916:	46c0      	nop			; (mov r8, r8)
 8004918:	46bd      	mov	sp, r7
 800491a:	b00e      	add	sp, #56	; 0x38
 800491c:	bd80      	pop	{r7, pc}
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	fffffedf 	.word	0xfffffedf

08004924 <std>:
 8004924:	2300      	movs	r3, #0
 8004926:	b510      	push	{r4, lr}
 8004928:	0004      	movs	r4, r0
 800492a:	6003      	str	r3, [r0, #0]
 800492c:	6043      	str	r3, [r0, #4]
 800492e:	6083      	str	r3, [r0, #8]
 8004930:	8181      	strh	r1, [r0, #12]
 8004932:	6643      	str	r3, [r0, #100]	; 0x64
 8004934:	81c2      	strh	r2, [r0, #14]
 8004936:	6103      	str	r3, [r0, #16]
 8004938:	6143      	str	r3, [r0, #20]
 800493a:	6183      	str	r3, [r0, #24]
 800493c:	0019      	movs	r1, r3
 800493e:	2208      	movs	r2, #8
 8004940:	305c      	adds	r0, #92	; 0x5c
 8004942:	f000 fa05 	bl	8004d50 <memset>
 8004946:	4b0b      	ldr	r3, [pc, #44]	; (8004974 <std+0x50>)
 8004948:	6224      	str	r4, [r4, #32]
 800494a:	6263      	str	r3, [r4, #36]	; 0x24
 800494c:	4b0a      	ldr	r3, [pc, #40]	; (8004978 <std+0x54>)
 800494e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004950:	4b0a      	ldr	r3, [pc, #40]	; (800497c <std+0x58>)
 8004952:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004954:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <std+0x5c>)
 8004956:	6323      	str	r3, [r4, #48]	; 0x30
 8004958:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <std+0x60>)
 800495a:	429c      	cmp	r4, r3
 800495c:	d005      	beq.n	800496a <std+0x46>
 800495e:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <std+0x64>)
 8004960:	429c      	cmp	r4, r3
 8004962:	d002      	beq.n	800496a <std+0x46>
 8004964:	4b09      	ldr	r3, [pc, #36]	; (800498c <std+0x68>)
 8004966:	429c      	cmp	r4, r3
 8004968:	d103      	bne.n	8004972 <std+0x4e>
 800496a:	0020      	movs	r0, r4
 800496c:	3058      	adds	r0, #88	; 0x58
 800496e:	f000 fa6f 	bl	8004e50 <__retarget_lock_init_recursive>
 8004972:	bd10      	pop	{r4, pc}
 8004974:	08004b6d 	.word	0x08004b6d
 8004978:	08004b95 	.word	0x08004b95
 800497c:	08004bcd 	.word	0x08004bcd
 8004980:	08004bf9 	.word	0x08004bf9
 8004984:	2000032c 	.word	0x2000032c
 8004988:	20000394 	.word	0x20000394
 800498c:	200003fc 	.word	0x200003fc

08004990 <stdio_exit_handler>:
 8004990:	b510      	push	{r4, lr}
 8004992:	4a03      	ldr	r2, [pc, #12]	; (80049a0 <stdio_exit_handler+0x10>)
 8004994:	4903      	ldr	r1, [pc, #12]	; (80049a4 <stdio_exit_handler+0x14>)
 8004996:	4804      	ldr	r0, [pc, #16]	; (80049a8 <stdio_exit_handler+0x18>)
 8004998:	f000 f86c 	bl	8004a74 <_fwalk_sglue>
 800499c:	bd10      	pop	{r4, pc}
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	20000124 	.word	0x20000124
 80049a4:	08005169 	.word	0x08005169
 80049a8:	20000130 	.word	0x20000130

080049ac <cleanup_stdio>:
 80049ac:	6841      	ldr	r1, [r0, #4]
 80049ae:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <cleanup_stdio+0x30>)
 80049b0:	b510      	push	{r4, lr}
 80049b2:	0004      	movs	r4, r0
 80049b4:	4299      	cmp	r1, r3
 80049b6:	d001      	beq.n	80049bc <cleanup_stdio+0x10>
 80049b8:	f000 fbd6 	bl	8005168 <_fflush_r>
 80049bc:	68a1      	ldr	r1, [r4, #8]
 80049be:	4b08      	ldr	r3, [pc, #32]	; (80049e0 <cleanup_stdio+0x34>)
 80049c0:	4299      	cmp	r1, r3
 80049c2:	d002      	beq.n	80049ca <cleanup_stdio+0x1e>
 80049c4:	0020      	movs	r0, r4
 80049c6:	f000 fbcf 	bl	8005168 <_fflush_r>
 80049ca:	68e1      	ldr	r1, [r4, #12]
 80049cc:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <cleanup_stdio+0x38>)
 80049ce:	4299      	cmp	r1, r3
 80049d0:	d002      	beq.n	80049d8 <cleanup_stdio+0x2c>
 80049d2:	0020      	movs	r0, r4
 80049d4:	f000 fbc8 	bl	8005168 <_fflush_r>
 80049d8:	bd10      	pop	{r4, pc}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	2000032c 	.word	0x2000032c
 80049e0:	20000394 	.word	0x20000394
 80049e4:	200003fc 	.word	0x200003fc

080049e8 <global_stdio_init.part.0>:
 80049e8:	b510      	push	{r4, lr}
 80049ea:	4b09      	ldr	r3, [pc, #36]	; (8004a10 <global_stdio_init.part.0+0x28>)
 80049ec:	4a09      	ldr	r2, [pc, #36]	; (8004a14 <global_stdio_init.part.0+0x2c>)
 80049ee:	2104      	movs	r1, #4
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	4809      	ldr	r0, [pc, #36]	; (8004a18 <global_stdio_init.part.0+0x30>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	f7ff ff95 	bl	8004924 <std>
 80049fa:	2201      	movs	r2, #1
 80049fc:	2109      	movs	r1, #9
 80049fe:	4807      	ldr	r0, [pc, #28]	; (8004a1c <global_stdio_init.part.0+0x34>)
 8004a00:	f7ff ff90 	bl	8004924 <std>
 8004a04:	2202      	movs	r2, #2
 8004a06:	2112      	movs	r1, #18
 8004a08:	4805      	ldr	r0, [pc, #20]	; (8004a20 <global_stdio_init.part.0+0x38>)
 8004a0a:	f7ff ff8b 	bl	8004924 <std>
 8004a0e:	bd10      	pop	{r4, pc}
 8004a10:	20000464 	.word	0x20000464
 8004a14:	08004991 	.word	0x08004991
 8004a18:	2000032c 	.word	0x2000032c
 8004a1c:	20000394 	.word	0x20000394
 8004a20:	200003fc 	.word	0x200003fc

08004a24 <__sfp_lock_acquire>:
 8004a24:	b510      	push	{r4, lr}
 8004a26:	4802      	ldr	r0, [pc, #8]	; (8004a30 <__sfp_lock_acquire+0xc>)
 8004a28:	f000 fa13 	bl	8004e52 <__retarget_lock_acquire_recursive>
 8004a2c:	bd10      	pop	{r4, pc}
 8004a2e:	46c0      	nop			; (mov r8, r8)
 8004a30:	2000046d 	.word	0x2000046d

08004a34 <__sfp_lock_release>:
 8004a34:	b510      	push	{r4, lr}
 8004a36:	4802      	ldr	r0, [pc, #8]	; (8004a40 <__sfp_lock_release+0xc>)
 8004a38:	f000 fa0c 	bl	8004e54 <__retarget_lock_release_recursive>
 8004a3c:	bd10      	pop	{r4, pc}
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	2000046d 	.word	0x2000046d

08004a44 <__sinit>:
 8004a44:	b510      	push	{r4, lr}
 8004a46:	0004      	movs	r4, r0
 8004a48:	f7ff ffec 	bl	8004a24 <__sfp_lock_acquire>
 8004a4c:	6a23      	ldr	r3, [r4, #32]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <__sinit+0x14>
 8004a52:	f7ff ffef 	bl	8004a34 <__sfp_lock_release>
 8004a56:	bd10      	pop	{r4, pc}
 8004a58:	4b04      	ldr	r3, [pc, #16]	; (8004a6c <__sinit+0x28>)
 8004a5a:	6223      	str	r3, [r4, #32]
 8004a5c:	4b04      	ldr	r3, [pc, #16]	; (8004a70 <__sinit+0x2c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1f6      	bne.n	8004a52 <__sinit+0xe>
 8004a64:	f7ff ffc0 	bl	80049e8 <global_stdio_init.part.0>
 8004a68:	e7f3      	b.n	8004a52 <__sinit+0xe>
 8004a6a:	46c0      	nop			; (mov r8, r8)
 8004a6c:	080049ad 	.word	0x080049ad
 8004a70:	20000464 	.word	0x20000464

08004a74 <_fwalk_sglue>:
 8004a74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a76:	0014      	movs	r4, r2
 8004a78:	2600      	movs	r6, #0
 8004a7a:	9000      	str	r0, [sp, #0]
 8004a7c:	9101      	str	r1, [sp, #4]
 8004a7e:	68a5      	ldr	r5, [r4, #8]
 8004a80:	6867      	ldr	r7, [r4, #4]
 8004a82:	3f01      	subs	r7, #1
 8004a84:	d504      	bpl.n	8004a90 <_fwalk_sglue+0x1c>
 8004a86:	6824      	ldr	r4, [r4, #0]
 8004a88:	2c00      	cmp	r4, #0
 8004a8a:	d1f8      	bne.n	8004a7e <_fwalk_sglue+0xa>
 8004a8c:	0030      	movs	r0, r6
 8004a8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a90:	89ab      	ldrh	r3, [r5, #12]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d908      	bls.n	8004aa8 <_fwalk_sglue+0x34>
 8004a96:	220e      	movs	r2, #14
 8004a98:	5eab      	ldrsh	r3, [r5, r2]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	d004      	beq.n	8004aa8 <_fwalk_sglue+0x34>
 8004a9e:	0029      	movs	r1, r5
 8004aa0:	9800      	ldr	r0, [sp, #0]
 8004aa2:	9b01      	ldr	r3, [sp, #4]
 8004aa4:	4798      	blx	r3
 8004aa6:	4306      	orrs	r6, r0
 8004aa8:	3568      	adds	r5, #104	; 0x68
 8004aaa:	e7ea      	b.n	8004a82 <_fwalk_sglue+0xe>

08004aac <_puts_r>:
 8004aac:	6a03      	ldr	r3, [r0, #32]
 8004aae:	b570      	push	{r4, r5, r6, lr}
 8004ab0:	0005      	movs	r5, r0
 8004ab2:	000e      	movs	r6, r1
 8004ab4:	6884      	ldr	r4, [r0, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <_puts_r+0x12>
 8004aba:	f7ff ffc3 	bl	8004a44 <__sinit>
 8004abe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ac0:	07db      	lsls	r3, r3, #31
 8004ac2:	d405      	bmi.n	8004ad0 <_puts_r+0x24>
 8004ac4:	89a3      	ldrh	r3, [r4, #12]
 8004ac6:	059b      	lsls	r3, r3, #22
 8004ac8:	d402      	bmi.n	8004ad0 <_puts_r+0x24>
 8004aca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004acc:	f000 f9c1 	bl	8004e52 <__retarget_lock_acquire_recursive>
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	071b      	lsls	r3, r3, #28
 8004ad4:	d502      	bpl.n	8004adc <_puts_r+0x30>
 8004ad6:	6923      	ldr	r3, [r4, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d11f      	bne.n	8004b1c <_puts_r+0x70>
 8004adc:	0021      	movs	r1, r4
 8004ade:	0028      	movs	r0, r5
 8004ae0:	f000 f8d2 	bl	8004c88 <__swsetup_r>
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	d019      	beq.n	8004b1c <_puts_r+0x70>
 8004ae8:	2501      	movs	r5, #1
 8004aea:	426d      	negs	r5, r5
 8004aec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004aee:	07db      	lsls	r3, r3, #31
 8004af0:	d405      	bmi.n	8004afe <_puts_r+0x52>
 8004af2:	89a3      	ldrh	r3, [r4, #12]
 8004af4:	059b      	lsls	r3, r3, #22
 8004af6:	d402      	bmi.n	8004afe <_puts_r+0x52>
 8004af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004afa:	f000 f9ab 	bl	8004e54 <__retarget_lock_release_recursive>
 8004afe:	0028      	movs	r0, r5
 8004b00:	bd70      	pop	{r4, r5, r6, pc}
 8004b02:	3601      	adds	r6, #1
 8004b04:	60a3      	str	r3, [r4, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	da04      	bge.n	8004b14 <_puts_r+0x68>
 8004b0a:	69a2      	ldr	r2, [r4, #24]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	dc16      	bgt.n	8004b3e <_puts_r+0x92>
 8004b10:	290a      	cmp	r1, #10
 8004b12:	d014      	beq.n	8004b3e <_puts_r+0x92>
 8004b14:	6823      	ldr	r3, [r4, #0]
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	6022      	str	r2, [r4, #0]
 8004b1a:	7019      	strb	r1, [r3, #0]
 8004b1c:	68a3      	ldr	r3, [r4, #8]
 8004b1e:	7831      	ldrb	r1, [r6, #0]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	2900      	cmp	r1, #0
 8004b24:	d1ed      	bne.n	8004b02 <_puts_r+0x56>
 8004b26:	60a3      	str	r3, [r4, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	da0f      	bge.n	8004b4c <_puts_r+0xa0>
 8004b2c:	0028      	movs	r0, r5
 8004b2e:	0022      	movs	r2, r4
 8004b30:	310a      	adds	r1, #10
 8004b32:	f000 f867 	bl	8004c04 <__swbuf_r>
 8004b36:	250a      	movs	r5, #10
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d1d7      	bne.n	8004aec <_puts_r+0x40>
 8004b3c:	e7d4      	b.n	8004ae8 <_puts_r+0x3c>
 8004b3e:	0022      	movs	r2, r4
 8004b40:	0028      	movs	r0, r5
 8004b42:	f000 f85f 	bl	8004c04 <__swbuf_r>
 8004b46:	3001      	adds	r0, #1
 8004b48:	d1e8      	bne.n	8004b1c <_puts_r+0x70>
 8004b4a:	e7cd      	b.n	8004ae8 <_puts_r+0x3c>
 8004b4c:	250a      	movs	r5, #10
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	6022      	str	r2, [r4, #0]
 8004b54:	701d      	strb	r5, [r3, #0]
 8004b56:	e7c9      	b.n	8004aec <_puts_r+0x40>

08004b58 <puts>:
 8004b58:	b510      	push	{r4, lr}
 8004b5a:	4b03      	ldr	r3, [pc, #12]	; (8004b68 <puts+0x10>)
 8004b5c:	0001      	movs	r1, r0
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	f7ff ffa4 	bl	8004aac <_puts_r>
 8004b64:	bd10      	pop	{r4, pc}
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	2000017c 	.word	0x2000017c

08004b6c <__sread>:
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	000c      	movs	r4, r1
 8004b70:	250e      	movs	r5, #14
 8004b72:	5f49      	ldrsh	r1, [r1, r5]
 8004b74:	f000 f91a 	bl	8004dac <_read_r>
 8004b78:	2800      	cmp	r0, #0
 8004b7a:	db03      	blt.n	8004b84 <__sread+0x18>
 8004b7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004b7e:	181b      	adds	r3, r3, r0
 8004b80:	6563      	str	r3, [r4, #84]	; 0x54
 8004b82:	bd70      	pop	{r4, r5, r6, pc}
 8004b84:	89a3      	ldrh	r3, [r4, #12]
 8004b86:	4a02      	ldr	r2, [pc, #8]	; (8004b90 <__sread+0x24>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	81a3      	strh	r3, [r4, #12]
 8004b8c:	e7f9      	b.n	8004b82 <__sread+0x16>
 8004b8e:	46c0      	nop			; (mov r8, r8)
 8004b90:	ffffefff 	.word	0xffffefff

08004b94 <__swrite>:
 8004b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b96:	001f      	movs	r7, r3
 8004b98:	898b      	ldrh	r3, [r1, #12]
 8004b9a:	0005      	movs	r5, r0
 8004b9c:	000c      	movs	r4, r1
 8004b9e:	0016      	movs	r6, r2
 8004ba0:	05db      	lsls	r3, r3, #23
 8004ba2:	d505      	bpl.n	8004bb0 <__swrite+0x1c>
 8004ba4:	230e      	movs	r3, #14
 8004ba6:	5ec9      	ldrsh	r1, [r1, r3]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	2302      	movs	r3, #2
 8004bac:	f000 f8ea 	bl	8004d84 <_lseek_r>
 8004bb0:	89a3      	ldrh	r3, [r4, #12]
 8004bb2:	4a05      	ldr	r2, [pc, #20]	; (8004bc8 <__swrite+0x34>)
 8004bb4:	0028      	movs	r0, r5
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	81a3      	strh	r3, [r4, #12]
 8004bba:	0032      	movs	r2, r6
 8004bbc:	230e      	movs	r3, #14
 8004bbe:	5ee1      	ldrsh	r1, [r4, r3]
 8004bc0:	003b      	movs	r3, r7
 8004bc2:	f000 f907 	bl	8004dd4 <_write_r>
 8004bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bc8:	ffffefff 	.word	0xffffefff

08004bcc <__sseek>:
 8004bcc:	b570      	push	{r4, r5, r6, lr}
 8004bce:	000c      	movs	r4, r1
 8004bd0:	250e      	movs	r5, #14
 8004bd2:	5f49      	ldrsh	r1, [r1, r5]
 8004bd4:	f000 f8d6 	bl	8004d84 <_lseek_r>
 8004bd8:	89a3      	ldrh	r3, [r4, #12]
 8004bda:	1c42      	adds	r2, r0, #1
 8004bdc:	d103      	bne.n	8004be6 <__sseek+0x1a>
 8004bde:	4a05      	ldr	r2, [pc, #20]	; (8004bf4 <__sseek+0x28>)
 8004be0:	4013      	ands	r3, r2
 8004be2:	81a3      	strh	r3, [r4, #12]
 8004be4:	bd70      	pop	{r4, r5, r6, pc}
 8004be6:	2280      	movs	r2, #128	; 0x80
 8004be8:	0152      	lsls	r2, r2, #5
 8004bea:	4313      	orrs	r3, r2
 8004bec:	81a3      	strh	r3, [r4, #12]
 8004bee:	6560      	str	r0, [r4, #84]	; 0x54
 8004bf0:	e7f8      	b.n	8004be4 <__sseek+0x18>
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	ffffefff 	.word	0xffffefff

08004bf8 <__sclose>:
 8004bf8:	b510      	push	{r4, lr}
 8004bfa:	230e      	movs	r3, #14
 8004bfc:	5ec9      	ldrsh	r1, [r1, r3]
 8004bfe:	f000 f8af 	bl	8004d60 <_close_r>
 8004c02:	bd10      	pop	{r4, pc}

08004c04 <__swbuf_r>:
 8004c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c06:	0006      	movs	r6, r0
 8004c08:	000d      	movs	r5, r1
 8004c0a:	0014      	movs	r4, r2
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	d004      	beq.n	8004c1a <__swbuf_r+0x16>
 8004c10:	6a03      	ldr	r3, [r0, #32]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <__swbuf_r+0x16>
 8004c16:	f7ff ff15 	bl	8004a44 <__sinit>
 8004c1a:	69a3      	ldr	r3, [r4, #24]
 8004c1c:	60a3      	str	r3, [r4, #8]
 8004c1e:	89a3      	ldrh	r3, [r4, #12]
 8004c20:	071b      	lsls	r3, r3, #28
 8004c22:	d528      	bpl.n	8004c76 <__swbuf_r+0x72>
 8004c24:	6923      	ldr	r3, [r4, #16]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d025      	beq.n	8004c76 <__swbuf_r+0x72>
 8004c2a:	6923      	ldr	r3, [r4, #16]
 8004c2c:	6820      	ldr	r0, [r4, #0]
 8004c2e:	b2ef      	uxtb	r7, r5
 8004c30:	1ac0      	subs	r0, r0, r3
 8004c32:	6963      	ldr	r3, [r4, #20]
 8004c34:	b2ed      	uxtb	r5, r5
 8004c36:	4283      	cmp	r3, r0
 8004c38:	dc05      	bgt.n	8004c46 <__swbuf_r+0x42>
 8004c3a:	0021      	movs	r1, r4
 8004c3c:	0030      	movs	r0, r6
 8004c3e:	f000 fa93 	bl	8005168 <_fflush_r>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d11d      	bne.n	8004c82 <__swbuf_r+0x7e>
 8004c46:	68a3      	ldr	r3, [r4, #8]
 8004c48:	3001      	adds	r0, #1
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	60a3      	str	r3, [r4, #8]
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	1c5a      	adds	r2, r3, #1
 8004c52:	6022      	str	r2, [r4, #0]
 8004c54:	701f      	strb	r7, [r3, #0]
 8004c56:	6963      	ldr	r3, [r4, #20]
 8004c58:	4283      	cmp	r3, r0
 8004c5a:	d004      	beq.n	8004c66 <__swbuf_r+0x62>
 8004c5c:	89a3      	ldrh	r3, [r4, #12]
 8004c5e:	07db      	lsls	r3, r3, #31
 8004c60:	d507      	bpl.n	8004c72 <__swbuf_r+0x6e>
 8004c62:	2d0a      	cmp	r5, #10
 8004c64:	d105      	bne.n	8004c72 <__swbuf_r+0x6e>
 8004c66:	0021      	movs	r1, r4
 8004c68:	0030      	movs	r0, r6
 8004c6a:	f000 fa7d 	bl	8005168 <_fflush_r>
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	d107      	bne.n	8004c82 <__swbuf_r+0x7e>
 8004c72:	0028      	movs	r0, r5
 8004c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c76:	0021      	movs	r1, r4
 8004c78:	0030      	movs	r0, r6
 8004c7a:	f000 f805 	bl	8004c88 <__swsetup_r>
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	d0d3      	beq.n	8004c2a <__swbuf_r+0x26>
 8004c82:	2501      	movs	r5, #1
 8004c84:	426d      	negs	r5, r5
 8004c86:	e7f4      	b.n	8004c72 <__swbuf_r+0x6e>

08004c88 <__swsetup_r>:
 8004c88:	4b30      	ldr	r3, [pc, #192]	; (8004d4c <__swsetup_r+0xc4>)
 8004c8a:	b570      	push	{r4, r5, r6, lr}
 8004c8c:	0005      	movs	r5, r0
 8004c8e:	6818      	ldr	r0, [r3, #0]
 8004c90:	000c      	movs	r4, r1
 8004c92:	2800      	cmp	r0, #0
 8004c94:	d004      	beq.n	8004ca0 <__swsetup_r+0x18>
 8004c96:	6a03      	ldr	r3, [r0, #32]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <__swsetup_r+0x18>
 8004c9c:	f7ff fed2 	bl	8004a44 <__sinit>
 8004ca0:	230c      	movs	r3, #12
 8004ca2:	5ee2      	ldrsh	r2, [r4, r3]
 8004ca4:	b293      	uxth	r3, r2
 8004ca6:	0711      	lsls	r1, r2, #28
 8004ca8:	d423      	bmi.n	8004cf2 <__swsetup_r+0x6a>
 8004caa:	06d9      	lsls	r1, r3, #27
 8004cac:	d407      	bmi.n	8004cbe <__swsetup_r+0x36>
 8004cae:	2309      	movs	r3, #9
 8004cb0:	2001      	movs	r0, #1
 8004cb2:	602b      	str	r3, [r5, #0]
 8004cb4:	3337      	adds	r3, #55	; 0x37
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	81a3      	strh	r3, [r4, #12]
 8004cba:	4240      	negs	r0, r0
 8004cbc:	bd70      	pop	{r4, r5, r6, pc}
 8004cbe:	075b      	lsls	r3, r3, #29
 8004cc0:	d513      	bpl.n	8004cea <__swsetup_r+0x62>
 8004cc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cc4:	2900      	cmp	r1, #0
 8004cc6:	d008      	beq.n	8004cda <__swsetup_r+0x52>
 8004cc8:	0023      	movs	r3, r4
 8004cca:	3344      	adds	r3, #68	; 0x44
 8004ccc:	4299      	cmp	r1, r3
 8004cce:	d002      	beq.n	8004cd6 <__swsetup_r+0x4e>
 8004cd0:	0028      	movs	r0, r5
 8004cd2:	f000 f8c1 	bl	8004e58 <_free_r>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	6363      	str	r3, [r4, #52]	; 0x34
 8004cda:	2224      	movs	r2, #36	; 0x24
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	4393      	bics	r3, r2
 8004ce0:	81a3      	strh	r3, [r4, #12]
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	6063      	str	r3, [r4, #4]
 8004ce6:	6923      	ldr	r3, [r4, #16]
 8004ce8:	6023      	str	r3, [r4, #0]
 8004cea:	2308      	movs	r3, #8
 8004cec:	89a2      	ldrh	r2, [r4, #12]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	81a3      	strh	r3, [r4, #12]
 8004cf2:	6923      	ldr	r3, [r4, #16]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10b      	bne.n	8004d10 <__swsetup_r+0x88>
 8004cf8:	21a0      	movs	r1, #160	; 0xa0
 8004cfa:	2280      	movs	r2, #128	; 0x80
 8004cfc:	89a3      	ldrh	r3, [r4, #12]
 8004cfe:	0089      	lsls	r1, r1, #2
 8004d00:	0092      	lsls	r2, r2, #2
 8004d02:	400b      	ands	r3, r1
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d003      	beq.n	8004d10 <__swsetup_r+0x88>
 8004d08:	0021      	movs	r1, r4
 8004d0a:	0028      	movs	r0, r5
 8004d0c:	f000 fa80 	bl	8005210 <__smakebuf_r>
 8004d10:	220c      	movs	r2, #12
 8004d12:	5ea3      	ldrsh	r3, [r4, r2]
 8004d14:	2001      	movs	r0, #1
 8004d16:	001a      	movs	r2, r3
 8004d18:	b299      	uxth	r1, r3
 8004d1a:	4002      	ands	r2, r0
 8004d1c:	4203      	tst	r3, r0
 8004d1e:	d00f      	beq.n	8004d40 <__swsetup_r+0xb8>
 8004d20:	2200      	movs	r2, #0
 8004d22:	60a2      	str	r2, [r4, #8]
 8004d24:	6962      	ldr	r2, [r4, #20]
 8004d26:	4252      	negs	r2, r2
 8004d28:	61a2      	str	r2, [r4, #24]
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	6922      	ldr	r2, [r4, #16]
 8004d2e:	4282      	cmp	r2, r0
 8004d30:	d1c4      	bne.n	8004cbc <__swsetup_r+0x34>
 8004d32:	0609      	lsls	r1, r1, #24
 8004d34:	d5c2      	bpl.n	8004cbc <__swsetup_r+0x34>
 8004d36:	2240      	movs	r2, #64	; 0x40
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	81a3      	strh	r3, [r4, #12]
 8004d3c:	3801      	subs	r0, #1
 8004d3e:	e7bd      	b.n	8004cbc <__swsetup_r+0x34>
 8004d40:	0788      	lsls	r0, r1, #30
 8004d42:	d400      	bmi.n	8004d46 <__swsetup_r+0xbe>
 8004d44:	6962      	ldr	r2, [r4, #20]
 8004d46:	60a2      	str	r2, [r4, #8]
 8004d48:	e7ef      	b.n	8004d2a <__swsetup_r+0xa2>
 8004d4a:	46c0      	nop			; (mov r8, r8)
 8004d4c:	2000017c 	.word	0x2000017c

08004d50 <memset>:
 8004d50:	0003      	movs	r3, r0
 8004d52:	1882      	adds	r2, r0, r2
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d100      	bne.n	8004d5a <memset+0xa>
 8004d58:	4770      	bx	lr
 8004d5a:	7019      	strb	r1, [r3, #0]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	e7f9      	b.n	8004d54 <memset+0x4>

08004d60 <_close_r>:
 8004d60:	2300      	movs	r3, #0
 8004d62:	b570      	push	{r4, r5, r6, lr}
 8004d64:	4d06      	ldr	r5, [pc, #24]	; (8004d80 <_close_r+0x20>)
 8004d66:	0004      	movs	r4, r0
 8004d68:	0008      	movs	r0, r1
 8004d6a:	602b      	str	r3, [r5, #0]
 8004d6c:	f7fc fbb7 	bl	80014de <_close>
 8004d70:	1c43      	adds	r3, r0, #1
 8004d72:	d103      	bne.n	8004d7c <_close_r+0x1c>
 8004d74:	682b      	ldr	r3, [r5, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d000      	beq.n	8004d7c <_close_r+0x1c>
 8004d7a:	6023      	str	r3, [r4, #0]
 8004d7c:	bd70      	pop	{r4, r5, r6, pc}
 8004d7e:	46c0      	nop			; (mov r8, r8)
 8004d80:	20000468 	.word	0x20000468

08004d84 <_lseek_r>:
 8004d84:	b570      	push	{r4, r5, r6, lr}
 8004d86:	0004      	movs	r4, r0
 8004d88:	0008      	movs	r0, r1
 8004d8a:	0011      	movs	r1, r2
 8004d8c:	001a      	movs	r2, r3
 8004d8e:	2300      	movs	r3, #0
 8004d90:	4d05      	ldr	r5, [pc, #20]	; (8004da8 <_lseek_r+0x24>)
 8004d92:	602b      	str	r3, [r5, #0]
 8004d94:	f7fc fbc4 	bl	8001520 <_lseek>
 8004d98:	1c43      	adds	r3, r0, #1
 8004d9a:	d103      	bne.n	8004da4 <_lseek_r+0x20>
 8004d9c:	682b      	ldr	r3, [r5, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d000      	beq.n	8004da4 <_lseek_r+0x20>
 8004da2:	6023      	str	r3, [r4, #0]
 8004da4:	bd70      	pop	{r4, r5, r6, pc}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	20000468 	.word	0x20000468

08004dac <_read_r>:
 8004dac:	b570      	push	{r4, r5, r6, lr}
 8004dae:	0004      	movs	r4, r0
 8004db0:	0008      	movs	r0, r1
 8004db2:	0011      	movs	r1, r2
 8004db4:	001a      	movs	r2, r3
 8004db6:	2300      	movs	r3, #0
 8004db8:	4d05      	ldr	r5, [pc, #20]	; (8004dd0 <_read_r+0x24>)
 8004dba:	602b      	str	r3, [r5, #0]
 8004dbc:	f7fc fb56 	bl	800146c <_read>
 8004dc0:	1c43      	adds	r3, r0, #1
 8004dc2:	d103      	bne.n	8004dcc <_read_r+0x20>
 8004dc4:	682b      	ldr	r3, [r5, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d000      	beq.n	8004dcc <_read_r+0x20>
 8004dca:	6023      	str	r3, [r4, #0]
 8004dcc:	bd70      	pop	{r4, r5, r6, pc}
 8004dce:	46c0      	nop			; (mov r8, r8)
 8004dd0:	20000468 	.word	0x20000468

08004dd4 <_write_r>:
 8004dd4:	b570      	push	{r4, r5, r6, lr}
 8004dd6:	0004      	movs	r4, r0
 8004dd8:	0008      	movs	r0, r1
 8004dda:	0011      	movs	r1, r2
 8004ddc:	001a      	movs	r2, r3
 8004dde:	2300      	movs	r3, #0
 8004de0:	4d05      	ldr	r5, [pc, #20]	; (8004df8 <_write_r+0x24>)
 8004de2:	602b      	str	r3, [r5, #0]
 8004de4:	f7fc fb5f 	bl	80014a6 <_write>
 8004de8:	1c43      	adds	r3, r0, #1
 8004dea:	d103      	bne.n	8004df4 <_write_r+0x20>
 8004dec:	682b      	ldr	r3, [r5, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d000      	beq.n	8004df4 <_write_r+0x20>
 8004df2:	6023      	str	r3, [r4, #0]
 8004df4:	bd70      	pop	{r4, r5, r6, pc}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	20000468 	.word	0x20000468

08004dfc <__errno>:
 8004dfc:	4b01      	ldr	r3, [pc, #4]	; (8004e04 <__errno+0x8>)
 8004dfe:	6818      	ldr	r0, [r3, #0]
 8004e00:	4770      	bx	lr
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	2000017c 	.word	0x2000017c

08004e08 <__libc_init_array>:
 8004e08:	b570      	push	{r4, r5, r6, lr}
 8004e0a:	2600      	movs	r6, #0
 8004e0c:	4c0c      	ldr	r4, [pc, #48]	; (8004e40 <__libc_init_array+0x38>)
 8004e0e:	4d0d      	ldr	r5, [pc, #52]	; (8004e44 <__libc_init_array+0x3c>)
 8004e10:	1b64      	subs	r4, r4, r5
 8004e12:	10a4      	asrs	r4, r4, #2
 8004e14:	42a6      	cmp	r6, r4
 8004e16:	d109      	bne.n	8004e2c <__libc_init_array+0x24>
 8004e18:	2600      	movs	r6, #0
 8004e1a:	f000 fa6d 	bl	80052f8 <_init>
 8004e1e:	4c0a      	ldr	r4, [pc, #40]	; (8004e48 <__libc_init_array+0x40>)
 8004e20:	4d0a      	ldr	r5, [pc, #40]	; (8004e4c <__libc_init_array+0x44>)
 8004e22:	1b64      	subs	r4, r4, r5
 8004e24:	10a4      	asrs	r4, r4, #2
 8004e26:	42a6      	cmp	r6, r4
 8004e28:	d105      	bne.n	8004e36 <__libc_init_array+0x2e>
 8004e2a:	bd70      	pop	{r4, r5, r6, pc}
 8004e2c:	00b3      	lsls	r3, r6, #2
 8004e2e:	58eb      	ldr	r3, [r5, r3]
 8004e30:	4798      	blx	r3
 8004e32:	3601      	adds	r6, #1
 8004e34:	e7ee      	b.n	8004e14 <__libc_init_array+0xc>
 8004e36:	00b3      	lsls	r3, r6, #2
 8004e38:	58eb      	ldr	r3, [r5, r3]
 8004e3a:	4798      	blx	r3
 8004e3c:	3601      	adds	r6, #1
 8004e3e:	e7f2      	b.n	8004e26 <__libc_init_array+0x1e>
 8004e40:	08005434 	.word	0x08005434
 8004e44:	08005434 	.word	0x08005434
 8004e48:	08005438 	.word	0x08005438
 8004e4c:	08005434 	.word	0x08005434

08004e50 <__retarget_lock_init_recursive>:
 8004e50:	4770      	bx	lr

08004e52 <__retarget_lock_acquire_recursive>:
 8004e52:	4770      	bx	lr

08004e54 <__retarget_lock_release_recursive>:
 8004e54:	4770      	bx	lr
	...

08004e58 <_free_r>:
 8004e58:	b570      	push	{r4, r5, r6, lr}
 8004e5a:	0005      	movs	r5, r0
 8004e5c:	2900      	cmp	r1, #0
 8004e5e:	d010      	beq.n	8004e82 <_free_r+0x2a>
 8004e60:	1f0c      	subs	r4, r1, #4
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	da00      	bge.n	8004e6a <_free_r+0x12>
 8004e68:	18e4      	adds	r4, r4, r3
 8004e6a:	0028      	movs	r0, r5
 8004e6c:	f000 f8e2 	bl	8005034 <__malloc_lock>
 8004e70:	4a1d      	ldr	r2, [pc, #116]	; (8004ee8 <_free_r+0x90>)
 8004e72:	6813      	ldr	r3, [r2, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d105      	bne.n	8004e84 <_free_r+0x2c>
 8004e78:	6063      	str	r3, [r4, #4]
 8004e7a:	6014      	str	r4, [r2, #0]
 8004e7c:	0028      	movs	r0, r5
 8004e7e:	f000 f8e1 	bl	8005044 <__malloc_unlock>
 8004e82:	bd70      	pop	{r4, r5, r6, pc}
 8004e84:	42a3      	cmp	r3, r4
 8004e86:	d908      	bls.n	8004e9a <_free_r+0x42>
 8004e88:	6820      	ldr	r0, [r4, #0]
 8004e8a:	1821      	adds	r1, r4, r0
 8004e8c:	428b      	cmp	r3, r1
 8004e8e:	d1f3      	bne.n	8004e78 <_free_r+0x20>
 8004e90:	6819      	ldr	r1, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	1809      	adds	r1, r1, r0
 8004e96:	6021      	str	r1, [r4, #0]
 8004e98:	e7ee      	b.n	8004e78 <_free_r+0x20>
 8004e9a:	001a      	movs	r2, r3
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <_free_r+0x4e>
 8004ea2:	42a3      	cmp	r3, r4
 8004ea4:	d9f9      	bls.n	8004e9a <_free_r+0x42>
 8004ea6:	6811      	ldr	r1, [r2, #0]
 8004ea8:	1850      	adds	r0, r2, r1
 8004eaa:	42a0      	cmp	r0, r4
 8004eac:	d10b      	bne.n	8004ec6 <_free_r+0x6e>
 8004eae:	6820      	ldr	r0, [r4, #0]
 8004eb0:	1809      	adds	r1, r1, r0
 8004eb2:	1850      	adds	r0, r2, r1
 8004eb4:	6011      	str	r1, [r2, #0]
 8004eb6:	4283      	cmp	r3, r0
 8004eb8:	d1e0      	bne.n	8004e7c <_free_r+0x24>
 8004eba:	6818      	ldr	r0, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	1841      	adds	r1, r0, r1
 8004ec0:	6011      	str	r1, [r2, #0]
 8004ec2:	6053      	str	r3, [r2, #4]
 8004ec4:	e7da      	b.n	8004e7c <_free_r+0x24>
 8004ec6:	42a0      	cmp	r0, r4
 8004ec8:	d902      	bls.n	8004ed0 <_free_r+0x78>
 8004eca:	230c      	movs	r3, #12
 8004ecc:	602b      	str	r3, [r5, #0]
 8004ece:	e7d5      	b.n	8004e7c <_free_r+0x24>
 8004ed0:	6820      	ldr	r0, [r4, #0]
 8004ed2:	1821      	adds	r1, r4, r0
 8004ed4:	428b      	cmp	r3, r1
 8004ed6:	d103      	bne.n	8004ee0 <_free_r+0x88>
 8004ed8:	6819      	ldr	r1, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	1809      	adds	r1, r1, r0
 8004ede:	6021      	str	r1, [r4, #0]
 8004ee0:	6063      	str	r3, [r4, #4]
 8004ee2:	6054      	str	r4, [r2, #4]
 8004ee4:	e7ca      	b.n	8004e7c <_free_r+0x24>
 8004ee6:	46c0      	nop			; (mov r8, r8)
 8004ee8:	20000470 	.word	0x20000470

08004eec <sbrk_aligned>:
 8004eec:	b570      	push	{r4, r5, r6, lr}
 8004eee:	4e0f      	ldr	r6, [pc, #60]	; (8004f2c <sbrk_aligned+0x40>)
 8004ef0:	000d      	movs	r5, r1
 8004ef2:	6831      	ldr	r1, [r6, #0]
 8004ef4:	0004      	movs	r4, r0
 8004ef6:	2900      	cmp	r1, #0
 8004ef8:	d102      	bne.n	8004f00 <sbrk_aligned+0x14>
 8004efa:	f000 f9eb 	bl	80052d4 <_sbrk_r>
 8004efe:	6030      	str	r0, [r6, #0]
 8004f00:	0029      	movs	r1, r5
 8004f02:	0020      	movs	r0, r4
 8004f04:	f000 f9e6 	bl	80052d4 <_sbrk_r>
 8004f08:	1c43      	adds	r3, r0, #1
 8004f0a:	d00a      	beq.n	8004f22 <sbrk_aligned+0x36>
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	1cc5      	adds	r5, r0, #3
 8004f10:	439d      	bics	r5, r3
 8004f12:	42a8      	cmp	r0, r5
 8004f14:	d007      	beq.n	8004f26 <sbrk_aligned+0x3a>
 8004f16:	1a29      	subs	r1, r5, r0
 8004f18:	0020      	movs	r0, r4
 8004f1a:	f000 f9db 	bl	80052d4 <_sbrk_r>
 8004f1e:	3001      	adds	r0, #1
 8004f20:	d101      	bne.n	8004f26 <sbrk_aligned+0x3a>
 8004f22:	2501      	movs	r5, #1
 8004f24:	426d      	negs	r5, r5
 8004f26:	0028      	movs	r0, r5
 8004f28:	bd70      	pop	{r4, r5, r6, pc}
 8004f2a:	46c0      	nop			; (mov r8, r8)
 8004f2c:	20000474 	.word	0x20000474

08004f30 <_malloc_r>:
 8004f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f32:	2203      	movs	r2, #3
 8004f34:	1ccb      	adds	r3, r1, #3
 8004f36:	4393      	bics	r3, r2
 8004f38:	3308      	adds	r3, #8
 8004f3a:	0006      	movs	r6, r0
 8004f3c:	001f      	movs	r7, r3
 8004f3e:	2b0c      	cmp	r3, #12
 8004f40:	d238      	bcs.n	8004fb4 <_malloc_r+0x84>
 8004f42:	270c      	movs	r7, #12
 8004f44:	42b9      	cmp	r1, r7
 8004f46:	d837      	bhi.n	8004fb8 <_malloc_r+0x88>
 8004f48:	0030      	movs	r0, r6
 8004f4a:	f000 f873 	bl	8005034 <__malloc_lock>
 8004f4e:	4b38      	ldr	r3, [pc, #224]	; (8005030 <_malloc_r+0x100>)
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	001c      	movs	r4, r3
 8004f56:	2c00      	cmp	r4, #0
 8004f58:	d133      	bne.n	8004fc2 <_malloc_r+0x92>
 8004f5a:	0039      	movs	r1, r7
 8004f5c:	0030      	movs	r0, r6
 8004f5e:	f7ff ffc5 	bl	8004eec <sbrk_aligned>
 8004f62:	0004      	movs	r4, r0
 8004f64:	1c43      	adds	r3, r0, #1
 8004f66:	d15e      	bne.n	8005026 <_malloc_r+0xf6>
 8004f68:	9b00      	ldr	r3, [sp, #0]
 8004f6a:	681c      	ldr	r4, [r3, #0]
 8004f6c:	0025      	movs	r5, r4
 8004f6e:	2d00      	cmp	r5, #0
 8004f70:	d14e      	bne.n	8005010 <_malloc_r+0xe0>
 8004f72:	2c00      	cmp	r4, #0
 8004f74:	d051      	beq.n	800501a <_malloc_r+0xea>
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	0029      	movs	r1, r5
 8004f7a:	18e3      	adds	r3, r4, r3
 8004f7c:	0030      	movs	r0, r6
 8004f7e:	9301      	str	r3, [sp, #4]
 8004f80:	f000 f9a8 	bl	80052d4 <_sbrk_r>
 8004f84:	9b01      	ldr	r3, [sp, #4]
 8004f86:	4283      	cmp	r3, r0
 8004f88:	d147      	bne.n	800501a <_malloc_r+0xea>
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	0030      	movs	r0, r6
 8004f8e:	1aff      	subs	r7, r7, r3
 8004f90:	0039      	movs	r1, r7
 8004f92:	f7ff ffab 	bl	8004eec <sbrk_aligned>
 8004f96:	3001      	adds	r0, #1
 8004f98:	d03f      	beq.n	800501a <_malloc_r+0xea>
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	19db      	adds	r3, r3, r7
 8004f9e:	6023      	str	r3, [r4, #0]
 8004fa0:	9b00      	ldr	r3, [sp, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d040      	beq.n	800502a <_malloc_r+0xfa>
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	42a2      	cmp	r2, r4
 8004fac:	d133      	bne.n	8005016 <_malloc_r+0xe6>
 8004fae:	2200      	movs	r2, #0
 8004fb0:	605a      	str	r2, [r3, #4]
 8004fb2:	e014      	b.n	8004fde <_malloc_r+0xae>
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	dac5      	bge.n	8004f44 <_malloc_r+0x14>
 8004fb8:	230c      	movs	r3, #12
 8004fba:	2500      	movs	r5, #0
 8004fbc:	6033      	str	r3, [r6, #0]
 8004fbe:	0028      	movs	r0, r5
 8004fc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004fc2:	6821      	ldr	r1, [r4, #0]
 8004fc4:	1bc9      	subs	r1, r1, r7
 8004fc6:	d420      	bmi.n	800500a <_malloc_r+0xda>
 8004fc8:	290b      	cmp	r1, #11
 8004fca:	d918      	bls.n	8004ffe <_malloc_r+0xce>
 8004fcc:	19e2      	adds	r2, r4, r7
 8004fce:	6027      	str	r7, [r4, #0]
 8004fd0:	42a3      	cmp	r3, r4
 8004fd2:	d112      	bne.n	8004ffa <_malloc_r+0xca>
 8004fd4:	9b00      	ldr	r3, [sp, #0]
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	6863      	ldr	r3, [r4, #4]
 8004fda:	6011      	str	r1, [r2, #0]
 8004fdc:	6053      	str	r3, [r2, #4]
 8004fde:	0030      	movs	r0, r6
 8004fe0:	0025      	movs	r5, r4
 8004fe2:	f000 f82f 	bl	8005044 <__malloc_unlock>
 8004fe6:	2207      	movs	r2, #7
 8004fe8:	350b      	adds	r5, #11
 8004fea:	1d23      	adds	r3, r4, #4
 8004fec:	4395      	bics	r5, r2
 8004fee:	1aea      	subs	r2, r5, r3
 8004ff0:	429d      	cmp	r5, r3
 8004ff2:	d0e4      	beq.n	8004fbe <_malloc_r+0x8e>
 8004ff4:	1b5b      	subs	r3, r3, r5
 8004ff6:	50a3      	str	r3, [r4, r2]
 8004ff8:	e7e1      	b.n	8004fbe <_malloc_r+0x8e>
 8004ffa:	605a      	str	r2, [r3, #4]
 8004ffc:	e7ec      	b.n	8004fd8 <_malloc_r+0xa8>
 8004ffe:	6862      	ldr	r2, [r4, #4]
 8005000:	42a3      	cmp	r3, r4
 8005002:	d1d5      	bne.n	8004fb0 <_malloc_r+0x80>
 8005004:	9b00      	ldr	r3, [sp, #0]
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	e7e9      	b.n	8004fde <_malloc_r+0xae>
 800500a:	0023      	movs	r3, r4
 800500c:	6864      	ldr	r4, [r4, #4]
 800500e:	e7a2      	b.n	8004f56 <_malloc_r+0x26>
 8005010:	002c      	movs	r4, r5
 8005012:	686d      	ldr	r5, [r5, #4]
 8005014:	e7ab      	b.n	8004f6e <_malloc_r+0x3e>
 8005016:	0013      	movs	r3, r2
 8005018:	e7c4      	b.n	8004fa4 <_malloc_r+0x74>
 800501a:	230c      	movs	r3, #12
 800501c:	0030      	movs	r0, r6
 800501e:	6033      	str	r3, [r6, #0]
 8005020:	f000 f810 	bl	8005044 <__malloc_unlock>
 8005024:	e7cb      	b.n	8004fbe <_malloc_r+0x8e>
 8005026:	6027      	str	r7, [r4, #0]
 8005028:	e7d9      	b.n	8004fde <_malloc_r+0xae>
 800502a:	605b      	str	r3, [r3, #4]
 800502c:	deff      	udf	#255	; 0xff
 800502e:	46c0      	nop			; (mov r8, r8)
 8005030:	20000470 	.word	0x20000470

08005034 <__malloc_lock>:
 8005034:	b510      	push	{r4, lr}
 8005036:	4802      	ldr	r0, [pc, #8]	; (8005040 <__malloc_lock+0xc>)
 8005038:	f7ff ff0b 	bl	8004e52 <__retarget_lock_acquire_recursive>
 800503c:	bd10      	pop	{r4, pc}
 800503e:	46c0      	nop			; (mov r8, r8)
 8005040:	2000046c 	.word	0x2000046c

08005044 <__malloc_unlock>:
 8005044:	b510      	push	{r4, lr}
 8005046:	4802      	ldr	r0, [pc, #8]	; (8005050 <__malloc_unlock+0xc>)
 8005048:	f7ff ff04 	bl	8004e54 <__retarget_lock_release_recursive>
 800504c:	bd10      	pop	{r4, pc}
 800504e:	46c0      	nop			; (mov r8, r8)
 8005050:	2000046c 	.word	0x2000046c

08005054 <__sflush_r>:
 8005054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005056:	898b      	ldrh	r3, [r1, #12]
 8005058:	0005      	movs	r5, r0
 800505a:	000c      	movs	r4, r1
 800505c:	071a      	lsls	r2, r3, #28
 800505e:	d45c      	bmi.n	800511a <__sflush_r+0xc6>
 8005060:	684a      	ldr	r2, [r1, #4]
 8005062:	2a00      	cmp	r2, #0
 8005064:	dc04      	bgt.n	8005070 <__sflush_r+0x1c>
 8005066:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005068:	2a00      	cmp	r2, #0
 800506a:	dc01      	bgt.n	8005070 <__sflush_r+0x1c>
 800506c:	2000      	movs	r0, #0
 800506e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005070:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005072:	2f00      	cmp	r7, #0
 8005074:	d0fa      	beq.n	800506c <__sflush_r+0x18>
 8005076:	2200      	movs	r2, #0
 8005078:	2080      	movs	r0, #128	; 0x80
 800507a:	682e      	ldr	r6, [r5, #0]
 800507c:	602a      	str	r2, [r5, #0]
 800507e:	001a      	movs	r2, r3
 8005080:	0140      	lsls	r0, r0, #5
 8005082:	6a21      	ldr	r1, [r4, #32]
 8005084:	4002      	ands	r2, r0
 8005086:	4203      	tst	r3, r0
 8005088:	d034      	beq.n	80050f4 <__sflush_r+0xa0>
 800508a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800508c:	89a3      	ldrh	r3, [r4, #12]
 800508e:	075b      	lsls	r3, r3, #29
 8005090:	d506      	bpl.n	80050a0 <__sflush_r+0x4c>
 8005092:	6863      	ldr	r3, [r4, #4]
 8005094:	1ac0      	subs	r0, r0, r3
 8005096:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <__sflush_r+0x4c>
 800509c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800509e:	1ac0      	subs	r0, r0, r3
 80050a0:	0002      	movs	r2, r0
 80050a2:	2300      	movs	r3, #0
 80050a4:	0028      	movs	r0, r5
 80050a6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80050a8:	6a21      	ldr	r1, [r4, #32]
 80050aa:	47b8      	blx	r7
 80050ac:	89a2      	ldrh	r2, [r4, #12]
 80050ae:	1c43      	adds	r3, r0, #1
 80050b0:	d106      	bne.n	80050c0 <__sflush_r+0x6c>
 80050b2:	6829      	ldr	r1, [r5, #0]
 80050b4:	291d      	cmp	r1, #29
 80050b6:	d82c      	bhi.n	8005112 <__sflush_r+0xbe>
 80050b8:	4b2a      	ldr	r3, [pc, #168]	; (8005164 <__sflush_r+0x110>)
 80050ba:	410b      	asrs	r3, r1
 80050bc:	07db      	lsls	r3, r3, #31
 80050be:	d428      	bmi.n	8005112 <__sflush_r+0xbe>
 80050c0:	2300      	movs	r3, #0
 80050c2:	6063      	str	r3, [r4, #4]
 80050c4:	6923      	ldr	r3, [r4, #16]
 80050c6:	6023      	str	r3, [r4, #0]
 80050c8:	04d2      	lsls	r2, r2, #19
 80050ca:	d505      	bpl.n	80050d8 <__sflush_r+0x84>
 80050cc:	1c43      	adds	r3, r0, #1
 80050ce:	d102      	bne.n	80050d6 <__sflush_r+0x82>
 80050d0:	682b      	ldr	r3, [r5, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d100      	bne.n	80050d8 <__sflush_r+0x84>
 80050d6:	6560      	str	r0, [r4, #84]	; 0x54
 80050d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050da:	602e      	str	r6, [r5, #0]
 80050dc:	2900      	cmp	r1, #0
 80050de:	d0c5      	beq.n	800506c <__sflush_r+0x18>
 80050e0:	0023      	movs	r3, r4
 80050e2:	3344      	adds	r3, #68	; 0x44
 80050e4:	4299      	cmp	r1, r3
 80050e6:	d002      	beq.n	80050ee <__sflush_r+0x9a>
 80050e8:	0028      	movs	r0, r5
 80050ea:	f7ff feb5 	bl	8004e58 <_free_r>
 80050ee:	2000      	movs	r0, #0
 80050f0:	6360      	str	r0, [r4, #52]	; 0x34
 80050f2:	e7bc      	b.n	800506e <__sflush_r+0x1a>
 80050f4:	2301      	movs	r3, #1
 80050f6:	0028      	movs	r0, r5
 80050f8:	47b8      	blx	r7
 80050fa:	1c43      	adds	r3, r0, #1
 80050fc:	d1c6      	bne.n	800508c <__sflush_r+0x38>
 80050fe:	682b      	ldr	r3, [r5, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d0c3      	beq.n	800508c <__sflush_r+0x38>
 8005104:	2b1d      	cmp	r3, #29
 8005106:	d001      	beq.n	800510c <__sflush_r+0xb8>
 8005108:	2b16      	cmp	r3, #22
 800510a:	d101      	bne.n	8005110 <__sflush_r+0xbc>
 800510c:	602e      	str	r6, [r5, #0]
 800510e:	e7ad      	b.n	800506c <__sflush_r+0x18>
 8005110:	89a2      	ldrh	r2, [r4, #12]
 8005112:	2340      	movs	r3, #64	; 0x40
 8005114:	4313      	orrs	r3, r2
 8005116:	81a3      	strh	r3, [r4, #12]
 8005118:	e7a9      	b.n	800506e <__sflush_r+0x1a>
 800511a:	690e      	ldr	r6, [r1, #16]
 800511c:	2e00      	cmp	r6, #0
 800511e:	d0a5      	beq.n	800506c <__sflush_r+0x18>
 8005120:	680f      	ldr	r7, [r1, #0]
 8005122:	600e      	str	r6, [r1, #0]
 8005124:	1bba      	subs	r2, r7, r6
 8005126:	9201      	str	r2, [sp, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	079b      	lsls	r3, r3, #30
 800512c:	d100      	bne.n	8005130 <__sflush_r+0xdc>
 800512e:	694a      	ldr	r2, [r1, #20]
 8005130:	60a2      	str	r2, [r4, #8]
 8005132:	9b01      	ldr	r3, [sp, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	dd99      	ble.n	800506c <__sflush_r+0x18>
 8005138:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800513a:	0032      	movs	r2, r6
 800513c:	001f      	movs	r7, r3
 800513e:	0028      	movs	r0, r5
 8005140:	9b01      	ldr	r3, [sp, #4]
 8005142:	6a21      	ldr	r1, [r4, #32]
 8005144:	47b8      	blx	r7
 8005146:	2800      	cmp	r0, #0
 8005148:	dc06      	bgt.n	8005158 <__sflush_r+0x104>
 800514a:	2340      	movs	r3, #64	; 0x40
 800514c:	2001      	movs	r0, #1
 800514e:	89a2      	ldrh	r2, [r4, #12]
 8005150:	4240      	negs	r0, r0
 8005152:	4313      	orrs	r3, r2
 8005154:	81a3      	strh	r3, [r4, #12]
 8005156:	e78a      	b.n	800506e <__sflush_r+0x1a>
 8005158:	9b01      	ldr	r3, [sp, #4]
 800515a:	1836      	adds	r6, r6, r0
 800515c:	1a1b      	subs	r3, r3, r0
 800515e:	9301      	str	r3, [sp, #4]
 8005160:	e7e7      	b.n	8005132 <__sflush_r+0xde>
 8005162:	46c0      	nop			; (mov r8, r8)
 8005164:	dfbffffe 	.word	0xdfbffffe

08005168 <_fflush_r>:
 8005168:	690b      	ldr	r3, [r1, #16]
 800516a:	b570      	push	{r4, r5, r6, lr}
 800516c:	0005      	movs	r5, r0
 800516e:	000c      	movs	r4, r1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d102      	bne.n	800517a <_fflush_r+0x12>
 8005174:	2500      	movs	r5, #0
 8005176:	0028      	movs	r0, r5
 8005178:	bd70      	pop	{r4, r5, r6, pc}
 800517a:	2800      	cmp	r0, #0
 800517c:	d004      	beq.n	8005188 <_fflush_r+0x20>
 800517e:	6a03      	ldr	r3, [r0, #32]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <_fflush_r+0x20>
 8005184:	f7ff fc5e 	bl	8004a44 <__sinit>
 8005188:	220c      	movs	r2, #12
 800518a:	5ea3      	ldrsh	r3, [r4, r2]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0f1      	beq.n	8005174 <_fflush_r+0xc>
 8005190:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005192:	07d2      	lsls	r2, r2, #31
 8005194:	d404      	bmi.n	80051a0 <_fflush_r+0x38>
 8005196:	059b      	lsls	r3, r3, #22
 8005198:	d402      	bmi.n	80051a0 <_fflush_r+0x38>
 800519a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800519c:	f7ff fe59 	bl	8004e52 <__retarget_lock_acquire_recursive>
 80051a0:	0028      	movs	r0, r5
 80051a2:	0021      	movs	r1, r4
 80051a4:	f7ff ff56 	bl	8005054 <__sflush_r>
 80051a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051aa:	0005      	movs	r5, r0
 80051ac:	07db      	lsls	r3, r3, #31
 80051ae:	d4e2      	bmi.n	8005176 <_fflush_r+0xe>
 80051b0:	89a3      	ldrh	r3, [r4, #12]
 80051b2:	059b      	lsls	r3, r3, #22
 80051b4:	d4df      	bmi.n	8005176 <_fflush_r+0xe>
 80051b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051b8:	f7ff fe4c 	bl	8004e54 <__retarget_lock_release_recursive>
 80051bc:	e7db      	b.n	8005176 <_fflush_r+0xe>
	...

080051c0 <__swhatbuf_r>:
 80051c0:	b570      	push	{r4, r5, r6, lr}
 80051c2:	000e      	movs	r6, r1
 80051c4:	001d      	movs	r5, r3
 80051c6:	230e      	movs	r3, #14
 80051c8:	5ec9      	ldrsh	r1, [r1, r3]
 80051ca:	0014      	movs	r4, r2
 80051cc:	b096      	sub	sp, #88	; 0x58
 80051ce:	2900      	cmp	r1, #0
 80051d0:	da0c      	bge.n	80051ec <__swhatbuf_r+0x2c>
 80051d2:	89b2      	ldrh	r2, [r6, #12]
 80051d4:	2380      	movs	r3, #128	; 0x80
 80051d6:	0011      	movs	r1, r2
 80051d8:	4019      	ands	r1, r3
 80051da:	421a      	tst	r2, r3
 80051dc:	d013      	beq.n	8005206 <__swhatbuf_r+0x46>
 80051de:	2100      	movs	r1, #0
 80051e0:	3b40      	subs	r3, #64	; 0x40
 80051e2:	2000      	movs	r0, #0
 80051e4:	6029      	str	r1, [r5, #0]
 80051e6:	6023      	str	r3, [r4, #0]
 80051e8:	b016      	add	sp, #88	; 0x58
 80051ea:	bd70      	pop	{r4, r5, r6, pc}
 80051ec:	466a      	mov	r2, sp
 80051ee:	f000 f84d 	bl	800528c <_fstat_r>
 80051f2:	2800      	cmp	r0, #0
 80051f4:	dbed      	blt.n	80051d2 <__swhatbuf_r+0x12>
 80051f6:	23f0      	movs	r3, #240	; 0xf0
 80051f8:	9901      	ldr	r1, [sp, #4]
 80051fa:	021b      	lsls	r3, r3, #8
 80051fc:	4019      	ands	r1, r3
 80051fe:	4b03      	ldr	r3, [pc, #12]	; (800520c <__swhatbuf_r+0x4c>)
 8005200:	18c9      	adds	r1, r1, r3
 8005202:	424b      	negs	r3, r1
 8005204:	4159      	adcs	r1, r3
 8005206:	2380      	movs	r3, #128	; 0x80
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	e7ea      	b.n	80051e2 <__swhatbuf_r+0x22>
 800520c:	ffffe000 	.word	0xffffe000

08005210 <__smakebuf_r>:
 8005210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005212:	2602      	movs	r6, #2
 8005214:	898b      	ldrh	r3, [r1, #12]
 8005216:	0005      	movs	r5, r0
 8005218:	000c      	movs	r4, r1
 800521a:	4233      	tst	r3, r6
 800521c:	d006      	beq.n	800522c <__smakebuf_r+0x1c>
 800521e:	0023      	movs	r3, r4
 8005220:	3347      	adds	r3, #71	; 0x47
 8005222:	6023      	str	r3, [r4, #0]
 8005224:	6123      	str	r3, [r4, #16]
 8005226:	2301      	movs	r3, #1
 8005228:	6163      	str	r3, [r4, #20]
 800522a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800522c:	466a      	mov	r2, sp
 800522e:	ab01      	add	r3, sp, #4
 8005230:	f7ff ffc6 	bl	80051c0 <__swhatbuf_r>
 8005234:	9900      	ldr	r1, [sp, #0]
 8005236:	0007      	movs	r7, r0
 8005238:	0028      	movs	r0, r5
 800523a:	f7ff fe79 	bl	8004f30 <_malloc_r>
 800523e:	2800      	cmp	r0, #0
 8005240:	d108      	bne.n	8005254 <__smakebuf_r+0x44>
 8005242:	220c      	movs	r2, #12
 8005244:	5ea3      	ldrsh	r3, [r4, r2]
 8005246:	059a      	lsls	r2, r3, #22
 8005248:	d4ef      	bmi.n	800522a <__smakebuf_r+0x1a>
 800524a:	2203      	movs	r2, #3
 800524c:	4393      	bics	r3, r2
 800524e:	431e      	orrs	r6, r3
 8005250:	81a6      	strh	r6, [r4, #12]
 8005252:	e7e4      	b.n	800521e <__smakebuf_r+0xe>
 8005254:	2380      	movs	r3, #128	; 0x80
 8005256:	89a2      	ldrh	r2, [r4, #12]
 8005258:	6020      	str	r0, [r4, #0]
 800525a:	4313      	orrs	r3, r2
 800525c:	81a3      	strh	r3, [r4, #12]
 800525e:	9b00      	ldr	r3, [sp, #0]
 8005260:	6120      	str	r0, [r4, #16]
 8005262:	6163      	str	r3, [r4, #20]
 8005264:	9b01      	ldr	r3, [sp, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00c      	beq.n	8005284 <__smakebuf_r+0x74>
 800526a:	0028      	movs	r0, r5
 800526c:	230e      	movs	r3, #14
 800526e:	5ee1      	ldrsh	r1, [r4, r3]
 8005270:	f000 f81e 	bl	80052b0 <_isatty_r>
 8005274:	2800      	cmp	r0, #0
 8005276:	d005      	beq.n	8005284 <__smakebuf_r+0x74>
 8005278:	2303      	movs	r3, #3
 800527a:	89a2      	ldrh	r2, [r4, #12]
 800527c:	439a      	bics	r2, r3
 800527e:	3b02      	subs	r3, #2
 8005280:	4313      	orrs	r3, r2
 8005282:	81a3      	strh	r3, [r4, #12]
 8005284:	89a3      	ldrh	r3, [r4, #12]
 8005286:	433b      	orrs	r3, r7
 8005288:	81a3      	strh	r3, [r4, #12]
 800528a:	e7ce      	b.n	800522a <__smakebuf_r+0x1a>

0800528c <_fstat_r>:
 800528c:	2300      	movs	r3, #0
 800528e:	b570      	push	{r4, r5, r6, lr}
 8005290:	4d06      	ldr	r5, [pc, #24]	; (80052ac <_fstat_r+0x20>)
 8005292:	0004      	movs	r4, r0
 8005294:	0008      	movs	r0, r1
 8005296:	0011      	movs	r1, r2
 8005298:	602b      	str	r3, [r5, #0]
 800529a:	f7fc f92a 	bl	80014f2 <_fstat>
 800529e:	1c43      	adds	r3, r0, #1
 80052a0:	d103      	bne.n	80052aa <_fstat_r+0x1e>
 80052a2:	682b      	ldr	r3, [r5, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d000      	beq.n	80052aa <_fstat_r+0x1e>
 80052a8:	6023      	str	r3, [r4, #0]
 80052aa:	bd70      	pop	{r4, r5, r6, pc}
 80052ac:	20000468 	.word	0x20000468

080052b0 <_isatty_r>:
 80052b0:	2300      	movs	r3, #0
 80052b2:	b570      	push	{r4, r5, r6, lr}
 80052b4:	4d06      	ldr	r5, [pc, #24]	; (80052d0 <_isatty_r+0x20>)
 80052b6:	0004      	movs	r4, r0
 80052b8:	0008      	movs	r0, r1
 80052ba:	602b      	str	r3, [r5, #0]
 80052bc:	f7fc f927 	bl	800150e <_isatty>
 80052c0:	1c43      	adds	r3, r0, #1
 80052c2:	d103      	bne.n	80052cc <_isatty_r+0x1c>
 80052c4:	682b      	ldr	r3, [r5, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d000      	beq.n	80052cc <_isatty_r+0x1c>
 80052ca:	6023      	str	r3, [r4, #0]
 80052cc:	bd70      	pop	{r4, r5, r6, pc}
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	20000468 	.word	0x20000468

080052d4 <_sbrk_r>:
 80052d4:	2300      	movs	r3, #0
 80052d6:	b570      	push	{r4, r5, r6, lr}
 80052d8:	4d06      	ldr	r5, [pc, #24]	; (80052f4 <_sbrk_r+0x20>)
 80052da:	0004      	movs	r4, r0
 80052dc:	0008      	movs	r0, r1
 80052de:	602b      	str	r3, [r5, #0]
 80052e0:	f7fc f92a 	bl	8001538 <_sbrk>
 80052e4:	1c43      	adds	r3, r0, #1
 80052e6:	d103      	bne.n	80052f0 <_sbrk_r+0x1c>
 80052e8:	682b      	ldr	r3, [r5, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d000      	beq.n	80052f0 <_sbrk_r+0x1c>
 80052ee:	6023      	str	r3, [r4, #0]
 80052f0:	bd70      	pop	{r4, r5, r6, pc}
 80052f2:	46c0      	nop			; (mov r8, r8)
 80052f4:	20000468 	.word	0x20000468

080052f8 <_init>:
 80052f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fa:	46c0      	nop			; (mov r8, r8)
 80052fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fe:	bc08      	pop	{r3}
 8005300:	469e      	mov	lr, r3
 8005302:	4770      	bx	lr

08005304 <_fini>:
 8005304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530a:	bc08      	pop	{r3}
 800530c:	469e      	mov	lr, r3
 800530e:	4770      	bx	lr
