
pi_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bf0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08006cb0  08006cb0  00016cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e4c  08006e4c  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08006e4c  08006e4c  00016e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e54  08006e54  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e54  08006e54  00016e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e58  08006e58  00016e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08006e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000180  08006fdc  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08006fdc  00020478  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011023  00000000  00000000  000201eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000269d  00000000  00000000  0003120e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff0  00000000  00000000  000338b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c69  00000000  00000000  000348a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000136e6  00000000  00000000  00035509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000143e9  00000000  00000000  00048bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00073dfc  00000000  00000000  0005cfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004130  00000000  00000000  000d0dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000d4f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000180 	.word	0x20000180
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006c98 	.word	0x08006c98

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000184 	.word	0x20000184
 8000104:	08006c98 	.word	0x08006c98

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f84c 	bl	80002ec <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__aeabi_f2uiz>:
 80002bc:	219e      	movs	r1, #158	; 0x9e
 80002be:	b510      	push	{r4, lr}
 80002c0:	05c9      	lsls	r1, r1, #23
 80002c2:	1c04      	adds	r4, r0, #0
 80002c4:	f000 fd7e 	bl	8000dc4 <__aeabi_fcmpge>
 80002c8:	2800      	cmp	r0, #0
 80002ca:	d103      	bne.n	80002d4 <__aeabi_f2uiz+0x18>
 80002cc:	1c20      	adds	r0, r4, #0
 80002ce:	f000 fce1 	bl	8000c94 <__aeabi_f2iz>
 80002d2:	bd10      	pop	{r4, pc}
 80002d4:	219e      	movs	r1, #158	; 0x9e
 80002d6:	1c20      	adds	r0, r4, #0
 80002d8:	05c9      	lsls	r1, r1, #23
 80002da:	f000 fb3b 	bl	8000954 <__aeabi_fsub>
 80002de:	f000 fcd9 	bl	8000c94 <__aeabi_f2iz>
 80002e2:	2380      	movs	r3, #128	; 0x80
 80002e4:	061b      	lsls	r3, r3, #24
 80002e6:	469c      	mov	ip, r3
 80002e8:	4460      	add	r0, ip
 80002ea:	e7f2      	b.n	80002d2 <__aeabi_f2uiz+0x16>

080002ec <__udivmoddi4>:
 80002ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ee:	4657      	mov	r7, sl
 80002f0:	464e      	mov	r6, r9
 80002f2:	4645      	mov	r5, r8
 80002f4:	46de      	mov	lr, fp
 80002f6:	b5e0      	push	{r5, r6, r7, lr}
 80002f8:	0004      	movs	r4, r0
 80002fa:	000d      	movs	r5, r1
 80002fc:	4692      	mov	sl, r2
 80002fe:	4699      	mov	r9, r3
 8000300:	b083      	sub	sp, #12
 8000302:	428b      	cmp	r3, r1
 8000304:	d830      	bhi.n	8000368 <__udivmoddi4+0x7c>
 8000306:	d02d      	beq.n	8000364 <__udivmoddi4+0x78>
 8000308:	4649      	mov	r1, r9
 800030a:	4650      	mov	r0, sl
 800030c:	f000 fd82 	bl	8000e14 <__clzdi2>
 8000310:	0029      	movs	r1, r5
 8000312:	0006      	movs	r6, r0
 8000314:	0020      	movs	r0, r4
 8000316:	f000 fd7d 	bl	8000e14 <__clzdi2>
 800031a:	1a33      	subs	r3, r6, r0
 800031c:	4698      	mov	r8, r3
 800031e:	3b20      	subs	r3, #32
 8000320:	d434      	bmi.n	800038c <__udivmoddi4+0xa0>
 8000322:	469b      	mov	fp, r3
 8000324:	4653      	mov	r3, sl
 8000326:	465a      	mov	r2, fp
 8000328:	4093      	lsls	r3, r2
 800032a:	4642      	mov	r2, r8
 800032c:	001f      	movs	r7, r3
 800032e:	4653      	mov	r3, sl
 8000330:	4093      	lsls	r3, r2
 8000332:	001e      	movs	r6, r3
 8000334:	42af      	cmp	r7, r5
 8000336:	d83b      	bhi.n	80003b0 <__udivmoddi4+0xc4>
 8000338:	42af      	cmp	r7, r5
 800033a:	d100      	bne.n	800033e <__udivmoddi4+0x52>
 800033c:	e079      	b.n	8000432 <__udivmoddi4+0x146>
 800033e:	465b      	mov	r3, fp
 8000340:	1ba4      	subs	r4, r4, r6
 8000342:	41bd      	sbcs	r5, r7
 8000344:	2b00      	cmp	r3, #0
 8000346:	da00      	bge.n	800034a <__udivmoddi4+0x5e>
 8000348:	e076      	b.n	8000438 <__udivmoddi4+0x14c>
 800034a:	2200      	movs	r2, #0
 800034c:	2300      	movs	r3, #0
 800034e:	9200      	str	r2, [sp, #0]
 8000350:	9301      	str	r3, [sp, #4]
 8000352:	2301      	movs	r3, #1
 8000354:	465a      	mov	r2, fp
 8000356:	4093      	lsls	r3, r2
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	2301      	movs	r3, #1
 800035c:	4642      	mov	r2, r8
 800035e:	4093      	lsls	r3, r2
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	e029      	b.n	80003b8 <__udivmoddi4+0xcc>
 8000364:	4282      	cmp	r2, r0
 8000366:	d9cf      	bls.n	8000308 <__udivmoddi4+0x1c>
 8000368:	2200      	movs	r2, #0
 800036a:	2300      	movs	r3, #0
 800036c:	9200      	str	r2, [sp, #0]
 800036e:	9301      	str	r3, [sp, #4]
 8000370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <__udivmoddi4+0x8e>
 8000376:	601c      	str	r4, [r3, #0]
 8000378:	605d      	str	r5, [r3, #4]
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	b003      	add	sp, #12
 8000380:	bcf0      	pop	{r4, r5, r6, r7}
 8000382:	46bb      	mov	fp, r7
 8000384:	46b2      	mov	sl, r6
 8000386:	46a9      	mov	r9, r5
 8000388:	46a0      	mov	r8, r4
 800038a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800038c:	4642      	mov	r2, r8
 800038e:	469b      	mov	fp, r3
 8000390:	2320      	movs	r3, #32
 8000392:	1a9b      	subs	r3, r3, r2
 8000394:	4652      	mov	r2, sl
 8000396:	40da      	lsrs	r2, r3
 8000398:	4641      	mov	r1, r8
 800039a:	0013      	movs	r3, r2
 800039c:	464a      	mov	r2, r9
 800039e:	408a      	lsls	r2, r1
 80003a0:	0017      	movs	r7, r2
 80003a2:	4642      	mov	r2, r8
 80003a4:	431f      	orrs	r7, r3
 80003a6:	4653      	mov	r3, sl
 80003a8:	4093      	lsls	r3, r2
 80003aa:	001e      	movs	r6, r3
 80003ac:	42af      	cmp	r7, r5
 80003ae:	d9c3      	bls.n	8000338 <__udivmoddi4+0x4c>
 80003b0:	2200      	movs	r2, #0
 80003b2:	2300      	movs	r3, #0
 80003b4:	9200      	str	r2, [sp, #0]
 80003b6:	9301      	str	r3, [sp, #4]
 80003b8:	4643      	mov	r3, r8
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d0d8      	beq.n	8000370 <__udivmoddi4+0x84>
 80003be:	07fb      	lsls	r3, r7, #31
 80003c0:	0872      	lsrs	r2, r6, #1
 80003c2:	431a      	orrs	r2, r3
 80003c4:	4646      	mov	r6, r8
 80003c6:	087b      	lsrs	r3, r7, #1
 80003c8:	e00e      	b.n	80003e8 <__udivmoddi4+0xfc>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d101      	bne.n	80003d2 <__udivmoddi4+0xe6>
 80003ce:	42a2      	cmp	r2, r4
 80003d0:	d80c      	bhi.n	80003ec <__udivmoddi4+0x100>
 80003d2:	1aa4      	subs	r4, r4, r2
 80003d4:	419d      	sbcs	r5, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	1924      	adds	r4, r4, r4
 80003da:	416d      	adcs	r5, r5
 80003dc:	2100      	movs	r1, #0
 80003de:	3e01      	subs	r6, #1
 80003e0:	1824      	adds	r4, r4, r0
 80003e2:	414d      	adcs	r5, r1
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d006      	beq.n	80003f6 <__udivmoddi4+0x10a>
 80003e8:	42ab      	cmp	r3, r5
 80003ea:	d9ee      	bls.n	80003ca <__udivmoddi4+0xde>
 80003ec:	3e01      	subs	r6, #1
 80003ee:	1924      	adds	r4, r4, r4
 80003f0:	416d      	adcs	r5, r5
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d1f8      	bne.n	80003e8 <__udivmoddi4+0xfc>
 80003f6:	9800      	ldr	r0, [sp, #0]
 80003f8:	9901      	ldr	r1, [sp, #4]
 80003fa:	465b      	mov	r3, fp
 80003fc:	1900      	adds	r0, r0, r4
 80003fe:	4169      	adcs	r1, r5
 8000400:	2b00      	cmp	r3, #0
 8000402:	db24      	blt.n	800044e <__udivmoddi4+0x162>
 8000404:	002b      	movs	r3, r5
 8000406:	465a      	mov	r2, fp
 8000408:	4644      	mov	r4, r8
 800040a:	40d3      	lsrs	r3, r2
 800040c:	002a      	movs	r2, r5
 800040e:	40e2      	lsrs	r2, r4
 8000410:	001c      	movs	r4, r3
 8000412:	465b      	mov	r3, fp
 8000414:	0015      	movs	r5, r2
 8000416:	2b00      	cmp	r3, #0
 8000418:	db2a      	blt.n	8000470 <__udivmoddi4+0x184>
 800041a:	0026      	movs	r6, r4
 800041c:	409e      	lsls	r6, r3
 800041e:	0033      	movs	r3, r6
 8000420:	0026      	movs	r6, r4
 8000422:	4647      	mov	r7, r8
 8000424:	40be      	lsls	r6, r7
 8000426:	0032      	movs	r2, r6
 8000428:	1a80      	subs	r0, r0, r2
 800042a:	4199      	sbcs	r1, r3
 800042c:	9000      	str	r0, [sp, #0]
 800042e:	9101      	str	r1, [sp, #4]
 8000430:	e79e      	b.n	8000370 <__udivmoddi4+0x84>
 8000432:	42a3      	cmp	r3, r4
 8000434:	d8bc      	bhi.n	80003b0 <__udivmoddi4+0xc4>
 8000436:	e782      	b.n	800033e <__udivmoddi4+0x52>
 8000438:	4642      	mov	r2, r8
 800043a:	2320      	movs	r3, #32
 800043c:	2100      	movs	r1, #0
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	2200      	movs	r2, #0
 8000442:	9100      	str	r1, [sp, #0]
 8000444:	9201      	str	r2, [sp, #4]
 8000446:	2201      	movs	r2, #1
 8000448:	40da      	lsrs	r2, r3
 800044a:	9201      	str	r2, [sp, #4]
 800044c:	e785      	b.n	800035a <__udivmoddi4+0x6e>
 800044e:	4642      	mov	r2, r8
 8000450:	2320      	movs	r3, #32
 8000452:	1a9b      	subs	r3, r3, r2
 8000454:	002a      	movs	r2, r5
 8000456:	4646      	mov	r6, r8
 8000458:	409a      	lsls	r2, r3
 800045a:	0023      	movs	r3, r4
 800045c:	40f3      	lsrs	r3, r6
 800045e:	4644      	mov	r4, r8
 8000460:	4313      	orrs	r3, r2
 8000462:	002a      	movs	r2, r5
 8000464:	40e2      	lsrs	r2, r4
 8000466:	001c      	movs	r4, r3
 8000468:	465b      	mov	r3, fp
 800046a:	0015      	movs	r5, r2
 800046c:	2b00      	cmp	r3, #0
 800046e:	dad4      	bge.n	800041a <__udivmoddi4+0x12e>
 8000470:	4642      	mov	r2, r8
 8000472:	002f      	movs	r7, r5
 8000474:	2320      	movs	r3, #32
 8000476:	0026      	movs	r6, r4
 8000478:	4097      	lsls	r7, r2
 800047a:	1a9b      	subs	r3, r3, r2
 800047c:	40de      	lsrs	r6, r3
 800047e:	003b      	movs	r3, r7
 8000480:	4333      	orrs	r3, r6
 8000482:	e7cd      	b.n	8000420 <__udivmoddi4+0x134>

08000484 <__aeabi_fdiv>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	464f      	mov	r7, r9
 8000488:	4646      	mov	r6, r8
 800048a:	46d6      	mov	lr, sl
 800048c:	0245      	lsls	r5, r0, #9
 800048e:	b5c0      	push	{r6, r7, lr}
 8000490:	0047      	lsls	r7, r0, #1
 8000492:	1c0c      	adds	r4, r1, #0
 8000494:	0a6d      	lsrs	r5, r5, #9
 8000496:	0e3f      	lsrs	r7, r7, #24
 8000498:	0fc6      	lsrs	r6, r0, #31
 800049a:	2f00      	cmp	r7, #0
 800049c:	d100      	bne.n	80004a0 <__aeabi_fdiv+0x1c>
 800049e:	e06f      	b.n	8000580 <__aeabi_fdiv+0xfc>
 80004a0:	2fff      	cmp	r7, #255	; 0xff
 80004a2:	d100      	bne.n	80004a6 <__aeabi_fdiv+0x22>
 80004a4:	e074      	b.n	8000590 <__aeabi_fdiv+0x10c>
 80004a6:	2300      	movs	r3, #0
 80004a8:	2280      	movs	r2, #128	; 0x80
 80004aa:	4699      	mov	r9, r3
 80004ac:	469a      	mov	sl, r3
 80004ae:	00ed      	lsls	r5, r5, #3
 80004b0:	04d2      	lsls	r2, r2, #19
 80004b2:	4315      	orrs	r5, r2
 80004b4:	3f7f      	subs	r7, #127	; 0x7f
 80004b6:	0263      	lsls	r3, r4, #9
 80004b8:	0a5b      	lsrs	r3, r3, #9
 80004ba:	4698      	mov	r8, r3
 80004bc:	0063      	lsls	r3, r4, #1
 80004be:	0e1b      	lsrs	r3, r3, #24
 80004c0:	0fe4      	lsrs	r4, r4, #31
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d04d      	beq.n	8000562 <__aeabi_fdiv+0xde>
 80004c6:	2bff      	cmp	r3, #255	; 0xff
 80004c8:	d045      	beq.n	8000556 <__aeabi_fdiv+0xd2>
 80004ca:	4642      	mov	r2, r8
 80004cc:	2180      	movs	r1, #128	; 0x80
 80004ce:	00d2      	lsls	r2, r2, #3
 80004d0:	04c9      	lsls	r1, r1, #19
 80004d2:	4311      	orrs	r1, r2
 80004d4:	4688      	mov	r8, r1
 80004d6:	2200      	movs	r2, #0
 80004d8:	3b7f      	subs	r3, #127	; 0x7f
 80004da:	0031      	movs	r1, r6
 80004dc:	1aff      	subs	r7, r7, r3
 80004de:	464b      	mov	r3, r9
 80004e0:	4061      	eors	r1, r4
 80004e2:	b2c9      	uxtb	r1, r1
 80004e4:	2b0f      	cmp	r3, #15
 80004e6:	d900      	bls.n	80004ea <__aeabi_fdiv+0x66>
 80004e8:	e0b8      	b.n	800065c <__aeabi_fdiv+0x1d8>
 80004ea:	4870      	ldr	r0, [pc, #448]	; (80006ac <__aeabi_fdiv+0x228>)
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	58c3      	ldr	r3, [r0, r3]
 80004f0:	469f      	mov	pc, r3
 80004f2:	2300      	movs	r3, #0
 80004f4:	4698      	mov	r8, r3
 80004f6:	0026      	movs	r6, r4
 80004f8:	4645      	mov	r5, r8
 80004fa:	4692      	mov	sl, r2
 80004fc:	4653      	mov	r3, sl
 80004fe:	2b02      	cmp	r3, #2
 8000500:	d100      	bne.n	8000504 <__aeabi_fdiv+0x80>
 8000502:	e08d      	b.n	8000620 <__aeabi_fdiv+0x19c>
 8000504:	2b03      	cmp	r3, #3
 8000506:	d100      	bne.n	800050a <__aeabi_fdiv+0x86>
 8000508:	e0a1      	b.n	800064e <__aeabi_fdiv+0x1ca>
 800050a:	2b01      	cmp	r3, #1
 800050c:	d018      	beq.n	8000540 <__aeabi_fdiv+0xbc>
 800050e:	003b      	movs	r3, r7
 8000510:	337f      	adds	r3, #127	; 0x7f
 8000512:	2b00      	cmp	r3, #0
 8000514:	dd6d      	ble.n	80005f2 <__aeabi_fdiv+0x16e>
 8000516:	076a      	lsls	r2, r5, #29
 8000518:	d004      	beq.n	8000524 <__aeabi_fdiv+0xa0>
 800051a:	220f      	movs	r2, #15
 800051c:	402a      	ands	r2, r5
 800051e:	2a04      	cmp	r2, #4
 8000520:	d000      	beq.n	8000524 <__aeabi_fdiv+0xa0>
 8000522:	3504      	adds	r5, #4
 8000524:	012a      	lsls	r2, r5, #4
 8000526:	d503      	bpl.n	8000530 <__aeabi_fdiv+0xac>
 8000528:	4b61      	ldr	r3, [pc, #388]	; (80006b0 <__aeabi_fdiv+0x22c>)
 800052a:	401d      	ands	r5, r3
 800052c:	003b      	movs	r3, r7
 800052e:	3380      	adds	r3, #128	; 0x80
 8000530:	2bfe      	cmp	r3, #254	; 0xfe
 8000532:	dd00      	ble.n	8000536 <__aeabi_fdiv+0xb2>
 8000534:	e074      	b.n	8000620 <__aeabi_fdiv+0x19c>
 8000536:	01aa      	lsls	r2, r5, #6
 8000538:	0a52      	lsrs	r2, r2, #9
 800053a:	b2d8      	uxtb	r0, r3
 800053c:	e002      	b.n	8000544 <__aeabi_fdiv+0xc0>
 800053e:	000e      	movs	r6, r1
 8000540:	2000      	movs	r0, #0
 8000542:	2200      	movs	r2, #0
 8000544:	05c0      	lsls	r0, r0, #23
 8000546:	07f6      	lsls	r6, r6, #31
 8000548:	4310      	orrs	r0, r2
 800054a:	4330      	orrs	r0, r6
 800054c:	bce0      	pop	{r5, r6, r7}
 800054e:	46ba      	mov	sl, r7
 8000550:	46b1      	mov	r9, r6
 8000552:	46a8      	mov	r8, r5
 8000554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000556:	4643      	mov	r3, r8
 8000558:	2b00      	cmp	r3, #0
 800055a:	d13f      	bne.n	80005dc <__aeabi_fdiv+0x158>
 800055c:	2202      	movs	r2, #2
 800055e:	3fff      	subs	r7, #255	; 0xff
 8000560:	e003      	b.n	800056a <__aeabi_fdiv+0xe6>
 8000562:	4643      	mov	r3, r8
 8000564:	2b00      	cmp	r3, #0
 8000566:	d12d      	bne.n	80005c4 <__aeabi_fdiv+0x140>
 8000568:	2201      	movs	r2, #1
 800056a:	0031      	movs	r1, r6
 800056c:	464b      	mov	r3, r9
 800056e:	4061      	eors	r1, r4
 8000570:	b2c9      	uxtb	r1, r1
 8000572:	4313      	orrs	r3, r2
 8000574:	2b0f      	cmp	r3, #15
 8000576:	d838      	bhi.n	80005ea <__aeabi_fdiv+0x166>
 8000578:	484e      	ldr	r0, [pc, #312]	; (80006b4 <__aeabi_fdiv+0x230>)
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	58c3      	ldr	r3, [r0, r3]
 800057e:	469f      	mov	pc, r3
 8000580:	2d00      	cmp	r5, #0
 8000582:	d113      	bne.n	80005ac <__aeabi_fdiv+0x128>
 8000584:	2304      	movs	r3, #4
 8000586:	4699      	mov	r9, r3
 8000588:	3b03      	subs	r3, #3
 800058a:	2700      	movs	r7, #0
 800058c:	469a      	mov	sl, r3
 800058e:	e792      	b.n	80004b6 <__aeabi_fdiv+0x32>
 8000590:	2d00      	cmp	r5, #0
 8000592:	d105      	bne.n	80005a0 <__aeabi_fdiv+0x11c>
 8000594:	2308      	movs	r3, #8
 8000596:	4699      	mov	r9, r3
 8000598:	3b06      	subs	r3, #6
 800059a:	27ff      	movs	r7, #255	; 0xff
 800059c:	469a      	mov	sl, r3
 800059e:	e78a      	b.n	80004b6 <__aeabi_fdiv+0x32>
 80005a0:	230c      	movs	r3, #12
 80005a2:	4699      	mov	r9, r3
 80005a4:	3b09      	subs	r3, #9
 80005a6:	27ff      	movs	r7, #255	; 0xff
 80005a8:	469a      	mov	sl, r3
 80005aa:	e784      	b.n	80004b6 <__aeabi_fdiv+0x32>
 80005ac:	0028      	movs	r0, r5
 80005ae:	f000 fc13 	bl	8000dd8 <__clzsi2>
 80005b2:	2776      	movs	r7, #118	; 0x76
 80005b4:	1f43      	subs	r3, r0, #5
 80005b6:	409d      	lsls	r5, r3
 80005b8:	2300      	movs	r3, #0
 80005ba:	427f      	negs	r7, r7
 80005bc:	4699      	mov	r9, r3
 80005be:	469a      	mov	sl, r3
 80005c0:	1a3f      	subs	r7, r7, r0
 80005c2:	e778      	b.n	80004b6 <__aeabi_fdiv+0x32>
 80005c4:	4640      	mov	r0, r8
 80005c6:	f000 fc07 	bl	8000dd8 <__clzsi2>
 80005ca:	4642      	mov	r2, r8
 80005cc:	1f43      	subs	r3, r0, #5
 80005ce:	409a      	lsls	r2, r3
 80005d0:	2376      	movs	r3, #118	; 0x76
 80005d2:	425b      	negs	r3, r3
 80005d4:	4690      	mov	r8, r2
 80005d6:	1a1b      	subs	r3, r3, r0
 80005d8:	2200      	movs	r2, #0
 80005da:	e77e      	b.n	80004da <__aeabi_fdiv+0x56>
 80005dc:	2303      	movs	r3, #3
 80005de:	464a      	mov	r2, r9
 80005e0:	431a      	orrs	r2, r3
 80005e2:	4691      	mov	r9, r2
 80005e4:	33fc      	adds	r3, #252	; 0xfc
 80005e6:	2203      	movs	r2, #3
 80005e8:	e777      	b.n	80004da <__aeabi_fdiv+0x56>
 80005ea:	000e      	movs	r6, r1
 80005ec:	20ff      	movs	r0, #255	; 0xff
 80005ee:	2200      	movs	r2, #0
 80005f0:	e7a8      	b.n	8000544 <__aeabi_fdiv+0xc0>
 80005f2:	2201      	movs	r2, #1
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	2b1b      	cmp	r3, #27
 80005f8:	dca2      	bgt.n	8000540 <__aeabi_fdiv+0xbc>
 80005fa:	379e      	adds	r7, #158	; 0x9e
 80005fc:	002a      	movs	r2, r5
 80005fe:	40bd      	lsls	r5, r7
 8000600:	40da      	lsrs	r2, r3
 8000602:	1e6b      	subs	r3, r5, #1
 8000604:	419d      	sbcs	r5, r3
 8000606:	4315      	orrs	r5, r2
 8000608:	076a      	lsls	r2, r5, #29
 800060a:	d004      	beq.n	8000616 <__aeabi_fdiv+0x192>
 800060c:	220f      	movs	r2, #15
 800060e:	402a      	ands	r2, r5
 8000610:	2a04      	cmp	r2, #4
 8000612:	d000      	beq.n	8000616 <__aeabi_fdiv+0x192>
 8000614:	3504      	adds	r5, #4
 8000616:	016a      	lsls	r2, r5, #5
 8000618:	d544      	bpl.n	80006a4 <__aeabi_fdiv+0x220>
 800061a:	2001      	movs	r0, #1
 800061c:	2200      	movs	r2, #0
 800061e:	e791      	b.n	8000544 <__aeabi_fdiv+0xc0>
 8000620:	20ff      	movs	r0, #255	; 0xff
 8000622:	2200      	movs	r2, #0
 8000624:	e78e      	b.n	8000544 <__aeabi_fdiv+0xc0>
 8000626:	2280      	movs	r2, #128	; 0x80
 8000628:	2600      	movs	r6, #0
 800062a:	20ff      	movs	r0, #255	; 0xff
 800062c:	03d2      	lsls	r2, r2, #15
 800062e:	e789      	b.n	8000544 <__aeabi_fdiv+0xc0>
 8000630:	2300      	movs	r3, #0
 8000632:	4698      	mov	r8, r3
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	03d2      	lsls	r2, r2, #15
 8000638:	4215      	tst	r5, r2
 800063a:	d008      	beq.n	800064e <__aeabi_fdiv+0x1ca>
 800063c:	4643      	mov	r3, r8
 800063e:	4213      	tst	r3, r2
 8000640:	d105      	bne.n	800064e <__aeabi_fdiv+0x1ca>
 8000642:	431a      	orrs	r2, r3
 8000644:	0252      	lsls	r2, r2, #9
 8000646:	0026      	movs	r6, r4
 8000648:	20ff      	movs	r0, #255	; 0xff
 800064a:	0a52      	lsrs	r2, r2, #9
 800064c:	e77a      	b.n	8000544 <__aeabi_fdiv+0xc0>
 800064e:	2280      	movs	r2, #128	; 0x80
 8000650:	03d2      	lsls	r2, r2, #15
 8000652:	432a      	orrs	r2, r5
 8000654:	0252      	lsls	r2, r2, #9
 8000656:	20ff      	movs	r0, #255	; 0xff
 8000658:	0a52      	lsrs	r2, r2, #9
 800065a:	e773      	b.n	8000544 <__aeabi_fdiv+0xc0>
 800065c:	4642      	mov	r2, r8
 800065e:	016b      	lsls	r3, r5, #5
 8000660:	0155      	lsls	r5, r2, #5
 8000662:	42ab      	cmp	r3, r5
 8000664:	d21a      	bcs.n	800069c <__aeabi_fdiv+0x218>
 8000666:	201b      	movs	r0, #27
 8000668:	2200      	movs	r2, #0
 800066a:	3f01      	subs	r7, #1
 800066c:	2601      	movs	r6, #1
 800066e:	001c      	movs	r4, r3
 8000670:	0052      	lsls	r2, r2, #1
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	2c00      	cmp	r4, #0
 8000676:	db01      	blt.n	800067c <__aeabi_fdiv+0x1f8>
 8000678:	429d      	cmp	r5, r3
 800067a:	d801      	bhi.n	8000680 <__aeabi_fdiv+0x1fc>
 800067c:	1b5b      	subs	r3, r3, r5
 800067e:	4332      	orrs	r2, r6
 8000680:	3801      	subs	r0, #1
 8000682:	2800      	cmp	r0, #0
 8000684:	d1f3      	bne.n	800066e <__aeabi_fdiv+0x1ea>
 8000686:	1e58      	subs	r0, r3, #1
 8000688:	4183      	sbcs	r3, r0
 800068a:	4313      	orrs	r3, r2
 800068c:	001d      	movs	r5, r3
 800068e:	003b      	movs	r3, r7
 8000690:	337f      	adds	r3, #127	; 0x7f
 8000692:	000e      	movs	r6, r1
 8000694:	2b00      	cmp	r3, #0
 8000696:	dd00      	ble.n	800069a <__aeabi_fdiv+0x216>
 8000698:	e73d      	b.n	8000516 <__aeabi_fdiv+0x92>
 800069a:	e7aa      	b.n	80005f2 <__aeabi_fdiv+0x16e>
 800069c:	201a      	movs	r0, #26
 800069e:	2201      	movs	r2, #1
 80006a0:	1b5b      	subs	r3, r3, r5
 80006a2:	e7e3      	b.n	800066c <__aeabi_fdiv+0x1e8>
 80006a4:	01aa      	lsls	r2, r5, #6
 80006a6:	2000      	movs	r0, #0
 80006a8:	0a52      	lsrs	r2, r2, #9
 80006aa:	e74b      	b.n	8000544 <__aeabi_fdiv+0xc0>
 80006ac:	08006d4c 	.word	0x08006d4c
 80006b0:	f7ffffff 	.word	0xf7ffffff
 80006b4:	08006d8c 	.word	0x08006d8c

080006b8 <__aeabi_fmul>:
 80006b8:	0243      	lsls	r3, r0, #9
 80006ba:	0a5b      	lsrs	r3, r3, #9
 80006bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006be:	464f      	mov	r7, r9
 80006c0:	4646      	mov	r6, r8
 80006c2:	4699      	mov	r9, r3
 80006c4:	46d6      	mov	lr, sl
 80006c6:	0fc3      	lsrs	r3, r0, #31
 80006c8:	0045      	lsls	r5, r0, #1
 80006ca:	4698      	mov	r8, r3
 80006cc:	b5c0      	push	{r6, r7, lr}
 80006ce:	464b      	mov	r3, r9
 80006d0:	1c0f      	adds	r7, r1, #0
 80006d2:	0e2d      	lsrs	r5, r5, #24
 80006d4:	d100      	bne.n	80006d8 <__aeabi_fmul+0x20>
 80006d6:	e0cb      	b.n	8000870 <__aeabi_fmul+0x1b8>
 80006d8:	2dff      	cmp	r5, #255	; 0xff
 80006da:	d100      	bne.n	80006de <__aeabi_fmul+0x26>
 80006dc:	e0cf      	b.n	800087e <__aeabi_fmul+0x1c6>
 80006de:	2280      	movs	r2, #128	; 0x80
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	04d2      	lsls	r2, r2, #19
 80006e4:	431a      	orrs	r2, r3
 80006e6:	2300      	movs	r3, #0
 80006e8:	4691      	mov	r9, r2
 80006ea:	2600      	movs	r6, #0
 80006ec:	469a      	mov	sl, r3
 80006ee:	3d7f      	subs	r5, #127	; 0x7f
 80006f0:	027c      	lsls	r4, r7, #9
 80006f2:	007b      	lsls	r3, r7, #1
 80006f4:	0a64      	lsrs	r4, r4, #9
 80006f6:	0e1b      	lsrs	r3, r3, #24
 80006f8:	0fff      	lsrs	r7, r7, #31
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d100      	bne.n	8000700 <__aeabi_fmul+0x48>
 80006fe:	e0a9      	b.n	8000854 <__aeabi_fmul+0x19c>
 8000700:	2bff      	cmp	r3, #255	; 0xff
 8000702:	d011      	beq.n	8000728 <__aeabi_fmul+0x70>
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	00e4      	lsls	r4, r4, #3
 8000708:	04d2      	lsls	r2, r2, #19
 800070a:	4314      	orrs	r4, r2
 800070c:	4642      	mov	r2, r8
 800070e:	3b7f      	subs	r3, #127	; 0x7f
 8000710:	195b      	adds	r3, r3, r5
 8000712:	407a      	eors	r2, r7
 8000714:	2000      	movs	r0, #0
 8000716:	b2d2      	uxtb	r2, r2
 8000718:	1c5d      	adds	r5, r3, #1
 800071a:	2e0a      	cmp	r6, #10
 800071c:	dd13      	ble.n	8000746 <__aeabi_fmul+0x8e>
 800071e:	003a      	movs	r2, r7
 8000720:	2e0b      	cmp	r6, #11
 8000722:	d047      	beq.n	80007b4 <__aeabi_fmul+0xfc>
 8000724:	4647      	mov	r7, r8
 8000726:	e03f      	b.n	80007a8 <__aeabi_fmul+0xf0>
 8000728:	002b      	movs	r3, r5
 800072a:	33ff      	adds	r3, #255	; 0xff
 800072c:	2c00      	cmp	r4, #0
 800072e:	d11e      	bne.n	800076e <__aeabi_fmul+0xb6>
 8000730:	2202      	movs	r2, #2
 8000732:	4316      	orrs	r6, r2
 8000734:	4642      	mov	r2, r8
 8000736:	3501      	adds	r5, #1
 8000738:	407a      	eors	r2, r7
 800073a:	b2d2      	uxtb	r2, r2
 800073c:	35ff      	adds	r5, #255	; 0xff
 800073e:	2e0a      	cmp	r6, #10
 8000740:	dd00      	ble.n	8000744 <__aeabi_fmul+0x8c>
 8000742:	e0e4      	b.n	800090e <__aeabi_fmul+0x256>
 8000744:	2002      	movs	r0, #2
 8000746:	2e02      	cmp	r6, #2
 8000748:	dc1c      	bgt.n	8000784 <__aeabi_fmul+0xcc>
 800074a:	3e01      	subs	r6, #1
 800074c:	2e01      	cmp	r6, #1
 800074e:	d842      	bhi.n	80007d6 <__aeabi_fmul+0x11e>
 8000750:	2802      	cmp	r0, #2
 8000752:	d03d      	beq.n	80007d0 <__aeabi_fmul+0x118>
 8000754:	2801      	cmp	r0, #1
 8000756:	d166      	bne.n	8000826 <__aeabi_fmul+0x16e>
 8000758:	2000      	movs	r0, #0
 800075a:	2100      	movs	r1, #0
 800075c:	05c0      	lsls	r0, r0, #23
 800075e:	4308      	orrs	r0, r1
 8000760:	07d2      	lsls	r2, r2, #31
 8000762:	4310      	orrs	r0, r2
 8000764:	bce0      	pop	{r5, r6, r7}
 8000766:	46ba      	mov	sl, r7
 8000768:	46b1      	mov	r9, r6
 800076a:	46a8      	mov	r8, r5
 800076c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800076e:	2203      	movs	r2, #3
 8000770:	4316      	orrs	r6, r2
 8000772:	4642      	mov	r2, r8
 8000774:	3501      	adds	r5, #1
 8000776:	407a      	eors	r2, r7
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	35ff      	adds	r5, #255	; 0xff
 800077c:	2e0a      	cmp	r6, #10
 800077e:	dd00      	ble.n	8000782 <__aeabi_fmul+0xca>
 8000780:	e0e4      	b.n	800094c <__aeabi_fmul+0x294>
 8000782:	2003      	movs	r0, #3
 8000784:	2101      	movs	r1, #1
 8000786:	40b1      	lsls	r1, r6
 8000788:	26a6      	movs	r6, #166	; 0xa6
 800078a:	00f6      	lsls	r6, r6, #3
 800078c:	4231      	tst	r1, r6
 800078e:	d10a      	bne.n	80007a6 <__aeabi_fmul+0xee>
 8000790:	2690      	movs	r6, #144	; 0x90
 8000792:	00b6      	lsls	r6, r6, #2
 8000794:	4231      	tst	r1, r6
 8000796:	d116      	bne.n	80007c6 <__aeabi_fmul+0x10e>
 8000798:	3eb9      	subs	r6, #185	; 0xb9
 800079a:	3eff      	subs	r6, #255	; 0xff
 800079c:	420e      	tst	r6, r1
 800079e:	d01a      	beq.n	80007d6 <__aeabi_fmul+0x11e>
 80007a0:	46a1      	mov	r9, r4
 80007a2:	4682      	mov	sl, r0
 80007a4:	e000      	b.n	80007a8 <__aeabi_fmul+0xf0>
 80007a6:	0017      	movs	r7, r2
 80007a8:	4653      	mov	r3, sl
 80007aa:	003a      	movs	r2, r7
 80007ac:	2b02      	cmp	r3, #2
 80007ae:	d00f      	beq.n	80007d0 <__aeabi_fmul+0x118>
 80007b0:	464c      	mov	r4, r9
 80007b2:	4650      	mov	r0, sl
 80007b4:	2803      	cmp	r0, #3
 80007b6:	d1cd      	bne.n	8000754 <__aeabi_fmul+0x9c>
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	03c9      	lsls	r1, r1, #15
 80007bc:	4321      	orrs	r1, r4
 80007be:	0249      	lsls	r1, r1, #9
 80007c0:	20ff      	movs	r0, #255	; 0xff
 80007c2:	0a49      	lsrs	r1, r1, #9
 80007c4:	e7ca      	b.n	800075c <__aeabi_fmul+0xa4>
 80007c6:	2180      	movs	r1, #128	; 0x80
 80007c8:	2200      	movs	r2, #0
 80007ca:	20ff      	movs	r0, #255	; 0xff
 80007cc:	03c9      	lsls	r1, r1, #15
 80007ce:	e7c5      	b.n	800075c <__aeabi_fmul+0xa4>
 80007d0:	20ff      	movs	r0, #255	; 0xff
 80007d2:	2100      	movs	r1, #0
 80007d4:	e7c2      	b.n	800075c <__aeabi_fmul+0xa4>
 80007d6:	0c20      	lsrs	r0, r4, #16
 80007d8:	4649      	mov	r1, r9
 80007da:	0424      	lsls	r4, r4, #16
 80007dc:	0c24      	lsrs	r4, r4, #16
 80007de:	0027      	movs	r7, r4
 80007e0:	0c0e      	lsrs	r6, r1, #16
 80007e2:	0409      	lsls	r1, r1, #16
 80007e4:	0c09      	lsrs	r1, r1, #16
 80007e6:	4374      	muls	r4, r6
 80007e8:	434f      	muls	r7, r1
 80007ea:	4346      	muls	r6, r0
 80007ec:	4348      	muls	r0, r1
 80007ee:	0c39      	lsrs	r1, r7, #16
 80007f0:	1900      	adds	r0, r0, r4
 80007f2:	1809      	adds	r1, r1, r0
 80007f4:	428c      	cmp	r4, r1
 80007f6:	d903      	bls.n	8000800 <__aeabi_fmul+0x148>
 80007f8:	2080      	movs	r0, #128	; 0x80
 80007fa:	0240      	lsls	r0, r0, #9
 80007fc:	4684      	mov	ip, r0
 80007fe:	4466      	add	r6, ip
 8000800:	043f      	lsls	r7, r7, #16
 8000802:	0408      	lsls	r0, r1, #16
 8000804:	0c3f      	lsrs	r7, r7, #16
 8000806:	19c0      	adds	r0, r0, r7
 8000808:	0184      	lsls	r4, r0, #6
 800080a:	1e67      	subs	r7, r4, #1
 800080c:	41bc      	sbcs	r4, r7
 800080e:	0c09      	lsrs	r1, r1, #16
 8000810:	0e80      	lsrs	r0, r0, #26
 8000812:	1989      	adds	r1, r1, r6
 8000814:	4304      	orrs	r4, r0
 8000816:	0189      	lsls	r1, r1, #6
 8000818:	430c      	orrs	r4, r1
 800081a:	0109      	lsls	r1, r1, #4
 800081c:	d571      	bpl.n	8000902 <__aeabi_fmul+0x24a>
 800081e:	2301      	movs	r3, #1
 8000820:	0861      	lsrs	r1, r4, #1
 8000822:	401c      	ands	r4, r3
 8000824:	430c      	orrs	r4, r1
 8000826:	002b      	movs	r3, r5
 8000828:	337f      	adds	r3, #127	; 0x7f
 800082a:	2b00      	cmp	r3, #0
 800082c:	dd51      	ble.n	80008d2 <__aeabi_fmul+0x21a>
 800082e:	0761      	lsls	r1, r4, #29
 8000830:	d004      	beq.n	800083c <__aeabi_fmul+0x184>
 8000832:	210f      	movs	r1, #15
 8000834:	4021      	ands	r1, r4
 8000836:	2904      	cmp	r1, #4
 8000838:	d000      	beq.n	800083c <__aeabi_fmul+0x184>
 800083a:	3404      	adds	r4, #4
 800083c:	0121      	lsls	r1, r4, #4
 800083e:	d503      	bpl.n	8000848 <__aeabi_fmul+0x190>
 8000840:	4b43      	ldr	r3, [pc, #268]	; (8000950 <__aeabi_fmul+0x298>)
 8000842:	401c      	ands	r4, r3
 8000844:	002b      	movs	r3, r5
 8000846:	3380      	adds	r3, #128	; 0x80
 8000848:	2bfe      	cmp	r3, #254	; 0xfe
 800084a:	dcc1      	bgt.n	80007d0 <__aeabi_fmul+0x118>
 800084c:	01a1      	lsls	r1, r4, #6
 800084e:	0a49      	lsrs	r1, r1, #9
 8000850:	b2d8      	uxtb	r0, r3
 8000852:	e783      	b.n	800075c <__aeabi_fmul+0xa4>
 8000854:	2c00      	cmp	r4, #0
 8000856:	d12c      	bne.n	80008b2 <__aeabi_fmul+0x1fa>
 8000858:	2301      	movs	r3, #1
 800085a:	4642      	mov	r2, r8
 800085c:	431e      	orrs	r6, r3
 800085e:	002b      	movs	r3, r5
 8000860:	407a      	eors	r2, r7
 8000862:	2001      	movs	r0, #1
 8000864:	b2d2      	uxtb	r2, r2
 8000866:	1c5d      	adds	r5, r3, #1
 8000868:	2e0a      	cmp	r6, #10
 800086a:	dd00      	ble.n	800086e <__aeabi_fmul+0x1b6>
 800086c:	e757      	b.n	800071e <__aeabi_fmul+0x66>
 800086e:	e76a      	b.n	8000746 <__aeabi_fmul+0x8e>
 8000870:	2b00      	cmp	r3, #0
 8000872:	d110      	bne.n	8000896 <__aeabi_fmul+0x1de>
 8000874:	2301      	movs	r3, #1
 8000876:	2604      	movs	r6, #4
 8000878:	2500      	movs	r5, #0
 800087a:	469a      	mov	sl, r3
 800087c:	e738      	b.n	80006f0 <__aeabi_fmul+0x38>
 800087e:	2b00      	cmp	r3, #0
 8000880:	d104      	bne.n	800088c <__aeabi_fmul+0x1d4>
 8000882:	2302      	movs	r3, #2
 8000884:	2608      	movs	r6, #8
 8000886:	25ff      	movs	r5, #255	; 0xff
 8000888:	469a      	mov	sl, r3
 800088a:	e731      	b.n	80006f0 <__aeabi_fmul+0x38>
 800088c:	2303      	movs	r3, #3
 800088e:	260c      	movs	r6, #12
 8000890:	25ff      	movs	r5, #255	; 0xff
 8000892:	469a      	mov	sl, r3
 8000894:	e72c      	b.n	80006f0 <__aeabi_fmul+0x38>
 8000896:	4648      	mov	r0, r9
 8000898:	f000 fa9e 	bl	8000dd8 <__clzsi2>
 800089c:	464a      	mov	r2, r9
 800089e:	1f43      	subs	r3, r0, #5
 80008a0:	2576      	movs	r5, #118	; 0x76
 80008a2:	409a      	lsls	r2, r3
 80008a4:	2300      	movs	r3, #0
 80008a6:	426d      	negs	r5, r5
 80008a8:	4691      	mov	r9, r2
 80008aa:	2600      	movs	r6, #0
 80008ac:	469a      	mov	sl, r3
 80008ae:	1a2d      	subs	r5, r5, r0
 80008b0:	e71e      	b.n	80006f0 <__aeabi_fmul+0x38>
 80008b2:	0020      	movs	r0, r4
 80008b4:	f000 fa90 	bl	8000dd8 <__clzsi2>
 80008b8:	4642      	mov	r2, r8
 80008ba:	1f43      	subs	r3, r0, #5
 80008bc:	409c      	lsls	r4, r3
 80008be:	1a2b      	subs	r3, r5, r0
 80008c0:	3b76      	subs	r3, #118	; 0x76
 80008c2:	407a      	eors	r2, r7
 80008c4:	2000      	movs	r0, #0
 80008c6:	b2d2      	uxtb	r2, r2
 80008c8:	1c5d      	adds	r5, r3, #1
 80008ca:	2e0a      	cmp	r6, #10
 80008cc:	dd00      	ble.n	80008d0 <__aeabi_fmul+0x218>
 80008ce:	e726      	b.n	800071e <__aeabi_fmul+0x66>
 80008d0:	e739      	b.n	8000746 <__aeabi_fmul+0x8e>
 80008d2:	2101      	movs	r1, #1
 80008d4:	1acb      	subs	r3, r1, r3
 80008d6:	2b1b      	cmp	r3, #27
 80008d8:	dd00      	ble.n	80008dc <__aeabi_fmul+0x224>
 80008da:	e73d      	b.n	8000758 <__aeabi_fmul+0xa0>
 80008dc:	359e      	adds	r5, #158	; 0x9e
 80008de:	0021      	movs	r1, r4
 80008e0:	40ac      	lsls	r4, r5
 80008e2:	40d9      	lsrs	r1, r3
 80008e4:	1e63      	subs	r3, r4, #1
 80008e6:	419c      	sbcs	r4, r3
 80008e8:	4321      	orrs	r1, r4
 80008ea:	074b      	lsls	r3, r1, #29
 80008ec:	d004      	beq.n	80008f8 <__aeabi_fmul+0x240>
 80008ee:	230f      	movs	r3, #15
 80008f0:	400b      	ands	r3, r1
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	d000      	beq.n	80008f8 <__aeabi_fmul+0x240>
 80008f6:	3104      	adds	r1, #4
 80008f8:	014b      	lsls	r3, r1, #5
 80008fa:	d504      	bpl.n	8000906 <__aeabi_fmul+0x24e>
 80008fc:	2001      	movs	r0, #1
 80008fe:	2100      	movs	r1, #0
 8000900:	e72c      	b.n	800075c <__aeabi_fmul+0xa4>
 8000902:	001d      	movs	r5, r3
 8000904:	e78f      	b.n	8000826 <__aeabi_fmul+0x16e>
 8000906:	0189      	lsls	r1, r1, #6
 8000908:	2000      	movs	r0, #0
 800090a:	0a49      	lsrs	r1, r1, #9
 800090c:	e726      	b.n	800075c <__aeabi_fmul+0xa4>
 800090e:	2302      	movs	r3, #2
 8000910:	2e0f      	cmp	r6, #15
 8000912:	d10c      	bne.n	800092e <__aeabi_fmul+0x276>
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	464b      	mov	r3, r9
 8000918:	03c9      	lsls	r1, r1, #15
 800091a:	420b      	tst	r3, r1
 800091c:	d00d      	beq.n	800093a <__aeabi_fmul+0x282>
 800091e:	420c      	tst	r4, r1
 8000920:	d10b      	bne.n	800093a <__aeabi_fmul+0x282>
 8000922:	4321      	orrs	r1, r4
 8000924:	0249      	lsls	r1, r1, #9
 8000926:	003a      	movs	r2, r7
 8000928:	20ff      	movs	r0, #255	; 0xff
 800092a:	0a49      	lsrs	r1, r1, #9
 800092c:	e716      	b.n	800075c <__aeabi_fmul+0xa4>
 800092e:	2e0b      	cmp	r6, #11
 8000930:	d000      	beq.n	8000934 <__aeabi_fmul+0x27c>
 8000932:	e6f7      	b.n	8000724 <__aeabi_fmul+0x6c>
 8000934:	46a1      	mov	r9, r4
 8000936:	469a      	mov	sl, r3
 8000938:	e736      	b.n	80007a8 <__aeabi_fmul+0xf0>
 800093a:	2180      	movs	r1, #128	; 0x80
 800093c:	464b      	mov	r3, r9
 800093e:	03c9      	lsls	r1, r1, #15
 8000940:	4319      	orrs	r1, r3
 8000942:	0249      	lsls	r1, r1, #9
 8000944:	4642      	mov	r2, r8
 8000946:	20ff      	movs	r0, #255	; 0xff
 8000948:	0a49      	lsrs	r1, r1, #9
 800094a:	e707      	b.n	800075c <__aeabi_fmul+0xa4>
 800094c:	2303      	movs	r3, #3
 800094e:	e7df      	b.n	8000910 <__aeabi_fmul+0x258>
 8000950:	f7ffffff 	.word	0xf7ffffff

08000954 <__aeabi_fsub>:
 8000954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000956:	46c6      	mov	lr, r8
 8000958:	0243      	lsls	r3, r0, #9
 800095a:	0a5b      	lsrs	r3, r3, #9
 800095c:	0045      	lsls	r5, r0, #1
 800095e:	00da      	lsls	r2, r3, #3
 8000960:	0fc4      	lsrs	r4, r0, #31
 8000962:	0248      	lsls	r0, r1, #9
 8000964:	004f      	lsls	r7, r1, #1
 8000966:	4694      	mov	ip, r2
 8000968:	0a42      	lsrs	r2, r0, #9
 800096a:	001e      	movs	r6, r3
 800096c:	4690      	mov	r8, r2
 800096e:	b500      	push	{lr}
 8000970:	0e2d      	lsrs	r5, r5, #24
 8000972:	0e3f      	lsrs	r7, r7, #24
 8000974:	0fc9      	lsrs	r1, r1, #31
 8000976:	0980      	lsrs	r0, r0, #6
 8000978:	2fff      	cmp	r7, #255	; 0xff
 800097a:	d059      	beq.n	8000a30 <__aeabi_fsub+0xdc>
 800097c:	2201      	movs	r2, #1
 800097e:	4051      	eors	r1, r2
 8000980:	428c      	cmp	r4, r1
 8000982:	d039      	beq.n	80009f8 <__aeabi_fsub+0xa4>
 8000984:	1bea      	subs	r2, r5, r7
 8000986:	2a00      	cmp	r2, #0
 8000988:	dd58      	ble.n	8000a3c <__aeabi_fsub+0xe8>
 800098a:	2f00      	cmp	r7, #0
 800098c:	d068      	beq.n	8000a60 <__aeabi_fsub+0x10c>
 800098e:	2dff      	cmp	r5, #255	; 0xff
 8000990:	d100      	bne.n	8000994 <__aeabi_fsub+0x40>
 8000992:	e0d1      	b.n	8000b38 <__aeabi_fsub+0x1e4>
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	04db      	lsls	r3, r3, #19
 8000998:	4318      	orrs	r0, r3
 800099a:	2a1b      	cmp	r2, #27
 800099c:	dc00      	bgt.n	80009a0 <__aeabi_fsub+0x4c>
 800099e:	e0e3      	b.n	8000b68 <__aeabi_fsub+0x214>
 80009a0:	2301      	movs	r3, #1
 80009a2:	4662      	mov	r2, ip
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	015a      	lsls	r2, r3, #5
 80009a8:	d400      	bmi.n	80009ac <__aeabi_fsub+0x58>
 80009aa:	e0ac      	b.n	8000b06 <__aeabi_fsub+0x1b2>
 80009ac:	019b      	lsls	r3, r3, #6
 80009ae:	099e      	lsrs	r6, r3, #6
 80009b0:	0030      	movs	r0, r6
 80009b2:	f000 fa11 	bl	8000dd8 <__clzsi2>
 80009b6:	0033      	movs	r3, r6
 80009b8:	3805      	subs	r0, #5
 80009ba:	4083      	lsls	r3, r0
 80009bc:	4285      	cmp	r5, r0
 80009be:	dc00      	bgt.n	80009c2 <__aeabi_fsub+0x6e>
 80009c0:	e0c6      	b.n	8000b50 <__aeabi_fsub+0x1fc>
 80009c2:	4ab2      	ldr	r2, [pc, #712]	; (8000c8c <__aeabi_fsub+0x338>)
 80009c4:	1a2d      	subs	r5, r5, r0
 80009c6:	4013      	ands	r3, r2
 80009c8:	075a      	lsls	r2, r3, #29
 80009ca:	d004      	beq.n	80009d6 <__aeabi_fsub+0x82>
 80009cc:	220f      	movs	r2, #15
 80009ce:	401a      	ands	r2, r3
 80009d0:	2a04      	cmp	r2, #4
 80009d2:	d000      	beq.n	80009d6 <__aeabi_fsub+0x82>
 80009d4:	3304      	adds	r3, #4
 80009d6:	015a      	lsls	r2, r3, #5
 80009d8:	d400      	bmi.n	80009dc <__aeabi_fsub+0x88>
 80009da:	e097      	b.n	8000b0c <__aeabi_fsub+0x1b8>
 80009dc:	1c6a      	adds	r2, r5, #1
 80009de:	2dfe      	cmp	r5, #254	; 0xfe
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fsub+0x90>
 80009e2:	e084      	b.n	8000aee <__aeabi_fsub+0x19a>
 80009e4:	019b      	lsls	r3, r3, #6
 80009e6:	0a5e      	lsrs	r6, r3, #9
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	05d0      	lsls	r0, r2, #23
 80009ec:	4330      	orrs	r0, r6
 80009ee:	07e4      	lsls	r4, r4, #31
 80009f0:	4320      	orrs	r0, r4
 80009f2:	bc80      	pop	{r7}
 80009f4:	46b8      	mov	r8, r7
 80009f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009f8:	1bea      	subs	r2, r5, r7
 80009fa:	2a00      	cmp	r2, #0
 80009fc:	dd41      	ble.n	8000a82 <__aeabi_fsub+0x12e>
 80009fe:	2f00      	cmp	r7, #0
 8000a00:	d06b      	beq.n	8000ada <__aeabi_fsub+0x186>
 8000a02:	2dff      	cmp	r5, #255	; 0xff
 8000a04:	d100      	bne.n	8000a08 <__aeabi_fsub+0xb4>
 8000a06:	e097      	b.n	8000b38 <__aeabi_fsub+0x1e4>
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	04db      	lsls	r3, r3, #19
 8000a0c:	4318      	orrs	r0, r3
 8000a0e:	2a1b      	cmp	r2, #27
 8000a10:	dc00      	bgt.n	8000a14 <__aeabi_fsub+0xc0>
 8000a12:	e0cc      	b.n	8000bae <__aeabi_fsub+0x25a>
 8000a14:	2301      	movs	r3, #1
 8000a16:	4463      	add	r3, ip
 8000a18:	015a      	lsls	r2, r3, #5
 8000a1a:	d574      	bpl.n	8000b06 <__aeabi_fsub+0x1b2>
 8000a1c:	3501      	adds	r5, #1
 8000a1e:	2dff      	cmp	r5, #255	; 0xff
 8000a20:	d065      	beq.n	8000aee <__aeabi_fsub+0x19a>
 8000a22:	2201      	movs	r2, #1
 8000a24:	499a      	ldr	r1, [pc, #616]	; (8000c90 <__aeabi_fsub+0x33c>)
 8000a26:	401a      	ands	r2, r3
 8000a28:	085b      	lsrs	r3, r3, #1
 8000a2a:	400b      	ands	r3, r1
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	e7cb      	b.n	80009c8 <__aeabi_fsub+0x74>
 8000a30:	2800      	cmp	r0, #0
 8000a32:	d01f      	beq.n	8000a74 <__aeabi_fsub+0x120>
 8000a34:	428c      	cmp	r4, r1
 8000a36:	d022      	beq.n	8000a7e <__aeabi_fsub+0x12a>
 8000a38:	002a      	movs	r2, r5
 8000a3a:	3aff      	subs	r2, #255	; 0xff
 8000a3c:	2a00      	cmp	r2, #0
 8000a3e:	d035      	beq.n	8000aac <__aeabi_fsub+0x158>
 8000a40:	1b7a      	subs	r2, r7, r5
 8000a42:	2d00      	cmp	r5, #0
 8000a44:	d000      	beq.n	8000a48 <__aeabi_fsub+0xf4>
 8000a46:	e099      	b.n	8000b7c <__aeabi_fsub+0x228>
 8000a48:	4663      	mov	r3, ip
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_fsub+0xfc>
 8000a4e:	e0dd      	b.n	8000c0c <__aeabi_fsub+0x2b8>
 8000a50:	1e53      	subs	r3, r2, #1
 8000a52:	2a01      	cmp	r2, #1
 8000a54:	d100      	bne.n	8000a58 <__aeabi_fsub+0x104>
 8000a56:	e105      	b.n	8000c64 <__aeabi_fsub+0x310>
 8000a58:	2aff      	cmp	r2, #255	; 0xff
 8000a5a:	d06b      	beq.n	8000b34 <__aeabi_fsub+0x1e0>
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	e094      	b.n	8000b8a <__aeabi_fsub+0x236>
 8000a60:	2800      	cmp	r0, #0
 8000a62:	d073      	beq.n	8000b4c <__aeabi_fsub+0x1f8>
 8000a64:	1e51      	subs	r1, r2, #1
 8000a66:	2a01      	cmp	r2, #1
 8000a68:	d100      	bne.n	8000a6c <__aeabi_fsub+0x118>
 8000a6a:	e0df      	b.n	8000c2c <__aeabi_fsub+0x2d8>
 8000a6c:	2aff      	cmp	r2, #255	; 0xff
 8000a6e:	d063      	beq.n	8000b38 <__aeabi_fsub+0x1e4>
 8000a70:	000a      	movs	r2, r1
 8000a72:	e792      	b.n	800099a <__aeabi_fsub+0x46>
 8000a74:	2201      	movs	r2, #1
 8000a76:	4051      	eors	r1, r2
 8000a78:	42a1      	cmp	r1, r4
 8000a7a:	d000      	beq.n	8000a7e <__aeabi_fsub+0x12a>
 8000a7c:	e782      	b.n	8000984 <__aeabi_fsub+0x30>
 8000a7e:	002a      	movs	r2, r5
 8000a80:	3aff      	subs	r2, #255	; 0xff
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d036      	beq.n	8000af4 <__aeabi_fsub+0x1a0>
 8000a86:	1b7a      	subs	r2, r7, r5
 8000a88:	2d00      	cmp	r5, #0
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_fsub+0x13a>
 8000a8c:	e0aa      	b.n	8000be4 <__aeabi_fsub+0x290>
 8000a8e:	2fff      	cmp	r7, #255	; 0xff
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fsub+0x140>
 8000a92:	e0da      	b.n	8000c4a <__aeabi_fsub+0x2f6>
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	4661      	mov	r1, ip
 8000a98:	04db      	lsls	r3, r3, #19
 8000a9a:	4319      	orrs	r1, r3
 8000a9c:	468c      	mov	ip, r1
 8000a9e:	2a1b      	cmp	r2, #27
 8000aa0:	dc00      	bgt.n	8000aa4 <__aeabi_fsub+0x150>
 8000aa2:	e0d4      	b.n	8000c4e <__aeabi_fsub+0x2fa>
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	003d      	movs	r5, r7
 8000aa8:	181b      	adds	r3, r3, r0
 8000aaa:	e7b5      	b.n	8000a18 <__aeabi_fsub+0xc4>
 8000aac:	27fe      	movs	r7, #254	; 0xfe
 8000aae:	1c6a      	adds	r2, r5, #1
 8000ab0:	4217      	tst	r7, r2
 8000ab2:	d171      	bne.n	8000b98 <__aeabi_fsub+0x244>
 8000ab4:	2d00      	cmp	r5, #0
 8000ab6:	d000      	beq.n	8000aba <__aeabi_fsub+0x166>
 8000ab8:	e09e      	b.n	8000bf8 <__aeabi_fsub+0x2a4>
 8000aba:	4663      	mov	r3, ip
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_fsub+0x16e>
 8000ac0:	e0d5      	b.n	8000c6e <__aeabi_fsub+0x31a>
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d100      	bne.n	8000aca <__aeabi_fsub+0x176>
 8000ac8:	e78f      	b.n	80009ea <__aeabi_fsub+0x96>
 8000aca:	1a1b      	subs	r3, r3, r0
 8000acc:	015e      	lsls	r6, r3, #5
 8000ace:	d400      	bmi.n	8000ad2 <__aeabi_fsub+0x17e>
 8000ad0:	e0d6      	b.n	8000c80 <__aeabi_fsub+0x32c>
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	1ac3      	subs	r3, r0, r3
 8000ad8:	e776      	b.n	80009c8 <__aeabi_fsub+0x74>
 8000ada:	2800      	cmp	r0, #0
 8000adc:	d036      	beq.n	8000b4c <__aeabi_fsub+0x1f8>
 8000ade:	1e51      	subs	r1, r2, #1
 8000ae0:	2a01      	cmp	r2, #1
 8000ae2:	d100      	bne.n	8000ae6 <__aeabi_fsub+0x192>
 8000ae4:	e09a      	b.n	8000c1c <__aeabi_fsub+0x2c8>
 8000ae6:	2aff      	cmp	r2, #255	; 0xff
 8000ae8:	d026      	beq.n	8000b38 <__aeabi_fsub+0x1e4>
 8000aea:	000a      	movs	r2, r1
 8000aec:	e78f      	b.n	8000a0e <__aeabi_fsub+0xba>
 8000aee:	22ff      	movs	r2, #255	; 0xff
 8000af0:	2600      	movs	r6, #0
 8000af2:	e77a      	b.n	80009ea <__aeabi_fsub+0x96>
 8000af4:	27fe      	movs	r7, #254	; 0xfe
 8000af6:	1c6a      	adds	r2, r5, #1
 8000af8:	4217      	tst	r7, r2
 8000afa:	d062      	beq.n	8000bc2 <__aeabi_fsub+0x26e>
 8000afc:	2aff      	cmp	r2, #255	; 0xff
 8000afe:	d0f6      	beq.n	8000aee <__aeabi_fsub+0x19a>
 8000b00:	0015      	movs	r5, r2
 8000b02:	4460      	add	r0, ip
 8000b04:	0843      	lsrs	r3, r0, #1
 8000b06:	075a      	lsls	r2, r3, #29
 8000b08:	d000      	beq.n	8000b0c <__aeabi_fsub+0x1b8>
 8000b0a:	e75f      	b.n	80009cc <__aeabi_fsub+0x78>
 8000b0c:	08db      	lsrs	r3, r3, #3
 8000b0e:	2dff      	cmp	r5, #255	; 0xff
 8000b10:	d012      	beq.n	8000b38 <__aeabi_fsub+0x1e4>
 8000b12:	025b      	lsls	r3, r3, #9
 8000b14:	0a5e      	lsrs	r6, r3, #9
 8000b16:	b2ea      	uxtb	r2, r5
 8000b18:	e767      	b.n	80009ea <__aeabi_fsub+0x96>
 8000b1a:	4662      	mov	r2, ip
 8000b1c:	2a00      	cmp	r2, #0
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_fsub+0x1ce>
 8000b20:	e093      	b.n	8000c4a <__aeabi_fsub+0x2f6>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	d008      	beq.n	8000b38 <__aeabi_fsub+0x1e4>
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	03d2      	lsls	r2, r2, #15
 8000b2a:	4213      	tst	r3, r2
 8000b2c:	d004      	beq.n	8000b38 <__aeabi_fsub+0x1e4>
 8000b2e:	4640      	mov	r0, r8
 8000b30:	4210      	tst	r0, r2
 8000b32:	d101      	bne.n	8000b38 <__aeabi_fsub+0x1e4>
 8000b34:	000c      	movs	r4, r1
 8000b36:	4643      	mov	r3, r8
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d0d8      	beq.n	8000aee <__aeabi_fsub+0x19a>
 8000b3c:	2680      	movs	r6, #128	; 0x80
 8000b3e:	03f6      	lsls	r6, r6, #15
 8000b40:	431e      	orrs	r6, r3
 8000b42:	0276      	lsls	r6, r6, #9
 8000b44:	22ff      	movs	r2, #255	; 0xff
 8000b46:	0a76      	lsrs	r6, r6, #9
 8000b48:	e74f      	b.n	80009ea <__aeabi_fsub+0x96>
 8000b4a:	4643      	mov	r3, r8
 8000b4c:	0015      	movs	r5, r2
 8000b4e:	e7de      	b.n	8000b0e <__aeabi_fsub+0x1ba>
 8000b50:	2220      	movs	r2, #32
 8000b52:	1b40      	subs	r0, r0, r5
 8000b54:	3001      	adds	r0, #1
 8000b56:	1a12      	subs	r2, r2, r0
 8000b58:	0019      	movs	r1, r3
 8000b5a:	4093      	lsls	r3, r2
 8000b5c:	40c1      	lsrs	r1, r0
 8000b5e:	1e5a      	subs	r2, r3, #1
 8000b60:	4193      	sbcs	r3, r2
 8000b62:	2500      	movs	r5, #0
 8000b64:	430b      	orrs	r3, r1
 8000b66:	e72f      	b.n	80009c8 <__aeabi_fsub+0x74>
 8000b68:	2320      	movs	r3, #32
 8000b6a:	1a9b      	subs	r3, r3, r2
 8000b6c:	0001      	movs	r1, r0
 8000b6e:	4098      	lsls	r0, r3
 8000b70:	0003      	movs	r3, r0
 8000b72:	40d1      	lsrs	r1, r2
 8000b74:	1e5a      	subs	r2, r3, #1
 8000b76:	4193      	sbcs	r3, r2
 8000b78:	430b      	orrs	r3, r1
 8000b7a:	e712      	b.n	80009a2 <__aeabi_fsub+0x4e>
 8000b7c:	2fff      	cmp	r7, #255	; 0xff
 8000b7e:	d0d9      	beq.n	8000b34 <__aeabi_fsub+0x1e0>
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	4664      	mov	r4, ip
 8000b84:	04db      	lsls	r3, r3, #19
 8000b86:	431c      	orrs	r4, r3
 8000b88:	46a4      	mov	ip, r4
 8000b8a:	2a1b      	cmp	r2, #27
 8000b8c:	dd52      	ble.n	8000c34 <__aeabi_fsub+0x2e0>
 8000b8e:	2301      	movs	r3, #1
 8000b90:	000c      	movs	r4, r1
 8000b92:	003d      	movs	r5, r7
 8000b94:	1ac3      	subs	r3, r0, r3
 8000b96:	e706      	b.n	80009a6 <__aeabi_fsub+0x52>
 8000b98:	4663      	mov	r3, ip
 8000b9a:	1a1e      	subs	r6, r3, r0
 8000b9c:	0173      	lsls	r3, r6, #5
 8000b9e:	d439      	bmi.n	8000c14 <__aeabi_fsub+0x2c0>
 8000ba0:	2e00      	cmp	r6, #0
 8000ba2:	d000      	beq.n	8000ba6 <__aeabi_fsub+0x252>
 8000ba4:	e704      	b.n	80009b0 <__aeabi_fsub+0x5c>
 8000ba6:	2400      	movs	r4, #0
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2600      	movs	r6, #0
 8000bac:	e71d      	b.n	80009ea <__aeabi_fsub+0x96>
 8000bae:	2320      	movs	r3, #32
 8000bb0:	1a9b      	subs	r3, r3, r2
 8000bb2:	0001      	movs	r1, r0
 8000bb4:	4098      	lsls	r0, r3
 8000bb6:	0003      	movs	r3, r0
 8000bb8:	40d1      	lsrs	r1, r2
 8000bba:	1e5a      	subs	r2, r3, #1
 8000bbc:	4193      	sbcs	r3, r2
 8000bbe:	430b      	orrs	r3, r1
 8000bc0:	e729      	b.n	8000a16 <__aeabi_fsub+0xc2>
 8000bc2:	2d00      	cmp	r5, #0
 8000bc4:	d1a9      	bne.n	8000b1a <__aeabi_fsub+0x1c6>
 8000bc6:	4663      	mov	r3, ip
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d056      	beq.n	8000c7a <__aeabi_fsub+0x326>
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_fsub+0x280>
 8000bd2:	e70a      	b.n	80009ea <__aeabi_fsub+0x96>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	4463      	add	r3, ip
 8000bd8:	015a      	lsls	r2, r3, #5
 8000bda:	d594      	bpl.n	8000b06 <__aeabi_fsub+0x1b2>
 8000bdc:	4a2b      	ldr	r2, [pc, #172]	; (8000c8c <__aeabi_fsub+0x338>)
 8000bde:	3501      	adds	r5, #1
 8000be0:	4013      	ands	r3, r2
 8000be2:	e790      	b.n	8000b06 <__aeabi_fsub+0x1b2>
 8000be4:	4663      	mov	r3, ip
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d0af      	beq.n	8000b4a <__aeabi_fsub+0x1f6>
 8000bea:	1e53      	subs	r3, r2, #1
 8000bec:	2a01      	cmp	r2, #1
 8000bee:	d015      	beq.n	8000c1c <__aeabi_fsub+0x2c8>
 8000bf0:	2aff      	cmp	r2, #255	; 0xff
 8000bf2:	d02a      	beq.n	8000c4a <__aeabi_fsub+0x2f6>
 8000bf4:	001a      	movs	r2, r3
 8000bf6:	e752      	b.n	8000a9e <__aeabi_fsub+0x14a>
 8000bf8:	4662      	mov	r2, ip
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	d191      	bne.n	8000b22 <__aeabi_fsub+0x1ce>
 8000bfe:	2800      	cmp	r0, #0
 8000c00:	d198      	bne.n	8000b34 <__aeabi_fsub+0x1e0>
 8000c02:	2680      	movs	r6, #128	; 0x80
 8000c04:	2400      	movs	r4, #0
 8000c06:	22ff      	movs	r2, #255	; 0xff
 8000c08:	03f6      	lsls	r6, r6, #15
 8000c0a:	e6ee      	b.n	80009ea <__aeabi_fsub+0x96>
 8000c0c:	000c      	movs	r4, r1
 8000c0e:	4643      	mov	r3, r8
 8000c10:	0015      	movs	r5, r2
 8000c12:	e77c      	b.n	8000b0e <__aeabi_fsub+0x1ba>
 8000c14:	4663      	mov	r3, ip
 8000c16:	000c      	movs	r4, r1
 8000c18:	1ac6      	subs	r6, r0, r3
 8000c1a:	e6c9      	b.n	80009b0 <__aeabi_fsub+0x5c>
 8000c1c:	0003      	movs	r3, r0
 8000c1e:	4463      	add	r3, ip
 8000c20:	2501      	movs	r5, #1
 8000c22:	015a      	lsls	r2, r3, #5
 8000c24:	d400      	bmi.n	8000c28 <__aeabi_fsub+0x2d4>
 8000c26:	e76e      	b.n	8000b06 <__aeabi_fsub+0x1b2>
 8000c28:	2502      	movs	r5, #2
 8000c2a:	e6fa      	b.n	8000a22 <__aeabi_fsub+0xce>
 8000c2c:	4663      	mov	r3, ip
 8000c2e:	2501      	movs	r5, #1
 8000c30:	1a1b      	subs	r3, r3, r0
 8000c32:	e6b8      	b.n	80009a6 <__aeabi_fsub+0x52>
 8000c34:	4664      	mov	r4, ip
 8000c36:	2320      	movs	r3, #32
 8000c38:	40d4      	lsrs	r4, r2
 8000c3a:	1a9b      	subs	r3, r3, r2
 8000c3c:	4662      	mov	r2, ip
 8000c3e:	409a      	lsls	r2, r3
 8000c40:	0013      	movs	r3, r2
 8000c42:	1e5a      	subs	r2, r3, #1
 8000c44:	4193      	sbcs	r3, r2
 8000c46:	4323      	orrs	r3, r4
 8000c48:	e7a2      	b.n	8000b90 <__aeabi_fsub+0x23c>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	e774      	b.n	8000b38 <__aeabi_fsub+0x1e4>
 8000c4e:	4661      	mov	r1, ip
 8000c50:	2320      	movs	r3, #32
 8000c52:	40d1      	lsrs	r1, r2
 8000c54:	1a9b      	subs	r3, r3, r2
 8000c56:	4662      	mov	r2, ip
 8000c58:	409a      	lsls	r2, r3
 8000c5a:	0013      	movs	r3, r2
 8000c5c:	1e5a      	subs	r2, r3, #1
 8000c5e:	4193      	sbcs	r3, r2
 8000c60:	430b      	orrs	r3, r1
 8000c62:	e720      	b.n	8000aa6 <__aeabi_fsub+0x152>
 8000c64:	4663      	mov	r3, ip
 8000c66:	000c      	movs	r4, r1
 8000c68:	2501      	movs	r5, #1
 8000c6a:	1ac3      	subs	r3, r0, r3
 8000c6c:	e69b      	b.n	80009a6 <__aeabi_fsub+0x52>
 8000c6e:	2800      	cmp	r0, #0
 8000c70:	d099      	beq.n	8000ba6 <__aeabi_fsub+0x252>
 8000c72:	000c      	movs	r4, r1
 8000c74:	4646      	mov	r6, r8
 8000c76:	2200      	movs	r2, #0
 8000c78:	e6b7      	b.n	80009ea <__aeabi_fsub+0x96>
 8000c7a:	4646      	mov	r6, r8
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	e6b4      	b.n	80009ea <__aeabi_fsub+0x96>
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d000      	beq.n	8000c86 <__aeabi_fsub+0x332>
 8000c84:	e73f      	b.n	8000b06 <__aeabi_fsub+0x1b2>
 8000c86:	2400      	movs	r4, #0
 8000c88:	2600      	movs	r6, #0
 8000c8a:	e6ae      	b.n	80009ea <__aeabi_fsub+0x96>
 8000c8c:	fbffffff 	.word	0xfbffffff
 8000c90:	7dffffff 	.word	0x7dffffff

08000c94 <__aeabi_f2iz>:
 8000c94:	0241      	lsls	r1, r0, #9
 8000c96:	0042      	lsls	r2, r0, #1
 8000c98:	0fc3      	lsrs	r3, r0, #31
 8000c9a:	0a49      	lsrs	r1, r1, #9
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	0e12      	lsrs	r2, r2, #24
 8000ca0:	2a7e      	cmp	r2, #126	; 0x7e
 8000ca2:	dd03      	ble.n	8000cac <__aeabi_f2iz+0x18>
 8000ca4:	2a9d      	cmp	r2, #157	; 0x9d
 8000ca6:	dd02      	ble.n	8000cae <__aeabi_f2iz+0x1a>
 8000ca8:	4a09      	ldr	r2, [pc, #36]	; (8000cd0 <__aeabi_f2iz+0x3c>)
 8000caa:	1898      	adds	r0, r3, r2
 8000cac:	4770      	bx	lr
 8000cae:	2080      	movs	r0, #128	; 0x80
 8000cb0:	0400      	lsls	r0, r0, #16
 8000cb2:	4301      	orrs	r1, r0
 8000cb4:	2a95      	cmp	r2, #149	; 0x95
 8000cb6:	dc07      	bgt.n	8000cc8 <__aeabi_f2iz+0x34>
 8000cb8:	2096      	movs	r0, #150	; 0x96
 8000cba:	1a82      	subs	r2, r0, r2
 8000cbc:	40d1      	lsrs	r1, r2
 8000cbe:	4248      	negs	r0, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d1f3      	bne.n	8000cac <__aeabi_f2iz+0x18>
 8000cc4:	0008      	movs	r0, r1
 8000cc6:	e7f1      	b.n	8000cac <__aeabi_f2iz+0x18>
 8000cc8:	3a96      	subs	r2, #150	; 0x96
 8000cca:	4091      	lsls	r1, r2
 8000ccc:	e7f7      	b.n	8000cbe <__aeabi_f2iz+0x2a>
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	7fffffff 	.word	0x7fffffff

08000cd4 <__aeabi_ui2f>:
 8000cd4:	b570      	push	{r4, r5, r6, lr}
 8000cd6:	1e04      	subs	r4, r0, #0
 8000cd8:	d00e      	beq.n	8000cf8 <__aeabi_ui2f+0x24>
 8000cda:	f000 f87d 	bl	8000dd8 <__clzsi2>
 8000cde:	239e      	movs	r3, #158	; 0x9e
 8000ce0:	0001      	movs	r1, r0
 8000ce2:	1a1b      	subs	r3, r3, r0
 8000ce4:	2b96      	cmp	r3, #150	; 0x96
 8000ce6:	dc0c      	bgt.n	8000d02 <__aeabi_ui2f+0x2e>
 8000ce8:	2808      	cmp	r0, #8
 8000cea:	d02c      	beq.n	8000d46 <__aeabi_ui2f+0x72>
 8000cec:	3908      	subs	r1, #8
 8000cee:	408c      	lsls	r4, r1
 8000cf0:	0264      	lsls	r4, r4, #9
 8000cf2:	0a64      	lsrs	r4, r4, #9
 8000cf4:	b2d8      	uxtb	r0, r3
 8000cf6:	e001      	b.n	8000cfc <__aeabi_ui2f+0x28>
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	2400      	movs	r4, #0
 8000cfc:	05c0      	lsls	r0, r0, #23
 8000cfe:	4320      	orrs	r0, r4
 8000d00:	bd70      	pop	{r4, r5, r6, pc}
 8000d02:	2b99      	cmp	r3, #153	; 0x99
 8000d04:	dd0a      	ble.n	8000d1c <__aeabi_ui2f+0x48>
 8000d06:	0002      	movs	r2, r0
 8000d08:	0020      	movs	r0, r4
 8000d0a:	321b      	adds	r2, #27
 8000d0c:	4090      	lsls	r0, r2
 8000d0e:	0002      	movs	r2, r0
 8000d10:	1e50      	subs	r0, r2, #1
 8000d12:	4182      	sbcs	r2, r0
 8000d14:	2005      	movs	r0, #5
 8000d16:	1a40      	subs	r0, r0, r1
 8000d18:	40c4      	lsrs	r4, r0
 8000d1a:	4314      	orrs	r4, r2
 8000d1c:	2905      	cmp	r1, #5
 8000d1e:	dc16      	bgt.n	8000d4e <__aeabi_ui2f+0x7a>
 8000d20:	0022      	movs	r2, r4
 8000d22:	480f      	ldr	r0, [pc, #60]	; (8000d60 <__aeabi_ui2f+0x8c>)
 8000d24:	4002      	ands	r2, r0
 8000d26:	0765      	lsls	r5, r4, #29
 8000d28:	d009      	beq.n	8000d3e <__aeabi_ui2f+0x6a>
 8000d2a:	250f      	movs	r5, #15
 8000d2c:	402c      	ands	r4, r5
 8000d2e:	2c04      	cmp	r4, #4
 8000d30:	d005      	beq.n	8000d3e <__aeabi_ui2f+0x6a>
 8000d32:	3204      	adds	r2, #4
 8000d34:	0154      	lsls	r4, r2, #5
 8000d36:	d502      	bpl.n	8000d3e <__aeabi_ui2f+0x6a>
 8000d38:	239f      	movs	r3, #159	; 0x9f
 8000d3a:	4002      	ands	r2, r0
 8000d3c:	1a5b      	subs	r3, r3, r1
 8000d3e:	0192      	lsls	r2, r2, #6
 8000d40:	0a54      	lsrs	r4, r2, #9
 8000d42:	b2d8      	uxtb	r0, r3
 8000d44:	e7da      	b.n	8000cfc <__aeabi_ui2f+0x28>
 8000d46:	0264      	lsls	r4, r4, #9
 8000d48:	2096      	movs	r0, #150	; 0x96
 8000d4a:	0a64      	lsrs	r4, r4, #9
 8000d4c:	e7d6      	b.n	8000cfc <__aeabi_ui2f+0x28>
 8000d4e:	1f4a      	subs	r2, r1, #5
 8000d50:	4094      	lsls	r4, r2
 8000d52:	0022      	movs	r2, r4
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <__aeabi_ui2f+0x8c>)
 8000d56:	4002      	ands	r2, r0
 8000d58:	0765      	lsls	r5, r4, #29
 8000d5a:	d0f0      	beq.n	8000d3e <__aeabi_ui2f+0x6a>
 8000d5c:	e7e5      	b.n	8000d2a <__aeabi_ui2f+0x56>
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	fbffffff 	.word	0xfbffffff

08000d64 <__aeabi_cfrcmple>:
 8000d64:	4684      	mov	ip, r0
 8000d66:	0008      	movs	r0, r1
 8000d68:	4661      	mov	r1, ip
 8000d6a:	e7ff      	b.n	8000d6c <__aeabi_cfcmpeq>

08000d6c <__aeabi_cfcmpeq>:
 8000d6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000d6e:	f000 f8c9 	bl	8000f04 <__lesf2>
 8000d72:	2800      	cmp	r0, #0
 8000d74:	d401      	bmi.n	8000d7a <__aeabi_cfcmpeq+0xe>
 8000d76:	2100      	movs	r1, #0
 8000d78:	42c8      	cmn	r0, r1
 8000d7a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000d7c <__aeabi_fcmpeq>:
 8000d7c:	b510      	push	{r4, lr}
 8000d7e:	f000 f855 	bl	8000e2c <__eqsf2>
 8000d82:	4240      	negs	r0, r0
 8000d84:	3001      	adds	r0, #1
 8000d86:	bd10      	pop	{r4, pc}

08000d88 <__aeabi_fcmplt>:
 8000d88:	b510      	push	{r4, lr}
 8000d8a:	f000 f8bb 	bl	8000f04 <__lesf2>
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	db01      	blt.n	8000d96 <__aeabi_fcmplt+0xe>
 8000d92:	2000      	movs	r0, #0
 8000d94:	bd10      	pop	{r4, pc}
 8000d96:	2001      	movs	r0, #1
 8000d98:	bd10      	pop	{r4, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)

08000d9c <__aeabi_fcmple>:
 8000d9c:	b510      	push	{r4, lr}
 8000d9e:	f000 f8b1 	bl	8000f04 <__lesf2>
 8000da2:	2800      	cmp	r0, #0
 8000da4:	dd01      	ble.n	8000daa <__aeabi_fcmple+0xe>
 8000da6:	2000      	movs	r0, #0
 8000da8:	bd10      	pop	{r4, pc}
 8000daa:	2001      	movs	r0, #1
 8000dac:	bd10      	pop	{r4, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)

08000db0 <__aeabi_fcmpgt>:
 8000db0:	b510      	push	{r4, lr}
 8000db2:	f000 f861 	bl	8000e78 <__gesf2>
 8000db6:	2800      	cmp	r0, #0
 8000db8:	dc01      	bgt.n	8000dbe <__aeabi_fcmpgt+0xe>
 8000dba:	2000      	movs	r0, #0
 8000dbc:	bd10      	pop	{r4, pc}
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	bd10      	pop	{r4, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)

08000dc4 <__aeabi_fcmpge>:
 8000dc4:	b510      	push	{r4, lr}
 8000dc6:	f000 f857 	bl	8000e78 <__gesf2>
 8000dca:	2800      	cmp	r0, #0
 8000dcc:	da01      	bge.n	8000dd2 <__aeabi_fcmpge+0xe>
 8000dce:	2000      	movs	r0, #0
 8000dd0:	bd10      	pop	{r4, pc}
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	bd10      	pop	{r4, pc}
 8000dd6:	46c0      	nop			; (mov r8, r8)

08000dd8 <__clzsi2>:
 8000dd8:	211c      	movs	r1, #28
 8000dda:	2301      	movs	r3, #1
 8000ddc:	041b      	lsls	r3, r3, #16
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d301      	bcc.n	8000de6 <__clzsi2+0xe>
 8000de2:	0c00      	lsrs	r0, r0, #16
 8000de4:	3910      	subs	r1, #16
 8000de6:	0a1b      	lsrs	r3, r3, #8
 8000de8:	4298      	cmp	r0, r3
 8000dea:	d301      	bcc.n	8000df0 <__clzsi2+0x18>
 8000dec:	0a00      	lsrs	r0, r0, #8
 8000dee:	3908      	subs	r1, #8
 8000df0:	091b      	lsrs	r3, r3, #4
 8000df2:	4298      	cmp	r0, r3
 8000df4:	d301      	bcc.n	8000dfa <__clzsi2+0x22>
 8000df6:	0900      	lsrs	r0, r0, #4
 8000df8:	3904      	subs	r1, #4
 8000dfa:	a202      	add	r2, pc, #8	; (adr r2, 8000e04 <__clzsi2+0x2c>)
 8000dfc:	5c10      	ldrb	r0, [r2, r0]
 8000dfe:	1840      	adds	r0, r0, r1
 8000e00:	4770      	bx	lr
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	02020304 	.word	0x02020304
 8000e08:	01010101 	.word	0x01010101
	...

08000e14 <__clzdi2>:
 8000e14:	b510      	push	{r4, lr}
 8000e16:	2900      	cmp	r1, #0
 8000e18:	d103      	bne.n	8000e22 <__clzdi2+0xe>
 8000e1a:	f7ff ffdd 	bl	8000dd8 <__clzsi2>
 8000e1e:	3020      	adds	r0, #32
 8000e20:	e002      	b.n	8000e28 <__clzdi2+0x14>
 8000e22:	0008      	movs	r0, r1
 8000e24:	f7ff ffd8 	bl	8000dd8 <__clzsi2>
 8000e28:	bd10      	pop	{r4, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)

08000e2c <__eqsf2>:
 8000e2c:	b570      	push	{r4, r5, r6, lr}
 8000e2e:	0042      	lsls	r2, r0, #1
 8000e30:	0245      	lsls	r5, r0, #9
 8000e32:	024e      	lsls	r6, r1, #9
 8000e34:	004c      	lsls	r4, r1, #1
 8000e36:	0fc3      	lsrs	r3, r0, #31
 8000e38:	0a6d      	lsrs	r5, r5, #9
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	0e12      	lsrs	r2, r2, #24
 8000e3e:	0a76      	lsrs	r6, r6, #9
 8000e40:	0e24      	lsrs	r4, r4, #24
 8000e42:	0fc9      	lsrs	r1, r1, #31
 8000e44:	2aff      	cmp	r2, #255	; 0xff
 8000e46:	d006      	beq.n	8000e56 <__eqsf2+0x2a>
 8000e48:	2cff      	cmp	r4, #255	; 0xff
 8000e4a:	d003      	beq.n	8000e54 <__eqsf2+0x28>
 8000e4c:	42a2      	cmp	r2, r4
 8000e4e:	d101      	bne.n	8000e54 <__eqsf2+0x28>
 8000e50:	42b5      	cmp	r5, r6
 8000e52:	d006      	beq.n	8000e62 <__eqsf2+0x36>
 8000e54:	bd70      	pop	{r4, r5, r6, pc}
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	d1fc      	bne.n	8000e54 <__eqsf2+0x28>
 8000e5a:	2cff      	cmp	r4, #255	; 0xff
 8000e5c:	d1fa      	bne.n	8000e54 <__eqsf2+0x28>
 8000e5e:	2e00      	cmp	r6, #0
 8000e60:	d1f8      	bne.n	8000e54 <__eqsf2+0x28>
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d006      	beq.n	8000e74 <__eqsf2+0x48>
 8000e66:	2001      	movs	r0, #1
 8000e68:	2a00      	cmp	r2, #0
 8000e6a:	d1f3      	bne.n	8000e54 <__eqsf2+0x28>
 8000e6c:	0028      	movs	r0, r5
 8000e6e:	1e43      	subs	r3, r0, #1
 8000e70:	4198      	sbcs	r0, r3
 8000e72:	e7ef      	b.n	8000e54 <__eqsf2+0x28>
 8000e74:	2000      	movs	r0, #0
 8000e76:	e7ed      	b.n	8000e54 <__eqsf2+0x28>

08000e78 <__gesf2>:
 8000e78:	b570      	push	{r4, r5, r6, lr}
 8000e7a:	0042      	lsls	r2, r0, #1
 8000e7c:	0245      	lsls	r5, r0, #9
 8000e7e:	024e      	lsls	r6, r1, #9
 8000e80:	004c      	lsls	r4, r1, #1
 8000e82:	0fc3      	lsrs	r3, r0, #31
 8000e84:	0a6d      	lsrs	r5, r5, #9
 8000e86:	0e12      	lsrs	r2, r2, #24
 8000e88:	0a76      	lsrs	r6, r6, #9
 8000e8a:	0e24      	lsrs	r4, r4, #24
 8000e8c:	0fc8      	lsrs	r0, r1, #31
 8000e8e:	2aff      	cmp	r2, #255	; 0xff
 8000e90:	d01b      	beq.n	8000eca <__gesf2+0x52>
 8000e92:	2cff      	cmp	r4, #255	; 0xff
 8000e94:	d00e      	beq.n	8000eb4 <__gesf2+0x3c>
 8000e96:	2a00      	cmp	r2, #0
 8000e98:	d11b      	bne.n	8000ed2 <__gesf2+0x5a>
 8000e9a:	2c00      	cmp	r4, #0
 8000e9c:	d101      	bne.n	8000ea2 <__gesf2+0x2a>
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d01c      	beq.n	8000edc <__gesf2+0x64>
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d00c      	beq.n	8000ec0 <__gesf2+0x48>
 8000ea6:	4283      	cmp	r3, r0
 8000ea8:	d01c      	beq.n	8000ee4 <__gesf2+0x6c>
 8000eaa:	2102      	movs	r1, #2
 8000eac:	1e58      	subs	r0, r3, #1
 8000eae:	4008      	ands	r0, r1
 8000eb0:	3801      	subs	r0, #1
 8000eb2:	bd70      	pop	{r4, r5, r6, pc}
 8000eb4:	2e00      	cmp	r6, #0
 8000eb6:	d122      	bne.n	8000efe <__gesf2+0x86>
 8000eb8:	2a00      	cmp	r2, #0
 8000eba:	d1f4      	bne.n	8000ea6 <__gesf2+0x2e>
 8000ebc:	2d00      	cmp	r5, #0
 8000ebe:	d1f2      	bne.n	8000ea6 <__gesf2+0x2e>
 8000ec0:	2800      	cmp	r0, #0
 8000ec2:	d1f6      	bne.n	8000eb2 <__gesf2+0x3a>
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	4240      	negs	r0, r0
 8000ec8:	e7f3      	b.n	8000eb2 <__gesf2+0x3a>
 8000eca:	2d00      	cmp	r5, #0
 8000ecc:	d117      	bne.n	8000efe <__gesf2+0x86>
 8000ece:	2cff      	cmp	r4, #255	; 0xff
 8000ed0:	d0f0      	beq.n	8000eb4 <__gesf2+0x3c>
 8000ed2:	2c00      	cmp	r4, #0
 8000ed4:	d1e7      	bne.n	8000ea6 <__gesf2+0x2e>
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	d1e5      	bne.n	8000ea6 <__gesf2+0x2e>
 8000eda:	e7e6      	b.n	8000eaa <__gesf2+0x32>
 8000edc:	2000      	movs	r0, #0
 8000ede:	2d00      	cmp	r5, #0
 8000ee0:	d0e7      	beq.n	8000eb2 <__gesf2+0x3a>
 8000ee2:	e7e2      	b.n	8000eaa <__gesf2+0x32>
 8000ee4:	42a2      	cmp	r2, r4
 8000ee6:	dc05      	bgt.n	8000ef4 <__gesf2+0x7c>
 8000ee8:	dbea      	blt.n	8000ec0 <__gesf2+0x48>
 8000eea:	42b5      	cmp	r5, r6
 8000eec:	d802      	bhi.n	8000ef4 <__gesf2+0x7c>
 8000eee:	d3e7      	bcc.n	8000ec0 <__gesf2+0x48>
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	e7de      	b.n	8000eb2 <__gesf2+0x3a>
 8000ef4:	4243      	negs	r3, r0
 8000ef6:	4158      	adcs	r0, r3
 8000ef8:	0040      	lsls	r0, r0, #1
 8000efa:	3801      	subs	r0, #1
 8000efc:	e7d9      	b.n	8000eb2 <__gesf2+0x3a>
 8000efe:	2002      	movs	r0, #2
 8000f00:	4240      	negs	r0, r0
 8000f02:	e7d6      	b.n	8000eb2 <__gesf2+0x3a>

08000f04 <__lesf2>:
 8000f04:	b570      	push	{r4, r5, r6, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0245      	lsls	r5, r0, #9
 8000f0a:	024e      	lsls	r6, r1, #9
 8000f0c:	004c      	lsls	r4, r1, #1
 8000f0e:	0fc3      	lsrs	r3, r0, #31
 8000f10:	0a6d      	lsrs	r5, r5, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a76      	lsrs	r6, r6, #9
 8000f16:	0e24      	lsrs	r4, r4, #24
 8000f18:	0fc8      	lsrs	r0, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	; 0xff
 8000f1c:	d00b      	beq.n	8000f36 <__lesf2+0x32>
 8000f1e:	2cff      	cmp	r4, #255	; 0xff
 8000f20:	d00d      	beq.n	8000f3e <__lesf2+0x3a>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11f      	bne.n	8000f66 <__lesf2+0x62>
 8000f26:	2c00      	cmp	r4, #0
 8000f28:	d116      	bne.n	8000f58 <__lesf2+0x54>
 8000f2a:	2e00      	cmp	r6, #0
 8000f2c:	d114      	bne.n	8000f58 <__lesf2+0x54>
 8000f2e:	2000      	movs	r0, #0
 8000f30:	2d00      	cmp	r5, #0
 8000f32:	d010      	beq.n	8000f56 <__lesf2+0x52>
 8000f34:	e009      	b.n	8000f4a <__lesf2+0x46>
 8000f36:	2d00      	cmp	r5, #0
 8000f38:	d10c      	bne.n	8000f54 <__lesf2+0x50>
 8000f3a:	2cff      	cmp	r4, #255	; 0xff
 8000f3c:	d113      	bne.n	8000f66 <__lesf2+0x62>
 8000f3e:	2e00      	cmp	r6, #0
 8000f40:	d108      	bne.n	8000f54 <__lesf2+0x50>
 8000f42:	2a00      	cmp	r2, #0
 8000f44:	d008      	beq.n	8000f58 <__lesf2+0x54>
 8000f46:	4283      	cmp	r3, r0
 8000f48:	d012      	beq.n	8000f70 <__lesf2+0x6c>
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	1e58      	subs	r0, r3, #1
 8000f4e:	4008      	ands	r0, r1
 8000f50:	3801      	subs	r0, #1
 8000f52:	e000      	b.n	8000f56 <__lesf2+0x52>
 8000f54:	2002      	movs	r0, #2
 8000f56:	bd70      	pop	{r4, r5, r6, pc}
 8000f58:	2d00      	cmp	r5, #0
 8000f5a:	d1f4      	bne.n	8000f46 <__lesf2+0x42>
 8000f5c:	2800      	cmp	r0, #0
 8000f5e:	d1fa      	bne.n	8000f56 <__lesf2+0x52>
 8000f60:	2001      	movs	r0, #1
 8000f62:	4240      	negs	r0, r0
 8000f64:	e7f7      	b.n	8000f56 <__lesf2+0x52>
 8000f66:	2c00      	cmp	r4, #0
 8000f68:	d1ed      	bne.n	8000f46 <__lesf2+0x42>
 8000f6a:	2e00      	cmp	r6, #0
 8000f6c:	d1eb      	bne.n	8000f46 <__lesf2+0x42>
 8000f6e:	e7ec      	b.n	8000f4a <__lesf2+0x46>
 8000f70:	42a2      	cmp	r2, r4
 8000f72:	dc05      	bgt.n	8000f80 <__lesf2+0x7c>
 8000f74:	dbf2      	blt.n	8000f5c <__lesf2+0x58>
 8000f76:	42b5      	cmp	r5, r6
 8000f78:	d802      	bhi.n	8000f80 <__lesf2+0x7c>
 8000f7a:	d3ef      	bcc.n	8000f5c <__lesf2+0x58>
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	e7ea      	b.n	8000f56 <__lesf2+0x52>
 8000f80:	4243      	negs	r3, r0
 8000f82:	4158      	adcs	r0, r3
 8000f84:	0040      	lsls	r0, r0, #1
 8000f86:	3801      	subs	r0, #1
 8000f88:	e7e5      	b.n	8000f56 <__lesf2+0x52>
 8000f8a:	46c0      	nop			; (mov r8, r8)

08000f8c <segment_write>:
		{ 1, 0, 0, 1, 0, 0, 0, 1 }, // Y (31)
		{ 1, 0, 1, 0, 0, 1, 0, 0 }, // Z (32)
		{ 1, 1, 1, 1, 1, 1, 1, 1 }, // BLANK (33)
		{ 1, 0, 0, 1, 1, 1, 0, 0 } }; // DEG (34)

void segment_write(seven_segment *seg) {
 8000f8c:	b5b0      	push	{r4, r5, r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(seg->enable_port, seg->enable_pin, 0);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6958      	ldr	r0, [r3, #20]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	8b1b      	ldrh	r3, [r3, #24]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	0019      	movs	r1, r3
 8000fa0:	f001 fe4f 	bl	8002c42 <HAL_GPIO_WritePin>

	for (uint8_t i = 0; i < 8; i++) {
 8000fa4:	230f      	movs	r3, #15
 8000fa6:	18fb      	adds	r3, r7, r3
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
 8000fac:	e026      	b.n	8000ffc <segment_write+0x70>
		HAL_GPIO_WritePin(seg->a_port, seg->a_pin, segment_data[seg->data][i]);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68d8      	ldr	r0, [r3, #12]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	8a1c      	ldrh	r4, [r3, #16]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	001a      	movs	r2, r3
 8000fbc:	250f      	movs	r5, #15
 8000fbe:	197b      	adds	r3, r7, r5
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	4917      	ldr	r1, [pc, #92]	; (8001020 <segment_write+0x94>)
 8000fc4:	00d2      	lsls	r2, r2, #3
 8000fc6:	188a      	adds	r2, r1, r2
 8000fc8:	5cd3      	ldrb	r3, [r2, r3]
 8000fca:	001a      	movs	r2, r3
 8000fcc:	0021      	movs	r1, r4
 8000fce:	f001 fe38 	bl	8002c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(seg->clock_port, seg->clock_pin, 0);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6858      	ldr	r0, [r3, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	891b      	ldrh	r3, [r3, #8]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	0019      	movs	r1, r3
 8000fde:	f001 fe30 	bl	8002c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(seg->clock_port, seg->clock_pin, 1);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6858      	ldr	r0, [r3, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	891b      	ldrh	r3, [r3, #8]
 8000fea:	2201      	movs	r2, #1
 8000fec:	0019      	movs	r1, r3
 8000fee:	f001 fe28 	bl	8002c42 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 8; i++) {
 8000ff2:	197b      	adds	r3, r7, r5
 8000ff4:	781a      	ldrb	r2, [r3, #0]
 8000ff6:	197b      	adds	r3, r7, r5
 8000ff8:	3201      	adds	r2, #1
 8000ffa:	701a      	strb	r2, [r3, #0]
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	18fb      	adds	r3, r7, r3
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b07      	cmp	r3, #7
 8001004:	d9d3      	bls.n	8000fae <segment_write+0x22>
	}
	HAL_GPIO_WritePin(seg->enable_port, seg->enable_pin, seg->enable_segment);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6958      	ldr	r0, [r3, #20]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	8b19      	ldrh	r1, [r3, #24]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	789b      	ldrb	r3, [r3, #2]
 8001012:	001a      	movs	r2, r3
 8001014:	f001 fe15 	bl	8002c42 <HAL_GPIO_WritePin>
}
 8001018:	46c0      	nop			; (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	b004      	add	sp, #16
 800101e:	bdb0      	pop	{r4, r5, r7, pc}
 8001020:	20000000 	.word	0x20000000

08001024 <display_write_number>:

void display_write_number(display *disp) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	uint32_t data = disp->data;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	60fb      	str	r3, [r7, #12]
	disp->second_one->data = data % 10;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	210a      	movs	r1, #10
 8001036:	0018      	movs	r0, r3
 8001038:	f7ff f8ec 	bl	8000214 <__aeabi_uidivmod>
 800103c:	000b      	movs	r3, r1
 800103e:	001a      	movs	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69db      	ldr	r3, [r3, #28]
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	701a      	strb	r2, [r3, #0]
	data /= 10;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	210a      	movs	r1, #10
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff f85b 	bl	8000108 <__udivsi3>
 8001052:	0003      	movs	r3, r0
 8001054:	60fb      	str	r3, [r7, #12]
	disp->second_ten->data = data % 10;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	210a      	movs	r1, #10
 800105a:	0018      	movs	r0, r3
 800105c:	f7ff f8da 	bl	8000214 <__aeabi_uidivmod>
 8001060:	000b      	movs	r3, r1
 8001062:	001a      	movs	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	701a      	strb	r2, [r3, #0]
	data /= 10;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	210a      	movs	r1, #10
 8001070:	0018      	movs	r0, r3
 8001072:	f7ff f849 	bl	8000108 <__udivsi3>
 8001076:	0003      	movs	r3, r0
 8001078:	60fb      	str	r3, [r7, #12]
	disp->minute_one->data = data % 10;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	210a      	movs	r1, #10
 800107e:	0018      	movs	r0, r3
 8001080:	f7ff f8c8 	bl	8000214 <__aeabi_uidivmod>
 8001084:	000b      	movs	r3, r1
 8001086:	001a      	movs	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	701a      	strb	r2, [r3, #0]
	data /= 10;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	210a      	movs	r1, #10
 8001094:	0018      	movs	r0, r3
 8001096:	f7ff f837 	bl	8000108 <__udivsi3>
 800109a:	0003      	movs	r3, r0
 800109c:	60fb      	str	r3, [r7, #12]
	disp->minute_ten->data = data % 10;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	210a      	movs	r1, #10
 80010a2:	0018      	movs	r0, r3
 80010a4:	f7ff f8b6 	bl	8000214 <__aeabi_uidivmod>
 80010a8:	000b      	movs	r3, r1
 80010aa:	001a      	movs	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	701a      	strb	r2, [r3, #0]
	data /= 10;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	210a      	movs	r1, #10
 80010b8:	0018      	movs	r0, r3
 80010ba:	f7ff f825 	bl	8000108 <__udivsi3>
 80010be:	0003      	movs	r3, r0
 80010c0:	60fb      	str	r3, [r7, #12]
	disp->hour_one->data = data % 10;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	210a      	movs	r1, #10
 80010c6:	0018      	movs	r0, r3
 80010c8:	f7ff f8a4 	bl	8000214 <__aeabi_uidivmod>
 80010cc:	000b      	movs	r3, r1
 80010ce:	001a      	movs	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	701a      	strb	r2, [r3, #0]
	data /= 10;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	210a      	movs	r1, #10
 80010dc:	0018      	movs	r0, r3
 80010de:	f7ff f813 	bl	8000108 <__udivsi3>
 80010e2:	0003      	movs	r3, r0
 80010e4:	60fb      	str	r3, [r7, #12]
	disp->hour_ten->data = data % 10;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	210a      	movs	r1, #10
 80010ea:	0018      	movs	r0, r3
 80010ec:	f7ff f892 	bl	8000214 <__aeabi_uidivmod>
 80010f0:	000b      	movs	r3, r1
 80010f2:	001a      	movs	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	701a      	strb	r2, [r3, #0]

	if (disp->hour_ten->data != disp->hour_ten->data_old) {
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	781a      	ldrb	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	785b      	ldrb	r3, [r3, #1]
 8001108:	429a      	cmp	r2, r3
 800110a:	d00a      	beq.n	8001122 <display_write_number+0xfe>
		segment_write(disp->hour_ten);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	0018      	movs	r0, r3
 8001112:	f7ff ff3b 	bl	8000f8c <segment_write>
		disp->hour_ten->data_old = disp->hour_ten->data;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	7812      	ldrb	r2, [r2, #0]
 8001120:	705a      	strb	r2, [r3, #1]
	}

	if (disp->hour_one->data != disp->hour_one->data_old) {
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	781a      	ldrb	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	785b      	ldrb	r3, [r3, #1]
 800112e:	429a      	cmp	r2, r3
 8001130:	d00a      	beq.n	8001148 <display_write_number+0x124>
		segment_write(disp->hour_one);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	0018      	movs	r0, r3
 8001138:	f7ff ff28 	bl	8000f8c <segment_write>
		disp->hour_one->data_old = disp->hour_one->data;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	7812      	ldrb	r2, [r2, #0]
 8001146:	705a      	strb	r2, [r3, #1]
	}

	if (disp->minute_ten->data != disp->minute_ten->data_old) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	781a      	ldrb	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	785b      	ldrb	r3, [r3, #1]
 8001154:	429a      	cmp	r2, r3
 8001156:	d00a      	beq.n	800116e <display_write_number+0x14a>
		segment_write(disp->minute_ten);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	0018      	movs	r0, r3
 800115e:	f7ff ff15 	bl	8000f8c <segment_write>
		disp->minute_ten->data_old = disp->minute_ten->data;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	691a      	ldr	r2, [r3, #16]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	7812      	ldrb	r2, [r2, #0]
 800116c:	705a      	strb	r2, [r3, #1]
	}

	if (disp->minute_one->data != disp->minute_one->data_old) {
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	781a      	ldrb	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	785b      	ldrb	r3, [r3, #1]
 800117a:	429a      	cmp	r2, r3
 800117c:	d00a      	beq.n	8001194 <display_write_number+0x170>
		segment_write(disp->minute_one);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	0018      	movs	r0, r3
 8001184:	f7ff ff02 	bl	8000f8c <segment_write>
		disp->minute_one->data_old = disp->minute_one->data;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	695a      	ldr	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	695b      	ldr	r3, [r3, #20]
 8001190:	7812      	ldrb	r2, [r2, #0]
 8001192:	705a      	strb	r2, [r3, #1]
	}

	if (disp->second_ten->data != disp->second_ten->data_old) {
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	781a      	ldrb	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	785b      	ldrb	r3, [r3, #1]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d00a      	beq.n	80011ba <display_write_number+0x196>
		segment_write(disp->second_ten);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	0018      	movs	r0, r3
 80011aa:	f7ff feef 	bl	8000f8c <segment_write>
		disp->second_ten->data_old = disp->second_ten->data;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	699a      	ldr	r2, [r3, #24]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	7812      	ldrb	r2, [r2, #0]
 80011b8:	705a      	strb	r2, [r3, #1]
	}

	if (disp->second_one->data != disp->second_one->data_old) {
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	781a      	ldrb	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	785b      	ldrb	r3, [r3, #1]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d00a      	beq.n	80011e0 <display_write_number+0x1bc>
		segment_write(disp->second_one);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	0018      	movs	r0, r3
 80011d0:	f7ff fedc 	bl	8000f8c <segment_write>
		disp->second_one->data_old = disp->second_one->data;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69da      	ldr	r2, [r3, #28]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69db      	ldr	r3, [r3, #28]
 80011dc:	7812      	ldrb	r2, [r2, #0]
 80011de:	705a      	strb	r2, [r3, #1]
	}
}
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b004      	add	sp, #16
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <display_write_segment>:

void display_write_segment(display_segment *disp_segment) {
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	uint8_t data = disp_segment->data;
 80011f0:	210f      	movs	r1, #15
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	7812      	ldrb	r2, [r2, #0]
 80011f8:	701a      	strb	r2, [r3, #0]
	if (data != disp_segment->data_old) {
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	785b      	ldrb	r3, [r3, #1]
 80011fe:	187a      	adds	r2, r7, r1
 8001200:	7812      	ldrb	r2, [r2, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d027      	beq.n	8001256 <display_write_segment+0x6e>
		disp_segment->data_old = disp_segment->data;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	781a      	ldrb	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	705a      	strb	r2, [r3, #1]

		disp_segment->one->data = data % 10;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689c      	ldr	r4, [r3, #8]
 8001212:	000d      	movs	r5, r1
 8001214:	197b      	adds	r3, r7, r5
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	210a      	movs	r1, #10
 800121a:	0018      	movs	r0, r3
 800121c:	f7fe fffa 	bl	8000214 <__aeabi_uidivmod>
 8001220:	000b      	movs	r3, r1
 8001222:	b2db      	uxtb	r3, r3
 8001224:	7023      	strb	r3, [r4, #0]
		data /= 10;
 8001226:	197c      	adds	r4, r7, r5
 8001228:	197b      	adds	r3, r7, r5
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	210a      	movs	r1, #10
 800122e:	0018      	movs	r0, r3
 8001230:	f7fe ff6a 	bl	8000108 <__udivsi3>
 8001234:	0003      	movs	r3, r0
 8001236:	7023      	strb	r3, [r4, #0]
		disp_segment->ten->data = data;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	197a      	adds	r2, r7, r5
 800123e:	7812      	ldrb	r2, [r2, #0]
 8001240:	701a      	strb	r2, [r3, #0]

		segment_write(disp_segment->one);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	0018      	movs	r0, r3
 8001248:	f7ff fea0 	bl	8000f8c <segment_write>
		segment_write(disp_segment->ten);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	0018      	movs	r0, r3
 8001252:	f7ff fe9b 	bl	8000f8c <segment_write>
	}
}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b004      	add	sp, #16
 800125c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001260 <process_button>:
	temp_value = HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port, BTN_RIGHT_Pin);
	*button_value |= (temp_value << 0);
	return 0;
}

void process_button(Button *btn) {
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	uint8_t raw_state = HAL_GPIO_ReadPin(btn->port, btn->pin);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691a      	ldr	r2, [r3, #16]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	8a9b      	ldrh	r3, [r3, #20]
 8001270:	210f      	movs	r1, #15
 8001272:	187c      	adds	r4, r7, r1
 8001274:	0019      	movs	r1, r3
 8001276:	0010      	movs	r0, r2
 8001278:	f001 fcc6 	bl	8002c08 <HAL_GPIO_ReadPin>
 800127c:	0003      	movs	r3, r0
 800127e:	7023      	strb	r3, [r4, #0]
	uint32_t now = HAL_GetTick();
 8001280:	f001 fa48 	bl	8002714 <HAL_GetTick>
 8001284:	0003      	movs	r3, r0
 8001286:	60bb      	str	r3, [r7, #8]

	switch (btn->state) {
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b04      	cmp	r3, #4
 800128e:	d900      	bls.n	8001292 <process_button+0x32>
 8001290:	e073      	b.n	800137a <process_button+0x11a>
 8001292:	009a      	lsls	r2, r3, #2
 8001294:	4b3b      	ldr	r3, [pc, #236]	; (8001384 <process_button+0x124>)
 8001296:	18d3      	adds	r3, r2, r3
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	469f      	mov	pc, r3
	case BUTTON_IDLE:
		if (raw_state != btn->last_raw_state) {
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	7b1b      	ldrb	r3, [r3, #12]
 80012a0:	220f      	movs	r2, #15
 80012a2:	18ba      	adds	r2, r7, r2
 80012a4:	7812      	ldrb	r2, [r2, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d060      	beq.n	800136c <process_button+0x10c>
			btn->last_change_time = now;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68ba      	ldr	r2, [r7, #8]
 80012ae:	605a      	str	r2, [r3, #4]
			btn->state = BUTTON_DEBOUNCING;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2201      	movs	r2, #1
 80012b4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80012b6:	e059      	b.n	800136c <process_button+0x10c>

	case BUTTON_DEBOUNCING:
		if ((now - btn->last_change_time) >= DEBOUNCE_TIME_MS) {
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	68ba      	ldr	r2, [r7, #8]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b1d      	cmp	r3, #29
 80012c2:	d955      	bls.n	8001370 <process_button+0x110>
			if (raw_state != btn->last_raw_state) {
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7b1b      	ldrb	r3, [r3, #12]
 80012c8:	210f      	movs	r1, #15
 80012ca:	187a      	adds	r2, r7, r1
 80012cc:	7812      	ldrb	r2, [r2, #0]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d012      	beq.n	80012f8 <process_button+0x98>
				btn->last_raw_state = raw_state;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	187a      	adds	r2, r7, r1
 80012d6:	7812      	ldrb	r2, [r2, #0]
 80012d8:	731a      	strb	r2, [r3, #12]
				if (raw_state) {  // Button pressed
 80012da:	187b      	adds	r3, r7, r1
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d006      	beq.n	80012f0 <process_button+0x90>
					btn->press_time = now;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68ba      	ldr	r2, [r7, #8]
 80012e6:	609a      	str	r2, [r3, #8]
					btn->state = BUTTON_PRESSED;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2202      	movs	r2, #2
 80012ec:	701a      	strb	r2, [r3, #0]
				}
			} else {
				btn->state = BUTTON_IDLE;
			}
		}
		break;
 80012ee:	e03f      	b.n	8001370 <process_button+0x110>
					btn->state = BUTTON_IDLE;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
		break;
 80012f6:	e03b      	b.n	8001370 <process_button+0x110>
				btn->state = BUTTON_IDLE;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
		break;
 80012fe:	e037      	b.n	8001370 <process_button+0x110>

	case BUTTON_PRESSED:
		if (!raw_state) {
 8001300:	230f      	movs	r3, #15
 8001302:	18fb      	adds	r3, r7, r3
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10f      	bne.n	800132a <process_button+0xca>
			if ((now - btn->press_time) < LONG_PRESS_TIME_MS) {
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	1ad2      	subs	r2, r2, r3
 8001312:	23fa      	movs	r3, #250	; 0xfa
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	429a      	cmp	r2, r3
 8001318:	d203      	bcs.n	8001322 <process_button+0xc2>
				printf("Short Press Detected\n");
 800131a:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <process_button+0x128>)
 800131c:	0018      	movs	r0, r3
 800131e:	f005 f8eb 	bl	80064f8 <puts>
			}
			btn->state = BUTTON_RELEASED;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2204      	movs	r2, #4
 8001326:	701a      	strb	r2, [r3, #0]
		} else if ((now - btn->press_time) >= LONG_PRESS_TIME_MS) {
			printf("Long Press Detected\n");
			btn->state = BUTTON_LONG_PRESS;
		}
		break;
 8001328:	e024      	b.n	8001374 <process_button+0x114>
		} else if ((now - btn->press_time) >= LONG_PRESS_TIME_MS) {
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	1ad2      	subs	r2, r2, r3
 8001332:	23fa      	movs	r3, #250	; 0xfa
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	429a      	cmp	r2, r3
 8001338:	d31c      	bcc.n	8001374 <process_button+0x114>
			printf("Long Press Detected\n");
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <process_button+0x12c>)
 800133c:	0018      	movs	r0, r3
 800133e:	f005 f8db 	bl	80064f8 <puts>
			btn->state = BUTTON_LONG_PRESS;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2203      	movs	r2, #3
 8001346:	701a      	strb	r2, [r3, #0]
		break;
 8001348:	e014      	b.n	8001374 <process_button+0x114>

	case BUTTON_LONG_PRESS:
		if (!raw_state) {
 800134a:	230f      	movs	r3, #15
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d111      	bne.n	8001378 <process_button+0x118>
			btn->state = BUTTON_RELEASED;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2204      	movs	r2, #4
 8001358:	701a      	strb	r2, [r3, #0]
		}
		break;
 800135a:	e00d      	b.n	8001378 <process_button+0x118>

	case BUTTON_RELEASED:
		printf("Button Released\n");
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <process_button+0x130>)
 800135e:	0018      	movs	r0, r3
 8001360:	f005 f8ca 	bl	80064f8 <puts>
		btn->state = BUTTON_IDLE;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
		break;
 800136a:	e006      	b.n	800137a <process_button+0x11a>
		break;
 800136c:	46c0      	nop			; (mov r8, r8)
 800136e:	e004      	b.n	800137a <process_button+0x11a>
		break;
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	e002      	b.n	800137a <process_button+0x11a>
		break;
 8001374:	46c0      	nop			; (mov r8, r8)
 8001376:	e000      	b.n	800137a <process_button+0x11a>
		break;
 8001378:	46c0      	nop			; (mov r8, r8)
	}
}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	46bd      	mov	sp, r7
 800137e:	b005      	add	sp, #20
 8001380:	bd90      	pop	{r4, r7, pc}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	08006dcc 	.word	0x08006dcc
 8001388:	08006cb0 	.word	0x08006cb0
 800138c:	08006cc8 	.word	0x08006cc8
 8001390:	08006cdc 	.word	0x08006cdc

08001394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001396:	b0fd      	sub	sp, #500	; 0x1f4
 8001398:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	clock_value = 0;
 800139a:	4b37      	ldr	r3, [pc, #220]	; (8001478 <main+0xe4>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a0:	f001 f952 	bl	8002648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a4:	f000 fbc0 	bl	8001b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a8:	f000 fe16 	bl	8001fd8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013ac:	f000 fc44 	bl	8001c38 <MX_I2C1_Init>
  MX_RTC_Init();
 80013b0:	f000 fc82 	bl	8001cb8 <MX_RTC_Init>
  MX_TIM2_Init();
 80013b4:	f000 fce4 	bl	8001d80 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80013b8:	f000 fdde 	bl	8001f78 <MX_USART2_UART_Init>
  MX_TIM21_Init();
 80013bc:	f000 fd60 	bl	8001e80 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(EN_HO_GPIO_Port, EN_HO_Pin, 0);
 80013c0:	4b2e      	ldr	r3, [pc, #184]	; (800147c <main+0xe8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	2110      	movs	r1, #16
 80013c6:	0018      	movs	r0, r3
 80013c8:	f001 fc3b 	bl	8002c42 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_HT_GPIO_Port, EN_HT_Pin, 0);
 80013cc:	23a0      	movs	r3, #160	; 0xa0
 80013ce:	05db      	lsls	r3, r3, #23
 80013d0:	2200      	movs	r2, #0
 80013d2:	2108      	movs	r1, #8
 80013d4:	0018      	movs	r0, r3
 80013d6:	f001 fc34 	bl	8002c42 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_MO_GPIO_Port, EN_MO_Pin, 0);
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	015b      	lsls	r3, r3, #5
 80013de:	4827      	ldr	r0, [pc, #156]	; (800147c <main+0xe8>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	0019      	movs	r1, r3
 80013e4:	f001 fc2d 	bl	8002c42 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_MT_GPIO_Port, EN_MT_Pin, 0);
 80013e8:	4b24      	ldr	r3, [pc, #144]	; (800147c <main+0xe8>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	2120      	movs	r1, #32
 80013ee:	0018      	movs	r0, r3
 80013f0:	f001 fc27 	bl	8002c42 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_SO_GPIO_Port, EN_SO_Pin, 0);
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	01db      	lsls	r3, r3, #7
 80013f8:	4820      	ldr	r0, [pc, #128]	; (800147c <main+0xe8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	0019      	movs	r1, r3
 80013fe:	f001 fc20 	bl	8002c42 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_ST_GPIO_Port, EN_ST_Pin, 0);
 8001402:	2380      	movs	r3, #128	; 0x80
 8001404:	019b      	lsls	r3, r3, #6
 8001406:	481d      	ldr	r0, [pc, #116]	; (800147c <main+0xe8>)
 8001408:	2200      	movs	r2, #0
 800140a:	0019      	movs	r1, r3
 800140c:	f001 fc19 	bl	8002c42 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(A_HT_GPIO_Port, A_HT_Pin, 1);
 8001410:	23a0      	movs	r3, #160	; 0xa0
 8001412:	05db      	lsls	r3, r3, #23
 8001414:	2201      	movs	r2, #1
 8001416:	2102      	movs	r1, #2
 8001418:	0018      	movs	r0, r3
 800141a:	f001 fc12 	bl	8002c42 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLEAR_GPIO_Port, CLEAR_Pin, 1);
 800141e:	23a0      	movs	r3, #160	; 0xa0
 8001420:	05db      	lsls	r3, r3, #23
 8001422:	2201      	movs	r2, #1
 8001424:	2101      	movs	r1, #1
 8001426:	0018      	movs	r0, r3
 8001428:	f001 fc0b 	bl	8002c42 <HAL_GPIO_WritePin>

	RTC_TimeTypeDef sTimeStamp;
	RTC_DateTypeDef sTimeStampDate;

	sTimeStamp.Hours = 23;
 800142c:	21e2      	movs	r1, #226	; 0xe2
 800142e:	0049      	lsls	r1, r1, #1
 8001430:	187b      	adds	r3, r7, r1
 8001432:	2217      	movs	r2, #23
 8001434:	701a      	strb	r2, [r3, #0]
	sTimeStamp.Minutes = 59;
 8001436:	187b      	adds	r3, r7, r1
 8001438:	223b      	movs	r2, #59	; 0x3b
 800143a:	705a      	strb	r2, [r3, #1]
	sTimeStamp.Seconds = 58;
 800143c:	187b      	adds	r3, r7, r1
 800143e:	223a      	movs	r2, #58	; 0x3a
 8001440:	709a      	strb	r2, [r3, #2]

	sTimeStamp.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001442:	187b      	adds	r3, r7, r1
 8001444:	2200      	movs	r2, #0
 8001446:	60da      	str	r2, [r3, #12]
	sTimeStamp.StoreOperation = RTC_STOREOPERATION_SET;
 8001448:	187b      	adds	r3, r7, r1
 800144a:	2280      	movs	r2, #128	; 0x80
 800144c:	02d2      	lsls	r2, r2, #11
 800144e:	611a      	str	r2, [r3, #16]

	sTimeStamp.StoreOperation = RTC_STOREOPERATION_SET;
 8001450:	187b      	adds	r3, r7, r1
 8001452:	2280      	movs	r2, #128	; 0x80
 8001454:	02d2      	lsls	r2, r2, #11
 8001456:	611a      	str	r2, [r3, #16]
	HAL_StatusTypeDef result;

	result = HAL_RTC_SetTime(&hrtc, &sTimeStamp, RTC_FORMAT_BIN);
 8001458:	25f3      	movs	r5, #243	; 0xf3
 800145a:	006d      	lsls	r5, r5, #1
 800145c:	197c      	adds	r4, r7, r5
 800145e:	1879      	adds	r1, r7, r1
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <main+0xec>)
 8001462:	2200      	movs	r2, #0
 8001464:	0018      	movs	r0, r3
 8001466:	f003 f999 	bl	800479c <HAL_RTC_SetTime>
 800146a:	0003      	movs	r3, r0
 800146c:	7023      	strb	r3, [r4, #0]
	if(result != HAL_OK){
 800146e:	197b      	adds	r3, r7, r5
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d006      	beq.n	8001484 <main+0xf0>
		while(1);
 8001476:	e7fe      	b.n	8001476 <main+0xe2>
 8001478:	20000320 	.word	0x20000320
 800147c:	50000400 	.word	0x50000400
 8001480:	200001f0 	.word	0x200001f0
	}

	uint8_t sht_addr = 0x88;
 8001484:	25e6      	movs	r5, #230	; 0xe6
 8001486:	35ff      	adds	r5, #255	; 0xff
 8001488:	197b      	adds	r3, r7, r5
 800148a:	2288      	movs	r2, #136	; 0x88
 800148c:	701a      	strb	r2, [r3, #0]

	uint8_t sht_tx[2] = { 0x20, 0x2F };
 800148e:	20de      	movs	r0, #222	; 0xde
 8001490:	0040      	lsls	r0, r0, #1
 8001492:	183b      	adds	r3, r7, r0
 8001494:	4af8      	ldr	r2, [pc, #992]	; (8001878 <main+0x4e4>)
 8001496:	801a      	strh	r2, [r3, #0]
	uint8_t sht_rx[6];


	result = HAL_I2C_Master_Transmit(&hi2c1, sht_addr, sht_tx, 2, 10);
 8001498:	197b      	adds	r3, r7, r5
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b299      	uxth	r1, r3
 800149e:	26f3      	movs	r6, #243	; 0xf3
 80014a0:	0076      	lsls	r6, r6, #1
 80014a2:	19bc      	adds	r4, r7, r6
 80014a4:	183a      	adds	r2, r7, r0
 80014a6:	48f5      	ldr	r0, [pc, #980]	; (800187c <main+0x4e8>)
 80014a8:	230a      	movs	r3, #10
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2302      	movs	r3, #2
 80014ae:	f001 fca1 	bl	8002df4 <HAL_I2C_Master_Transmit>
 80014b2:	0003      	movs	r3, r0
 80014b4:	7023      	strb	r3, [r4, #0]
	HAL_Delay(200);
 80014b6:	20c8      	movs	r0, #200	; 0xc8
 80014b8:	f001 f936 	bl	8002728 <HAL_Delay>
	result = HAL_I2C_Master_Receive(&hi2c1, sht_addr, sht_rx, 6, 10);
 80014bc:	197b      	adds	r3, r7, r5
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b299      	uxth	r1, r3
 80014c2:	19bc      	adds	r4, r7, r6
 80014c4:	25da      	movs	r5, #218	; 0xda
 80014c6:	006d      	lsls	r5, r5, #1
 80014c8:	197a      	adds	r2, r7, r5
 80014ca:	48ec      	ldr	r0, [pc, #944]	; (800187c <main+0x4e8>)
 80014cc:	230a      	movs	r3, #10
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2306      	movs	r3, #6
 80014d2:	f001 fd97 	bl	8003004 <HAL_I2C_Master_Receive>
 80014d6:	0003      	movs	r3, r0
 80014d8:	7023      	strb	r3, [r4, #0]

	uint8_t tx_data[100];

	uint16_t st = 0;
 80014da:	21f1      	movs	r1, #241	; 0xf1
 80014dc:	0049      	lsls	r1, r1, #1
 80014de:	187b      	adds	r3, r7, r1
 80014e0:	2200      	movs	r2, #0
 80014e2:	801a      	strh	r2, [r3, #0]
	uint32_t temp_seg = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	22ee      	movs	r2, #238	; 0xee
 80014e8:	0052      	lsls	r2, r2, #1
 80014ea:	18ba      	adds	r2, r7, r2
 80014ec:	6013      	str	r3, [r2, #0]
	st = sht_rx[0] << 8;
 80014ee:	197b      	adds	r3, r7, r5
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	0008      	movs	r0, r1
 80014f6:	187b      	adds	r3, r7, r1
 80014f8:	0212      	lsls	r2, r2, #8
 80014fa:	801a      	strh	r2, [r3, #0]
	st = st | sht_rx[1];
 80014fc:	197b      	adds	r3, r7, r5
 80014fe:	785b      	ldrb	r3, [r3, #1]
 8001500:	b299      	uxth	r1, r3
 8001502:	183b      	adds	r3, r7, r0
 8001504:	183a      	adds	r2, r7, r0
 8001506:	8812      	ldrh	r2, [r2, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	801a      	strh	r2, [r3, #0]

	float temperature = -45 + 175 * ((float) st / 65535);
 800150c:	183b      	adds	r3, r7, r0
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	0018      	movs	r0, r3
 8001512:	f7ff fbdf 	bl	8000cd4 <__aeabi_ui2f>
 8001516:	1c03      	adds	r3, r0, #0
 8001518:	49d9      	ldr	r1, [pc, #868]	; (8001880 <main+0x4ec>)
 800151a:	1c18      	adds	r0, r3, #0
 800151c:	f7fe ffb2 	bl	8000484 <__aeabi_fdiv>
 8001520:	1c03      	adds	r3, r0, #0
 8001522:	49d8      	ldr	r1, [pc, #864]	; (8001884 <main+0x4f0>)
 8001524:	1c18      	adds	r0, r3, #0
 8001526:	f7ff f8c7 	bl	80006b8 <__aeabi_fmul>
 800152a:	1c03      	adds	r3, r0, #0
 800152c:	49d6      	ldr	r1, [pc, #856]	; (8001888 <main+0x4f4>)
 800152e:	1c18      	adds	r0, r3, #0
 8001530:	f7ff fa10 	bl	8000954 <__aeabi_fsub>
 8001534:	1c03      	adds	r3, r0, #0
 8001536:	22ec      	movs	r2, #236	; 0xec
 8001538:	0052      	lsls	r2, r2, #1
 800153a:	18b9      	adds	r1, r7, r2
 800153c:	600b      	str	r3, [r1, #0]
	display disp;
	display_segment disp_hour;
	display_segment disp_minute;
	display_segment disp_second;

	hour_ten.a_port = A_HT_GPIO_Port;
 800153e:	209a      	movs	r0, #154	; 0x9a
 8001540:	0040      	lsls	r0, r0, #1
 8001542:	183b      	adds	r3, r7, r0
 8001544:	22a0      	movs	r2, #160	; 0xa0
 8001546:	05d2      	lsls	r2, r2, #23
 8001548:	60da      	str	r2, [r3, #12]
	hour_ten.a_pin = A_HT_Pin;
 800154a:	183b      	adds	r3, r7, r0
 800154c:	2202      	movs	r2, #2
 800154e:	821a      	strh	r2, [r3, #16]
	hour_ten.clock_port = CLK_A_HT_GPIO_Port;
 8001550:	183b      	adds	r3, r7, r0
 8001552:	22a0      	movs	r2, #160	; 0xa0
 8001554:	05d2      	lsls	r2, r2, #23
 8001556:	605a      	str	r2, [r3, #4]
	hour_ten.clock_pin = CLK_A_HT_Pin;
 8001558:	183b      	adds	r3, r7, r0
 800155a:	2204      	movs	r2, #4
 800155c:	811a      	strh	r2, [r3, #8]
	hour_ten.enable_port = EN_HT_GPIO_Port;
 800155e:	183b      	adds	r3, r7, r0
 8001560:	22a0      	movs	r2, #160	; 0xa0
 8001562:	05d2      	lsls	r2, r2, #23
 8001564:	615a      	str	r2, [r3, #20]
	hour_ten.enable_pin = EN_HT_Pin;
 8001566:	183b      	adds	r3, r7, r0
 8001568:	2208      	movs	r2, #8
 800156a:	831a      	strh	r2, [r3, #24]
	hour_ten.enable_segment = 1;
 800156c:	183b      	adds	r3, r7, r0
 800156e:	2201      	movs	r2, #1
 8001570:	709a      	strb	r2, [r3, #2]

	hour_one.a_port = A_HO_GPIO_Port;
 8001572:	248c      	movs	r4, #140	; 0x8c
 8001574:	0064      	lsls	r4, r4, #1
 8001576:	193b      	adds	r3, r7, r4
 8001578:	22a0      	movs	r2, #160	; 0xa0
 800157a:	05d2      	lsls	r2, r2, #23
 800157c:	60da      	str	r2, [r3, #12]
	hour_one.a_pin = A_HO_Pin;
 800157e:	193b      	adds	r3, r7, r4
 8001580:	2210      	movs	r2, #16
 8001582:	821a      	strh	r2, [r3, #16]
	hour_one.clock_port = CLK_A_HO_GPIO_Port;
 8001584:	193b      	adds	r3, r7, r4
 8001586:	22a0      	movs	r2, #160	; 0xa0
 8001588:	05d2      	lsls	r2, r2, #23
 800158a:	605a      	str	r2, [r3, #4]
	hour_one.clock_pin = CLK_A_HO_Pin;
 800158c:	193b      	adds	r3, r7, r4
 800158e:	2220      	movs	r2, #32
 8001590:	811a      	strh	r2, [r3, #8]
	hour_one.enable_port = EN_HO_GPIO_Port;
 8001592:	193b      	adds	r3, r7, r4
 8001594:	4abd      	ldr	r2, [pc, #756]	; (800188c <main+0x4f8>)
 8001596:	615a      	str	r2, [r3, #20]
	hour_one.enable_pin = EN_HO_Pin;
 8001598:	193b      	adds	r3, r7, r4
 800159a:	2210      	movs	r2, #16
 800159c:	831a      	strh	r2, [r3, #24]
	hour_one.enable_segment = 1;
 800159e:	193b      	adds	r3, r7, r4
 80015a0:	2201      	movs	r2, #1
 80015a2:	709a      	strb	r2, [r3, #2]

	minute_ten.a_port = A_MT_GPIO_Port;
 80015a4:	25fc      	movs	r5, #252	; 0xfc
 80015a6:	197b      	adds	r3, r7, r5
 80015a8:	22a0      	movs	r2, #160	; 0xa0
 80015aa:	05d2      	lsls	r2, r2, #23
 80015ac:	60da      	str	r2, [r3, #12]
	minute_ten.a_pin = A_MT_Pin;
 80015ae:	197b      	adds	r3, r7, r5
 80015b0:	2240      	movs	r2, #64	; 0x40
 80015b2:	821a      	strh	r2, [r3, #16]
	minute_ten.clock_port = CLK_A_MT_GPIO_Port;
 80015b4:	197b      	adds	r3, r7, r5
 80015b6:	22a0      	movs	r2, #160	; 0xa0
 80015b8:	05d2      	lsls	r2, r2, #23
 80015ba:	605a      	str	r2, [r3, #4]
	minute_ten.clock_pin = CLK_A_MT_Pin;
 80015bc:	197b      	adds	r3, r7, r5
 80015be:	2280      	movs	r2, #128	; 0x80
 80015c0:	811a      	strh	r2, [r3, #8]
	minute_ten.enable_port = EN_MT_GPIO_Port;
 80015c2:	197b      	adds	r3, r7, r5
 80015c4:	4ab1      	ldr	r2, [pc, #708]	; (800188c <main+0x4f8>)
 80015c6:	615a      	str	r2, [r3, #20]
	minute_ten.enable_pin = EN_MT_Pin;
 80015c8:	197b      	adds	r3, r7, r5
 80015ca:	2220      	movs	r2, #32
 80015cc:	831a      	strh	r2, [r3, #24]
	minute_ten.enable_segment = 1;
 80015ce:	197b      	adds	r3, r7, r5
 80015d0:	2201      	movs	r2, #1
 80015d2:	709a      	strb	r2, [r3, #2]

	minute_one.a_port = A_MO_GPIO_Port;
 80015d4:	4bae      	ldr	r3, [pc, #696]	; (8001890 <main+0x4fc>)
 80015d6:	21f4      	movs	r1, #244	; 0xf4
 80015d8:	0049      	lsls	r1, r1, #1
 80015da:	185b      	adds	r3, r3, r1
 80015dc:	19db      	adds	r3, r3, r7
 80015de:	22a0      	movs	r2, #160	; 0xa0
 80015e0:	05d2      	lsls	r2, r2, #23
 80015e2:	60da      	str	r2, [r3, #12]
	minute_one.a_pin = A_MO_Pin;
 80015e4:	4baa      	ldr	r3, [pc, #680]	; (8001890 <main+0x4fc>)
 80015e6:	185b      	adds	r3, r3, r1
 80015e8:	19db      	adds	r3, r3, r7
 80015ea:	2280      	movs	r2, #128	; 0x80
 80015ec:	0052      	lsls	r2, r2, #1
 80015ee:	821a      	strh	r2, [r3, #16]
	minute_one.clock_port = CLK_A_MO_GPIO_Port;
 80015f0:	4ba7      	ldr	r3, [pc, #668]	; (8001890 <main+0x4fc>)
 80015f2:	185b      	adds	r3, r3, r1
 80015f4:	19db      	adds	r3, r3, r7
 80015f6:	22a0      	movs	r2, #160	; 0xa0
 80015f8:	05d2      	lsls	r2, r2, #23
 80015fa:	605a      	str	r2, [r3, #4]
	minute_one.clock_pin = CLK_A_MO_Pin;
 80015fc:	4ba4      	ldr	r3, [pc, #656]	; (8001890 <main+0x4fc>)
 80015fe:	185b      	adds	r3, r3, r1
 8001600:	19db      	adds	r3, r3, r7
 8001602:	2280      	movs	r2, #128	; 0x80
 8001604:	0092      	lsls	r2, r2, #2
 8001606:	811a      	strh	r2, [r3, #8]
	minute_one.enable_port = EN_MO_GPIO_Port;
 8001608:	4ba1      	ldr	r3, [pc, #644]	; (8001890 <main+0x4fc>)
 800160a:	185b      	adds	r3, r3, r1
 800160c:	19db      	adds	r3, r3, r7
 800160e:	4a9f      	ldr	r2, [pc, #636]	; (800188c <main+0x4f8>)
 8001610:	615a      	str	r2, [r3, #20]
	minute_one.enable_pin = EN_MO_Pin;
 8001612:	4b9f      	ldr	r3, [pc, #636]	; (8001890 <main+0x4fc>)
 8001614:	185b      	adds	r3, r3, r1
 8001616:	19db      	adds	r3, r3, r7
 8001618:	2280      	movs	r2, #128	; 0x80
 800161a:	0152      	lsls	r2, r2, #5
 800161c:	831a      	strh	r2, [r3, #24]
	minute_one.enable_segment = 1;
 800161e:	4b9c      	ldr	r3, [pc, #624]	; (8001890 <main+0x4fc>)
 8001620:	185b      	adds	r3, r3, r1
 8001622:	19db      	adds	r3, r3, r7
 8001624:	2201      	movs	r2, #1
 8001626:	709a      	strb	r2, [r3, #2]

	second_ten.a_port = A_ST_GPIO_Port;
 8001628:	4b9a      	ldr	r3, [pc, #616]	; (8001894 <main+0x500>)
 800162a:	185b      	adds	r3, r3, r1
 800162c:	19db      	adds	r3, r3, r7
 800162e:	22a0      	movs	r2, #160	; 0xa0
 8001630:	05d2      	lsls	r2, r2, #23
 8001632:	60da      	str	r2, [r3, #12]
	second_ten.a_pin = A_ST_Pin;
 8001634:	4b97      	ldr	r3, [pc, #604]	; (8001894 <main+0x500>)
 8001636:	185b      	adds	r3, r3, r1
 8001638:	19db      	adds	r3, r3, r7
 800163a:	2280      	movs	r2, #128	; 0x80
 800163c:	00d2      	lsls	r2, r2, #3
 800163e:	821a      	strh	r2, [r3, #16]
	second_ten.clock_port = CLK_A_ST_GPIO_Port;
 8001640:	4b94      	ldr	r3, [pc, #592]	; (8001894 <main+0x500>)
 8001642:	185b      	adds	r3, r3, r1
 8001644:	19db      	adds	r3, r3, r7
 8001646:	22a0      	movs	r2, #160	; 0xa0
 8001648:	05d2      	lsls	r2, r2, #23
 800164a:	605a      	str	r2, [r3, #4]
	second_ten.clock_pin = CLK_A_ST_Pin;
 800164c:	4b91      	ldr	r3, [pc, #580]	; (8001894 <main+0x500>)
 800164e:	185b      	adds	r3, r3, r1
 8001650:	19db      	adds	r3, r3, r7
 8001652:	2280      	movs	r2, #128	; 0x80
 8001654:	0112      	lsls	r2, r2, #4
 8001656:	811a      	strh	r2, [r3, #8]
	second_ten.enable_port = EN_ST_GPIO_Port;
 8001658:	4b8e      	ldr	r3, [pc, #568]	; (8001894 <main+0x500>)
 800165a:	185b      	adds	r3, r3, r1
 800165c:	19db      	adds	r3, r3, r7
 800165e:	4a8b      	ldr	r2, [pc, #556]	; (800188c <main+0x4f8>)
 8001660:	615a      	str	r2, [r3, #20]
	second_ten.enable_pin = EN_ST_Pin;
 8001662:	4b8c      	ldr	r3, [pc, #560]	; (8001894 <main+0x500>)
 8001664:	185b      	adds	r3, r3, r1
 8001666:	19db      	adds	r3, r3, r7
 8001668:	2280      	movs	r2, #128	; 0x80
 800166a:	0192      	lsls	r2, r2, #6
 800166c:	831a      	strh	r2, [r3, #24]
	second_ten.enable_segment = 1;
 800166e:	4b89      	ldr	r3, [pc, #548]	; (8001894 <main+0x500>)
 8001670:	185b      	adds	r3, r3, r1
 8001672:	19db      	adds	r3, r3, r7
 8001674:	2201      	movs	r2, #1
 8001676:	709a      	strb	r2, [r3, #2]

	second_one.a_port = A_SO_GPIO_Port;
 8001678:	4b87      	ldr	r3, [pc, #540]	; (8001898 <main+0x504>)
 800167a:	185b      	adds	r3, r3, r1
 800167c:	19db      	adds	r3, r3, r7
 800167e:	22a0      	movs	r2, #160	; 0xa0
 8001680:	05d2      	lsls	r2, r2, #23
 8001682:	60da      	str	r2, [r3, #12]
	second_one.a_pin = A_SO_Pin;
 8001684:	4b84      	ldr	r3, [pc, #528]	; (8001898 <main+0x504>)
 8001686:	185b      	adds	r3, r3, r1
 8001688:	19db      	adds	r3, r3, r7
 800168a:	2280      	movs	r2, #128	; 0x80
 800168c:	0152      	lsls	r2, r2, #5
 800168e:	821a      	strh	r2, [r3, #16]
	second_one.clock_port = CLK_A_SO_GPIO_Port;
 8001690:	4b81      	ldr	r3, [pc, #516]	; (8001898 <main+0x504>)
 8001692:	185b      	adds	r3, r3, r1
 8001694:	19db      	adds	r3, r3, r7
 8001696:	22a0      	movs	r2, #160	; 0xa0
 8001698:	05d2      	lsls	r2, r2, #23
 800169a:	605a      	str	r2, [r3, #4]
	second_one.clock_pin = CLK_A_SO_Pin;
 800169c:	4b7e      	ldr	r3, [pc, #504]	; (8001898 <main+0x504>)
 800169e:	185b      	adds	r3, r3, r1
 80016a0:	19db      	adds	r3, r3, r7
 80016a2:	4a7e      	ldr	r2, [pc, #504]	; (800189c <main+0x508>)
 80016a4:	811a      	strh	r2, [r3, #8]
	second_one.enable_port = EN_SO_GPIO_Port;
 80016a6:	4b7c      	ldr	r3, [pc, #496]	; (8001898 <main+0x504>)
 80016a8:	185b      	adds	r3, r3, r1
 80016aa:	19db      	adds	r3, r3, r7
 80016ac:	4a77      	ldr	r2, [pc, #476]	; (800188c <main+0x4f8>)
 80016ae:	615a      	str	r2, [r3, #20]
	second_one.enable_pin = EN_SO_Pin;
 80016b0:	4b79      	ldr	r3, [pc, #484]	; (8001898 <main+0x504>)
 80016b2:	185b      	adds	r3, r3, r1
 80016b4:	19db      	adds	r3, r3, r7
 80016b6:	2280      	movs	r2, #128	; 0x80
 80016b8:	01d2      	lsls	r2, r2, #7
 80016ba:	831a      	strh	r2, [r3, #24]
	second_one.enable_segment = 1;
 80016bc:	4b76      	ldr	r3, [pc, #472]	; (8001898 <main+0x504>)
 80016be:	185b      	adds	r3, r3, r1
 80016c0:	19db      	adds	r3, r3, r7
 80016c2:	2201      	movs	r2, #1
 80016c4:	709a      	strb	r2, [r3, #2]

	hour_ten.data = 0;
 80016c6:	183b      	adds	r3, r7, r0
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
	hour_ten.data_old = 255;
 80016cc:	183b      	adds	r3, r7, r0
 80016ce:	22ff      	movs	r2, #255	; 0xff
 80016d0:	705a      	strb	r2, [r3, #1]
	hour_one.data = 0;
 80016d2:	193b      	adds	r3, r7, r4
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
	hour_one.data_old = 255;
 80016d8:	193b      	adds	r3, r7, r4
 80016da:	22ff      	movs	r2, #255	; 0xff
 80016dc:	705a      	strb	r2, [r3, #1]
	minute_ten.data = 0;
 80016de:	197b      	adds	r3, r7, r5
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
	minute_ten.data_old = 255;
 80016e4:	197b      	adds	r3, r7, r5
 80016e6:	22ff      	movs	r2, #255	; 0xff
 80016e8:	705a      	strb	r2, [r3, #1]
	minute_one.data = 0;
 80016ea:	4b69      	ldr	r3, [pc, #420]	; (8001890 <main+0x4fc>)
 80016ec:	185b      	adds	r3, r3, r1
 80016ee:	19db      	adds	r3, r3, r7
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
	minute_one.data_old = 255;
 80016f4:	4b66      	ldr	r3, [pc, #408]	; (8001890 <main+0x4fc>)
 80016f6:	185b      	adds	r3, r3, r1
 80016f8:	19db      	adds	r3, r3, r7
 80016fa:	22ff      	movs	r2, #255	; 0xff
 80016fc:	705a      	strb	r2, [r3, #1]
	second_ten.data = 0;
 80016fe:	4b65      	ldr	r3, [pc, #404]	; (8001894 <main+0x500>)
 8001700:	185b      	adds	r3, r3, r1
 8001702:	19db      	adds	r3, r3, r7
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
	second_ten.data_old = 255;
 8001708:	4b62      	ldr	r3, [pc, #392]	; (8001894 <main+0x500>)
 800170a:	185b      	adds	r3, r3, r1
 800170c:	19db      	adds	r3, r3, r7
 800170e:	22ff      	movs	r2, #255	; 0xff
 8001710:	705a      	strb	r2, [r3, #1]
	second_one.data = 0;
 8001712:	4b61      	ldr	r3, [pc, #388]	; (8001898 <main+0x504>)
 8001714:	185b      	adds	r3, r3, r1
 8001716:	19db      	adds	r3, r3, r7
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
	second_one.data_old = 255;
 800171c:	4b5e      	ldr	r3, [pc, #376]	; (8001898 <main+0x504>)
 800171e:	185b      	adds	r3, r3, r1
 8001720:	19db      	adds	r3, r3, r7
 8001722:	22ff      	movs	r2, #255	; 0xff
 8001724:	705a      	strb	r2, [r3, #1]

	disp.hour_ten = &hour_ten;
 8001726:	4b5e      	ldr	r3, [pc, #376]	; (80018a0 <main+0x50c>)
 8001728:	185b      	adds	r3, r3, r1
 800172a:	19db      	adds	r3, r3, r7
 800172c:	183a      	adds	r2, r7, r0
 800172e:	609a      	str	r2, [r3, #8]
	disp.hour_one = &hour_one;
 8001730:	4b5b      	ldr	r3, [pc, #364]	; (80018a0 <main+0x50c>)
 8001732:	185b      	adds	r3, r3, r1
 8001734:	19db      	adds	r3, r3, r7
 8001736:	193a      	adds	r2, r7, r4
 8001738:	60da      	str	r2, [r3, #12]
	disp.minute_ten = &minute_ten;
 800173a:	4b59      	ldr	r3, [pc, #356]	; (80018a0 <main+0x50c>)
 800173c:	185b      	adds	r3, r3, r1
 800173e:	19db      	adds	r3, r3, r7
 8001740:	002e      	movs	r6, r5
 8001742:	197a      	adds	r2, r7, r5
 8001744:	611a      	str	r2, [r3, #16]
	disp.minute_one = &minute_one;
 8001746:	4b56      	ldr	r3, [pc, #344]	; (80018a0 <main+0x50c>)
 8001748:	000d      	movs	r5, r1
 800174a:	1959      	adds	r1, r3, r5
 800174c:	19cb      	adds	r3, r1, r7
 800174e:	21e0      	movs	r1, #224	; 0xe0
 8001750:	187a      	adds	r2, r7, r1
 8001752:	615a      	str	r2, [r3, #20]
	disp.second_ten = &second_ten;
 8001754:	4b52      	ldr	r3, [pc, #328]	; (80018a0 <main+0x50c>)
 8001756:	195b      	adds	r3, r3, r5
 8001758:	19db      	adds	r3, r3, r7
 800175a:	22c4      	movs	r2, #196	; 0xc4
 800175c:	18ba      	adds	r2, r7, r2
 800175e:	619a      	str	r2, [r3, #24]
	disp.second_one = &second_one;
 8001760:	4b4f      	ldr	r3, [pc, #316]	; (80018a0 <main+0x50c>)
 8001762:	195b      	adds	r3, r3, r5
 8001764:	19db      	adds	r3, r3, r7
 8001766:	22a8      	movs	r2, #168	; 0xa8
 8001768:	18ba      	adds	r2, r7, r2
 800176a:	61da      	str	r2, [r3, #28]

	disp_hour.ten = &hour_ten;
 800176c:	4b4d      	ldr	r3, [pc, #308]	; (80018a4 <main+0x510>)
 800176e:	195b      	adds	r3, r3, r5
 8001770:	19db      	adds	r3, r3, r7
 8001772:	183a      	adds	r2, r7, r0
 8001774:	605a      	str	r2, [r3, #4]
	disp_hour.one = &hour_one;
 8001776:	4b4b      	ldr	r3, [pc, #300]	; (80018a4 <main+0x510>)
 8001778:	195b      	adds	r3, r3, r5
 800177a:	19db      	adds	r3, r3, r7
 800177c:	193a      	adds	r2, r7, r4
 800177e:	609a      	str	r2, [r3, #8]

	disp_minute.ten = &minute_ten;
 8001780:	4b49      	ldr	r3, [pc, #292]	; (80018a8 <main+0x514>)
 8001782:	195c      	adds	r4, r3, r5
 8001784:	19e3      	adds	r3, r4, r7
 8001786:	19ba      	adds	r2, r7, r6
 8001788:	605a      	str	r2, [r3, #4]
	disp_minute.one = &minute_one;
 800178a:	4b47      	ldr	r3, [pc, #284]	; (80018a8 <main+0x514>)
 800178c:	195c      	adds	r4, r3, r5
 800178e:	19e3      	adds	r3, r4, r7
 8001790:	187a      	adds	r2, r7, r1
 8001792:	609a      	str	r2, [r3, #8]

	disp_second.ten = &second_ten;
 8001794:	4b45      	ldr	r3, [pc, #276]	; (80018ac <main+0x518>)
 8001796:	195c      	adds	r4, r3, r5
 8001798:	19e3      	adds	r3, r4, r7
 800179a:	21c4      	movs	r1, #196	; 0xc4
 800179c:	187a      	adds	r2, r7, r1
 800179e:	605a      	str	r2, [r3, #4]
	disp_second.one = &second_one;
 80017a0:	4b42      	ldr	r3, [pc, #264]	; (80018ac <main+0x518>)
 80017a2:	195c      	adds	r4, r3, r5
 80017a4:	19e3      	adds	r3, r4, r7
 80017a6:	21a8      	movs	r1, #168	; 0xa8
 80017a8:	187a      	adds	r2, r7, r1
 80017aa:	609a      	str	r2, [r3, #8]

	disp.data = 0;
 80017ac:	4b3c      	ldr	r3, [pc, #240]	; (80018a0 <main+0x50c>)
 80017ae:	1959      	adds	r1, r3, r5
 80017b0:	19cb      	adds	r3, r1, r7
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
	disp.data_old = 255;
 80017b6:	4b3a      	ldr	r3, [pc, #232]	; (80018a0 <main+0x50c>)
 80017b8:	1959      	adds	r1, r3, r5
 80017ba:	19cb      	adds	r3, r1, r7
 80017bc:	22ff      	movs	r2, #255	; 0xff
 80017be:	605a      	str	r2, [r3, #4]
	display_write_number(&disp);
 80017c0:	2188      	movs	r1, #136	; 0x88
 80017c2:	187b      	adds	r3, r7, r1
 80017c4:	0018      	movs	r0, r3
 80017c6:	f7ff fc2d 	bl	8001024 <display_write_number>

	//HAL_TIM_Base_Start_IT(&htim21);

	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);

	result = HAL_I2C_Master_Receive(&hi2c1, sht_addr, sht_rx, 3, 10);
 80017ca:	23e6      	movs	r3, #230	; 0xe6
 80017cc:	33ff      	adds	r3, #255	; 0xff
 80017ce:	18fb      	adds	r3, r7, r3
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	b299      	uxth	r1, r3
 80017d4:	23f3      	movs	r3, #243	; 0xf3
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	18fc      	adds	r4, r7, r3
 80017da:	26da      	movs	r6, #218	; 0xda
 80017dc:	0076      	lsls	r6, r6, #1
 80017de:	19ba      	adds	r2, r7, r6
 80017e0:	4826      	ldr	r0, [pc, #152]	; (800187c <main+0x4e8>)
 80017e2:	230a      	movs	r3, #10
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	2303      	movs	r3, #3
 80017e8:	f001 fc0c 	bl	8003004 <HAL_I2C_Master_Receive>
 80017ec:	0003      	movs	r3, r0
 80017ee:	7023      	strb	r3, [r4, #0]
	if (result == HAL_OK) {
 80017f0:	23f3      	movs	r3, #243	; 0xf3
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	18fb      	adds	r3, r7, r3
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d15b      	bne.n	80018b4 <main+0x520>
		st = sht_rx[0] << 8;
 80017fc:	0031      	movs	r1, r6
 80017fe:	187b      	adds	r3, r7, r1
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	b29a      	uxth	r2, r3
 8001804:	20f1      	movs	r0, #241	; 0xf1
 8001806:	0040      	lsls	r0, r0, #1
 8001808:	183b      	adds	r3, r7, r0
 800180a:	0212      	lsls	r2, r2, #8
 800180c:	801a      	strh	r2, [r3, #0]
		st = st | sht_rx[1];
 800180e:	187b      	adds	r3, r7, r1
 8001810:	785b      	ldrb	r3, [r3, #1]
 8001812:	b299      	uxth	r1, r3
 8001814:	183b      	adds	r3, r7, r0
 8001816:	183a      	adds	r2, r7, r0
 8001818:	8812      	ldrh	r2, [r2, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	801a      	strh	r2, [r3, #0]
		temperature = -45 + 175 * ((float) st / 65535);
 800181e:	183b      	adds	r3, r7, r0
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	0018      	movs	r0, r3
 8001824:	f7ff fa56 	bl	8000cd4 <__aeabi_ui2f>
 8001828:	1c03      	adds	r3, r0, #0
 800182a:	4915      	ldr	r1, [pc, #84]	; (8001880 <main+0x4ec>)
 800182c:	1c18      	adds	r0, r3, #0
 800182e:	f7fe fe29 	bl	8000484 <__aeabi_fdiv>
 8001832:	1c03      	adds	r3, r0, #0
 8001834:	4913      	ldr	r1, [pc, #76]	; (8001884 <main+0x4f0>)
 8001836:	1c18      	adds	r0, r3, #0
 8001838:	f7fe ff3e 	bl	80006b8 <__aeabi_fmul>
 800183c:	1c03      	adds	r3, r0, #0
 800183e:	4912      	ldr	r1, [pc, #72]	; (8001888 <main+0x4f4>)
 8001840:	1c18      	adds	r0, r3, #0
 8001842:	f7ff f887 	bl	8000954 <__aeabi_fsub>
 8001846:	1c03      	adds	r3, r0, #0
 8001848:	22ec      	movs	r2, #236	; 0xec
 800184a:	0052      	lsls	r2, r2, #1
 800184c:	18b8      	adds	r0, r7, r2
 800184e:	6003      	str	r3, [r0, #0]
		disp.data = temperature * 10000;
 8001850:	4917      	ldr	r1, [pc, #92]	; (80018b0 <main+0x51c>)
 8001852:	18bb      	adds	r3, r7, r2
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	f7fe ff2f 	bl	80006b8 <__aeabi_fmul>
 800185a:	1c03      	adds	r3, r0, #0
 800185c:	1c18      	adds	r0, r3, #0
 800185e:	f7fe fd2d 	bl	80002bc <__aeabi_f2uiz>
 8001862:	0002      	movs	r2, r0
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <main+0x50c>)
 8001866:	195b      	adds	r3, r3, r5
 8001868:	19db      	adds	r3, r3, r7
 800186a:	601a      	str	r2, [r3, #0]
		display_write_number(&disp);
 800186c:	2188      	movs	r1, #136	; 0x88
 800186e:	187b      	adds	r3, r7, r1
 8001870:	0018      	movs	r0, r3
 8001872:	f7ff fbd7 	bl	8001024 <display_write_number>
 8001876:	e01d      	b.n	80018b4 <main+0x520>
 8001878:	00002f20 	.word	0x00002f20
 800187c:	2000019c 	.word	0x2000019c
 8001880:	477fff00 	.word	0x477fff00
 8001884:	432f0000 	.word	0x432f0000
 8001888:	42340000 	.word	0x42340000
 800188c:	50000400 	.word	0x50000400
 8001890:	fffffef8 	.word	0xfffffef8
 8001894:	fffffedc 	.word	0xfffffedc
 8001898:	fffffec0 	.word	0xfffffec0
 800189c:	ffff8000 	.word	0xffff8000
 80018a0:	fffffea0 	.word	0xfffffea0
 80018a4:	fffffe94 	.word	0xfffffe94
 80018a8:	fffffe88 	.word	0xfffffe88
 80018ac:	fffffe7c 	.word	0xfffffe7c
 80018b0:	461c4000 	.word	0x461c4000
	}
	HAL_Delay(500);
 80018b4:	23fa      	movs	r3, #250	; 0xfa
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	0018      	movs	r0, r3
 80018ba:	f000 ff35 	bl	8002728 <HAL_Delay>


	disp_hour.data = 00;
 80018be:	4b8e      	ldr	r3, [pc, #568]	; (8001af8 <main+0x764>)
 80018c0:	24f4      	movs	r4, #244	; 0xf4
 80018c2:	0064      	lsls	r4, r4, #1
 80018c4:	191b      	adds	r3, r3, r4
 80018c6:	19db      	adds	r3, r3, r7
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
	disp_hour.data_old = 255;
 80018cc:	4b8a      	ldr	r3, [pc, #552]	; (8001af8 <main+0x764>)
 80018ce:	191b      	adds	r3, r3, r4
 80018d0:	19db      	adds	r3, r3, r7
 80018d2:	22ff      	movs	r2, #255	; 0xff
 80018d4:	705a      	strb	r2, [r3, #1]
	disp_minute.data = 00;
 80018d6:	4b89      	ldr	r3, [pc, #548]	; (8001afc <main+0x768>)
 80018d8:	191b      	adds	r3, r3, r4
 80018da:	19db      	adds	r3, r3, r7
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
	disp_minute.data_old = 255;
 80018e0:	4b86      	ldr	r3, [pc, #536]	; (8001afc <main+0x768>)
 80018e2:	191b      	adds	r3, r3, r4
 80018e4:	19db      	adds	r3, r3, r7
 80018e6:	22ff      	movs	r2, #255	; 0xff
 80018e8:	705a      	strb	r2, [r3, #1]
	disp_second.data = 00;
 80018ea:	4b85      	ldr	r3, [pc, #532]	; (8001b00 <main+0x76c>)
 80018ec:	191b      	adds	r3, r3, r4
 80018ee:	19db      	adds	r3, r3, r7
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
	disp_second.data_old = 255;
 80018f4:	4b82      	ldr	r3, [pc, #520]	; (8001b00 <main+0x76c>)
 80018f6:	191b      	adds	r3, r3, r4
 80018f8:	19db      	adds	r3, r3, r7
 80018fa:	22ff      	movs	r2, #255	; 0xff
 80018fc:	705a      	strb	r2, [r3, #1]

	display_write_segment(&disp_hour);
 80018fe:	237c      	movs	r3, #124	; 0x7c
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	0018      	movs	r0, r3
 8001904:	f7ff fc70 	bl	80011e8 <display_write_segment>
	display_write_segment(&disp_minute);
 8001908:	2370      	movs	r3, #112	; 0x70
 800190a:	18fb      	adds	r3, r7, r3
 800190c:	0018      	movs	r0, r3
 800190e:	f7ff fc6b 	bl	80011e8 <display_write_segment>
	display_write_segment(&disp_second);
 8001912:	2364      	movs	r3, #100	; 0x64
 8001914:	18fb      	adds	r3, r7, r3
 8001916:	0018      	movs	r0, r3
 8001918:	f7ff fc66 	bl	80011e8 <display_write_segment>

	Button button_up = { BUTTON_IDLE, BUTTON_LONG_PRESS,0, 0, 0, BTN_UP_GPIO_Port, BTN_UP_Pin };
 800191c:	4b79      	ldr	r3, [pc, #484]	; (8001b04 <main+0x770>)
 800191e:	0025      	movs	r5, r4
 8001920:	195b      	adds	r3, r3, r5
 8001922:	19db      	adds	r3, r3, r7
 8001924:	4a78      	ldr	r2, [pc, #480]	; (8001b08 <main+0x774>)
 8001926:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001928:	c313      	stmia	r3!, {r0, r1, r4}
 800192a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800192c:	c313      	stmia	r3!, {r0, r1, r4}
	Button button_down = { BUTTON_IDLE,BUTTON_LONG_PRESS, 0, 0, 0, BTN_DOWN_GPIO_Port, BTN_DOWN_Pin };
 800192e:	4b77      	ldr	r3, [pc, #476]	; (8001b0c <main+0x778>)
 8001930:	195b      	adds	r3, r3, r5
 8001932:	19db      	adds	r3, r3, r7
 8001934:	4a76      	ldr	r2, [pc, #472]	; (8001b10 <main+0x77c>)
 8001936:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001938:	c313      	stmia	r3!, {r0, r1, r4}
 800193a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800193c:	c313      	stmia	r3!, {r0, r1, r4}
	Button button_left = { BUTTON_IDLE,BUTTON_LONG_PRESS, 0, 0, 0, BTN_LEFT_GPIO_Port, BTN_LEFT_Pin };
 800193e:	4b75      	ldr	r3, [pc, #468]	; (8001b14 <main+0x780>)
 8001940:	195b      	adds	r3, r3, r5
 8001942:	19db      	adds	r3, r3, r7
 8001944:	4a74      	ldr	r2, [pc, #464]	; (8001b18 <main+0x784>)
 8001946:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001948:	c313      	stmia	r3!, {r0, r1, r4}
 800194a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800194c:	c313      	stmia	r3!, {r0, r1, r4}
	Button button_right = { BUTTON_IDLE,BUTTON_LONG_PRESS, 0, 0, 0, BTN_RIGHT_GPIO_Port,BTN_RIGHT_Pin };
 800194e:	4b73      	ldr	r3, [pc, #460]	; (8001b1c <main+0x788>)
 8001950:	195b      	adds	r3, r3, r5
 8001952:	19db      	adds	r3, r3, r7
 8001954:	4a72      	ldr	r2, [pc, #456]	; (8001b20 <main+0x78c>)
 8001956:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001958:	c313      	stmia	r3!, {r0, r1, r4}
 800195a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800195c:	c313      	stmia	r3!, {r0, r1, r4}

	button_up.state_old = 0;
 800195e:	4b69      	ldr	r3, [pc, #420]	; (8001b04 <main+0x770>)
 8001960:	195b      	adds	r3, r3, r5
 8001962:	19db      	adds	r3, r3, r7
 8001964:	2200      	movs	r2, #0
 8001966:	705a      	strb	r2, [r3, #1]
	uint8_t mode = 0;
 8001968:	23e8      	movs	r3, #232	; 0xe8
 800196a:	33ff      	adds	r3, #255	; 0xff
 800196c:	18fb      	adds	r3, r7, r3
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		process_button(&button_up);
 8001972:	234c      	movs	r3, #76	; 0x4c
 8001974:	18fb      	adds	r3, r7, r3
 8001976:	0018      	movs	r0, r3
 8001978:	f7ff fc72 	bl	8001260 <process_button>
		process_button(&button_down);
 800197c:	2334      	movs	r3, #52	; 0x34
 800197e:	18fb      	adds	r3, r7, r3
 8001980:	0018      	movs	r0, r3
 8001982:	f7ff fc6d 	bl	8001260 <process_button>
		process_button(&button_left);
 8001986:	231c      	movs	r3, #28
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	0018      	movs	r0, r3
 800198c:	f7ff fc68 	bl	8001260 <process_button>
		process_button(&button_right);
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	0018      	movs	r0, r3
 8001994:	f7ff fc64 	bl	8001260 <process_button>

		if(button_up.state == BUTTON_PRESSED){
 8001998:	4b5a      	ldr	r3, [pc, #360]	; (8001b04 <main+0x770>)
 800199a:	22f4      	movs	r2, #244	; 0xf4
 800199c:	0052      	lsls	r2, r2, #1
 800199e:	189b      	adds	r3, r3, r2
 80019a0:	19db      	adds	r3, r3, r7
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d11a      	bne.n	80019de <main+0x64a>
			if(button_up.state_old == 0){
 80019a8:	4b56      	ldr	r3, [pc, #344]	; (8001b04 <main+0x770>)
 80019aa:	189b      	adds	r3, r3, r2
 80019ac:	19db      	adds	r3, r3, r7
 80019ae:	785b      	ldrb	r3, [r3, #1]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d121      	bne.n	80019f8 <main+0x664>
				button_up.state_old = 1;
 80019b4:	4b53      	ldr	r3, [pc, #332]	; (8001b04 <main+0x770>)
 80019b6:	189b      	adds	r3, r3, r2
 80019b8:	19db      	adds	r3, r3, r7
 80019ba:	2201      	movs	r2, #1
 80019bc:	705a      	strb	r2, [r3, #1]
				if(mode == 0){
 80019be:	22e8      	movs	r2, #232	; 0xe8
 80019c0:	32ff      	adds	r2, #255	; 0xff
 80019c2:	18bb      	adds	r3, r7, r2
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d103      	bne.n	80019d2 <main+0x63e>
					mode = 1;
 80019ca:	18bb      	adds	r3, r7, r2
 80019cc:	2201      	movs	r2, #1
 80019ce:	701a      	strb	r2, [r3, #0]
 80019d0:	e012      	b.n	80019f8 <main+0x664>
				}else{
					mode = 0;
 80019d2:	23e8      	movs	r3, #232	; 0xe8
 80019d4:	33ff      	adds	r3, #255	; 0xff
 80019d6:	18fb      	adds	r3, r7, r3
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
 80019dc:	e00c      	b.n	80019f8 <main+0x664>
				}
			}
		}else if(button_up.state == BUTTON_RELEASED){
 80019de:	4b49      	ldr	r3, [pc, #292]	; (8001b04 <main+0x770>)
 80019e0:	22f4      	movs	r2, #244	; 0xf4
 80019e2:	0052      	lsls	r2, r2, #1
 80019e4:	189b      	adds	r3, r3, r2
 80019e6:	19db      	adds	r3, r3, r7
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d104      	bne.n	80019f8 <main+0x664>
			button_up.state_old = 0;
 80019ee:	4b45      	ldr	r3, [pc, #276]	; (8001b04 <main+0x770>)
 80019f0:	189b      	adds	r3, r3, r2
 80019f2:	19db      	adds	r3, r3, r7
 80019f4:	2200      	movs	r2, #0
 80019f6:	705a      	strb	r2, [r3, #1]
		}

		if (button_down.state == BUTTON_LONG_PRESS) {
 80019f8:	4b44      	ldr	r3, [pc, #272]	; (8001b0c <main+0x778>)
 80019fa:	21f4      	movs	r1, #244	; 0xf4
 80019fc:	0049      	lsls	r1, r1, #1
 80019fe:	185b      	adds	r3, r3, r1
 8001a00:	19db      	adds	r3, r3, r7
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	d109      	bne.n	8001a1c <main+0x688>
			disp_minute.data++;
 8001a08:	4b3c      	ldr	r3, [pc, #240]	; (8001afc <main+0x768>)
 8001a0a:	185b      	adds	r3, r3, r1
 8001a0c:	19db      	adds	r3, r3, r7
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	3301      	adds	r3, #1
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	4b39      	ldr	r3, [pc, #228]	; (8001afc <main+0x768>)
 8001a16:	185b      	adds	r3, r3, r1
 8001a18:	19db      	adds	r3, r3, r7
 8001a1a:	701a      	strb	r2, [r3, #0]
		}

		if (button_left.state == BUTTON_LONG_PRESS) {
 8001a1c:	4b3d      	ldr	r3, [pc, #244]	; (8001b14 <main+0x780>)
 8001a1e:	21f4      	movs	r1, #244	; 0xf4
 8001a20:	0049      	lsls	r1, r1, #1
 8001a22:	185b      	adds	r3, r3, r1
 8001a24:	19db      	adds	r3, r3, r7
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d109      	bne.n	8001a40 <main+0x6ac>
			disp_second.data++;
 8001a2c:	4b34      	ldr	r3, [pc, #208]	; (8001b00 <main+0x76c>)
 8001a2e:	185b      	adds	r3, r3, r1
 8001a30:	19db      	adds	r3, r3, r7
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	3301      	adds	r3, #1
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	4b31      	ldr	r3, [pc, #196]	; (8001b00 <main+0x76c>)
 8001a3a:	185b      	adds	r3, r3, r1
 8001a3c:	19db      	adds	r3, r3, r7
 8001a3e:	701a      	strb	r2, [r3, #0]
		}

		result = HAL_RTC_GetDate(&hrtc, &sTimeStampDate, RTC_FORMAT_BIN);
 8001a40:	25f3      	movs	r5, #243	; 0xf3
 8001a42:	006d      	lsls	r5, r5, #1
 8001a44:	197c      	adds	r4, r7, r5
 8001a46:	23e0      	movs	r3, #224	; 0xe0
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	18f9      	adds	r1, r7, r3
 8001a4c:	4b35      	ldr	r3, [pc, #212]	; (8001b24 <main+0x790>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	0018      	movs	r0, r3
 8001a52:	f003 f83f 	bl	8004ad4 <HAL_RTC_GetDate>
 8001a56:	0003      	movs	r3, r0
 8001a58:	7023      	strb	r3, [r4, #0]
		result = HAL_RTC_GetTime(&hrtc, &sTimeStamp, RTC_FORMAT_BIN);
 8001a5a:	197c      	adds	r4, r7, r5
 8001a5c:	25e2      	movs	r5, #226	; 0xe2
 8001a5e:	006d      	lsls	r5, r5, #1
 8001a60:	1979      	adds	r1, r7, r5
 8001a62:	4b30      	ldr	r3, [pc, #192]	; (8001b24 <main+0x790>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	0018      	movs	r0, r3
 8001a68:	f002 ff42 	bl	80048f0 <HAL_RTC_GetTime>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	7023      	strb	r3, [r4, #0]

		if(mode){
 8001a70:	23e8      	movs	r3, #232	; 0xe8
 8001a72:	33ff      	adds	r3, #255	; 0xff
 8001a74:	18fb      	adds	r3, r7, r3
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d014      	beq.n	8001aa6 <main+0x712>
			disp_hour.data = sTimeStamp.Hours;
 8001a7c:	197b      	adds	r3, r7, r5
 8001a7e:	781a      	ldrb	r2, [r3, #0]
 8001a80:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <main+0x764>)
 8001a82:	21f4      	movs	r1, #244	; 0xf4
 8001a84:	0049      	lsls	r1, r1, #1
 8001a86:	185b      	adds	r3, r3, r1
 8001a88:	19db      	adds	r3, r3, r7
 8001a8a:	701a      	strb	r2, [r3, #0]
			disp_minute.data = sTimeStamp.Minutes;
 8001a8c:	197b      	adds	r3, r7, r5
 8001a8e:	785a      	ldrb	r2, [r3, #1]
 8001a90:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <main+0x768>)
 8001a92:	185b      	adds	r3, r3, r1
 8001a94:	19db      	adds	r3, r3, r7
 8001a96:	701a      	strb	r2, [r3, #0]
			disp_second.data = sTimeStamp.Seconds;
 8001a98:	197b      	adds	r3, r7, r5
 8001a9a:	789a      	ldrb	r2, [r3, #2]
 8001a9c:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <main+0x76c>)
 8001a9e:	185b      	adds	r3, r3, r1
 8001aa0:	19db      	adds	r3, r3, r7
 8001aa2:	701a      	strb	r2, [r3, #0]
 8001aa4:	e015      	b.n	8001ad2 <main+0x73e>
		}else{
			disp_hour.data = sTimeStampDate.Date;
 8001aa6:	21e0      	movs	r1, #224	; 0xe0
 8001aa8:	0049      	lsls	r1, r1, #1
 8001aaa:	187b      	adds	r3, r7, r1
 8001aac:	789a      	ldrb	r2, [r3, #2]
 8001aae:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <main+0x764>)
 8001ab0:	20f4      	movs	r0, #244	; 0xf4
 8001ab2:	0040      	lsls	r0, r0, #1
 8001ab4:	181b      	adds	r3, r3, r0
 8001ab6:	19db      	adds	r3, r3, r7
 8001ab8:	701a      	strb	r2, [r3, #0]
			disp_minute.data = sTimeStampDate.Month;
 8001aba:	187b      	adds	r3, r7, r1
 8001abc:	785a      	ldrb	r2, [r3, #1]
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <main+0x768>)
 8001ac0:	181b      	adds	r3, r3, r0
 8001ac2:	19db      	adds	r3, r3, r7
 8001ac4:	701a      	strb	r2, [r3, #0]
			disp_second.data = sTimeStampDate.Year;
 8001ac6:	187b      	adds	r3, r7, r1
 8001ac8:	78da      	ldrb	r2, [r3, #3]
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <main+0x76c>)
 8001acc:	181b      	adds	r3, r3, r0
 8001ace:	19db      	adds	r3, r3, r7
 8001ad0:	701a      	strb	r2, [r3, #0]
		}

		display_write_segment(&disp_hour);
 8001ad2:	237c      	movs	r3, #124	; 0x7c
 8001ad4:	18fb      	adds	r3, r7, r3
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f7ff fb86 	bl	80011e8 <display_write_segment>
		display_write_segment(&disp_minute);
 8001adc:	2370      	movs	r3, #112	; 0x70
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f7ff fb81 	bl	80011e8 <display_write_segment>
		display_write_segment(&disp_second);
 8001ae6:	2364      	movs	r3, #100	; 0x64
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	0018      	movs	r0, r3
 8001aec:	f7ff fb7c 	bl	80011e8 <display_write_segment>

		HAL_Delay(10);
 8001af0:	200a      	movs	r0, #10
 8001af2:	f000 fe19 	bl	8002728 <HAL_Delay>
		process_button(&button_up);
 8001af6:	e73c      	b.n	8001972 <main+0x5de>
 8001af8:	fffffe94 	.word	0xfffffe94
 8001afc:	fffffe88 	.word	0xfffffe88
 8001b00:	fffffe7c 	.word	0xfffffe7c
 8001b04:	fffffe64 	.word	0xfffffe64
 8001b08:	08006cec 	.word	0x08006cec
 8001b0c:	fffffe4c 	.word	0xfffffe4c
 8001b10:	08006d04 	.word	0x08006d04
 8001b14:	fffffe34 	.word	0xfffffe34
 8001b18:	08006d1c 	.word	0x08006d1c
 8001b1c:	fffffe1c 	.word	0xfffffe1c
 8001b20:	08006d34 	.word	0x08006d34
 8001b24:	200001f0 	.word	0x200001f0

08001b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b099      	sub	sp, #100	; 0x64
 8001b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b2e:	242c      	movs	r4, #44	; 0x2c
 8001b30:	193b      	adds	r3, r7, r4
 8001b32:	0018      	movs	r0, r3
 8001b34:	2334      	movs	r3, #52	; 0x34
 8001b36:	001a      	movs	r2, r3
 8001b38:	2100      	movs	r1, #0
 8001b3a:	f004 fdd9 	bl	80066f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b3e:	2318      	movs	r3, #24
 8001b40:	18fb      	adds	r3, r7, r3
 8001b42:	0018      	movs	r0, r3
 8001b44:	2314      	movs	r3, #20
 8001b46:	001a      	movs	r2, r3
 8001b48:	2100      	movs	r1, #0
 8001b4a:	f004 fdd1 	bl	80066f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b4e:	003b      	movs	r3, r7
 8001b50:	0018      	movs	r0, r3
 8001b52:	2318      	movs	r3, #24
 8001b54:	001a      	movs	r2, r3
 8001b56:	2100      	movs	r1, #0
 8001b58:	f004 fdca 	bl	80066f0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b5c:	4b33      	ldr	r3, [pc, #204]	; (8001c2c <SystemClock_Config+0x104>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a33      	ldr	r2, [pc, #204]	; (8001c30 <SystemClock_Config+0x108>)
 8001b62:	401a      	ands	r2, r3
 8001b64:	4b31      	ldr	r3, [pc, #196]	; (8001c2c <SystemClock_Config+0x104>)
 8001b66:	2180      	movs	r1, #128	; 0x80
 8001b68:	0109      	lsls	r1, r1, #4
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b6e:	f001 fe9f 	bl	80038b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b72:	4b30      	ldr	r3, [pc, #192]	; (8001c34 <SystemClock_Config+0x10c>)
 8001b74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b76:	4b2f      	ldr	r3, [pc, #188]	; (8001c34 <SystemClock_Config+0x10c>)
 8001b78:	492d      	ldr	r1, [pc, #180]	; (8001c30 <SystemClock_Config+0x108>)
 8001b7a:	400a      	ands	r2, r1
 8001b7c:	651a      	str	r2, [r3, #80]	; 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001b7e:	193b      	adds	r3, r7, r4
 8001b80:	2206      	movs	r2, #6
 8001b82:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b84:	193b      	adds	r3, r7, r4
 8001b86:	2280      	movs	r2, #128	; 0x80
 8001b88:	0052      	lsls	r2, r2, #1
 8001b8a:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b8c:	0021      	movs	r1, r4
 8001b8e:	187b      	adds	r3, r7, r1
 8001b90:	2201      	movs	r2, #1
 8001b92:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b94:	187b      	adds	r3, r7, r1
 8001b96:	2210      	movs	r2, #16
 8001b98:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b9a:	187b      	adds	r3, r7, r1
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ba0:	187b      	adds	r3, r7, r1
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001ba6:	187b      	adds	r3, r7, r1
 8001ba8:	2280      	movs	r2, #128	; 0x80
 8001baa:	02d2      	lsls	r2, r2, #11
 8001bac:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001bae:	187b      	adds	r3, r7, r1
 8001bb0:	2280      	movs	r2, #128	; 0x80
 8001bb2:	03d2      	lsls	r2, r2, #15
 8001bb4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb6:	187b      	adds	r3, r7, r1
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f001 fe87 	bl	80038cc <HAL_RCC_OscConfig>
 8001bbe:	1e03      	subs	r3, r0, #0
 8001bc0:	d001      	beq.n	8001bc6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001bc2:	f000 fac5 	bl	8002150 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc6:	2118      	movs	r1, #24
 8001bc8:	187b      	adds	r3, r7, r1
 8001bca:	220f      	movs	r2, #15
 8001bcc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bce:	187b      	adds	r3, r7, r1
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd4:	187b      	adds	r3, r7, r1
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bda:	187b      	adds	r3, r7, r1
 8001bdc:	2200      	movs	r2, #0
 8001bde:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001be0:	187b      	adds	r3, r7, r1
 8001be2:	2200      	movs	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001be6:	187b      	adds	r3, r7, r1
 8001be8:	2101      	movs	r1, #1
 8001bea:	0018      	movs	r0, r3
 8001bec:	f002 f9ea 	bl	8003fc4 <HAL_RCC_ClockConfig>
 8001bf0:	1e03      	subs	r3, r0, #0
 8001bf2:	d001      	beq.n	8001bf8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001bf4:	f000 faac 	bl	8002150 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001bf8:	003b      	movs	r3, r7
 8001bfa:	222a      	movs	r2, #42	; 0x2a
 8001bfc:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bfe:	003b      	movs	r3, r7
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c04:	003b      	movs	r3, r7
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c0a:	003b      	movs	r3, r7
 8001c0c:	2280      	movs	r2, #128	; 0x80
 8001c0e:	0252      	lsls	r2, r2, #9
 8001c10:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c12:	003b      	movs	r3, r7
 8001c14:	0018      	movs	r0, r3
 8001c16:	f002 fbf9 	bl	800440c <HAL_RCCEx_PeriphCLKConfig>
 8001c1a:	1e03      	subs	r3, r0, #0
 8001c1c:	d001      	beq.n	8001c22 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001c1e:	f000 fa97 	bl	8002150 <Error_Handler>
  }
}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b019      	add	sp, #100	; 0x64
 8001c28:	bd90      	pop	{r4, r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	40007000 	.word	0x40007000
 8001c30:	ffffe7ff 	.word	0xffffe7ff
 8001c34:	40021000 	.word	0x40021000

08001c38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <MX_I2C1_Init+0x74>)
 8001c3e:	4a1c      	ldr	r2, [pc, #112]	; (8001cb0 <MX_I2C1_Init+0x78>)
 8001c40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001c42:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <MX_I2C1_Init+0x74>)
 8001c44:	4a1b      	ldr	r2, [pc, #108]	; (8001cb4 <MX_I2C1_Init+0x7c>)
 8001c46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c48:	4b18      	ldr	r3, [pc, #96]	; (8001cac <MX_I2C1_Init+0x74>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c4e:	4b17      	ldr	r3, [pc, #92]	; (8001cac <MX_I2C1_Init+0x74>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c54:	4b15      	ldr	r3, [pc, #84]	; (8001cac <MX_I2C1_Init+0x74>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c5a:	4b14      	ldr	r3, [pc, #80]	; (8001cac <MX_I2C1_Init+0x74>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <MX_I2C1_Init+0x74>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <MX_I2C1_Init+0x74>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <MX_I2C1_Init+0x74>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <MX_I2C1_Init+0x74>)
 8001c74:	0018      	movs	r0, r3
 8001c76:	f001 f827 	bl	8002cc8 <HAL_I2C_Init>
 8001c7a:	1e03      	subs	r3, r0, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c7e:	f000 fa67 	bl	8002150 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <MX_I2C1_Init+0x74>)
 8001c84:	2100      	movs	r1, #0
 8001c86:	0018      	movs	r0, r3
 8001c88:	f001 fd7a 	bl	8003780 <HAL_I2CEx_ConfigAnalogFilter>
 8001c8c:	1e03      	subs	r3, r0, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c90:	f000 fa5e 	bl	8002150 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <MX_I2C1_Init+0x74>)
 8001c96:	2100      	movs	r1, #0
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f001 fdbd 	bl	8003818 <HAL_I2CEx_ConfigDigitalFilter>
 8001c9e:	1e03      	subs	r3, r0, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ca2:	f000 fa55 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	2000019c 	.word	0x2000019c
 8001cb0:	40005400 	.word	0x40005400
 8001cb4:	00707cbb 	.word	0x00707cbb

08001cb8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	2314      	movs	r3, #20
 8001cc4:	001a      	movs	r2, r3
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	f004 fd12 	bl	80066f0 <memset>
  RTC_DateTypeDef sDate = {0};
 8001ccc:	003b      	movs	r3, r7
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001cd2:	4b29      	ldr	r3, [pc, #164]	; (8001d78 <MX_RTC_Init+0xc0>)
 8001cd4:	4a29      	ldr	r2, [pc, #164]	; (8001d7c <MX_RTC_Init+0xc4>)
 8001cd6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cd8:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <MX_RTC_Init+0xc0>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001cde:	4b26      	ldr	r3, [pc, #152]	; (8001d78 <MX_RTC_Init+0xc0>)
 8001ce0:	227f      	movs	r2, #127	; 0x7f
 8001ce2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001ce4:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <MX_RTC_Init+0xc0>)
 8001ce6:	22ff      	movs	r2, #255	; 0xff
 8001ce8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001cea:	4b23      	ldr	r3, [pc, #140]	; (8001d78 <MX_RTC_Init+0xc0>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001cf0:	4b21      	ldr	r3, [pc, #132]	; (8001d78 <MX_RTC_Init+0xc0>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001cf6:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <MX_RTC_Init+0xc0>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <MX_RTC_Init+0xc0>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d02:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <MX_RTC_Init+0xc0>)
 8001d04:	0018      	movs	r0, r3
 8001d06:	f002 fcad 	bl	8004664 <HAL_RTC_Init>
 8001d0a:	1e03      	subs	r3, r0, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001d0e:	f000 fa1f 	bl	8002150 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	2200      	movs	r2, #0
 8001d22:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	2200      	movs	r2, #0
 8001d28:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d30:	1d39      	adds	r1, r7, #4
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <MX_RTC_Init+0xc0>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	0018      	movs	r0, r3
 8001d38:	f002 fd30 	bl	800479c <HAL_RTC_SetTime>
 8001d3c:	1e03      	subs	r3, r0, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8001d40:	f000 fa06 	bl	8002150 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d44:	003b      	movs	r3, r7
 8001d46:	2201      	movs	r2, #1
 8001d48:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001d4a:	003b      	movs	r3, r7
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8001d50:	003b      	movs	r3, r7
 8001d52:	2201      	movs	r2, #1
 8001d54:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x25;
 8001d56:	003b      	movs	r3, r7
 8001d58:	2225      	movs	r2, #37	; 0x25
 8001d5a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d5c:	0039      	movs	r1, r7
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <MX_RTC_Init+0xc0>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	0018      	movs	r0, r3
 8001d64:	f002 fe22 	bl	80049ac <HAL_RTC_SetDate>
 8001d68:	1e03      	subs	r3, r0, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8001d6c:	f000 f9f0 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d70:	46c0      	nop			; (mov r8, r8)
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b006      	add	sp, #24
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	200001f0 	.word	0x200001f0
 8001d7c:	40002800 	.word	0x40002800

08001d80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d86:	2318      	movs	r3, #24
 8001d88:	18fb      	adds	r3, r7, r3
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	2310      	movs	r3, #16
 8001d8e:	001a      	movs	r2, r3
 8001d90:	2100      	movs	r1, #0
 8001d92:	f004 fcad 	bl	80066f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d96:	2310      	movs	r3, #16
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	2308      	movs	r3, #8
 8001d9e:	001a      	movs	r2, r3
 8001da0:	2100      	movs	r1, #0
 8001da2:	f004 fca5 	bl	80066f0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da6:	003b      	movs	r3, r7
 8001da8:	0018      	movs	r0, r3
 8001daa:	2310      	movs	r3, #16
 8001dac:	001a      	movs	r2, r3
 8001dae:	2100      	movs	r1, #0
 8001db0:	f004 fc9e 	bl	80066f0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001db4:	4b30      	ldr	r3, [pc, #192]	; (8001e78 <MX_TIM2_Init+0xf8>)
 8001db6:	2280      	movs	r2, #128	; 0x80
 8001db8:	05d2      	lsls	r2, r2, #23
 8001dba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8001dbc:	4b2e      	ldr	r3, [pc, #184]	; (8001e78 <MX_TIM2_Init+0xf8>)
 8001dbe:	221f      	movs	r2, #31
 8001dc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc2:	4b2d      	ldr	r3, [pc, #180]	; (8001e78 <MX_TIM2_Init+0xf8>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001dc8:	4b2b      	ldr	r3, [pc, #172]	; (8001e78 <MX_TIM2_Init+0xf8>)
 8001dca:	4a2c      	ldr	r2, [pc, #176]	; (8001e7c <MX_TIM2_Init+0xfc>)
 8001dcc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dce:	4b2a      	ldr	r3, [pc, #168]	; (8001e78 <MX_TIM2_Init+0xf8>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001dd4:	4b28      	ldr	r3, [pc, #160]	; (8001e78 <MX_TIM2_Init+0xf8>)
 8001dd6:	2280      	movs	r2, #128	; 0x80
 8001dd8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dda:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <MX_TIM2_Init+0xf8>)
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f002 ff9f 	bl	8004d20 <HAL_TIM_Base_Init>
 8001de2:	1e03      	subs	r3, r0, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001de6:	f000 f9b3 	bl	8002150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dea:	2118      	movs	r1, #24
 8001dec:	187b      	adds	r3, r7, r1
 8001dee:	2280      	movs	r2, #128	; 0x80
 8001df0:	0152      	lsls	r2, r2, #5
 8001df2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001df4:	187a      	adds	r2, r7, r1
 8001df6:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <MX_TIM2_Init+0xf8>)
 8001df8:	0011      	movs	r1, r2
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f003 fa66 	bl	80052cc <HAL_TIM_ConfigClockSource>
 8001e00:	1e03      	subs	r3, r0, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001e04:	f000 f9a4 	bl	8002150 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <MX_TIM2_Init+0xf8>)
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f003 f810 	bl	8004e30 <HAL_TIM_PWM_Init>
 8001e10:	1e03      	subs	r3, r0, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001e14:	f000 f99c 	bl	8002150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e18:	2110      	movs	r1, #16
 8001e1a:	187b      	adds	r3, r7, r1
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e20:	187b      	adds	r3, r7, r1
 8001e22:	2200      	movs	r2, #0
 8001e24:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e26:	187a      	adds	r2, r7, r1
 8001e28:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <MX_TIM2_Init+0xf8>)
 8001e2a:	0011      	movs	r1, r2
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f003 fd31 	bl	8005894 <HAL_TIMEx_MasterConfigSynchronization>
 8001e32:	1e03      	subs	r3, r0, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001e36:	f000 f98b 	bl	8002150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e3a:	003b      	movs	r3, r7
 8001e3c:	2260      	movs	r2, #96	; 0x60
 8001e3e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 499;
 8001e40:	003b      	movs	r3, r7
 8001e42:	22f4      	movs	r2, #244	; 0xf4
 8001e44:	32ff      	adds	r2, #255	; 0xff
 8001e46:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e48:	003b      	movs	r3, r7
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e4e:	003b      	movs	r3, r7
 8001e50:	2200      	movs	r2, #0
 8001e52:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e54:	0039      	movs	r1, r7
 8001e56:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <MX_TIM2_Init+0xf8>)
 8001e58:	2208      	movs	r2, #8
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f003 f970 	bl	8005140 <HAL_TIM_PWM_ConfigChannel>
 8001e60:	1e03      	subs	r3, r0, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001e64:	f000 f974 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <MX_TIM2_Init+0xf8>)
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f000 fa14 	bl	8002298 <HAL_TIM_MspPostInit>

}
 8001e70:	46c0      	nop			; (mov r8, r8)
 8001e72:	46bd      	mov	sp, r7
 8001e74:	b00a      	add	sp, #40	; 0x28
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000214 	.word	0x20000214
 8001e7c:	000003e7 	.word	0x000003e7

08001e80 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	; 0x28
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e86:	2318      	movs	r3, #24
 8001e88:	18fb      	adds	r3, r7, r3
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	2310      	movs	r3, #16
 8001e8e:	001a      	movs	r2, r3
 8001e90:	2100      	movs	r1, #0
 8001e92:	f004 fc2d 	bl	80066f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e96:	2310      	movs	r3, #16
 8001e98:	18fb      	adds	r3, r7, r3
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	2308      	movs	r3, #8
 8001e9e:	001a      	movs	r2, r3
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	f004 fc25 	bl	80066f0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ea6:	003b      	movs	r3, r7
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	2310      	movs	r3, #16
 8001eac:	001a      	movs	r2, r3
 8001eae:	2100      	movs	r1, #0
 8001eb0:	f004 fc1e 	bl	80066f0 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8001eb4:	4b2e      	ldr	r3, [pc, #184]	; (8001f70 <MX_TIM21_Init+0xf0>)
 8001eb6:	4a2f      	ldr	r2, [pc, #188]	; (8001f74 <MX_TIM21_Init+0xf4>)
 8001eb8:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 31;
 8001eba:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <MX_TIM21_Init+0xf0>)
 8001ebc:	221f      	movs	r2, #31
 8001ebe:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec0:	4b2b      	ldr	r3, [pc, #172]	; (8001f70 <MX_TIM21_Init+0xf0>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 1000;
 8001ec6:	4b2a      	ldr	r3, [pc, #168]	; (8001f70 <MX_TIM21_Init+0xf0>)
 8001ec8:	22fa      	movs	r2, #250	; 0xfa
 8001eca:	0092      	lsls	r2, r2, #2
 8001ecc:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ece:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <MX_TIM21_Init+0xf0>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed4:	4b26      	ldr	r3, [pc, #152]	; (8001f70 <MX_TIM21_Init+0xf0>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8001eda:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <MX_TIM21_Init+0xf0>)
 8001edc:	0018      	movs	r0, r3
 8001ede:	f002 ff1f 	bl	8004d20 <HAL_TIM_Base_Init>
 8001ee2:	1e03      	subs	r3, r0, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM21_Init+0x6a>
  {
    Error_Handler();
 8001ee6:	f000 f933 	bl	8002150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eea:	2118      	movs	r1, #24
 8001eec:	187b      	adds	r3, r7, r1
 8001eee:	2280      	movs	r2, #128	; 0x80
 8001ef0:	0152      	lsls	r2, r2, #5
 8001ef2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8001ef4:	187a      	adds	r2, r7, r1
 8001ef6:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <MX_TIM21_Init+0xf0>)
 8001ef8:	0011      	movs	r1, r2
 8001efa:	0018      	movs	r0, r3
 8001efc:	f003 f9e6 	bl	80052cc <HAL_TIM_ConfigClockSource>
 8001f00:	1e03      	subs	r3, r0, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM21_Init+0x88>
  {
    Error_Handler();
 8001f04:	f000 f924 	bl	8002150 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 8001f08:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <MX_TIM21_Init+0xf0>)
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f002 ff48 	bl	8004da0 <HAL_TIM_OC_Init>
 8001f10:	1e03      	subs	r3, r0, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM21_Init+0x98>
  {
    Error_Handler();
 8001f14:	f000 f91c 	bl	8002150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f18:	2110      	movs	r1, #16
 8001f1a:	187b      	adds	r3, r7, r1
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f20:	187b      	adds	r3, r7, r1
 8001f22:	2200      	movs	r2, #0
 8001f24:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8001f26:	187a      	adds	r2, r7, r1
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <MX_TIM21_Init+0xf0>)
 8001f2a:	0011      	movs	r1, r2
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f003 fcb1 	bl	8005894 <HAL_TIMEx_MasterConfigSynchronization>
 8001f32:	1e03      	subs	r3, r0, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM21_Init+0xba>
  {
    Error_Handler();
 8001f36:	f000 f90b 	bl	8002150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001f3a:	003b      	movs	r3, r7
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001f40:	003b      	movs	r3, r7
 8001f42:	2200      	movs	r2, #0
 8001f44:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f46:	003b      	movs	r3, r7
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f4c:	003b      	movs	r3, r7
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f52:	0039      	movs	r1, r7
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <MX_TIM21_Init+0xf0>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f003 f899 	bl	8005090 <HAL_TIM_OC_ConfigChannel>
 8001f5e:	1e03      	subs	r3, r0, #0
 8001f60:	d001      	beq.n	8001f66 <MX_TIM21_Init+0xe6>
  {
    Error_Handler();
 8001f62:	f000 f8f5 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	b00a      	add	sp, #40	; 0x28
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	20000254 	.word	0x20000254
 8001f74:	40010800 	.word	0x40010800

08001f78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f7c:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <MX_USART2_UART_Init+0x58>)
 8001f7e:	4a15      	ldr	r2, [pc, #84]	; (8001fd4 <MX_USART2_UART_Init+0x5c>)
 8001f80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <MX_USART2_UART_Init+0x58>)
 8001f84:	22e1      	movs	r2, #225	; 0xe1
 8001f86:	0252      	lsls	r2, r2, #9
 8001f88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f8a:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <MX_USART2_UART_Init+0x58>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f90:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <MX_USART2_UART_Init+0x58>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f96:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <MX_USART2_UART_Init+0x58>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <MX_USART2_UART_Init+0x58>)
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <MX_USART2_UART_Init+0x58>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <MX_USART2_UART_Init+0x58>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <MX_USART2_UART_Init+0x58>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <MX_USART2_UART_Init+0x58>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fba:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <MX_USART2_UART_Init+0x58>)
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f003 fcb9 	bl	8005934 <HAL_UART_Init>
 8001fc2:	1e03      	subs	r3, r0, #0
 8001fc4:	d001      	beq.n	8001fca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001fc6:	f000 f8c3 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000294 	.word	0x20000294
 8001fd4:	40004400 	.word	0x40004400

08001fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b089      	sub	sp, #36	; 0x24
 8001fdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fde:	240c      	movs	r4, #12
 8001fe0:	193b      	adds	r3, r7, r4
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	2314      	movs	r3, #20
 8001fe6:	001a      	movs	r2, r3
 8001fe8:	2100      	movs	r1, #0
 8001fea:	f004 fb81 	bl	80066f0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fee:	4b52      	ldr	r3, [pc, #328]	; (8002138 <MX_GPIO_Init+0x160>)
 8001ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff2:	4b51      	ldr	r3, [pc, #324]	; (8002138 <MX_GPIO_Init+0x160>)
 8001ff4:	2104      	movs	r1, #4
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ffa:	4b4f      	ldr	r3, [pc, #316]	; (8002138 <MX_GPIO_Init+0x160>)
 8001ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffe:	2204      	movs	r2, #4
 8002000:	4013      	ands	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002006:	4b4c      	ldr	r3, [pc, #304]	; (8002138 <MX_GPIO_Init+0x160>)
 8002008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800200a:	4b4b      	ldr	r3, [pc, #300]	; (8002138 <MX_GPIO_Init+0x160>)
 800200c:	2101      	movs	r1, #1
 800200e:	430a      	orrs	r2, r1
 8002010:	62da      	str	r2, [r3, #44]	; 0x2c
 8002012:	4b49      	ldr	r3, [pc, #292]	; (8002138 <MX_GPIO_Init+0x160>)
 8002014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002016:	2201      	movs	r2, #1
 8002018:	4013      	ands	r3, r2
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800201e:	4b46      	ldr	r3, [pc, #280]	; (8002138 <MX_GPIO_Init+0x160>)
 8002020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002022:	4b45      	ldr	r3, [pc, #276]	; (8002138 <MX_GPIO_Init+0x160>)
 8002024:	2102      	movs	r1, #2
 8002026:	430a      	orrs	r2, r1
 8002028:	62da      	str	r2, [r3, #44]	; 0x2c
 800202a:	4b43      	ldr	r3, [pc, #268]	; (8002138 <MX_GPIO_Init+0x160>)
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	2202      	movs	r2, #2
 8002030:	4013      	ands	r3, r2
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLEAR_Pin|A_HT_Pin|CLK_A_HT_Pin|EN_HT_Pin
 8002036:	4941      	ldr	r1, [pc, #260]	; (800213c <MX_GPIO_Init+0x164>)
 8002038:	23a0      	movs	r3, #160	; 0xa0
 800203a:	05db      	lsls	r3, r3, #23
 800203c:	2200      	movs	r2, #0
 800203e:	0018      	movs	r0, r3
 8002040:	f000 fdff 	bl	8002c42 <HAL_GPIO_WritePin>
                          |A_HO_Pin|CLK_A_HO_Pin|A_MT_Pin|CLK_A_MT_Pin
                          |A_MO_Pin|CLK_A_MO_Pin|A_ST_Pin|CLK_A_ST_Pin
                          |A_SO_Pin|CLK_A_SO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|EN_MO_Pin|EN_ST_Pin|EN_SO_Pin
 8002044:	493e      	ldr	r1, [pc, #248]	; (8002140 <MX_GPIO_Init+0x168>)
 8002046:	4b3f      	ldr	r3, [pc, #252]	; (8002144 <MX_GPIO_Init+0x16c>)
 8002048:	2200      	movs	r2, #0
 800204a:	0018      	movs	r0, r3
 800204c:	f000 fdf9 	bl	8002c42 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CLEAR_Pin A_HT_Pin CLK_A_HT_Pin A_HO_Pin
                           CLK_A_HO_Pin A_MT_Pin CLK_A_MT_Pin A_MO_Pin
                           CLK_A_MO_Pin A_ST_Pin CLK_A_ST_Pin A_SO_Pin
                           CLK_A_SO_Pin */
  GPIO_InitStruct.Pin = CLEAR_Pin|A_HT_Pin|CLK_A_HT_Pin|A_HO_Pin
 8002050:	193b      	adds	r3, r7, r4
 8002052:	4a3d      	ldr	r2, [pc, #244]	; (8002148 <MX_GPIO_Init+0x170>)
 8002054:	601a      	str	r2, [r3, #0]
                          |CLK_A_HO_Pin|A_MT_Pin|CLK_A_MT_Pin|A_MO_Pin
                          |CLK_A_MO_Pin|A_ST_Pin|CLK_A_ST_Pin|A_SO_Pin
                          |CLK_A_SO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002056:	193b      	adds	r3, r7, r4
 8002058:	2201      	movs	r2, #1
 800205a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	193b      	adds	r3, r7, r4
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002062:	193b      	adds	r3, r7, r4
 8002064:	2202      	movs	r2, #2
 8002066:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002068:	193a      	adds	r2, r7, r4
 800206a:	23a0      	movs	r3, #160	; 0xa0
 800206c:	05db      	lsls	r3, r3, #23
 800206e:	0011      	movs	r1, r2
 8002070:	0018      	movs	r0, r3
 8002072:	f000 fc5b 	bl	800292c <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_HT_Pin */
  GPIO_InitStruct.Pin = EN_HT_Pin;
 8002076:	193b      	adds	r3, r7, r4
 8002078:	2208      	movs	r2, #8
 800207a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800207c:	193b      	adds	r3, r7, r4
 800207e:	2201      	movs	r2, #1
 8002080:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	193b      	adds	r3, r7, r4
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002088:	193b      	adds	r3, r7, r4
 800208a:	2203      	movs	r2, #3
 800208c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EN_HT_GPIO_Port, &GPIO_InitStruct);
 800208e:	193a      	adds	r2, r7, r4
 8002090:	23a0      	movs	r3, #160	; 0xa0
 8002092:	05db      	lsls	r3, r3, #23
 8002094:	0011      	movs	r1, r2
 8002096:	0018      	movs	r0, r3
 8002098:	f000 fc48 	bl	800292c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_UP_Pin BTN_DOWN_Pin BTN_LEFT_Pin BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_DOWN_Pin|BTN_LEFT_Pin|BTN_RIGHT_Pin;
 800209c:	0021      	movs	r1, r4
 800209e:	187b      	adds	r3, r7, r1
 80020a0:	220f      	movs	r2, #15
 80020a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020a4:	187b      	adds	r3, r7, r1
 80020a6:	2288      	movs	r2, #136	; 0x88
 80020a8:	0352      	lsls	r2, r2, #13
 80020aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	187b      	adds	r3, r7, r1
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b2:	000c      	movs	r4, r1
 80020b4:	187b      	adds	r3, r7, r1
 80020b6:	4a23      	ldr	r2, [pc, #140]	; (8002144 <MX_GPIO_Init+0x16c>)
 80020b8:	0019      	movs	r1, r3
 80020ba:	0010      	movs	r0, r2
 80020bc:	f000 fc36 	bl	800292c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80020c0:	0021      	movs	r1, r4
 80020c2:	187b      	adds	r3, r7, r1
 80020c4:	2280      	movs	r2, #128	; 0x80
 80020c6:	0112      	lsls	r2, r2, #4
 80020c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ca:	000c      	movs	r4, r1
 80020cc:	193b      	adds	r3, r7, r4
 80020ce:	2201      	movs	r2, #1
 80020d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	193b      	adds	r3, r7, r4
 80020d4:	2200      	movs	r2, #0
 80020d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d8:	193b      	adds	r3, r7, r4
 80020da:	2200      	movs	r2, #0
 80020dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020de:	193b      	adds	r3, r7, r4
 80020e0:	4a18      	ldr	r2, [pc, #96]	; (8002144 <MX_GPIO_Init+0x16c>)
 80020e2:	0019      	movs	r1, r3
 80020e4:	0010      	movs	r0, r2
 80020e6:	f000 fc21 	bl	800292c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_MO_Pin EN_ST_Pin EN_SO_Pin EN_HO_Pin
                           EN_MT_Pin */
  GPIO_InitStruct.Pin = EN_MO_Pin|EN_ST_Pin|EN_SO_Pin|EN_HO_Pin
 80020ea:	0021      	movs	r1, r4
 80020ec:	187b      	adds	r3, r7, r1
 80020ee:	4a17      	ldr	r2, [pc, #92]	; (800214c <MX_GPIO_Init+0x174>)
 80020f0:	601a      	str	r2, [r3, #0]
                          |EN_MT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f2:	187b      	adds	r3, r7, r1
 80020f4:	2201      	movs	r2, #1
 80020f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	187b      	adds	r3, r7, r1
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020fe:	187b      	adds	r3, r7, r1
 8002100:	2202      	movs	r2, #2
 8002102:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002104:	187b      	adds	r3, r7, r1
 8002106:	4a0f      	ldr	r2, [pc, #60]	; (8002144 <MX_GPIO_Init+0x16c>)
 8002108:	0019      	movs	r1, r3
 800210a:	0010      	movs	r0, r2
 800210c:	f000 fc0e 	bl	800292c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002110:	2200      	movs	r2, #0
 8002112:	2100      	movs	r1, #0
 8002114:	2005      	movs	r0, #5
 8002116:	f000 fbd7 	bl	80028c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800211a:	2005      	movs	r0, #5
 800211c:	f000 fbe9 	bl	80028f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8002120:	2200      	movs	r2, #0
 8002122:	2100      	movs	r1, #0
 8002124:	2006      	movs	r0, #6
 8002126:	f000 fbcf 	bl	80028c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800212a:	2006      	movs	r0, #6
 800212c:	f000 fbe1 	bl	80028f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002130:	46c0      	nop			; (mov r8, r8)
 8002132:	46bd      	mov	sp, r7
 8002134:	b009      	add	sp, #36	; 0x24
 8002136:	bd90      	pop	{r4, r7, pc}
 8002138:	40021000 	.word	0x40021000
 800213c:	00009fff 	.word	0x00009fff
 8002140:	00007830 	.word	0x00007830
 8002144:	50000400 	.word	0x50000400
 8002148:	00009ff7 	.word	0x00009ff7
 800214c:	00007030 	.word	0x00007030

08002150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002154:	b672      	cpsid	i
}
 8002156:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002158:	e7fe      	b.n	8002158 <Error_Handler+0x8>
	...

0800215c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002160:	4b07      	ldr	r3, [pc, #28]	; (8002180 <HAL_MspInit+0x24>)
 8002162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_MspInit+0x24>)
 8002166:	2101      	movs	r1, #1
 8002168:	430a      	orrs	r2, r1
 800216a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800216c:	4b04      	ldr	r3, [pc, #16]	; (8002180 <HAL_MspInit+0x24>)
 800216e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <HAL_MspInit+0x24>)
 8002172:	2180      	movs	r1, #128	; 0x80
 8002174:	0549      	lsls	r1, r1, #21
 8002176:	430a      	orrs	r2, r1
 8002178:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40021000 	.word	0x40021000

08002184 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	240c      	movs	r4, #12
 800218e:	193b      	adds	r3, r7, r4
 8002190:	0018      	movs	r0, r3
 8002192:	2314      	movs	r3, #20
 8002194:	001a      	movs	r2, r3
 8002196:	2100      	movs	r1, #0
 8002198:	f004 faaa 	bl	80066f0 <memset>
  if(hi2c->Instance==I2C1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a18      	ldr	r2, [pc, #96]	; (8002204 <HAL_I2C_MspInit+0x80>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d129      	bne.n	80021fa <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a6:	4b18      	ldr	r3, [pc, #96]	; (8002208 <HAL_I2C_MspInit+0x84>)
 80021a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021aa:	4b17      	ldr	r3, [pc, #92]	; (8002208 <HAL_I2C_MspInit+0x84>)
 80021ac:	2102      	movs	r1, #2
 80021ae:	430a      	orrs	r2, r1
 80021b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <HAL_I2C_MspInit+0x84>)
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b6:	2202      	movs	r2, #2
 80021b8:	4013      	ands	r3, r2
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021be:	193b      	adds	r3, r7, r4
 80021c0:	22c0      	movs	r2, #192	; 0xc0
 80021c2:	0092      	lsls	r2, r2, #2
 80021c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021c6:	0021      	movs	r1, r4
 80021c8:	187b      	adds	r3, r7, r1
 80021ca:	2212      	movs	r2, #18
 80021cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	187b      	adds	r3, r7, r1
 80021d0:	2200      	movs	r2, #0
 80021d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d4:	187b      	adds	r3, r7, r1
 80021d6:	2203      	movs	r2, #3
 80021d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021da:	187b      	adds	r3, r7, r1
 80021dc:	2204      	movs	r2, #4
 80021de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e0:	187b      	adds	r3, r7, r1
 80021e2:	4a0a      	ldr	r2, [pc, #40]	; (800220c <HAL_I2C_MspInit+0x88>)
 80021e4:	0019      	movs	r1, r3
 80021e6:	0010      	movs	r0, r2
 80021e8:	f000 fba0 	bl	800292c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_I2C_MspInit+0x84>)
 80021ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_I2C_MspInit+0x84>)
 80021f2:	2180      	movs	r1, #128	; 0x80
 80021f4:	0389      	lsls	r1, r1, #14
 80021f6:	430a      	orrs	r2, r1
 80021f8:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	46bd      	mov	sp, r7
 80021fe:	b009      	add	sp, #36	; 0x24
 8002200:	bd90      	pop	{r4, r7, pc}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	40005400 	.word	0x40005400
 8002208:	40021000 	.word	0x40021000
 800220c:	50000400 	.word	0x50000400

08002210 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a06      	ldr	r2, [pc, #24]	; (8002238 <HAL_RTC_MspInit+0x28>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d106      	bne.n	8002230 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_RTC_MspInit+0x2c>)
 8002224:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002226:	4b05      	ldr	r3, [pc, #20]	; (800223c <HAL_RTC_MspInit+0x2c>)
 8002228:	2180      	movs	r1, #128	; 0x80
 800222a:	02c9      	lsls	r1, r1, #11
 800222c:	430a      	orrs	r2, r1
 800222e:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002230:	46c0      	nop			; (mov r8, r8)
 8002232:	46bd      	mov	sp, r7
 8002234:	b002      	add	sp, #8
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40002800 	.word	0x40002800
 800223c:	40021000 	.word	0x40021000

08002240 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	05db      	lsls	r3, r3, #23
 8002250:	429a      	cmp	r2, r3
 8002252:	d106      	bne.n	8002262 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002254:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <HAL_TIM_Base_MspInit+0x50>)
 8002256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002258:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <HAL_TIM_Base_MspInit+0x50>)
 800225a:	2101      	movs	r1, #1
 800225c:	430a      	orrs	r2, r1
 800225e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8002260:	e012      	b.n	8002288 <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM21)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a0b      	ldr	r2, [pc, #44]	; (8002294 <HAL_TIM_Base_MspInit+0x54>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d10d      	bne.n	8002288 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM21_CLK_ENABLE();
 800226c:	4b08      	ldr	r3, [pc, #32]	; (8002290 <HAL_TIM_Base_MspInit+0x50>)
 800226e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002270:	4b07      	ldr	r3, [pc, #28]	; (8002290 <HAL_TIM_Base_MspInit+0x50>)
 8002272:	2104      	movs	r1, #4
 8002274:	430a      	orrs	r2, r1
 8002276:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8002278:	2200      	movs	r2, #0
 800227a:	2100      	movs	r1, #0
 800227c:	2014      	movs	r0, #20
 800227e:	f000 fb23 	bl	80028c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8002282:	2014      	movs	r0, #20
 8002284:	f000 fb35 	bl	80028f2 <HAL_NVIC_EnableIRQ>
}
 8002288:	46c0      	nop			; (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	b002      	add	sp, #8
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	40010800 	.word	0x40010800

08002298 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002298:	b590      	push	{r4, r7, lr}
 800229a:	b089      	sub	sp, #36	; 0x24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	240c      	movs	r4, #12
 80022a2:	193b      	adds	r3, r7, r4
 80022a4:	0018      	movs	r0, r3
 80022a6:	2314      	movs	r3, #20
 80022a8:	001a      	movs	r2, r3
 80022aa:	2100      	movs	r1, #0
 80022ac:	f004 fa20 	bl	80066f0 <memset>
  if(htim->Instance==TIM2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	2380      	movs	r3, #128	; 0x80
 80022b6:	05db      	lsls	r3, r3, #23
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d122      	bne.n	8002302 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022bc:	4b13      	ldr	r3, [pc, #76]	; (800230c <HAL_TIM_MspPostInit+0x74>)
 80022be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c0:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_TIM_MspPostInit+0x74>)
 80022c2:	2102      	movs	r1, #2
 80022c4:	430a      	orrs	r2, r1
 80022c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80022c8:	4b10      	ldr	r3, [pc, #64]	; (800230c <HAL_TIM_MspPostInit+0x74>)
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	2202      	movs	r2, #2
 80022ce:	4013      	ands	r3, r2
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022d4:	193b      	adds	r3, r7, r4
 80022d6:	2280      	movs	r2, #128	; 0x80
 80022d8:	00d2      	lsls	r2, r2, #3
 80022da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022dc:	0021      	movs	r1, r4
 80022de:	187b      	adds	r3, r7, r1
 80022e0:	2202      	movs	r2, #2
 80022e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	187b      	adds	r3, r7, r1
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	187b      	adds	r3, r7, r1
 80022ec:	2200      	movs	r2, #0
 80022ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80022f0:	187b      	adds	r3, r7, r1
 80022f2:	2202      	movs	r2, #2
 80022f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f6:	187b      	adds	r3, r7, r1
 80022f8:	4a05      	ldr	r2, [pc, #20]	; (8002310 <HAL_TIM_MspPostInit+0x78>)
 80022fa:	0019      	movs	r1, r3
 80022fc:	0010      	movs	r0, r2
 80022fe:	f000 fb15 	bl	800292c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	46bd      	mov	sp, r7
 8002306:	b009      	add	sp, #36	; 0x24
 8002308:	bd90      	pop	{r4, r7, pc}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	40021000 	.word	0x40021000
 8002310:	50000400 	.word	0x50000400

08002314 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002314:	b590      	push	{r4, r7, lr}
 8002316:	b089      	sub	sp, #36	; 0x24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	240c      	movs	r4, #12
 800231e:	193b      	adds	r3, r7, r4
 8002320:	0018      	movs	r0, r3
 8002322:	2314      	movs	r3, #20
 8002324:	001a      	movs	r2, r3
 8002326:	2100      	movs	r1, #0
 8002328:	f004 f9e2 	bl	80066f0 <memset>
  if(huart->Instance==USART2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a17      	ldr	r2, [pc, #92]	; (8002390 <HAL_UART_MspInit+0x7c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d128      	bne.n	8002388 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002336:	4b17      	ldr	r3, [pc, #92]	; (8002394 <HAL_UART_MspInit+0x80>)
 8002338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800233a:	4b16      	ldr	r3, [pc, #88]	; (8002394 <HAL_UART_MspInit+0x80>)
 800233c:	2180      	movs	r1, #128	; 0x80
 800233e:	0289      	lsls	r1, r1, #10
 8002340:	430a      	orrs	r2, r1
 8002342:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002344:	4b13      	ldr	r3, [pc, #76]	; (8002394 <HAL_UART_MspInit+0x80>)
 8002346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_UART_MspInit+0x80>)
 800234a:	2102      	movs	r1, #2
 800234c:	430a      	orrs	r2, r1
 800234e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002350:	4b10      	ldr	r3, [pc, #64]	; (8002394 <HAL_UART_MspInit+0x80>)
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	2202      	movs	r2, #2
 8002356:	4013      	ands	r3, r2
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB6     ------> USART2_TX
    PB7     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800235c:	0021      	movs	r1, r4
 800235e:	187b      	adds	r3, r7, r1
 8002360:	22c0      	movs	r2, #192	; 0xc0
 8002362:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	187b      	adds	r3, r7, r1
 8002366:	2202      	movs	r2, #2
 8002368:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	187b      	adds	r3, r7, r1
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002370:	187b      	adds	r3, r7, r1
 8002372:	2203      	movs	r2, #3
 8002374:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8002376:	187b      	adds	r3, r7, r1
 8002378:	2200      	movs	r2, #0
 800237a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237c:	187b      	adds	r3, r7, r1
 800237e:	4a06      	ldr	r2, [pc, #24]	; (8002398 <HAL_UART_MspInit+0x84>)
 8002380:	0019      	movs	r1, r3
 8002382:	0010      	movs	r0, r2
 8002384:	f000 fad2 	bl	800292c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	46bd      	mov	sp, r7
 800238c:	b009      	add	sp, #36	; 0x24
 800238e:	bd90      	pop	{r4, r7, pc}
 8002390:	40004400 	.word	0x40004400
 8002394:	40021000 	.word	0x40021000
 8002398:	50000400 	.word	0x50000400

0800239c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80023a0:	e7fe      	b.n	80023a0 <NMI_Handler+0x4>

080023a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023a6:	e7fe      	b.n	80023a6 <HardFault_Handler+0x4>

080023a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80023ac:	46c0      	nop			; (mov r8, r8)
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023c0:	f000 f996 	bl	80026f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023c4:	46c0      	nop			; (mov r8, r8)
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

	ext_btn_up_value = HAL_GPIO_ReadPin(BTN_UP_GPIO_Port, BTN_UP_Pin);
 80023d0:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <EXTI0_1_IRQHandler+0x3c>)
 80023d2:	2101      	movs	r1, #1
 80023d4:	0018      	movs	r0, r3
 80023d6:	f000 fc17 	bl	8002c08 <HAL_GPIO_ReadPin>
 80023da:	0003      	movs	r3, r0
 80023dc:	001a      	movs	r2, r3
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <EXTI0_1_IRQHandler+0x40>)
 80023e0:	701a      	strb	r2, [r3, #0]
	ext_btn_down_value = HAL_GPIO_ReadPin(BTN_DOWN_GPIO_Port, BTN_DOWN_Pin);
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <EXTI0_1_IRQHandler+0x3c>)
 80023e4:	2102      	movs	r1, #2
 80023e6:	0018      	movs	r0, r3
 80023e8:	f000 fc0e 	bl	8002c08 <HAL_GPIO_ReadPin>
 80023ec:	0003      	movs	r3, r0
 80023ee:	001a      	movs	r2, r3
 80023f0:	4b07      	ldr	r3, [pc, #28]	; (8002410 <EXTI0_1_IRQHandler+0x44>)
 80023f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_UP_Pin);
 80023f4:	2001      	movs	r0, #1
 80023f6:	f000 fc41 	bl	8002c7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_DOWN_Pin);
 80023fa:	2002      	movs	r0, #2
 80023fc:	f000 fc3e 	bl	8002c7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002400:	46c0      	nop			; (mov r8, r8)
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	50000400 	.word	0x50000400
 800240c:	2000031c 	.word	0x2000031c
 8002410:	2000031d 	.word	0x2000031d

08002414 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

	ext_btn_left_value = HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port, BTN_LEFT_Pin);
 8002418:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <EXTI2_3_IRQHandler+0x3c>)
 800241a:	2104      	movs	r1, #4
 800241c:	0018      	movs	r0, r3
 800241e:	f000 fbf3 	bl	8002c08 <HAL_GPIO_ReadPin>
 8002422:	0003      	movs	r3, r0
 8002424:	001a      	movs	r2, r3
 8002426:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <EXTI2_3_IRQHandler+0x40>)
 8002428:	701a      	strb	r2, [r3, #0]
	ext_btn_right_value = HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port, BTN_RIGHT_Pin);
 800242a:	4b09      	ldr	r3, [pc, #36]	; (8002450 <EXTI2_3_IRQHandler+0x3c>)
 800242c:	2108      	movs	r1, #8
 800242e:	0018      	movs	r0, r3
 8002430:	f000 fbea 	bl	8002c08 <HAL_GPIO_ReadPin>
 8002434:	0003      	movs	r3, r0
 8002436:	001a      	movs	r2, r3
 8002438:	4b07      	ldr	r3, [pc, #28]	; (8002458 <EXTI2_3_IRQHandler+0x44>)
 800243a:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_LEFT_Pin);
 800243c:	2004      	movs	r0, #4
 800243e:	f000 fc1d 	bl	8002c7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_RIGHT_Pin);
 8002442:	2008      	movs	r0, #8
 8002444:	f000 fc1a 	bl	8002c7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002448:	46c0      	nop			; (mov r8, r8)
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	50000400 	.word	0x50000400
 8002454:	2000031e 	.word	0x2000031e
 8002458:	2000031f 	.word	0x2000031f

0800245c <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */
	clock_value++;
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <TIM21_IRQHandler+0x1c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	4b04      	ldr	r3, [pc, #16]	; (8002478 <TIM21_IRQHandler+0x1c>)
 8002468:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 800246a:	4b04      	ldr	r3, [pc, #16]	; (800247c <TIM21_IRQHandler+0x20>)
 800246c:	0018      	movs	r0, r3
 800246e:	f002 fd27 	bl	8004ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20000320 	.word	0x20000320
 800247c:	20000254 	.word	0x20000254

08002480 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	e00a      	b.n	80024a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002492:	e000      	b.n	8002496 <_read+0x16>
 8002494:	bf00      	nop
 8002496:	0001      	movs	r1, r0
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	60ba      	str	r2, [r7, #8]
 800249e:	b2ca      	uxtb	r2, r1
 80024a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	3301      	adds	r3, #1
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	dbf0      	blt.n	8002492 <_read+0x12>
  }

  return len;
 80024b0:	687b      	ldr	r3, [r7, #4]
}
 80024b2:	0018      	movs	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	b006      	add	sp, #24
 80024b8:	bd80      	pop	{r7, pc}

080024ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b086      	sub	sp, #24
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	e009      	b.n	80024e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	60ba      	str	r2, [r7, #8]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	0018      	movs	r0, r3
 80024d6:	e000      	b.n	80024da <_write+0x20>
 80024d8:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	3301      	adds	r3, #1
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	dbf1      	blt.n	80024cc <_write+0x12>
  }
  return len;
 80024e8:	687b      	ldr	r3, [r7, #4]
}
 80024ea:	0018      	movs	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	b006      	add	sp, #24
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <_close>:

int _close(int file)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024fa:	2301      	movs	r3, #1
 80024fc:	425b      	negs	r3, r3
}
 80024fe:	0018      	movs	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	b002      	add	sp, #8
 8002504:	bd80      	pop	{r7, pc}

08002506 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2280      	movs	r2, #128	; 0x80
 8002514:	0192      	lsls	r2, r2, #6
 8002516:	605a      	str	r2, [r3, #4]
  return 0;
 8002518:	2300      	movs	r3, #0
}
 800251a:	0018      	movs	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	b002      	add	sp, #8
 8002520:	bd80      	pop	{r7, pc}

08002522 <_isatty>:

int _isatty(int file)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800252a:	2301      	movs	r3, #1
}
 800252c:	0018      	movs	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	b002      	add	sp, #8
 8002532:	bd80      	pop	{r7, pc}

08002534 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002540:	2300      	movs	r3, #0
}
 8002542:	0018      	movs	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	b004      	add	sp, #16
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002554:	4a14      	ldr	r2, [pc, #80]	; (80025a8 <_sbrk+0x5c>)
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <_sbrk+0x60>)
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002560:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <_sbrk+0x64>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d102      	bne.n	800256e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <_sbrk+0x64>)
 800256a:	4a12      	ldr	r2, [pc, #72]	; (80025b4 <_sbrk+0x68>)
 800256c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <_sbrk+0x64>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	18d3      	adds	r3, r2, r3
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	429a      	cmp	r2, r3
 800257a:	d207      	bcs.n	800258c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800257c:	f004 f90e 	bl	800679c <__errno>
 8002580:	0003      	movs	r3, r0
 8002582:	220c      	movs	r2, #12
 8002584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002586:	2301      	movs	r3, #1
 8002588:	425b      	negs	r3, r3
 800258a:	e009      	b.n	80025a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <_sbrk+0x64>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002592:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <_sbrk+0x64>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	18d2      	adds	r2, r2, r3
 800259a:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <_sbrk+0x64>)
 800259c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800259e:	68fb      	ldr	r3, [r7, #12]
}
 80025a0:	0018      	movs	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b006      	add	sp, #24
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20002000 	.word	0x20002000
 80025ac:	00000400 	.word	0x00000400
 80025b0:	20000324 	.word	0x20000324
 80025b4:	20000478 	.word	0x20000478

080025b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025bc:	46c0      	nop			; (mov r8, r8)
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80025c4:	4813      	ldr	r0, [pc, #76]	; (8002614 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80025c6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80025c8:	f7ff fff6 	bl	80025b8 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80025cc:	4812      	ldr	r0, [pc, #72]	; (8002618 <LoopForever+0x6>)
    LDR R1, [R0]
 80025ce:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80025d0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80025d2:	4a12      	ldr	r2, [pc, #72]	; (800261c <LoopForever+0xa>)
    CMP R1, R2
 80025d4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80025d6:	d105      	bne.n	80025e4 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80025d8:	4811      	ldr	r0, [pc, #68]	; (8002620 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80025da:	4912      	ldr	r1, [pc, #72]	; (8002624 <LoopForever+0x12>)
    STR R1, [R0]
 80025dc:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80025de:	4812      	ldr	r0, [pc, #72]	; (8002628 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80025e0:	4912      	ldr	r1, [pc, #72]	; (800262c <LoopForever+0x1a>)
    STR R1, [R0]
 80025e2:	6001      	str	r1, [r0, #0]

080025e4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025e4:	4812      	ldr	r0, [pc, #72]	; (8002630 <LoopForever+0x1e>)
  ldr r1, =_edata
 80025e6:	4913      	ldr	r1, [pc, #76]	; (8002634 <LoopForever+0x22>)
  ldr r2, =_sidata
 80025e8:	4a13      	ldr	r2, [pc, #76]	; (8002638 <LoopForever+0x26>)
  movs r3, #0
 80025ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025ec:	e002      	b.n	80025f4 <LoopCopyDataInit>

080025ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025f2:	3304      	adds	r3, #4

080025f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025f8:	d3f9      	bcc.n	80025ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025fa:	4a10      	ldr	r2, [pc, #64]	; (800263c <LoopForever+0x2a>)
  ldr r4, =_ebss
 80025fc:	4c10      	ldr	r4, [pc, #64]	; (8002640 <LoopForever+0x2e>)
  movs r3, #0
 80025fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002600:	e001      	b.n	8002606 <LoopFillZerobss>

08002602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002604:	3204      	adds	r2, #4

08002606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002608:	d3fb      	bcc.n	8002602 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800260a:	f004 f8cd 	bl	80067a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800260e:	f7fe fec1 	bl	8001394 <main>

08002612 <LoopForever>:

LoopForever:
    b LoopForever
 8002612:	e7fe      	b.n	8002612 <LoopForever>
   ldr   r0, =_estack
 8002614:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8002618:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800261c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8002620:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8002624:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002628:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800262c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002634:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8002638:	08006e5c 	.word	0x08006e5c
  ldr r2, =_sbss
 800263c:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8002640:	20000478 	.word	0x20000478

08002644 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002644:	e7fe      	b.n	8002644 <ADC1_IRQHandler>
	...

08002648 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800264e:	1dfb      	adds	r3, r7, #7
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_Init+0x3c>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <HAL_Init+0x3c>)
 800265a:	2140      	movs	r1, #64	; 0x40
 800265c:	430a      	orrs	r2, r1
 800265e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002660:	2003      	movs	r0, #3
 8002662:	f000 f811 	bl	8002688 <HAL_InitTick>
 8002666:	1e03      	subs	r3, r0, #0
 8002668:	d003      	beq.n	8002672 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800266a:	1dfb      	adds	r3, r7, #7
 800266c:	2201      	movs	r2, #1
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	e001      	b.n	8002676 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002672:	f7ff fd73 	bl	800215c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002676:	1dfb      	adds	r3, r7, #7
 8002678:	781b      	ldrb	r3, [r3, #0]
}
 800267a:	0018      	movs	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	b002      	add	sp, #8
 8002680:	bd80      	pop	{r7, pc}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	40022000 	.word	0x40022000

08002688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002690:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <HAL_InitTick+0x5c>)
 8002692:	681c      	ldr	r4, [r3, #0]
 8002694:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <HAL_InitTick+0x60>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	0019      	movs	r1, r3
 800269a:	23fa      	movs	r3, #250	; 0xfa
 800269c:	0098      	lsls	r0, r3, #2
 800269e:	f7fd fd33 	bl	8000108 <__udivsi3>
 80026a2:	0003      	movs	r3, r0
 80026a4:	0019      	movs	r1, r3
 80026a6:	0020      	movs	r0, r4
 80026a8:	f7fd fd2e 	bl	8000108 <__udivsi3>
 80026ac:	0003      	movs	r3, r0
 80026ae:	0018      	movs	r0, r3
 80026b0:	f000 f92f 	bl	8002912 <HAL_SYSTICK_Config>
 80026b4:	1e03      	subs	r3, r0, #0
 80026b6:	d001      	beq.n	80026bc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e00f      	b.n	80026dc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d80b      	bhi.n	80026da <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	2301      	movs	r3, #1
 80026c6:	425b      	negs	r3, r3
 80026c8:	2200      	movs	r2, #0
 80026ca:	0018      	movs	r0, r3
 80026cc:	f000 f8fc 	bl	80028c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026d0:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_InitTick+0x64>)
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e000      	b.n	80026dc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
}
 80026dc:	0018      	movs	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	b003      	add	sp, #12
 80026e2:	bd90      	pop	{r4, r7, pc}
 80026e4:	20000118 	.word	0x20000118
 80026e8:	20000120 	.word	0x20000120
 80026ec:	2000011c 	.word	0x2000011c

080026f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_IncTick+0x1c>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	001a      	movs	r2, r3
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_IncTick+0x20>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	18d2      	adds	r2, r2, r3
 8002700:	4b03      	ldr	r3, [pc, #12]	; (8002710 <HAL_IncTick+0x20>)
 8002702:	601a      	str	r2, [r3, #0]
}
 8002704:	46c0      	nop			; (mov r8, r8)
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	20000120 	.word	0x20000120
 8002710:	20000328 	.word	0x20000328

08002714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  return uwTick;
 8002718:	4b02      	ldr	r3, [pc, #8]	; (8002724 <HAL_GetTick+0x10>)
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	0018      	movs	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	20000328 	.word	0x20000328

08002728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002730:	f7ff fff0 	bl	8002714 <HAL_GetTick>
 8002734:	0003      	movs	r3, r0
 8002736:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	3301      	adds	r3, #1
 8002740:	d005      	beq.n	800274e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <HAL_Delay+0x44>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	001a      	movs	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	189b      	adds	r3, r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	f7ff ffe0 	bl	8002714 <HAL_GetTick>
 8002754:	0002      	movs	r2, r0
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	429a      	cmp	r2, r3
 800275e:	d8f7      	bhi.n	8002750 <HAL_Delay+0x28>
  {
  }
}
 8002760:	46c0      	nop			; (mov r8, r8)
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	46bd      	mov	sp, r7
 8002766:	b004      	add	sp, #16
 8002768:	bd80      	pop	{r7, pc}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	20000120 	.word	0x20000120

08002770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	0002      	movs	r2, r0
 8002778:	1dfb      	adds	r3, r7, #7
 800277a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800277c:	1dfb      	adds	r3, r7, #7
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b7f      	cmp	r3, #127	; 0x7f
 8002782:	d809      	bhi.n	8002798 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002784:	1dfb      	adds	r3, r7, #7
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	001a      	movs	r2, r3
 800278a:	231f      	movs	r3, #31
 800278c:	401a      	ands	r2, r3
 800278e:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <__NVIC_EnableIRQ+0x30>)
 8002790:	2101      	movs	r1, #1
 8002792:	4091      	lsls	r1, r2
 8002794:	000a      	movs	r2, r1
 8002796:	601a      	str	r2, [r3, #0]
  }
}
 8002798:	46c0      	nop			; (mov r8, r8)
 800279a:	46bd      	mov	sp, r7
 800279c:	b002      	add	sp, #8
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	e000e100 	.word	0xe000e100

080027a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a4:	b590      	push	{r4, r7, lr}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	0002      	movs	r2, r0
 80027ac:	6039      	str	r1, [r7, #0]
 80027ae:	1dfb      	adds	r3, r7, #7
 80027b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027b2:	1dfb      	adds	r3, r7, #7
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b7f      	cmp	r3, #127	; 0x7f
 80027b8:	d828      	bhi.n	800280c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027ba:	4a2f      	ldr	r2, [pc, #188]	; (8002878 <__NVIC_SetPriority+0xd4>)
 80027bc:	1dfb      	adds	r3, r7, #7
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	b25b      	sxtb	r3, r3
 80027c2:	089b      	lsrs	r3, r3, #2
 80027c4:	33c0      	adds	r3, #192	; 0xc0
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	589b      	ldr	r3, [r3, r2]
 80027ca:	1dfa      	adds	r2, r7, #7
 80027cc:	7812      	ldrb	r2, [r2, #0]
 80027ce:	0011      	movs	r1, r2
 80027d0:	2203      	movs	r2, #3
 80027d2:	400a      	ands	r2, r1
 80027d4:	00d2      	lsls	r2, r2, #3
 80027d6:	21ff      	movs	r1, #255	; 0xff
 80027d8:	4091      	lsls	r1, r2
 80027da:	000a      	movs	r2, r1
 80027dc:	43d2      	mvns	r2, r2
 80027de:	401a      	ands	r2, r3
 80027e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	019b      	lsls	r3, r3, #6
 80027e6:	22ff      	movs	r2, #255	; 0xff
 80027e8:	401a      	ands	r2, r3
 80027ea:	1dfb      	adds	r3, r7, #7
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	0018      	movs	r0, r3
 80027f0:	2303      	movs	r3, #3
 80027f2:	4003      	ands	r3, r0
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027f8:	481f      	ldr	r0, [pc, #124]	; (8002878 <__NVIC_SetPriority+0xd4>)
 80027fa:	1dfb      	adds	r3, r7, #7
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	b25b      	sxtb	r3, r3
 8002800:	089b      	lsrs	r3, r3, #2
 8002802:	430a      	orrs	r2, r1
 8002804:	33c0      	adds	r3, #192	; 0xc0
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800280a:	e031      	b.n	8002870 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800280c:	4a1b      	ldr	r2, [pc, #108]	; (800287c <__NVIC_SetPriority+0xd8>)
 800280e:	1dfb      	adds	r3, r7, #7
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	0019      	movs	r1, r3
 8002814:	230f      	movs	r3, #15
 8002816:	400b      	ands	r3, r1
 8002818:	3b08      	subs	r3, #8
 800281a:	089b      	lsrs	r3, r3, #2
 800281c:	3306      	adds	r3, #6
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	18d3      	adds	r3, r2, r3
 8002822:	3304      	adds	r3, #4
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	1dfa      	adds	r2, r7, #7
 8002828:	7812      	ldrb	r2, [r2, #0]
 800282a:	0011      	movs	r1, r2
 800282c:	2203      	movs	r2, #3
 800282e:	400a      	ands	r2, r1
 8002830:	00d2      	lsls	r2, r2, #3
 8002832:	21ff      	movs	r1, #255	; 0xff
 8002834:	4091      	lsls	r1, r2
 8002836:	000a      	movs	r2, r1
 8002838:	43d2      	mvns	r2, r2
 800283a:	401a      	ands	r2, r3
 800283c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	019b      	lsls	r3, r3, #6
 8002842:	22ff      	movs	r2, #255	; 0xff
 8002844:	401a      	ands	r2, r3
 8002846:	1dfb      	adds	r3, r7, #7
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	0018      	movs	r0, r3
 800284c:	2303      	movs	r3, #3
 800284e:	4003      	ands	r3, r0
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002854:	4809      	ldr	r0, [pc, #36]	; (800287c <__NVIC_SetPriority+0xd8>)
 8002856:	1dfb      	adds	r3, r7, #7
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	001c      	movs	r4, r3
 800285c:	230f      	movs	r3, #15
 800285e:	4023      	ands	r3, r4
 8002860:	3b08      	subs	r3, #8
 8002862:	089b      	lsrs	r3, r3, #2
 8002864:	430a      	orrs	r2, r1
 8002866:	3306      	adds	r3, #6
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	18c3      	adds	r3, r0, r3
 800286c:	3304      	adds	r3, #4
 800286e:	601a      	str	r2, [r3, #0]
}
 8002870:	46c0      	nop			; (mov r8, r8)
 8002872:	46bd      	mov	sp, r7
 8002874:	b003      	add	sp, #12
 8002876:	bd90      	pop	{r4, r7, pc}
 8002878:	e000e100 	.word	0xe000e100
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	1e5a      	subs	r2, r3, #1
 800288c:	2380      	movs	r3, #128	; 0x80
 800288e:	045b      	lsls	r3, r3, #17
 8002890:	429a      	cmp	r2, r3
 8002892:	d301      	bcc.n	8002898 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002894:	2301      	movs	r3, #1
 8002896:	e010      	b.n	80028ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002898:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <SysTick_Config+0x44>)
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	3a01      	subs	r2, #1
 800289e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028a0:	2301      	movs	r3, #1
 80028a2:	425b      	negs	r3, r3
 80028a4:	2103      	movs	r1, #3
 80028a6:	0018      	movs	r0, r3
 80028a8:	f7ff ff7c 	bl	80027a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028ac:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <SysTick_Config+0x44>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028b2:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <SysTick_Config+0x44>)
 80028b4:	2207      	movs	r2, #7
 80028b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	0018      	movs	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	b002      	add	sp, #8
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	e000e010 	.word	0xe000e010

080028c8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	210f      	movs	r1, #15
 80028d4:	187b      	adds	r3, r7, r1
 80028d6:	1c02      	adds	r2, r0, #0
 80028d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	187b      	adds	r3, r7, r1
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	b25b      	sxtb	r3, r3
 80028e2:	0011      	movs	r1, r2
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7ff ff5d 	bl	80027a4 <__NVIC_SetPriority>
}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b004      	add	sp, #16
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	0002      	movs	r2, r0
 80028fa:	1dfb      	adds	r3, r7, #7
 80028fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028fe:	1dfb      	adds	r3, r7, #7
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	b25b      	sxtb	r3, r3
 8002904:	0018      	movs	r0, r3
 8002906:	f7ff ff33 	bl	8002770 <__NVIC_EnableIRQ>
}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	46bd      	mov	sp, r7
 800290e:	b002      	add	sp, #8
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	0018      	movs	r0, r3
 800291e:	f7ff ffaf 	bl	8002880 <SysTick_Config>
 8002922:	0003      	movs	r3, r0
}
 8002924:	0018      	movs	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	b002      	add	sp, #8
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002942:	e149      	b.n	8002bd8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2101      	movs	r1, #1
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4091      	lsls	r1, r2
 800294e:	000a      	movs	r2, r1
 8002950:	4013      	ands	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d100      	bne.n	800295c <HAL_GPIO_Init+0x30>
 800295a:	e13a      	b.n	8002bd2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2203      	movs	r2, #3
 8002962:	4013      	ands	r3, r2
 8002964:	2b01      	cmp	r3, #1
 8002966:	d005      	beq.n	8002974 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2203      	movs	r2, #3
 800296e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002970:	2b02      	cmp	r3, #2
 8002972:	d130      	bne.n	80029d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	2203      	movs	r2, #3
 8002980:	409a      	lsls	r2, r3
 8002982:	0013      	movs	r3, r2
 8002984:	43da      	mvns	r2, r3
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	409a      	lsls	r2, r3
 8002996:	0013      	movs	r3, r2
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029aa:	2201      	movs	r2, #1
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	409a      	lsls	r2, r3
 80029b0:	0013      	movs	r3, r2
 80029b2:	43da      	mvns	r2, r3
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4013      	ands	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	091b      	lsrs	r3, r3, #4
 80029c0:	2201      	movs	r2, #1
 80029c2:	401a      	ands	r2, r3
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	409a      	lsls	r2, r3
 80029c8:	0013      	movs	r3, r2
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2203      	movs	r2, #3
 80029dc:	4013      	ands	r3, r2
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d017      	beq.n	8002a12 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	2203      	movs	r2, #3
 80029ee:	409a      	lsls	r2, r3
 80029f0:	0013      	movs	r3, r2
 80029f2:	43da      	mvns	r2, r3
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	409a      	lsls	r2, r3
 8002a04:	0013      	movs	r3, r2
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2203      	movs	r2, #3
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d123      	bne.n	8002a66 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	08da      	lsrs	r2, r3, #3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3208      	adds	r2, #8
 8002a26:	0092      	lsls	r2, r2, #2
 8002a28:	58d3      	ldr	r3, [r2, r3]
 8002a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	2207      	movs	r2, #7
 8002a30:	4013      	ands	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	220f      	movs	r2, #15
 8002a36:	409a      	lsls	r2, r3
 8002a38:	0013      	movs	r3, r2
 8002a3a:	43da      	mvns	r2, r3
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	691a      	ldr	r2, [r3, #16]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2107      	movs	r1, #7
 8002a4a:	400b      	ands	r3, r1
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	409a      	lsls	r2, r3
 8002a50:	0013      	movs	r3, r2
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	08da      	lsrs	r2, r3, #3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3208      	adds	r2, #8
 8002a60:	0092      	lsls	r2, r2, #2
 8002a62:	6939      	ldr	r1, [r7, #16]
 8002a64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	2203      	movs	r2, #3
 8002a72:	409a      	lsls	r2, r3
 8002a74:	0013      	movs	r3, r2
 8002a76:	43da      	mvns	r2, r3
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2203      	movs	r2, #3
 8002a84:	401a      	ands	r2, r3
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	409a      	lsls	r2, r3
 8002a8c:	0013      	movs	r3, r2
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	23c0      	movs	r3, #192	; 0xc0
 8002aa0:	029b      	lsls	r3, r3, #10
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d100      	bne.n	8002aa8 <HAL_GPIO_Init+0x17c>
 8002aa6:	e094      	b.n	8002bd2 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa8:	4b51      	ldr	r3, [pc, #324]	; (8002bf0 <HAL_GPIO_Init+0x2c4>)
 8002aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aac:	4b50      	ldr	r3, [pc, #320]	; (8002bf0 <HAL_GPIO_Init+0x2c4>)
 8002aae:	2101      	movs	r1, #1
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ab4:	4a4f      	ldr	r2, [pc, #316]	; (8002bf4 <HAL_GPIO_Init+0x2c8>)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	089b      	lsrs	r3, r3, #2
 8002aba:	3302      	adds	r3, #2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	589b      	ldr	r3, [r3, r2]
 8002ac0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	220f      	movs	r2, #15
 8002acc:	409a      	lsls	r2, r3
 8002ace:	0013      	movs	r3, r2
 8002ad0:	43da      	mvns	r2, r3
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	23a0      	movs	r3, #160	; 0xa0
 8002adc:	05db      	lsls	r3, r3, #23
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d013      	beq.n	8002b0a <HAL_GPIO_Init+0x1de>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a44      	ldr	r2, [pc, #272]	; (8002bf8 <HAL_GPIO_Init+0x2cc>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d00d      	beq.n	8002b06 <HAL_GPIO_Init+0x1da>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a43      	ldr	r2, [pc, #268]	; (8002bfc <HAL_GPIO_Init+0x2d0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d007      	beq.n	8002b02 <HAL_GPIO_Init+0x1d6>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a42      	ldr	r2, [pc, #264]	; (8002c00 <HAL_GPIO_Init+0x2d4>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d101      	bne.n	8002afe <HAL_GPIO_Init+0x1d2>
 8002afa:	2305      	movs	r3, #5
 8002afc:	e006      	b.n	8002b0c <HAL_GPIO_Init+0x1e0>
 8002afe:	2306      	movs	r3, #6
 8002b00:	e004      	b.n	8002b0c <HAL_GPIO_Init+0x1e0>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e002      	b.n	8002b0c <HAL_GPIO_Init+0x1e0>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <HAL_GPIO_Init+0x1e0>
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	2103      	movs	r1, #3
 8002b10:	400a      	ands	r2, r1
 8002b12:	0092      	lsls	r2, r2, #2
 8002b14:	4093      	lsls	r3, r2
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b1c:	4935      	ldr	r1, [pc, #212]	; (8002bf4 <HAL_GPIO_Init+0x2c8>)
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	089b      	lsrs	r3, r3, #2
 8002b22:	3302      	adds	r3, #2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b2a:	4b36      	ldr	r3, [pc, #216]	; (8002c04 <HAL_GPIO_Init+0x2d8>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	43da      	mvns	r2, r3
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	035b      	lsls	r3, r3, #13
 8002b42:	4013      	ands	r3, r2
 8002b44:	d003      	beq.n	8002b4e <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b4e:	4b2d      	ldr	r3, [pc, #180]	; (8002c04 <HAL_GPIO_Init+0x2d8>)
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002b54:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <HAL_GPIO_Init+0x2d8>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	43da      	mvns	r2, r3
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4013      	ands	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	2380      	movs	r3, #128	; 0x80
 8002b6a:	039b      	lsls	r3, r3, #14
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d003      	beq.n	8002b78 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b78:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <HAL_GPIO_Init+0x2d8>)
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002b7e:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <HAL_GPIO_Init+0x2d8>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	43da      	mvns	r2, r3
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	2380      	movs	r3, #128	; 0x80
 8002b94:	029b      	lsls	r3, r3, #10
 8002b96:	4013      	ands	r3, r2
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ba2:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <HAL_GPIO_Init+0x2d8>)
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ba8:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <HAL_GPIO_Init+0x2d8>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	43da      	mvns	r2, r3
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	2380      	movs	r3, #128	; 0x80
 8002bbe:	025b      	lsls	r3, r3, #9
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d003      	beq.n	8002bcc <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002bcc:	4b0d      	ldr	r3, [pc, #52]	; (8002c04 <HAL_GPIO_Init+0x2d8>)
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	40da      	lsrs	r2, r3
 8002be0:	1e13      	subs	r3, r2, #0
 8002be2:	d000      	beq.n	8002be6 <HAL_GPIO_Init+0x2ba>
 8002be4:	e6ae      	b.n	8002944 <HAL_GPIO_Init+0x18>
  }
}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	46c0      	nop			; (mov r8, r8)
 8002bea:	46bd      	mov	sp, r7
 8002bec:	b006      	add	sp, #24
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40010000 	.word	0x40010000
 8002bf8:	50000400 	.word	0x50000400
 8002bfc:	50000800 	.word	0x50000800
 8002c00:	50001c00 	.word	0x50001c00
 8002c04:	40010400 	.word	0x40010400

08002c08 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	000a      	movs	r2, r1
 8002c12:	1cbb      	adds	r3, r7, #2
 8002c14:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	1cba      	adds	r2, r7, #2
 8002c1c:	8812      	ldrh	r2, [r2, #0]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d004      	beq.n	8002c2c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002c22:	230f      	movs	r3, #15
 8002c24:	18fb      	adds	r3, r7, r3
 8002c26:	2201      	movs	r2, #1
 8002c28:	701a      	strb	r2, [r3, #0]
 8002c2a:	e003      	b.n	8002c34 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c2c:	230f      	movs	r3, #15
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	2200      	movs	r2, #0
 8002c32:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002c34:	230f      	movs	r3, #15
 8002c36:	18fb      	adds	r3, r7, r3
 8002c38:	781b      	ldrb	r3, [r3, #0]
}
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	b004      	add	sp, #16
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
 8002c4a:	0008      	movs	r0, r1
 8002c4c:	0011      	movs	r1, r2
 8002c4e:	1cbb      	adds	r3, r7, #2
 8002c50:	1c02      	adds	r2, r0, #0
 8002c52:	801a      	strh	r2, [r3, #0]
 8002c54:	1c7b      	adds	r3, r7, #1
 8002c56:	1c0a      	adds	r2, r1, #0
 8002c58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c5a:	1c7b      	adds	r3, r7, #1
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d004      	beq.n	8002c6c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c62:	1cbb      	adds	r3, r7, #2
 8002c64:	881a      	ldrh	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002c6a:	e003      	b.n	8002c74 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002c6c:	1cbb      	adds	r3, r7, #2
 8002c6e:	881a      	ldrh	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c74:	46c0      	nop			; (mov r8, r8)
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b002      	add	sp, #8
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	0002      	movs	r2, r0
 8002c84:	1dbb      	adds	r3, r7, #6
 8002c86:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c88:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	1dba      	adds	r2, r7, #6
 8002c8e:	8812      	ldrh	r2, [r2, #0]
 8002c90:	4013      	ands	r3, r2
 8002c92:	d008      	beq.n	8002ca6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c94:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002c96:	1dba      	adds	r2, r7, #6
 8002c98:	8812      	ldrh	r2, [r2, #0]
 8002c9a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c9c:	1dbb      	adds	r3, r7, #6
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f000 f807 	bl	8002cb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b002      	add	sp, #8
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	40010400 	.word	0x40010400

08002cb4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	0002      	movs	r2, r0
 8002cbc:	1dbb      	adds	r3, r7, #6
 8002cbe:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002cc0:	46c0      	nop			; (mov r8, r8)
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b002      	add	sp, #8
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e082      	b.n	8002de0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2241      	movs	r2, #65	; 0x41
 8002cde:	5c9b      	ldrb	r3, [r3, r2]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d107      	bne.n	8002cf6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2240      	movs	r2, #64	; 0x40
 8002cea:	2100      	movs	r1, #0
 8002cec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f7ff fa47 	bl	8002184 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2241      	movs	r2, #65	; 0x41
 8002cfa:	2124      	movs	r1, #36	; 0x24
 8002cfc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2101      	movs	r1, #1
 8002d0a:	438a      	bics	r2, r1
 8002d0c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4934      	ldr	r1, [pc, #208]	; (8002de8 <HAL_I2C_Init+0x120>)
 8002d18:	400a      	ands	r2, r1
 8002d1a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4931      	ldr	r1, [pc, #196]	; (8002dec <HAL_I2C_Init+0x124>)
 8002d28:	400a      	ands	r2, r1
 8002d2a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d108      	bne.n	8002d46 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2180      	movs	r1, #128	; 0x80
 8002d3e:	0209      	lsls	r1, r1, #8
 8002d40:	430a      	orrs	r2, r1
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	e007      	b.n	8002d56 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2184      	movs	r1, #132	; 0x84
 8002d50:	0209      	lsls	r1, r1, #8
 8002d52:	430a      	orrs	r2, r1
 8002d54:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d104      	bne.n	8002d68 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2280      	movs	r2, #128	; 0x80
 8002d64:	0112      	lsls	r2, r2, #4
 8002d66:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	491f      	ldr	r1, [pc, #124]	; (8002df0 <HAL_I2C_Init+0x128>)
 8002d74:	430a      	orrs	r2, r1
 8002d76:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	491a      	ldr	r1, [pc, #104]	; (8002dec <HAL_I2C_Init+0x124>)
 8002d84:	400a      	ands	r2, r1
 8002d86:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	431a      	orrs	r2, r3
 8002d92:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69d9      	ldr	r1, [r3, #28]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1a      	ldr	r2, [r3, #32]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2241      	movs	r2, #65	; 0x41
 8002dcc:	2120      	movs	r1, #32
 8002dce:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2242      	movs	r2, #66	; 0x42
 8002dda:	2100      	movs	r1, #0
 8002ddc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	0018      	movs	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b002      	add	sp, #8
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	f0ffffff 	.word	0xf0ffffff
 8002dec:	ffff7fff 	.word	0xffff7fff
 8002df0:	02008000 	.word	0x02008000

08002df4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002df4:	b590      	push	{r4, r7, lr}
 8002df6:	b089      	sub	sp, #36	; 0x24
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	0008      	movs	r0, r1
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	0019      	movs	r1, r3
 8002e02:	230a      	movs	r3, #10
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	1c02      	adds	r2, r0, #0
 8002e08:	801a      	strh	r2, [r3, #0]
 8002e0a:	2308      	movs	r3, #8
 8002e0c:	18fb      	adds	r3, r7, r3
 8002e0e:	1c0a      	adds	r2, r1, #0
 8002e10:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2241      	movs	r2, #65	; 0x41
 8002e16:	5c9b      	ldrb	r3, [r3, r2]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b20      	cmp	r3, #32
 8002e1c:	d000      	beq.n	8002e20 <HAL_I2C_Master_Transmit+0x2c>
 8002e1e:	e0e7      	b.n	8002ff0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2240      	movs	r2, #64	; 0x40
 8002e24:	5c9b      	ldrb	r3, [r3, r2]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_I2C_Master_Transmit+0x3a>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e0e1      	b.n	8002ff2 <HAL_I2C_Master_Transmit+0x1fe>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2240      	movs	r2, #64	; 0x40
 8002e32:	2101      	movs	r1, #1
 8002e34:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e36:	f7ff fc6d 	bl	8002714 <HAL_GetTick>
 8002e3a:	0003      	movs	r3, r0
 8002e3c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e3e:	2380      	movs	r3, #128	; 0x80
 8002e40:	0219      	lsls	r1, r3, #8
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	2319      	movs	r3, #25
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f000 fa04 	bl	8003258 <I2C_WaitOnFlagUntilTimeout>
 8002e50:	1e03      	subs	r3, r0, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0cc      	b.n	8002ff2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2241      	movs	r2, #65	; 0x41
 8002e5c:	2121      	movs	r1, #33	; 0x21
 8002e5e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2242      	movs	r2, #66	; 0x42
 8002e64:	2110      	movs	r1, #16
 8002e66:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2208      	movs	r2, #8
 8002e78:	18ba      	adds	r2, r7, r2
 8002e7a:	8812      	ldrh	r2, [r2, #0]
 8002e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2bff      	cmp	r3, #255	; 0xff
 8002e8c:	d911      	bls.n	8002eb2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	22ff      	movs	r2, #255	; 0xff
 8002e92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	2380      	movs	r3, #128	; 0x80
 8002e9c:	045c      	lsls	r4, r3, #17
 8002e9e:	230a      	movs	r3, #10
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	8819      	ldrh	r1, [r3, #0]
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	4b55      	ldr	r3, [pc, #340]	; (8002ffc <HAL_I2C_Master_Transmit+0x208>)
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	0023      	movs	r3, r4
 8002eac:	f000 fc2e 	bl	800370c <I2C_TransferConfig>
 8002eb0:	e075      	b.n	8002f9e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	049c      	lsls	r4, r3, #18
 8002ec6:	230a      	movs	r3, #10
 8002ec8:	18fb      	adds	r3, r7, r3
 8002eca:	8819      	ldrh	r1, [r3, #0]
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	4b4b      	ldr	r3, [pc, #300]	; (8002ffc <HAL_I2C_Master_Transmit+0x208>)
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	0023      	movs	r3, r4
 8002ed4:	f000 fc1a 	bl	800370c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002ed8:	e061      	b.n	8002f9e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f000 fa07 	bl	80032f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ee6:	1e03      	subs	r3, r0, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e081      	b.n	8002ff2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	781a      	ldrb	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d03a      	beq.n	8002f9e <HAL_I2C_Master_Transmit+0x1aa>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d136      	bne.n	8002f9e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	0013      	movs	r3, r2
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2180      	movs	r1, #128	; 0x80
 8002f3e:	f000 f98b 	bl	8003258 <I2C_WaitOnFlagUntilTimeout>
 8002f42:	1e03      	subs	r3, r0, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e053      	b.n	8002ff2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	2bff      	cmp	r3, #255	; 0xff
 8002f52:	d911      	bls.n	8002f78 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	22ff      	movs	r2, #255	; 0xff
 8002f58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	2380      	movs	r3, #128	; 0x80
 8002f62:	045c      	lsls	r4, r3, #17
 8002f64:	230a      	movs	r3, #10
 8002f66:	18fb      	adds	r3, r7, r3
 8002f68:	8819      	ldrh	r1, [r3, #0]
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	0023      	movs	r3, r4
 8002f72:	f000 fbcb 	bl	800370c <I2C_TransferConfig>
 8002f76:	e012      	b.n	8002f9e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	049c      	lsls	r4, r3, #18
 8002f8c:	230a      	movs	r3, #10
 8002f8e:	18fb      	adds	r3, r7, r3
 8002f90:	8819      	ldrh	r1, [r3, #0]
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	2300      	movs	r3, #0
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	0023      	movs	r3, r4
 8002f9a:	f000 fbb7 	bl	800370c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d198      	bne.n	8002eda <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f000 f9e6 	bl	8003380 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fb4:	1e03      	subs	r3, r0, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e01a      	b.n	8002ff2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	490c      	ldr	r1, [pc, #48]	; (8003000 <HAL_I2C_Master_Transmit+0x20c>)
 8002fd0:	400a      	ands	r2, r1
 8002fd2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2241      	movs	r2, #65	; 0x41
 8002fd8:	2120      	movs	r1, #32
 8002fda:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2242      	movs	r2, #66	; 0x42
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2240      	movs	r2, #64	; 0x40
 8002fe8:	2100      	movs	r1, #0
 8002fea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	e000      	b.n	8002ff2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002ff0:	2302      	movs	r3, #2
  }
}
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	b007      	add	sp, #28
 8002ff8:	bd90      	pop	{r4, r7, pc}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	80002000 	.word	0x80002000
 8003000:	fe00e800 	.word	0xfe00e800

08003004 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003004:	b590      	push	{r4, r7, lr}
 8003006:	b089      	sub	sp, #36	; 0x24
 8003008:	af02      	add	r7, sp, #8
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	0008      	movs	r0, r1
 800300e:	607a      	str	r2, [r7, #4]
 8003010:	0019      	movs	r1, r3
 8003012:	230a      	movs	r3, #10
 8003014:	18fb      	adds	r3, r7, r3
 8003016:	1c02      	adds	r2, r0, #0
 8003018:	801a      	strh	r2, [r3, #0]
 800301a:	2308      	movs	r3, #8
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	1c0a      	adds	r2, r1, #0
 8003020:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2241      	movs	r2, #65	; 0x41
 8003026:	5c9b      	ldrb	r3, [r3, r2]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b20      	cmp	r3, #32
 800302c:	d000      	beq.n	8003030 <HAL_I2C_Master_Receive+0x2c>
 800302e:	e0e8      	b.n	8003202 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2240      	movs	r2, #64	; 0x40
 8003034:	5c9b      	ldrb	r3, [r3, r2]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_I2C_Master_Receive+0x3a>
 800303a:	2302      	movs	r3, #2
 800303c:	e0e2      	b.n	8003204 <HAL_I2C_Master_Receive+0x200>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2240      	movs	r2, #64	; 0x40
 8003042:	2101      	movs	r1, #1
 8003044:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003046:	f7ff fb65 	bl	8002714 <HAL_GetTick>
 800304a:	0003      	movs	r3, r0
 800304c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	0219      	lsls	r1, r3, #8
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	2319      	movs	r3, #25
 800305a:	2201      	movs	r2, #1
 800305c:	f000 f8fc 	bl	8003258 <I2C_WaitOnFlagUntilTimeout>
 8003060:	1e03      	subs	r3, r0, #0
 8003062:	d001      	beq.n	8003068 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0cd      	b.n	8003204 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2241      	movs	r2, #65	; 0x41
 800306c:	2122      	movs	r1, #34	; 0x22
 800306e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2242      	movs	r2, #66	; 0x42
 8003074:	2110      	movs	r1, #16
 8003076:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2208      	movs	r2, #8
 8003088:	18ba      	adds	r2, r7, r2
 800308a:	8812      	ldrh	r2, [r2, #0]
 800308c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003098:	b29b      	uxth	r3, r3
 800309a:	2bff      	cmp	r3, #255	; 0xff
 800309c:	d911      	bls.n	80030c2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	22ff      	movs	r2, #255	; 0xff
 80030a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	2380      	movs	r3, #128	; 0x80
 80030ac:	045c      	lsls	r4, r3, #17
 80030ae:	230a      	movs	r3, #10
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	8819      	ldrh	r1, [r3, #0]
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	4b55      	ldr	r3, [pc, #340]	; (800320c <HAL_I2C_Master_Receive+0x208>)
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	0023      	movs	r3, r4
 80030bc:	f000 fb26 	bl	800370c <I2C_TransferConfig>
 80030c0:	e076      	b.n	80031b0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	2380      	movs	r3, #128	; 0x80
 80030d4:	049c      	lsls	r4, r3, #18
 80030d6:	230a      	movs	r3, #10
 80030d8:	18fb      	adds	r3, r7, r3
 80030da:	8819      	ldrh	r1, [r3, #0]
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	4b4b      	ldr	r3, [pc, #300]	; (800320c <HAL_I2C_Master_Receive+0x208>)
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	0023      	movs	r3, r4
 80030e4:	f000 fb12 	bl	800370c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80030e8:	e062      	b.n	80031b0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	0018      	movs	r0, r3
 80030f2:	f000 f989 	bl	8003408 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030f6:	1e03      	subs	r3, r0, #0
 80030f8:	d001      	beq.n	80030fe <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e082      	b.n	8003204 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003134:	b29b      	uxth	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d03a      	beq.n	80031b0 <HAL_I2C_Master_Receive+0x1ac>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313e:	2b00      	cmp	r3, #0
 8003140:	d136      	bne.n	80031b0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003142:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	0013      	movs	r3, r2
 800314c:	2200      	movs	r2, #0
 800314e:	2180      	movs	r1, #128	; 0x80
 8003150:	f000 f882 	bl	8003258 <I2C_WaitOnFlagUntilTimeout>
 8003154:	1e03      	subs	r3, r0, #0
 8003156:	d001      	beq.n	800315c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e053      	b.n	8003204 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	2bff      	cmp	r3, #255	; 0xff
 8003164:	d911      	bls.n	800318a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	22ff      	movs	r2, #255	; 0xff
 800316a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003170:	b2da      	uxtb	r2, r3
 8003172:	2380      	movs	r3, #128	; 0x80
 8003174:	045c      	lsls	r4, r3, #17
 8003176:	230a      	movs	r3, #10
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	8819      	ldrh	r1, [r3, #0]
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	2300      	movs	r3, #0
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	0023      	movs	r3, r4
 8003184:	f000 fac2 	bl	800370c <I2C_TransferConfig>
 8003188:	e012      	b.n	80031b0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003198:	b2da      	uxtb	r2, r3
 800319a:	2380      	movs	r3, #128	; 0x80
 800319c:	049c      	lsls	r4, r3, #18
 800319e:	230a      	movs	r3, #10
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	8819      	ldrh	r1, [r3, #0]
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	2300      	movs	r3, #0
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	0023      	movs	r3, r4
 80031ac:	f000 faae 	bl	800370c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d197      	bne.n	80030ea <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	0018      	movs	r0, r3
 80031c2:	f000 f8dd 	bl	8003380 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031c6:	1e03      	subs	r3, r0, #0
 80031c8:	d001      	beq.n	80031ce <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e01a      	b.n	8003204 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2220      	movs	r2, #32
 80031d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	490b      	ldr	r1, [pc, #44]	; (8003210 <HAL_I2C_Master_Receive+0x20c>)
 80031e2:	400a      	ands	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2241      	movs	r2, #65	; 0x41
 80031ea:	2120      	movs	r1, #32
 80031ec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2242      	movs	r2, #66	; 0x42
 80031f2:	2100      	movs	r1, #0
 80031f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2240      	movs	r2, #64	; 0x40
 80031fa:	2100      	movs	r1, #0
 80031fc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	e000      	b.n	8003204 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003202:	2302      	movs	r3, #2
  }
}
 8003204:	0018      	movs	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	b007      	add	sp, #28
 800320a:	bd90      	pop	{r4, r7, pc}
 800320c:	80002400 	.word	0x80002400
 8003210:	fe00e800 	.word	0xfe00e800

08003214 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	2202      	movs	r2, #2
 8003224:	4013      	ands	r3, r2
 8003226:	2b02      	cmp	r3, #2
 8003228:	d103      	bne.n	8003232 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2200      	movs	r2, #0
 8003230:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	2201      	movs	r2, #1
 800323a:	4013      	ands	r3, r2
 800323c:	2b01      	cmp	r3, #1
 800323e:	d007      	beq.n	8003250 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699a      	ldr	r2, [r3, #24]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2101      	movs	r1, #1
 800324c:	430a      	orrs	r2, r1
 800324e:	619a      	str	r2, [r3, #24]
  }
}
 8003250:	46c0      	nop			; (mov r8, r8)
 8003252:	46bd      	mov	sp, r7
 8003254:	b002      	add	sp, #8
 8003256:	bd80      	pop	{r7, pc}

08003258 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	1dfb      	adds	r3, r7, #7
 8003266:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003268:	e030      	b.n	80032cc <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	3301      	adds	r3, #1
 800326e:	d02d      	beq.n	80032cc <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003270:	f7ff fa50 	bl	8002714 <HAL_GetTick>
 8003274:	0002      	movs	r2, r0
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d302      	bcc.n	8003286 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d122      	bne.n	80032cc <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	4013      	ands	r3, r2
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	425a      	negs	r2, r3
 8003296:	4153      	adcs	r3, r2
 8003298:	b2db      	uxtb	r3, r3
 800329a:	001a      	movs	r2, r3
 800329c:	1dfb      	adds	r3, r7, #7
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d113      	bne.n	80032cc <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a8:	2220      	movs	r2, #32
 80032aa:	431a      	orrs	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2241      	movs	r2, #65	; 0x41
 80032b4:	2120      	movs	r1, #32
 80032b6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2242      	movs	r2, #66	; 0x42
 80032bc:	2100      	movs	r1, #0
 80032be:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2240      	movs	r2, #64	; 0x40
 80032c4:	2100      	movs	r1, #0
 80032c6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e00f      	b.n	80032ec <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	4013      	ands	r3, r2
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	425a      	negs	r2, r3
 80032dc:	4153      	adcs	r3, r2
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	001a      	movs	r2, r3
 80032e2:	1dfb      	adds	r3, r7, #7
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d0bf      	beq.n	800326a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	0018      	movs	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b004      	add	sp, #16
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003300:	e032      	b.n	8003368 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	68b9      	ldr	r1, [r7, #8]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	0018      	movs	r0, r3
 800330a:	f000 f8ff 	bl	800350c <I2C_IsErrorOccurred>
 800330e:	1e03      	subs	r3, r0, #0
 8003310:	d001      	beq.n	8003316 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e030      	b.n	8003378 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	3301      	adds	r3, #1
 800331a:	d025      	beq.n	8003368 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800331c:	f7ff f9fa 	bl	8002714 <HAL_GetTick>
 8003320:	0002      	movs	r2, r0
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	429a      	cmp	r2, r3
 800332a:	d302      	bcc.n	8003332 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d11a      	bne.n	8003368 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	2202      	movs	r2, #2
 800333a:	4013      	ands	r3, r2
 800333c:	2b02      	cmp	r3, #2
 800333e:	d013      	beq.n	8003368 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003344:	2220      	movs	r2, #32
 8003346:	431a      	orrs	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2241      	movs	r2, #65	; 0x41
 8003350:	2120      	movs	r1, #32
 8003352:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2242      	movs	r2, #66	; 0x42
 8003358:	2100      	movs	r1, #0
 800335a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2240      	movs	r2, #64	; 0x40
 8003360:	2100      	movs	r1, #0
 8003362:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e007      	b.n	8003378 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2202      	movs	r2, #2
 8003370:	4013      	ands	r3, r2
 8003372:	2b02      	cmp	r3, #2
 8003374:	d1c5      	bne.n	8003302 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	0018      	movs	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	b004      	add	sp, #16
 800337e:	bd80      	pop	{r7, pc}

08003380 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800338c:	e02f      	b.n	80033ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	68b9      	ldr	r1, [r7, #8]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	0018      	movs	r0, r3
 8003396:	f000 f8b9 	bl	800350c <I2C_IsErrorOccurred>
 800339a:	1e03      	subs	r3, r0, #0
 800339c:	d001      	beq.n	80033a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e02d      	b.n	80033fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a2:	f7ff f9b7 	bl	8002714 <HAL_GetTick>
 80033a6:	0002      	movs	r2, r0
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d302      	bcc.n	80033b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d11a      	bne.n	80033ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	2220      	movs	r2, #32
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b20      	cmp	r3, #32
 80033c4:	d013      	beq.n	80033ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ca:	2220      	movs	r2, #32
 80033cc:	431a      	orrs	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2241      	movs	r2, #65	; 0x41
 80033d6:	2120      	movs	r1, #32
 80033d8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2242      	movs	r2, #66	; 0x42
 80033de:	2100      	movs	r1, #0
 80033e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2240      	movs	r2, #64	; 0x40
 80033e6:	2100      	movs	r1, #0
 80033e8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e007      	b.n	80033fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	2220      	movs	r2, #32
 80033f6:	4013      	ands	r3, r2
 80033f8:	2b20      	cmp	r3, #32
 80033fa:	d1c8      	bne.n	800338e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	0018      	movs	r0, r3
 8003400:	46bd      	mov	sp, r7
 8003402:	b004      	add	sp, #16
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003414:	e06b      	b.n	80034ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	0018      	movs	r0, r3
 800341e:	f000 f875 	bl	800350c <I2C_IsErrorOccurred>
 8003422:	1e03      	subs	r3, r0, #0
 8003424:	d001      	beq.n	800342a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e069      	b.n	80034fe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	2220      	movs	r2, #32
 8003432:	4013      	ands	r3, r2
 8003434:	2b20      	cmp	r3, #32
 8003436:	d138      	bne.n	80034aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	2204      	movs	r2, #4
 8003440:	4013      	ands	r3, r2
 8003442:	2b04      	cmp	r3, #4
 8003444:	d105      	bne.n	8003452 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	e055      	b.n	80034fe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	2210      	movs	r2, #16
 800345a:	4013      	ands	r3, r2
 800345c:	2b10      	cmp	r3, #16
 800345e:	d107      	bne.n	8003470 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2210      	movs	r2, #16
 8003466:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2204      	movs	r2, #4
 800346c:	645a      	str	r2, [r3, #68]	; 0x44
 800346e:	e002      	b.n	8003476 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2220      	movs	r2, #32
 800347c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	491f      	ldr	r1, [pc, #124]	; (8003508 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800348a:	400a      	ands	r2, r1
 800348c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2241      	movs	r2, #65	; 0x41
 8003492:	2120      	movs	r1, #32
 8003494:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2242      	movs	r2, #66	; 0x42
 800349a:	2100      	movs	r1, #0
 800349c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2240      	movs	r2, #64	; 0x40
 80034a2:	2100      	movs	r1, #0
 80034a4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e029      	b.n	80034fe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034aa:	f7ff f933 	bl	8002714 <HAL_GetTick>
 80034ae:	0002      	movs	r2, r0
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d302      	bcc.n	80034c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d116      	bne.n	80034ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	2204      	movs	r2, #4
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d00f      	beq.n	80034ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	2220      	movs	r2, #32
 80034d4:	431a      	orrs	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2241      	movs	r2, #65	; 0x41
 80034de:	2120      	movs	r1, #32
 80034e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2240      	movs	r2, #64	; 0x40
 80034e6:	2100      	movs	r1, #0
 80034e8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e007      	b.n	80034fe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	2204      	movs	r2, #4
 80034f6:	4013      	ands	r3, r2
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d18c      	bne.n	8003416 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	0018      	movs	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	b004      	add	sp, #16
 8003504:	bd80      	pop	{r7, pc}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	fe00e800 	.word	0xfe00e800

0800350c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800350c:	b590      	push	{r4, r7, lr}
 800350e:	b08b      	sub	sp, #44	; 0x2c
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003518:	2327      	movs	r3, #39	; 0x27
 800351a:	18fb      	adds	r3, r7, r3
 800351c:	2200      	movs	r2, #0
 800351e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	2210      	movs	r2, #16
 8003534:	4013      	ands	r3, r2
 8003536:	d100      	bne.n	800353a <I2C_IsErrorOccurred+0x2e>
 8003538:	e082      	b.n	8003640 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2210      	movs	r2, #16
 8003540:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003542:	e060      	b.n	8003606 <I2C_IsErrorOccurred+0xfa>
 8003544:	2427      	movs	r4, #39	; 0x27
 8003546:	193b      	adds	r3, r7, r4
 8003548:	193a      	adds	r2, r7, r4
 800354a:	7812      	ldrb	r2, [r2, #0]
 800354c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	3301      	adds	r3, #1
 8003552:	d058      	beq.n	8003606 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003554:	f7ff f8de 	bl	8002714 <HAL_GetTick>
 8003558:	0002      	movs	r2, r0
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	429a      	cmp	r2, r3
 8003562:	d306      	bcc.n	8003572 <I2C_IsErrorOccurred+0x66>
 8003564:	193b      	adds	r3, r7, r4
 8003566:	193a      	adds	r2, r7, r4
 8003568:	7812      	ldrb	r2, [r2, #0]
 800356a:	701a      	strb	r2, [r3, #0]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d149      	bne.n	8003606 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	2380      	movs	r3, #128	; 0x80
 800357a:	01db      	lsls	r3, r3, #7
 800357c:	4013      	ands	r3, r2
 800357e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003580:	2013      	movs	r0, #19
 8003582:	183b      	adds	r3, r7, r0
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	2142      	movs	r1, #66	; 0x42
 8003588:	5c52      	ldrb	r2, [r2, r1]
 800358a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699a      	ldr	r2, [r3, #24]
 8003592:	2380      	movs	r3, #128	; 0x80
 8003594:	021b      	lsls	r3, r3, #8
 8003596:	401a      	ands	r2, r3
 8003598:	2380      	movs	r3, #128	; 0x80
 800359a:	021b      	lsls	r3, r3, #8
 800359c:	429a      	cmp	r2, r3
 800359e:	d126      	bne.n	80035ee <I2C_IsErrorOccurred+0xe2>
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	01db      	lsls	r3, r3, #7
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d021      	beq.n	80035ee <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80035aa:	183b      	adds	r3, r7, r0
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b20      	cmp	r3, #32
 80035b0:	d01d      	beq.n	80035ee <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2180      	movs	r1, #128	; 0x80
 80035be:	01c9      	lsls	r1, r1, #7
 80035c0:	430a      	orrs	r2, r1
 80035c2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80035c4:	f7ff f8a6 	bl	8002714 <HAL_GetTick>
 80035c8:	0003      	movs	r3, r0
 80035ca:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035cc:	e00f      	b.n	80035ee <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80035ce:	f7ff f8a1 	bl	8002714 <HAL_GetTick>
 80035d2:	0002      	movs	r2, r0
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b19      	cmp	r3, #25
 80035da:	d908      	bls.n	80035ee <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	2220      	movs	r2, #32
 80035e0:	4313      	orrs	r3, r2
 80035e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80035e4:	2327      	movs	r3, #39	; 0x27
 80035e6:	18fb      	adds	r3, r7, r3
 80035e8:	2201      	movs	r2, #1
 80035ea:	701a      	strb	r2, [r3, #0]

              break;
 80035ec:	e00b      	b.n	8003606 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	2220      	movs	r2, #32
 80035f6:	4013      	ands	r3, r2
 80035f8:	2127      	movs	r1, #39	; 0x27
 80035fa:	187a      	adds	r2, r7, r1
 80035fc:	1879      	adds	r1, r7, r1
 80035fe:	7809      	ldrb	r1, [r1, #0]
 8003600:	7011      	strb	r1, [r2, #0]
 8003602:	2b20      	cmp	r3, #32
 8003604:	d1e3      	bne.n	80035ce <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	2220      	movs	r2, #32
 800360e:	4013      	ands	r3, r2
 8003610:	2b20      	cmp	r3, #32
 8003612:	d004      	beq.n	800361e <I2C_IsErrorOccurred+0x112>
 8003614:	2327      	movs	r3, #39	; 0x27
 8003616:	18fb      	adds	r3, r7, r3
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d092      	beq.n	8003544 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800361e:	2327      	movs	r3, #39	; 0x27
 8003620:	18fb      	adds	r3, r7, r3
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d103      	bne.n	8003630 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2220      	movs	r2, #32
 800362e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	2204      	movs	r2, #4
 8003634:	4313      	orrs	r3, r2
 8003636:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003638:	2327      	movs	r3, #39	; 0x27
 800363a:	18fb      	adds	r3, r7, r3
 800363c:	2201      	movs	r2, #1
 800363e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	2380      	movs	r3, #128	; 0x80
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	4013      	ands	r3, r2
 8003650:	d00c      	beq.n	800366c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	2201      	movs	r2, #1
 8003656:	4313      	orrs	r3, r2
 8003658:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2280      	movs	r2, #128	; 0x80
 8003660:	0052      	lsls	r2, r2, #1
 8003662:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003664:	2327      	movs	r3, #39	; 0x27
 8003666:	18fb      	adds	r3, r7, r3
 8003668:	2201      	movs	r2, #1
 800366a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	2380      	movs	r3, #128	; 0x80
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	4013      	ands	r3, r2
 8003674:	d00c      	beq.n	8003690 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	2208      	movs	r2, #8
 800367a:	4313      	orrs	r3, r2
 800367c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2280      	movs	r2, #128	; 0x80
 8003684:	00d2      	lsls	r2, r2, #3
 8003686:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003688:	2327      	movs	r3, #39	; 0x27
 800368a:	18fb      	adds	r3, r7, r3
 800368c:	2201      	movs	r2, #1
 800368e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	2380      	movs	r3, #128	; 0x80
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4013      	ands	r3, r2
 8003698:	d00c      	beq.n	80036b4 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	2202      	movs	r2, #2
 800369e:	4313      	orrs	r3, r2
 80036a0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2280      	movs	r2, #128	; 0x80
 80036a8:	0092      	lsls	r2, r2, #2
 80036aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036ac:	2327      	movs	r3, #39	; 0x27
 80036ae:	18fb      	adds	r3, r7, r3
 80036b0:	2201      	movs	r2, #1
 80036b2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80036b4:	2327      	movs	r3, #39	; 0x27
 80036b6:	18fb      	adds	r3, r7, r3
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d01d      	beq.n	80036fa <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	0018      	movs	r0, r3
 80036c2:	f7ff fda7 	bl	8003214 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	490d      	ldr	r1, [pc, #52]	; (8003708 <I2C_IsErrorOccurred+0x1fc>)
 80036d2:	400a      	ands	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	431a      	orrs	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2241      	movs	r2, #65	; 0x41
 80036e6:	2120      	movs	r1, #32
 80036e8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2242      	movs	r2, #66	; 0x42
 80036ee:	2100      	movs	r1, #0
 80036f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2240      	movs	r2, #64	; 0x40
 80036f6:	2100      	movs	r1, #0
 80036f8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80036fa:	2327      	movs	r3, #39	; 0x27
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	781b      	ldrb	r3, [r3, #0]
}
 8003700:	0018      	movs	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	b00b      	add	sp, #44	; 0x2c
 8003706:	bd90      	pop	{r4, r7, pc}
 8003708:	fe00e800 	.word	0xfe00e800

0800370c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800370c:	b590      	push	{r4, r7, lr}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	0008      	movs	r0, r1
 8003716:	0011      	movs	r1, r2
 8003718:	607b      	str	r3, [r7, #4]
 800371a:	240a      	movs	r4, #10
 800371c:	193b      	adds	r3, r7, r4
 800371e:	1c02      	adds	r2, r0, #0
 8003720:	801a      	strh	r2, [r3, #0]
 8003722:	2009      	movs	r0, #9
 8003724:	183b      	adds	r3, r7, r0
 8003726:	1c0a      	adds	r2, r1, #0
 8003728:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800372a:	193b      	adds	r3, r7, r4
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	059b      	lsls	r3, r3, #22
 8003730:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003732:	183b      	adds	r3, r7, r0
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	0419      	lsls	r1, r3, #16
 8003738:	23ff      	movs	r3, #255	; 0xff
 800373a:	041b      	lsls	r3, r3, #16
 800373c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800373e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003746:	4313      	orrs	r3, r2
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	085b      	lsrs	r3, r3, #1
 800374c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003756:	0d51      	lsrs	r1, r2, #21
 8003758:	2280      	movs	r2, #128	; 0x80
 800375a:	00d2      	lsls	r2, r2, #3
 800375c:	400a      	ands	r2, r1
 800375e:	4907      	ldr	r1, [pc, #28]	; (800377c <I2C_TransferConfig+0x70>)
 8003760:	430a      	orrs	r2, r1
 8003762:	43d2      	mvns	r2, r2
 8003764:	401a      	ands	r2, r3
 8003766:	0011      	movs	r1, r2
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	430a      	orrs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	46bd      	mov	sp, r7
 8003776:	b007      	add	sp, #28
 8003778:	bd90      	pop	{r4, r7, pc}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	03ff63ff 	.word	0x03ff63ff

08003780 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2241      	movs	r2, #65	; 0x41
 800378e:	5c9b      	ldrb	r3, [r3, r2]
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b20      	cmp	r3, #32
 8003794:	d138      	bne.n	8003808 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2240      	movs	r2, #64	; 0x40
 800379a:	5c9b      	ldrb	r3, [r3, r2]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e032      	b.n	800380a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2240      	movs	r2, #64	; 0x40
 80037a8:	2101      	movs	r1, #1
 80037aa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2241      	movs	r2, #65	; 0x41
 80037b0:	2124      	movs	r1, #36	; 0x24
 80037b2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2101      	movs	r1, #1
 80037c0:	438a      	bics	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4911      	ldr	r1, [pc, #68]	; (8003814 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80037d0:	400a      	ands	r2, r1
 80037d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6819      	ldr	r1, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2101      	movs	r1, #1
 80037f0:	430a      	orrs	r2, r1
 80037f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2241      	movs	r2, #65	; 0x41
 80037f8:	2120      	movs	r1, #32
 80037fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2240      	movs	r2, #64	; 0x40
 8003800:	2100      	movs	r1, #0
 8003802:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	e000      	b.n	800380a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003808:	2302      	movs	r3, #2
  }
}
 800380a:	0018      	movs	r0, r3
 800380c:	46bd      	mov	sp, r7
 800380e:	b002      	add	sp, #8
 8003810:	bd80      	pop	{r7, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	ffffefff 	.word	0xffffefff

08003818 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2241      	movs	r2, #65	; 0x41
 8003826:	5c9b      	ldrb	r3, [r3, r2]
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b20      	cmp	r3, #32
 800382c:	d139      	bne.n	80038a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2240      	movs	r2, #64	; 0x40
 8003832:	5c9b      	ldrb	r3, [r3, r2]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003838:	2302      	movs	r3, #2
 800383a:	e033      	b.n	80038a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2240      	movs	r2, #64	; 0x40
 8003840:	2101      	movs	r1, #1
 8003842:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2241      	movs	r2, #65	; 0x41
 8003848:	2124      	movs	r1, #36	; 0x24
 800384a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2101      	movs	r1, #1
 8003858:	438a      	bics	r2, r1
 800385a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4a11      	ldr	r2, [pc, #68]	; (80038ac <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003868:	4013      	ands	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	021b      	lsls	r3, r3, #8
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2101      	movs	r1, #1
 800388a:	430a      	orrs	r2, r1
 800388c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2241      	movs	r2, #65	; 0x41
 8003892:	2120      	movs	r1, #32
 8003894:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2240      	movs	r2, #64	; 0x40
 800389a:	2100      	movs	r1, #0
 800389c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	e000      	b.n	80038a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038a2:	2302      	movs	r3, #2
  }
}
 80038a4:	0018      	movs	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	b004      	add	sp, #16
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	fffff0ff 	.word	0xfffff0ff

080038b0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80038b4:	4b04      	ldr	r3, [pc, #16]	; (80038c8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4b03      	ldr	r3, [pc, #12]	; (80038c8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80038ba:	2180      	movs	r1, #128	; 0x80
 80038bc:	0049      	lsls	r1, r1, #1
 80038be:	430a      	orrs	r2, r1
 80038c0:	601a      	str	r2, [r3, #0]
}
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40007000 	.word	0x40007000

080038cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038cc:	b5b0      	push	{r4, r5, r7, lr}
 80038ce:	b08a      	sub	sp, #40	; 0x28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d102      	bne.n	80038e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	f000 fb6c 	bl	8003fb8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038e0:	4bc8      	ldr	r3, [pc, #800]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	220c      	movs	r2, #12
 80038e6:	4013      	ands	r3, r2
 80038e8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038ea:	4bc6      	ldr	r3, [pc, #792]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	2380      	movs	r3, #128	; 0x80
 80038f0:	025b      	lsls	r3, r3, #9
 80038f2:	4013      	ands	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2201      	movs	r2, #1
 80038fc:	4013      	ands	r3, r2
 80038fe:	d100      	bne.n	8003902 <HAL_RCC_OscConfig+0x36>
 8003900:	e07d      	b.n	80039fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	2b08      	cmp	r3, #8
 8003906:	d007      	beq.n	8003918 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	2b0c      	cmp	r3, #12
 800390c:	d112      	bne.n	8003934 <HAL_RCC_OscConfig+0x68>
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	2380      	movs	r3, #128	; 0x80
 8003912:	025b      	lsls	r3, r3, #9
 8003914:	429a      	cmp	r2, r3
 8003916:	d10d      	bne.n	8003934 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003918:	4bba      	ldr	r3, [pc, #744]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	2380      	movs	r3, #128	; 0x80
 800391e:	029b      	lsls	r3, r3, #10
 8003920:	4013      	ands	r3, r2
 8003922:	d100      	bne.n	8003926 <HAL_RCC_OscConfig+0x5a>
 8003924:	e06a      	b.n	80039fc <HAL_RCC_OscConfig+0x130>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d166      	bne.n	80039fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	f000 fb42 	bl	8003fb8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	2380      	movs	r3, #128	; 0x80
 800393a:	025b      	lsls	r3, r3, #9
 800393c:	429a      	cmp	r2, r3
 800393e:	d107      	bne.n	8003950 <HAL_RCC_OscConfig+0x84>
 8003940:	4bb0      	ldr	r3, [pc, #704]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	4baf      	ldr	r3, [pc, #700]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003946:	2180      	movs	r1, #128	; 0x80
 8003948:	0249      	lsls	r1, r1, #9
 800394a:	430a      	orrs	r2, r1
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	e027      	b.n	80039a0 <HAL_RCC_OscConfig+0xd4>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	23a0      	movs	r3, #160	; 0xa0
 8003956:	02db      	lsls	r3, r3, #11
 8003958:	429a      	cmp	r2, r3
 800395a:	d10e      	bne.n	800397a <HAL_RCC_OscConfig+0xae>
 800395c:	4ba9      	ldr	r3, [pc, #676]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4ba8      	ldr	r3, [pc, #672]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003962:	2180      	movs	r1, #128	; 0x80
 8003964:	02c9      	lsls	r1, r1, #11
 8003966:	430a      	orrs	r2, r1
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	4ba6      	ldr	r3, [pc, #664]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	4ba5      	ldr	r3, [pc, #660]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003970:	2180      	movs	r1, #128	; 0x80
 8003972:	0249      	lsls	r1, r1, #9
 8003974:	430a      	orrs	r2, r1
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	e012      	b.n	80039a0 <HAL_RCC_OscConfig+0xd4>
 800397a:	4ba2      	ldr	r3, [pc, #648]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	4ba1      	ldr	r3, [pc, #644]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003980:	49a1      	ldr	r1, [pc, #644]	; (8003c08 <HAL_RCC_OscConfig+0x33c>)
 8003982:	400a      	ands	r2, r1
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	4b9f      	ldr	r3, [pc, #636]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	2380      	movs	r3, #128	; 0x80
 800398c:	025b      	lsls	r3, r3, #9
 800398e:	4013      	ands	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4b9b      	ldr	r3, [pc, #620]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	4b9a      	ldr	r3, [pc, #616]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 800399a:	499c      	ldr	r1, [pc, #624]	; (8003c0c <HAL_RCC_OscConfig+0x340>)
 800399c:	400a      	ands	r2, r1
 800399e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d014      	beq.n	80039d2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a8:	f7fe feb4 	bl	8002714 <HAL_GetTick>
 80039ac:	0003      	movs	r3, r0
 80039ae:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b2:	f7fe feaf 	bl	8002714 <HAL_GetTick>
 80039b6:	0002      	movs	r2, r0
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b64      	cmp	r3, #100	; 0x64
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e2f9      	b.n	8003fb8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039c4:	4b8f      	ldr	r3, [pc, #572]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	2380      	movs	r3, #128	; 0x80
 80039ca:	029b      	lsls	r3, r3, #10
 80039cc:	4013      	ands	r3, r2
 80039ce:	d0f0      	beq.n	80039b2 <HAL_RCC_OscConfig+0xe6>
 80039d0:	e015      	b.n	80039fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d2:	f7fe fe9f 	bl	8002714 <HAL_GetTick>
 80039d6:	0003      	movs	r3, r0
 80039d8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039dc:	f7fe fe9a 	bl	8002714 <HAL_GetTick>
 80039e0:	0002      	movs	r2, r0
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b64      	cmp	r3, #100	; 0x64
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e2e4      	b.n	8003fb8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039ee:	4b85      	ldr	r3, [pc, #532]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	2380      	movs	r3, #128	; 0x80
 80039f4:	029b      	lsls	r3, r3, #10
 80039f6:	4013      	ands	r3, r2
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCC_OscConfig+0x110>
 80039fa:	e000      	b.n	80039fe <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2202      	movs	r2, #2
 8003a04:	4013      	ands	r3, r2
 8003a06:	d100      	bne.n	8003a0a <HAL_RCC_OscConfig+0x13e>
 8003a08:	e099      	b.n	8003b3e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	2220      	movs	r2, #32
 8003a14:	4013      	ands	r3, r2
 8003a16:	d009      	beq.n	8003a2c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003a18:	4b7a      	ldr	r3, [pc, #488]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	4b79      	ldr	r3, [pc, #484]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003a1e:	2120      	movs	r1, #32
 8003a20:	430a      	orrs	r2, r1
 8003a22:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	2220      	movs	r2, #32
 8003a28:	4393      	bics	r3, r2
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d005      	beq.n	8003a3e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	2b0c      	cmp	r3, #12
 8003a36:	d13e      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x1ea>
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d13b      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003a3e:	4b71      	ldr	r3, [pc, #452]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2204      	movs	r2, #4
 8003a44:	4013      	ands	r3, r2
 8003a46:	d004      	beq.n	8003a52 <HAL_RCC_OscConfig+0x186>
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e2b2      	b.n	8003fb8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a52:	4b6c      	ldr	r3, [pc, #432]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	4a6e      	ldr	r2, [pc, #440]	; (8003c10 <HAL_RCC_OscConfig+0x344>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	0019      	movs	r1, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	021a      	lsls	r2, r3, #8
 8003a62:	4b68      	ldr	r3, [pc, #416]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003a64:	430a      	orrs	r2, r1
 8003a66:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003a68:	4b66      	ldr	r3, [pc, #408]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2209      	movs	r2, #9
 8003a6e:	4393      	bics	r3, r2
 8003a70:	0019      	movs	r1, r3
 8003a72:	4b64      	ldr	r3, [pc, #400]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a76:	430a      	orrs	r2, r1
 8003a78:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a7a:	f000 fbeb 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 8003a7e:	0001      	movs	r1, r0
 8003a80:	4b60      	ldr	r3, [pc, #384]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	220f      	movs	r2, #15
 8003a88:	4013      	ands	r3, r2
 8003a8a:	4a62      	ldr	r2, [pc, #392]	; (8003c14 <HAL_RCC_OscConfig+0x348>)
 8003a8c:	5cd3      	ldrb	r3, [r2, r3]
 8003a8e:	000a      	movs	r2, r1
 8003a90:	40da      	lsrs	r2, r3
 8003a92:	4b61      	ldr	r3, [pc, #388]	; (8003c18 <HAL_RCC_OscConfig+0x34c>)
 8003a94:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003a96:	4b61      	ldr	r3, [pc, #388]	; (8003c1c <HAL_RCC_OscConfig+0x350>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2513      	movs	r5, #19
 8003a9c:	197c      	adds	r4, r7, r5
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f7fe fdf2 	bl	8002688 <HAL_InitTick>
 8003aa4:	0003      	movs	r3, r0
 8003aa6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003aa8:	197b      	adds	r3, r7, r5
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d046      	beq.n	8003b3e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8003ab0:	197b      	adds	r3, r7, r5
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	e280      	b.n	8003fb8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d027      	beq.n	8003b0c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003abc:	4b51      	ldr	r3, [pc, #324]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2209      	movs	r2, #9
 8003ac2:	4393      	bics	r3, r2
 8003ac4:	0019      	movs	r1, r3
 8003ac6:	4b4f      	ldr	r3, [pc, #316]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aca:	430a      	orrs	r2, r1
 8003acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ace:	f7fe fe21 	bl	8002714 <HAL_GetTick>
 8003ad2:	0003      	movs	r3, r0
 8003ad4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad8:	f7fe fe1c 	bl	8002714 <HAL_GetTick>
 8003adc:	0002      	movs	r2, r0
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e266      	b.n	8003fb8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003aea:	4b46      	ldr	r3, [pc, #280]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2204      	movs	r2, #4
 8003af0:	4013      	ands	r3, r2
 8003af2:	d0f1      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af4:	4b43      	ldr	r3, [pc, #268]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	4a45      	ldr	r2, [pc, #276]	; (8003c10 <HAL_RCC_OscConfig+0x344>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	0019      	movs	r1, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	021a      	lsls	r2, r3, #8
 8003b04:	4b3f      	ldr	r3, [pc, #252]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003b06:	430a      	orrs	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]
 8003b0a:	e018      	b.n	8003b3e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b0c:	4b3d      	ldr	r3, [pc, #244]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	4b3c      	ldr	r3, [pc, #240]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003b12:	2101      	movs	r1, #1
 8003b14:	438a      	bics	r2, r1
 8003b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b18:	f7fe fdfc 	bl	8002714 <HAL_GetTick>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b22:	f7fe fdf7 	bl	8002714 <HAL_GetTick>
 8003b26:	0002      	movs	r2, r0
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e241      	b.n	8003fb8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b34:	4b33      	ldr	r3, [pc, #204]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2204      	movs	r2, #4
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d1f1      	bne.n	8003b22 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2210      	movs	r2, #16
 8003b44:	4013      	ands	r3, r2
 8003b46:	d100      	bne.n	8003b4a <HAL_RCC_OscConfig+0x27e>
 8003b48:	e0a1      	b.n	8003c8e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d140      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b50:	4b2c      	ldr	r3, [pc, #176]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	2380      	movs	r3, #128	; 0x80
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d005      	beq.n	8003b68 <HAL_RCC_OscConfig+0x29c>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e227      	b.n	8003fb8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b68:	4b26      	ldr	r3, [pc, #152]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	4a2c      	ldr	r2, [pc, #176]	; (8003c20 <HAL_RCC_OscConfig+0x354>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	0019      	movs	r1, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1a      	ldr	r2, [r3, #32]
 8003b76:	4b23      	ldr	r3, [pc, #140]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b7c:	4b21      	ldr	r3, [pc, #132]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	021b      	lsls	r3, r3, #8
 8003b82:	0a19      	lsrs	r1, r3, #8
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	061a      	lsls	r2, r3, #24
 8003b8a:	4b1e      	ldr	r3, [pc, #120]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	0b5b      	lsrs	r3, r3, #13
 8003b96:	3301      	adds	r3, #1
 8003b98:	2280      	movs	r2, #128	; 0x80
 8003b9a:	0212      	lsls	r2, r2, #8
 8003b9c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003b9e:	4b19      	ldr	r3, [pc, #100]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	091b      	lsrs	r3, r3, #4
 8003ba4:	210f      	movs	r1, #15
 8003ba6:	400b      	ands	r3, r1
 8003ba8:	491a      	ldr	r1, [pc, #104]	; (8003c14 <HAL_RCC_OscConfig+0x348>)
 8003baa:	5ccb      	ldrb	r3, [r1, r3]
 8003bac:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003bae:	4b1a      	ldr	r3, [pc, #104]	; (8003c18 <HAL_RCC_OscConfig+0x34c>)
 8003bb0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003bb2:	4b1a      	ldr	r3, [pc, #104]	; (8003c1c <HAL_RCC_OscConfig+0x350>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2513      	movs	r5, #19
 8003bb8:	197c      	adds	r4, r7, r5
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f7fe fd64 	bl	8002688 <HAL_InitTick>
 8003bc0:	0003      	movs	r3, r0
 8003bc2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003bc4:	197b      	adds	r3, r7, r5
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d060      	beq.n	8003c8e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8003bcc:	197b      	adds	r3, r7, r5
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	e1f2      	b.n	8003fb8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d03f      	beq.n	8003c5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003bda:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <HAL_RCC_OscConfig+0x338>)
 8003be0:	2180      	movs	r1, #128	; 0x80
 8003be2:	0049      	lsls	r1, r1, #1
 8003be4:	430a      	orrs	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be8:	f7fe fd94 	bl	8002714 <HAL_GetTick>
 8003bec:	0003      	movs	r3, r0
 8003bee:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003bf0:	e018      	b.n	8003c24 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bf2:	f7fe fd8f 	bl	8002714 <HAL_GetTick>
 8003bf6:	0002      	movs	r2, r0
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d911      	bls.n	8003c24 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e1d9      	b.n	8003fb8 <HAL_RCC_OscConfig+0x6ec>
 8003c04:	40021000 	.word	0x40021000
 8003c08:	fffeffff 	.word	0xfffeffff
 8003c0c:	fffbffff 	.word	0xfffbffff
 8003c10:	ffffe0ff 	.word	0xffffe0ff
 8003c14:	08006de0 	.word	0x08006de0
 8003c18:	20000118 	.word	0x20000118
 8003c1c:	2000011c 	.word	0x2000011c
 8003c20:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003c24:	4bc9      	ldr	r3, [pc, #804]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	2380      	movs	r3, #128	; 0x80
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d0e0      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c30:	4bc6      	ldr	r3, [pc, #792]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	4ac6      	ldr	r2, [pc, #792]	; (8003f50 <HAL_RCC_OscConfig+0x684>)
 8003c36:	4013      	ands	r3, r2
 8003c38:	0019      	movs	r1, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1a      	ldr	r2, [r3, #32]
 8003c3e:	4bc3      	ldr	r3, [pc, #780]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003c40:	430a      	orrs	r2, r1
 8003c42:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c44:	4bc1      	ldr	r3, [pc, #772]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	021b      	lsls	r3, r3, #8
 8003c4a:	0a19      	lsrs	r1, r3, #8
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	061a      	lsls	r2, r3, #24
 8003c52:	4bbe      	ldr	r3, [pc, #760]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003c54:	430a      	orrs	r2, r1
 8003c56:	605a      	str	r2, [r3, #4]
 8003c58:	e019      	b.n	8003c8e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c5a:	4bbc      	ldr	r3, [pc, #752]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	4bbb      	ldr	r3, [pc, #748]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003c60:	49bc      	ldr	r1, [pc, #752]	; (8003f54 <HAL_RCC_OscConfig+0x688>)
 8003c62:	400a      	ands	r2, r1
 8003c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c66:	f7fe fd55 	bl	8002714 <HAL_GetTick>
 8003c6a:	0003      	movs	r3, r0
 8003c6c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c70:	f7fe fd50 	bl	8002714 <HAL_GetTick>
 8003c74:	0002      	movs	r2, r0
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e19a      	b.n	8003fb8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003c82:	4bb2      	ldr	r3, [pc, #712]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	2380      	movs	r3, #128	; 0x80
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2208      	movs	r2, #8
 8003c94:	4013      	ands	r3, r2
 8003c96:	d036      	beq.n	8003d06 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d019      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ca0:	4baa      	ldr	r3, [pc, #680]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003ca2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ca4:	4ba9      	ldr	r3, [pc, #676]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cac:	f7fe fd32 	bl	8002714 <HAL_GetTick>
 8003cb0:	0003      	movs	r3, r0
 8003cb2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cb6:	f7fe fd2d 	bl	8002714 <HAL_GetTick>
 8003cba:	0002      	movs	r2, r0
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e177      	b.n	8003fb8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cc8:	4ba0      	ldr	r3, [pc, #640]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ccc:	2202      	movs	r2, #2
 8003cce:	4013      	ands	r3, r2
 8003cd0:	d0f1      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x3ea>
 8003cd2:	e018      	b.n	8003d06 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cd4:	4b9d      	ldr	r3, [pc, #628]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003cd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cd8:	4b9c      	ldr	r3, [pc, #624]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003cda:	2101      	movs	r1, #1
 8003cdc:	438a      	bics	r2, r1
 8003cde:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce0:	f7fe fd18 	bl	8002714 <HAL_GetTick>
 8003ce4:	0003      	movs	r3, r0
 8003ce6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cea:	f7fe fd13 	bl	8002714 <HAL_GetTick>
 8003cee:	0002      	movs	r2, r0
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e15d      	b.n	8003fb8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cfc:	4b93      	ldr	r3, [pc, #588]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d00:	2202      	movs	r2, #2
 8003d02:	4013      	ands	r3, r2
 8003d04:	d1f1      	bne.n	8003cea <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2204      	movs	r2, #4
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	d100      	bne.n	8003d12 <HAL_RCC_OscConfig+0x446>
 8003d10:	e0ae      	b.n	8003e70 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d12:	2023      	movs	r0, #35	; 0x23
 8003d14:	183b      	adds	r3, r7, r0
 8003d16:	2200      	movs	r2, #0
 8003d18:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d1a:	4b8c      	ldr	r3, [pc, #560]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d1e:	2380      	movs	r3, #128	; 0x80
 8003d20:	055b      	lsls	r3, r3, #21
 8003d22:	4013      	ands	r3, r2
 8003d24:	d109      	bne.n	8003d3a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d26:	4b89      	ldr	r3, [pc, #548]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d2a:	4b88      	ldr	r3, [pc, #544]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003d2c:	2180      	movs	r1, #128	; 0x80
 8003d2e:	0549      	lsls	r1, r1, #21
 8003d30:	430a      	orrs	r2, r1
 8003d32:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003d34:	183b      	adds	r3, r7, r0
 8003d36:	2201      	movs	r2, #1
 8003d38:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3a:	4b87      	ldr	r3, [pc, #540]	; (8003f58 <HAL_RCC_OscConfig+0x68c>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	2380      	movs	r3, #128	; 0x80
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	4013      	ands	r3, r2
 8003d44:	d11a      	bne.n	8003d7c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d46:	4b84      	ldr	r3, [pc, #528]	; (8003f58 <HAL_RCC_OscConfig+0x68c>)
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	4b83      	ldr	r3, [pc, #524]	; (8003f58 <HAL_RCC_OscConfig+0x68c>)
 8003d4c:	2180      	movs	r1, #128	; 0x80
 8003d4e:	0049      	lsls	r1, r1, #1
 8003d50:	430a      	orrs	r2, r1
 8003d52:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d54:	f7fe fcde 	bl	8002714 <HAL_GetTick>
 8003d58:	0003      	movs	r3, r0
 8003d5a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d5e:	f7fe fcd9 	bl	8002714 <HAL_GetTick>
 8003d62:	0002      	movs	r2, r0
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b64      	cmp	r3, #100	; 0x64
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e123      	b.n	8003fb8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d70:	4b79      	ldr	r3, [pc, #484]	; (8003f58 <HAL_RCC_OscConfig+0x68c>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	2380      	movs	r3, #128	; 0x80
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	4013      	ands	r3, r2
 8003d7a:	d0f0      	beq.n	8003d5e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	2380      	movs	r3, #128	; 0x80
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d107      	bne.n	8003d98 <HAL_RCC_OscConfig+0x4cc>
 8003d88:	4b70      	ldr	r3, [pc, #448]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003d8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d8c:	4b6f      	ldr	r3, [pc, #444]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003d8e:	2180      	movs	r1, #128	; 0x80
 8003d90:	0049      	lsls	r1, r1, #1
 8003d92:	430a      	orrs	r2, r1
 8003d94:	651a      	str	r2, [r3, #80]	; 0x50
 8003d96:	e031      	b.n	8003dfc <HAL_RCC_OscConfig+0x530>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10c      	bne.n	8003dba <HAL_RCC_OscConfig+0x4ee>
 8003da0:	4b6a      	ldr	r3, [pc, #424]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003da2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003da4:	4b69      	ldr	r3, [pc, #420]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003da6:	496b      	ldr	r1, [pc, #428]	; (8003f54 <HAL_RCC_OscConfig+0x688>)
 8003da8:	400a      	ands	r2, r1
 8003daa:	651a      	str	r2, [r3, #80]	; 0x50
 8003dac:	4b67      	ldr	r3, [pc, #412]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003dae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003db0:	4b66      	ldr	r3, [pc, #408]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003db2:	496a      	ldr	r1, [pc, #424]	; (8003f5c <HAL_RCC_OscConfig+0x690>)
 8003db4:	400a      	ands	r2, r1
 8003db6:	651a      	str	r2, [r3, #80]	; 0x50
 8003db8:	e020      	b.n	8003dfc <HAL_RCC_OscConfig+0x530>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	23a0      	movs	r3, #160	; 0xa0
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d10e      	bne.n	8003de4 <HAL_RCC_OscConfig+0x518>
 8003dc6:	4b61      	ldr	r3, [pc, #388]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003dc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dca:	4b60      	ldr	r3, [pc, #384]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003dcc:	2180      	movs	r1, #128	; 0x80
 8003dce:	00c9      	lsls	r1, r1, #3
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	651a      	str	r2, [r3, #80]	; 0x50
 8003dd4:	4b5d      	ldr	r3, [pc, #372]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003dd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dd8:	4b5c      	ldr	r3, [pc, #368]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003dda:	2180      	movs	r1, #128	; 0x80
 8003ddc:	0049      	lsls	r1, r1, #1
 8003dde:	430a      	orrs	r2, r1
 8003de0:	651a      	str	r2, [r3, #80]	; 0x50
 8003de2:	e00b      	b.n	8003dfc <HAL_RCC_OscConfig+0x530>
 8003de4:	4b59      	ldr	r3, [pc, #356]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003de6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003de8:	4b58      	ldr	r3, [pc, #352]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003dea:	495a      	ldr	r1, [pc, #360]	; (8003f54 <HAL_RCC_OscConfig+0x688>)
 8003dec:	400a      	ands	r2, r1
 8003dee:	651a      	str	r2, [r3, #80]	; 0x50
 8003df0:	4b56      	ldr	r3, [pc, #344]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003df2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003df4:	4b55      	ldr	r3, [pc, #340]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003df6:	4959      	ldr	r1, [pc, #356]	; (8003f5c <HAL_RCC_OscConfig+0x690>)
 8003df8:	400a      	ands	r2, r1
 8003dfa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d015      	beq.n	8003e30 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e04:	f7fe fc86 	bl	8002714 <HAL_GetTick>
 8003e08:	0003      	movs	r3, r0
 8003e0a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e0c:	e009      	b.n	8003e22 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e0e:	f7fe fc81 	bl	8002714 <HAL_GetTick>
 8003e12:	0002      	movs	r2, r0
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	4a51      	ldr	r2, [pc, #324]	; (8003f60 <HAL_RCC_OscConfig+0x694>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e0ca      	b.n	8003fb8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e22:	4b4a      	ldr	r3, [pc, #296]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003e24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e26:	2380      	movs	r3, #128	; 0x80
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d0ef      	beq.n	8003e0e <HAL_RCC_OscConfig+0x542>
 8003e2e:	e014      	b.n	8003e5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e30:	f7fe fc70 	bl	8002714 <HAL_GetTick>
 8003e34:	0003      	movs	r3, r0
 8003e36:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e38:	e009      	b.n	8003e4e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e3a:	f7fe fc6b 	bl	8002714 <HAL_GetTick>
 8003e3e:	0002      	movs	r2, r0
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	4a46      	ldr	r2, [pc, #280]	; (8003f60 <HAL_RCC_OscConfig+0x694>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e0b4      	b.n	8003fb8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e4e:	4b3f      	ldr	r3, [pc, #252]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003e50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e52:	2380      	movs	r3, #128	; 0x80
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4013      	ands	r3, r2
 8003e58:	d1ef      	bne.n	8003e3a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e5a:	2323      	movs	r3, #35	; 0x23
 8003e5c:	18fb      	adds	r3, r7, r3
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d105      	bne.n	8003e70 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e64:	4b39      	ldr	r3, [pc, #228]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e68:	4b38      	ldr	r3, [pc, #224]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003e6a:	493e      	ldr	r1, [pc, #248]	; (8003f64 <HAL_RCC_OscConfig+0x698>)
 8003e6c:	400a      	ands	r2, r1
 8003e6e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d100      	bne.n	8003e7a <HAL_RCC_OscConfig+0x5ae>
 8003e78:	e09d      	b.n	8003fb6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	2b0c      	cmp	r3, #12
 8003e7e:	d100      	bne.n	8003e82 <HAL_RCC_OscConfig+0x5b6>
 8003e80:	e076      	b.n	8003f70 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d145      	bne.n	8003f16 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e8a:	4b30      	ldr	r3, [pc, #192]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	4b2f      	ldr	r3, [pc, #188]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003e90:	4935      	ldr	r1, [pc, #212]	; (8003f68 <HAL_RCC_OscConfig+0x69c>)
 8003e92:	400a      	ands	r2, r1
 8003e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e96:	f7fe fc3d 	bl	8002714 <HAL_GetTick>
 8003e9a:	0003      	movs	r3, r0
 8003e9c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea0:	f7fe fc38 	bl	8002714 <HAL_GetTick>
 8003ea4:	0002      	movs	r2, r0
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e082      	b.n	8003fb8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003eb2:	4b26      	ldr	r3, [pc, #152]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	2380      	movs	r3, #128	; 0x80
 8003eb8:	049b      	lsls	r3, r3, #18
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ebe:	4b23      	ldr	r3, [pc, #140]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	4a2a      	ldr	r2, [pc, #168]	; (8003f6c <HAL_RCC_OscConfig+0x6a0>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	0019      	movs	r1, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	4b1c      	ldr	r3, [pc, #112]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003eda:	430a      	orrs	r2, r1
 8003edc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ede:	4b1b      	ldr	r3, [pc, #108]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	4b1a      	ldr	r3, [pc, #104]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003ee4:	2180      	movs	r1, #128	; 0x80
 8003ee6:	0449      	lsls	r1, r1, #17
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eec:	f7fe fc12 	bl	8002714 <HAL_GetTick>
 8003ef0:	0003      	movs	r3, r0
 8003ef2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef6:	f7fe fc0d 	bl	8002714 <HAL_GetTick>
 8003efa:	0002      	movs	r2, r0
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e057      	b.n	8003fb8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003f08:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	2380      	movs	r3, #128	; 0x80
 8003f0e:	049b      	lsls	r3, r3, #18
 8003f10:	4013      	ands	r3, r2
 8003f12:	d0f0      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x62a>
 8003f14:	e04f      	b.n	8003fb6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f16:	4b0d      	ldr	r3, [pc, #52]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003f1c:	4912      	ldr	r1, [pc, #72]	; (8003f68 <HAL_RCC_OscConfig+0x69c>)
 8003f1e:	400a      	ands	r2, r1
 8003f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f22:	f7fe fbf7 	bl	8002714 <HAL_GetTick>
 8003f26:	0003      	movs	r3, r0
 8003f28:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f2c:	f7fe fbf2 	bl	8002714 <HAL_GetTick>
 8003f30:	0002      	movs	r2, r0
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e03c      	b.n	8003fb8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f3e:	4b03      	ldr	r3, [pc, #12]	; (8003f4c <HAL_RCC_OscConfig+0x680>)
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	2380      	movs	r3, #128	; 0x80
 8003f44:	049b      	lsls	r3, r3, #18
 8003f46:	4013      	ands	r3, r2
 8003f48:	d1f0      	bne.n	8003f2c <HAL_RCC_OscConfig+0x660>
 8003f4a:	e034      	b.n	8003fb6 <HAL_RCC_OscConfig+0x6ea>
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	ffff1fff 	.word	0xffff1fff
 8003f54:	fffffeff 	.word	0xfffffeff
 8003f58:	40007000 	.word	0x40007000
 8003f5c:	fffffbff 	.word	0xfffffbff
 8003f60:	00001388 	.word	0x00001388
 8003f64:	efffffff 	.word	0xefffffff
 8003f68:	feffffff 	.word	0xfeffffff
 8003f6c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e01d      	b.n	8003fb8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f7c:	4b10      	ldr	r3, [pc, #64]	; (8003fc0 <HAL_RCC_OscConfig+0x6f4>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	2380      	movs	r3, #128	; 0x80
 8003f86:	025b      	lsls	r3, r3, #9
 8003f88:	401a      	ands	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d10f      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	23f0      	movs	r3, #240	; 0xf0
 8003f96:	039b      	lsls	r3, r3, #14
 8003f98:	401a      	ands	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d107      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	23c0      	movs	r3, #192	; 0xc0
 8003fa6:	041b      	lsls	r3, r3, #16
 8003fa8:	401a      	ands	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d001      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	0018      	movs	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b00a      	add	sp, #40	; 0x28
 8003fbe:	bdb0      	pop	{r4, r5, r7, pc}
 8003fc0:	40021000 	.word	0x40021000

08003fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fc4:	b5b0      	push	{r4, r5, r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e128      	b.n	800422a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd8:	4b96      	ldr	r3, [pc, #600]	; (8004234 <HAL_RCC_ClockConfig+0x270>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	4013      	ands	r3, r2
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d91e      	bls.n	8004024 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe6:	4b93      	ldr	r3, [pc, #588]	; (8004234 <HAL_RCC_ClockConfig+0x270>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2201      	movs	r2, #1
 8003fec:	4393      	bics	r3, r2
 8003fee:	0019      	movs	r1, r3
 8003ff0:	4b90      	ldr	r3, [pc, #576]	; (8004234 <HAL_RCC_ClockConfig+0x270>)
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ff8:	f7fe fb8c 	bl	8002714 <HAL_GetTick>
 8003ffc:	0003      	movs	r3, r0
 8003ffe:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004000:	e009      	b.n	8004016 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004002:	f7fe fb87 	bl	8002714 <HAL_GetTick>
 8004006:	0002      	movs	r2, r0
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	4a8a      	ldr	r2, [pc, #552]	; (8004238 <HAL_RCC_ClockConfig+0x274>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e109      	b.n	800422a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004016:	4b87      	ldr	r3, [pc, #540]	; (8004234 <HAL_RCC_ClockConfig+0x270>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2201      	movs	r2, #1
 800401c:	4013      	ands	r3, r2
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d1ee      	bne.n	8004002 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2202      	movs	r2, #2
 800402a:	4013      	ands	r3, r2
 800402c:	d009      	beq.n	8004042 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800402e:	4b83      	ldr	r3, [pc, #524]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	22f0      	movs	r2, #240	; 0xf0
 8004034:	4393      	bics	r3, r2
 8004036:	0019      	movs	r1, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	4b7f      	ldr	r3, [pc, #508]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 800403e:	430a      	orrs	r2, r1
 8004040:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2201      	movs	r2, #1
 8004048:	4013      	ands	r3, r2
 800404a:	d100      	bne.n	800404e <HAL_RCC_ClockConfig+0x8a>
 800404c:	e089      	b.n	8004162 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b02      	cmp	r3, #2
 8004054:	d107      	bne.n	8004066 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004056:	4b79      	ldr	r3, [pc, #484]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	2380      	movs	r3, #128	; 0x80
 800405c:	029b      	lsls	r3, r3, #10
 800405e:	4013      	ands	r3, r2
 8004060:	d120      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e0e1      	b.n	800422a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b03      	cmp	r3, #3
 800406c:	d107      	bne.n	800407e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800406e:	4b73      	ldr	r3, [pc, #460]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	2380      	movs	r3, #128	; 0x80
 8004074:	049b      	lsls	r3, r3, #18
 8004076:	4013      	ands	r3, r2
 8004078:	d114      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e0d5      	b.n	800422a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d106      	bne.n	8004094 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004086:	4b6d      	ldr	r3, [pc, #436]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2204      	movs	r2, #4
 800408c:	4013      	ands	r3, r2
 800408e:	d109      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0ca      	b.n	800422a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004094:	4b69      	ldr	r3, [pc, #420]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	2380      	movs	r3, #128	; 0x80
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4013      	ands	r3, r2
 800409e:	d101      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0c2      	b.n	800422a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040a4:	4b65      	ldr	r3, [pc, #404]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	2203      	movs	r2, #3
 80040aa:	4393      	bics	r3, r2
 80040ac:	0019      	movs	r1, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	4b62      	ldr	r3, [pc, #392]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 80040b4:	430a      	orrs	r2, r1
 80040b6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040b8:	f7fe fb2c 	bl	8002714 <HAL_GetTick>
 80040bc:	0003      	movs	r3, r0
 80040be:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d111      	bne.n	80040ec <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80040c8:	e009      	b.n	80040de <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ca:	f7fe fb23 	bl	8002714 <HAL_GetTick>
 80040ce:	0002      	movs	r2, r0
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	4a58      	ldr	r2, [pc, #352]	; (8004238 <HAL_RCC_ClockConfig+0x274>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e0a5      	b.n	800422a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80040de:	4b57      	ldr	r3, [pc, #348]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	220c      	movs	r2, #12
 80040e4:	4013      	ands	r3, r2
 80040e6:	2b08      	cmp	r3, #8
 80040e8:	d1ef      	bne.n	80040ca <HAL_RCC_ClockConfig+0x106>
 80040ea:	e03a      	b.n	8004162 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d111      	bne.n	8004118 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040f4:	e009      	b.n	800410a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f6:	f7fe fb0d 	bl	8002714 <HAL_GetTick>
 80040fa:	0002      	movs	r2, r0
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	4a4d      	ldr	r2, [pc, #308]	; (8004238 <HAL_RCC_ClockConfig+0x274>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d901      	bls.n	800410a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e08f      	b.n	800422a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800410a:	4b4c      	ldr	r3, [pc, #304]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	220c      	movs	r2, #12
 8004110:	4013      	ands	r3, r2
 8004112:	2b0c      	cmp	r3, #12
 8004114:	d1ef      	bne.n	80040f6 <HAL_RCC_ClockConfig+0x132>
 8004116:	e024      	b.n	8004162 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d11b      	bne.n	8004158 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004120:	e009      	b.n	8004136 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004122:	f7fe faf7 	bl	8002714 <HAL_GetTick>
 8004126:	0002      	movs	r2, r0
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	4a42      	ldr	r2, [pc, #264]	; (8004238 <HAL_RCC_ClockConfig+0x274>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e079      	b.n	800422a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004136:	4b41      	ldr	r3, [pc, #260]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	220c      	movs	r2, #12
 800413c:	4013      	ands	r3, r2
 800413e:	2b04      	cmp	r3, #4
 8004140:	d1ef      	bne.n	8004122 <HAL_RCC_ClockConfig+0x15e>
 8004142:	e00e      	b.n	8004162 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004144:	f7fe fae6 	bl	8002714 <HAL_GetTick>
 8004148:	0002      	movs	r2, r0
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	4a3a      	ldr	r2, [pc, #232]	; (8004238 <HAL_RCC_ClockConfig+0x274>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e068      	b.n	800422a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004158:	4b38      	ldr	r3, [pc, #224]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	220c      	movs	r2, #12
 800415e:	4013      	ands	r3, r2
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004162:	4b34      	ldr	r3, [pc, #208]	; (8004234 <HAL_RCC_ClockConfig+0x270>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2201      	movs	r2, #1
 8004168:	4013      	ands	r3, r2
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d21e      	bcs.n	80041ae <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004170:	4b30      	ldr	r3, [pc, #192]	; (8004234 <HAL_RCC_ClockConfig+0x270>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2201      	movs	r2, #1
 8004176:	4393      	bics	r3, r2
 8004178:	0019      	movs	r1, r3
 800417a:	4b2e      	ldr	r3, [pc, #184]	; (8004234 <HAL_RCC_ClockConfig+0x270>)
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004182:	f7fe fac7 	bl	8002714 <HAL_GetTick>
 8004186:	0003      	movs	r3, r0
 8004188:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800418a:	e009      	b.n	80041a0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800418c:	f7fe fac2 	bl	8002714 <HAL_GetTick>
 8004190:	0002      	movs	r2, r0
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	4a28      	ldr	r2, [pc, #160]	; (8004238 <HAL_RCC_ClockConfig+0x274>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e044      	b.n	800422a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a0:	4b24      	ldr	r3, [pc, #144]	; (8004234 <HAL_RCC_ClockConfig+0x270>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2201      	movs	r2, #1
 80041a6:	4013      	ands	r3, r2
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d1ee      	bne.n	800418c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2204      	movs	r2, #4
 80041b4:	4013      	ands	r3, r2
 80041b6:	d009      	beq.n	80041cc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041b8:	4b20      	ldr	r3, [pc, #128]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	4a20      	ldr	r2, [pc, #128]	; (8004240 <HAL_RCC_ClockConfig+0x27c>)
 80041be:	4013      	ands	r3, r2
 80041c0:	0019      	movs	r1, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	4b1d      	ldr	r3, [pc, #116]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 80041c8:	430a      	orrs	r2, r1
 80041ca:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2208      	movs	r2, #8
 80041d2:	4013      	ands	r3, r2
 80041d4:	d00a      	beq.n	80041ec <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041d6:	4b19      	ldr	r3, [pc, #100]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	4a1a      	ldr	r2, [pc, #104]	; (8004244 <HAL_RCC_ClockConfig+0x280>)
 80041dc:	4013      	ands	r3, r2
 80041de:	0019      	movs	r1, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	00da      	lsls	r2, r3, #3
 80041e6:	4b15      	ldr	r3, [pc, #84]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 80041e8:	430a      	orrs	r2, r1
 80041ea:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041ec:	f000 f832 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 80041f0:	0001      	movs	r1, r0
 80041f2:	4b12      	ldr	r3, [pc, #72]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	091b      	lsrs	r3, r3, #4
 80041f8:	220f      	movs	r2, #15
 80041fa:	4013      	ands	r3, r2
 80041fc:	4a12      	ldr	r2, [pc, #72]	; (8004248 <HAL_RCC_ClockConfig+0x284>)
 80041fe:	5cd3      	ldrb	r3, [r2, r3]
 8004200:	000a      	movs	r2, r1
 8004202:	40da      	lsrs	r2, r3
 8004204:	4b11      	ldr	r3, [pc, #68]	; (800424c <HAL_RCC_ClockConfig+0x288>)
 8004206:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004208:	4b11      	ldr	r3, [pc, #68]	; (8004250 <HAL_RCC_ClockConfig+0x28c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	250b      	movs	r5, #11
 800420e:	197c      	adds	r4, r7, r5
 8004210:	0018      	movs	r0, r3
 8004212:	f7fe fa39 	bl	8002688 <HAL_InitTick>
 8004216:	0003      	movs	r3, r0
 8004218:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800421a:	197b      	adds	r3, r7, r5
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004222:	197b      	adds	r3, r7, r5
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	e000      	b.n	800422a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	0018      	movs	r0, r3
 800422c:	46bd      	mov	sp, r7
 800422e:	b004      	add	sp, #16
 8004230:	bdb0      	pop	{r4, r5, r7, pc}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	40022000 	.word	0x40022000
 8004238:	00001388 	.word	0x00001388
 800423c:	40021000 	.word	0x40021000
 8004240:	fffff8ff 	.word	0xfffff8ff
 8004244:	ffffc7ff 	.word	0xffffc7ff
 8004248:	08006de0 	.word	0x08006de0
 800424c:	20000118 	.word	0x20000118
 8004250:	2000011c 	.word	0x2000011c

08004254 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004254:	b5b0      	push	{r4, r5, r7, lr}
 8004256:	b08e      	sub	sp, #56	; 0x38
 8004258:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800425a:	4b4c      	ldr	r3, [pc, #304]	; (800438c <HAL_RCC_GetSysClockFreq+0x138>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004262:	230c      	movs	r3, #12
 8004264:	4013      	ands	r3, r2
 8004266:	2b0c      	cmp	r3, #12
 8004268:	d014      	beq.n	8004294 <HAL_RCC_GetSysClockFreq+0x40>
 800426a:	d900      	bls.n	800426e <HAL_RCC_GetSysClockFreq+0x1a>
 800426c:	e07b      	b.n	8004366 <HAL_RCC_GetSysClockFreq+0x112>
 800426e:	2b04      	cmp	r3, #4
 8004270:	d002      	beq.n	8004278 <HAL_RCC_GetSysClockFreq+0x24>
 8004272:	2b08      	cmp	r3, #8
 8004274:	d00b      	beq.n	800428e <HAL_RCC_GetSysClockFreq+0x3a>
 8004276:	e076      	b.n	8004366 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004278:	4b44      	ldr	r3, [pc, #272]	; (800438c <HAL_RCC_GetSysClockFreq+0x138>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2210      	movs	r2, #16
 800427e:	4013      	ands	r3, r2
 8004280:	d002      	beq.n	8004288 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004282:	4b43      	ldr	r3, [pc, #268]	; (8004390 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004284:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004286:	e07c      	b.n	8004382 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004288:	4b42      	ldr	r3, [pc, #264]	; (8004394 <HAL_RCC_GetSysClockFreq+0x140>)
 800428a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800428c:	e079      	b.n	8004382 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800428e:	4b42      	ldr	r3, [pc, #264]	; (8004398 <HAL_RCC_GetSysClockFreq+0x144>)
 8004290:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004292:	e076      	b.n	8004382 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004296:	0c9a      	lsrs	r2, r3, #18
 8004298:	230f      	movs	r3, #15
 800429a:	401a      	ands	r2, r3
 800429c:	4b3f      	ldr	r3, [pc, #252]	; (800439c <HAL_RCC_GetSysClockFreq+0x148>)
 800429e:	5c9b      	ldrb	r3, [r3, r2]
 80042a0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80042a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a4:	0d9a      	lsrs	r2, r3, #22
 80042a6:	2303      	movs	r3, #3
 80042a8:	4013      	ands	r3, r2
 80042aa:	3301      	adds	r3, #1
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ae:	4b37      	ldr	r3, [pc, #220]	; (800438c <HAL_RCC_GetSysClockFreq+0x138>)
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	2380      	movs	r3, #128	; 0x80
 80042b4:	025b      	lsls	r3, r3, #9
 80042b6:	4013      	ands	r3, r2
 80042b8:	d01a      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80042ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042bc:	61bb      	str	r3, [r7, #24]
 80042be:	2300      	movs	r3, #0
 80042c0:	61fb      	str	r3, [r7, #28]
 80042c2:	4a35      	ldr	r2, [pc, #212]	; (8004398 <HAL_RCC_GetSysClockFreq+0x144>)
 80042c4:	2300      	movs	r3, #0
 80042c6:	69b8      	ldr	r0, [r7, #24]
 80042c8:	69f9      	ldr	r1, [r7, #28]
 80042ca:	f7fb ffc9 	bl	8000260 <__aeabi_lmul>
 80042ce:	0002      	movs	r2, r0
 80042d0:	000b      	movs	r3, r1
 80042d2:	0010      	movs	r0, r2
 80042d4:	0019      	movs	r1, r3
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	2300      	movs	r3, #0
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f7fb ff9d 	bl	8000220 <__aeabi_uldivmod>
 80042e6:	0002      	movs	r2, r0
 80042e8:	000b      	movs	r3, r1
 80042ea:	0013      	movs	r3, r2
 80042ec:	637b      	str	r3, [r7, #52]	; 0x34
 80042ee:	e037      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80042f0:	4b26      	ldr	r3, [pc, #152]	; (800438c <HAL_RCC_GetSysClockFreq+0x138>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2210      	movs	r2, #16
 80042f6:	4013      	ands	r3, r2
 80042f8:	d01a      	beq.n	8004330 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80042fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fc:	60bb      	str	r3, [r7, #8]
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	4a23      	ldr	r2, [pc, #140]	; (8004390 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004304:	2300      	movs	r3, #0
 8004306:	68b8      	ldr	r0, [r7, #8]
 8004308:	68f9      	ldr	r1, [r7, #12]
 800430a:	f7fb ffa9 	bl	8000260 <__aeabi_lmul>
 800430e:	0002      	movs	r2, r0
 8004310:	000b      	movs	r3, r1
 8004312:	0010      	movs	r0, r2
 8004314:	0019      	movs	r1, r3
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	603b      	str	r3, [r7, #0]
 800431a:	2300      	movs	r3, #0
 800431c:	607b      	str	r3, [r7, #4]
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f7fb ff7d 	bl	8000220 <__aeabi_uldivmod>
 8004326:	0002      	movs	r2, r0
 8004328:	000b      	movs	r3, r1
 800432a:	0013      	movs	r3, r2
 800432c:	637b      	str	r3, [r7, #52]	; 0x34
 800432e:	e017      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004332:	0018      	movs	r0, r3
 8004334:	2300      	movs	r3, #0
 8004336:	0019      	movs	r1, r3
 8004338:	4a16      	ldr	r2, [pc, #88]	; (8004394 <HAL_RCC_GetSysClockFreq+0x140>)
 800433a:	2300      	movs	r3, #0
 800433c:	f7fb ff90 	bl	8000260 <__aeabi_lmul>
 8004340:	0002      	movs	r2, r0
 8004342:	000b      	movs	r3, r1
 8004344:	0010      	movs	r0, r2
 8004346:	0019      	movs	r1, r3
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	001c      	movs	r4, r3
 800434c:	2300      	movs	r3, #0
 800434e:	001d      	movs	r5, r3
 8004350:	0022      	movs	r2, r4
 8004352:	002b      	movs	r3, r5
 8004354:	f7fb ff64 	bl	8000220 <__aeabi_uldivmod>
 8004358:	0002      	movs	r2, r0
 800435a:	000b      	movs	r3, r1
 800435c:	0013      	movs	r3, r2
 800435e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004362:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004364:	e00d      	b.n	8004382 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004366:	4b09      	ldr	r3, [pc, #36]	; (800438c <HAL_RCC_GetSysClockFreq+0x138>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	0b5b      	lsrs	r3, r3, #13
 800436c:	2207      	movs	r2, #7
 800436e:	4013      	ands	r3, r2
 8004370:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	3301      	adds	r3, #1
 8004376:	2280      	movs	r2, #128	; 0x80
 8004378:	0212      	lsls	r2, r2, #8
 800437a:	409a      	lsls	r2, r3
 800437c:	0013      	movs	r3, r2
 800437e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004380:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004384:	0018      	movs	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	b00e      	add	sp, #56	; 0x38
 800438a:	bdb0      	pop	{r4, r5, r7, pc}
 800438c:	40021000 	.word	0x40021000
 8004390:	003d0900 	.word	0x003d0900
 8004394:	00f42400 	.word	0x00f42400
 8004398:	007a1200 	.word	0x007a1200
 800439c:	08006df8 	.word	0x08006df8

080043a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043a4:	4b02      	ldr	r3, [pc, #8]	; (80043b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80043a6:	681b      	ldr	r3, [r3, #0]
}
 80043a8:	0018      	movs	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	20000118 	.word	0x20000118

080043b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043b8:	f7ff fff2 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 80043bc:	0001      	movs	r1, r0
 80043be:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	0a1b      	lsrs	r3, r3, #8
 80043c4:	2207      	movs	r2, #7
 80043c6:	4013      	ands	r3, r2
 80043c8:	4a04      	ldr	r2, [pc, #16]	; (80043dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80043ca:	5cd3      	ldrb	r3, [r2, r3]
 80043cc:	40d9      	lsrs	r1, r3
 80043ce:	000b      	movs	r3, r1
}
 80043d0:	0018      	movs	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	40021000 	.word	0x40021000
 80043dc:	08006df0 	.word	0x08006df0

080043e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043e4:	f7ff ffdc 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 80043e8:	0001      	movs	r1, r0
 80043ea:	4b06      	ldr	r3, [pc, #24]	; (8004404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	0adb      	lsrs	r3, r3, #11
 80043f0:	2207      	movs	r2, #7
 80043f2:	4013      	ands	r3, r2
 80043f4:	4a04      	ldr	r2, [pc, #16]	; (8004408 <HAL_RCC_GetPCLK2Freq+0x28>)
 80043f6:	5cd3      	ldrb	r3, [r2, r3]
 80043f8:	40d9      	lsrs	r1, r3
 80043fa:	000b      	movs	r3, r1
}
 80043fc:	0018      	movs	r0, r3
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	46c0      	nop			; (mov r8, r8)
 8004404:	40021000 	.word	0x40021000
 8004408:	08006df0 	.word	0x08006df0

0800440c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004414:	2017      	movs	r0, #23
 8004416:	183b      	adds	r3, r7, r0
 8004418:	2200      	movs	r2, #0
 800441a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2220      	movs	r2, #32
 8004422:	4013      	ands	r3, r2
 8004424:	d100      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8004426:	e0c7      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004428:	4b84      	ldr	r3, [pc, #528]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800442a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800442c:	2380      	movs	r3, #128	; 0x80
 800442e:	055b      	lsls	r3, r3, #21
 8004430:	4013      	ands	r3, r2
 8004432:	d109      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004434:	4b81      	ldr	r3, [pc, #516]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004438:	4b80      	ldr	r3, [pc, #512]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800443a:	2180      	movs	r1, #128	; 0x80
 800443c:	0549      	lsls	r1, r1, #21
 800443e:	430a      	orrs	r2, r1
 8004440:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004442:	183b      	adds	r3, r7, r0
 8004444:	2201      	movs	r2, #1
 8004446:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004448:	4b7d      	ldr	r3, [pc, #500]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	2380      	movs	r3, #128	; 0x80
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	4013      	ands	r3, r2
 8004452:	d11a      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004454:	4b7a      	ldr	r3, [pc, #488]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	4b79      	ldr	r3, [pc, #484]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800445a:	2180      	movs	r1, #128	; 0x80
 800445c:	0049      	lsls	r1, r1, #1
 800445e:	430a      	orrs	r2, r1
 8004460:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004462:	f7fe f957 	bl	8002714 <HAL_GetTick>
 8004466:	0003      	movs	r3, r0
 8004468:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446a:	e008      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800446c:	f7fe f952 	bl	8002714 <HAL_GetTick>
 8004470:	0002      	movs	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b64      	cmp	r3, #100	; 0x64
 8004478:	d901      	bls.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e0d9      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447e:	4b70      	ldr	r3, [pc, #448]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	2380      	movs	r3, #128	; 0x80
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	4013      	ands	r3, r2
 8004488:	d0f0      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800448a:	4b6c      	ldr	r3, [pc, #432]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	23c0      	movs	r3, #192	; 0xc0
 8004490:	039b      	lsls	r3, r3, #14
 8004492:	4013      	ands	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	23c0      	movs	r3, #192	; 0xc0
 800449c:	039b      	lsls	r3, r3, #14
 800449e:	4013      	ands	r3, r2
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d013      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	23c0      	movs	r3, #192	; 0xc0
 80044ac:	029b      	lsls	r3, r3, #10
 80044ae:	401a      	ands	r2, r3
 80044b0:	23c0      	movs	r3, #192	; 0xc0
 80044b2:	029b      	lsls	r3, r3, #10
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d10a      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80044b8:	4b60      	ldr	r3, [pc, #384]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	2380      	movs	r3, #128	; 0x80
 80044be:	029b      	lsls	r3, r3, #10
 80044c0:	401a      	ands	r2, r3
 80044c2:	2380      	movs	r3, #128	; 0x80
 80044c4:	029b      	lsls	r3, r3, #10
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d101      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e0b1      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80044ce:	4b5b      	ldr	r3, [pc, #364]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80044d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044d2:	23c0      	movs	r3, #192	; 0xc0
 80044d4:	029b      	lsls	r3, r3, #10
 80044d6:	4013      	ands	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d03b      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	23c0      	movs	r3, #192	; 0xc0
 80044e6:	029b      	lsls	r3, r3, #10
 80044e8:	4013      	ands	r3, r2
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d033      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2220      	movs	r2, #32
 80044f6:	4013      	ands	r3, r2
 80044f8:	d02e      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80044fa:	4b50      	ldr	r3, [pc, #320]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80044fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fe:	4a51      	ldr	r2, [pc, #324]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8004500:	4013      	ands	r3, r2
 8004502:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004504:	4b4d      	ldr	r3, [pc, #308]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004506:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004508:	4b4c      	ldr	r3, [pc, #304]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800450a:	2180      	movs	r1, #128	; 0x80
 800450c:	0309      	lsls	r1, r1, #12
 800450e:	430a      	orrs	r2, r1
 8004510:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004512:	4b4a      	ldr	r3, [pc, #296]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004514:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004516:	4b49      	ldr	r3, [pc, #292]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004518:	494b      	ldr	r1, [pc, #300]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800451a:	400a      	ands	r2, r1
 800451c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800451e:	4b47      	ldr	r3, [pc, #284]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	4013      	ands	r3, r2
 800452c:	d014      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452e:	f7fe f8f1 	bl	8002714 <HAL_GetTick>
 8004532:	0003      	movs	r3, r0
 8004534:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004536:	e009      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004538:	f7fe f8ec 	bl	8002714 <HAL_GetTick>
 800453c:	0002      	movs	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	4a42      	ldr	r2, [pc, #264]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d901      	bls.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e072      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800454c:	4b3b      	ldr	r3, [pc, #236]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800454e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004550:	2380      	movs	r3, #128	; 0x80
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4013      	ands	r3, r2
 8004556:	d0ef      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2220      	movs	r2, #32
 800455e:	4013      	ands	r3, r2
 8004560:	d01f      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	23c0      	movs	r3, #192	; 0xc0
 8004568:	029b      	lsls	r3, r3, #10
 800456a:	401a      	ands	r2, r3
 800456c:	23c0      	movs	r3, #192	; 0xc0
 800456e:	029b      	lsls	r3, r3, #10
 8004570:	429a      	cmp	r2, r3
 8004572:	d10c      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004574:	4b31      	ldr	r3, [pc, #196]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a35      	ldr	r2, [pc, #212]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800457a:	4013      	ands	r3, r2
 800457c:	0019      	movs	r1, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	23c0      	movs	r3, #192	; 0xc0
 8004584:	039b      	lsls	r3, r3, #14
 8004586:	401a      	ands	r2, r3
 8004588:	4b2c      	ldr	r3, [pc, #176]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800458a:	430a      	orrs	r2, r1
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	4b2b      	ldr	r3, [pc, #172]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004590:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	23c0      	movs	r3, #192	; 0xc0
 8004598:	029b      	lsls	r3, r3, #10
 800459a:	401a      	ands	r2, r3
 800459c:	4b27      	ldr	r3, [pc, #156]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800459e:	430a      	orrs	r2, r1
 80045a0:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045a2:	2317      	movs	r3, #23
 80045a4:	18fb      	adds	r3, r7, r3
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d105      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ac:	4b23      	ldr	r3, [pc, #140]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80045ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045b0:	4b22      	ldr	r3, [pc, #136]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80045b2:	4928      	ldr	r1, [pc, #160]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045b4:	400a      	ands	r2, r1
 80045b6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2202      	movs	r2, #2
 80045be:	4013      	ands	r3, r2
 80045c0:	d009      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045c2:	4b1e      	ldr	r3, [pc, #120]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80045c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c6:	220c      	movs	r2, #12
 80045c8:	4393      	bics	r3, r2
 80045ca:	0019      	movs	r1, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	4b1a      	ldr	r3, [pc, #104]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80045d2:	430a      	orrs	r2, r1
 80045d4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2204      	movs	r2, #4
 80045dc:	4013      	ands	r3, r2
 80045de:	d009      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045e0:	4b16      	ldr	r3, [pc, #88]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80045e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e4:	4a1c      	ldr	r2, [pc, #112]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	0019      	movs	r1, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	4b13      	ldr	r3, [pc, #76]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80045f0:	430a      	orrs	r2, r1
 80045f2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2208      	movs	r2, #8
 80045fa:	4013      	ands	r3, r2
 80045fc:	d009      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045fe:	4b0f      	ldr	r3, [pc, #60]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004602:	4a16      	ldr	r2, [pc, #88]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004604:	4013      	ands	r3, r2
 8004606:	0019      	movs	r1, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	4b0b      	ldr	r3, [pc, #44]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800460e:	430a      	orrs	r2, r1
 8004610:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2280      	movs	r2, #128	; 0x80
 8004618:	4013      	ands	r3, r2
 800461a:	d009      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800461c:	4b07      	ldr	r3, [pc, #28]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800461e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004620:	4a0f      	ldr	r2, [pc, #60]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004622:	4013      	ands	r3, r2
 8004624:	0019      	movs	r1, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695a      	ldr	r2, [r3, #20]
 800462a:	4b04      	ldr	r3, [pc, #16]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800462c:	430a      	orrs	r2, r1
 800462e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	0018      	movs	r0, r3
 8004634:	46bd      	mov	sp, r7
 8004636:	b006      	add	sp, #24
 8004638:	bd80      	pop	{r7, pc}
 800463a:	46c0      	nop			; (mov r8, r8)
 800463c:	40021000 	.word	0x40021000
 8004640:	40007000 	.word	0x40007000
 8004644:	fffcffff 	.word	0xfffcffff
 8004648:	fff7ffff 	.word	0xfff7ffff
 800464c:	00001388 	.word	0x00001388
 8004650:	ffcfffff 	.word	0xffcfffff
 8004654:	efffffff 	.word	0xefffffff
 8004658:	fffff3ff 	.word	0xfffff3ff
 800465c:	ffffcfff 	.word	0xffffcfff
 8004660:	fff3ffff 	.word	0xfff3ffff

08004664 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004664:	b5b0      	push	{r4, r5, r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800466c:	230f      	movs	r3, #15
 800466e:	18fb      	adds	r3, r7, r3
 8004670:	2201      	movs	r2, #1
 8004672:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e088      	b.n	8004790 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2221      	movs	r2, #33	; 0x21
 8004682:	5c9b      	ldrb	r3, [r3, r2]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d107      	bne.n	800469a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2220      	movs	r2, #32
 800468e:	2100      	movs	r1, #0
 8004690:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	0018      	movs	r0, r3
 8004696:	f7fd fdbb 	bl	8002210 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2221      	movs	r2, #33	; 0x21
 800469e:	2102      	movs	r1, #2
 80046a0:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	2210      	movs	r2, #16
 80046aa:	4013      	ands	r3, r2
 80046ac:	2b10      	cmp	r3, #16
 80046ae:	d05f      	beq.n	8004770 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	22ca      	movs	r2, #202	; 0xca
 80046b6:	625a      	str	r2, [r3, #36]	; 0x24
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2253      	movs	r2, #83	; 0x53
 80046be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80046c0:	250f      	movs	r5, #15
 80046c2:	197c      	adds	r4, r7, r5
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	0018      	movs	r0, r3
 80046c8:	f000 fa7c 	bl	8004bc4 <RTC_EnterInitMode>
 80046cc:	0003      	movs	r3, r0
 80046ce:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80046d0:	0028      	movs	r0, r5
 80046d2:	183b      	adds	r3, r7, r0
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d12c      	bne.n	8004734 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	492c      	ldr	r1, [pc, #176]	; (8004798 <HAL_RTC_Init+0x134>)
 80046e6:	400a      	ands	r2, r1
 80046e8:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6899      	ldr	r1, [r3, #8]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	68d2      	ldr	r2, [r2, #12]
 8004710:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6919      	ldr	r1, [r3, #16]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	041a      	lsls	r2, r3, #16
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004726:	183c      	adds	r4, r7, r0
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	0018      	movs	r0, r3
 800472c:	f000 fa8e 	bl	8004c4c <RTC_ExitInitMode>
 8004730:	0003      	movs	r3, r0
 8004732:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8004734:	230f      	movs	r3, #15
 8004736:	18fb      	adds	r3, r7, r3
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d113      	bne.n	8004766 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2103      	movs	r1, #3
 800474a:	438a      	bics	r2, r1
 800474c:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69da      	ldr	r2, [r3, #28]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	22ff      	movs	r2, #255	; 0xff
 800476c:	625a      	str	r2, [r3, #36]	; 0x24
 800476e:	e003      	b.n	8004778 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004770:	230f      	movs	r3, #15
 8004772:	18fb      	adds	r3, r7, r3
 8004774:	2200      	movs	r2, #0
 8004776:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8004778:	230f      	movs	r3, #15
 800477a:	18fb      	adds	r3, r7, r3
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d103      	bne.n	800478a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2221      	movs	r2, #33	; 0x21
 8004786:	2101      	movs	r1, #1
 8004788:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800478a:	230f      	movs	r3, #15
 800478c:	18fb      	adds	r3, r7, r3
 800478e:	781b      	ldrb	r3, [r3, #0]
}
 8004790:	0018      	movs	r0, r3
 8004792:	46bd      	mov	sp, r7
 8004794:	b004      	add	sp, #16
 8004796:	bdb0      	pop	{r4, r5, r7, pc}
 8004798:	ff8fffbf 	.word	0xff8fffbf

0800479c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800479c:	b5b0      	push	{r4, r5, r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2220      	movs	r2, #32
 80047b0:	5c9b      	ldrb	r3, [r3, r2]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d101      	bne.n	80047ba <HAL_RTC_SetTime+0x1e>
 80047b6:	2302      	movs	r3, #2
 80047b8:	e092      	b.n	80048e0 <HAL_RTC_SetTime+0x144>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2220      	movs	r2, #32
 80047be:	2101      	movs	r1, #1
 80047c0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2221      	movs	r2, #33	; 0x21
 80047c6:	2102      	movs	r1, #2
 80047c8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d125      	bne.n	800481c <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	2240      	movs	r2, #64	; 0x40
 80047d8:	4013      	ands	r3, r2
 80047da:	d102      	bne.n	80047e2 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2200      	movs	r2, #0
 80047e0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	0018      	movs	r0, r3
 80047e8:	f000 fa5a 	bl	8004ca0 <RTC_ByteToBcd2>
 80047ec:	0003      	movs	r3, r0
 80047ee:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	785b      	ldrb	r3, [r3, #1]
 80047f4:	0018      	movs	r0, r3
 80047f6:	f000 fa53 	bl	8004ca0 <RTC_ByteToBcd2>
 80047fa:	0003      	movs	r3, r0
 80047fc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80047fe:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	789b      	ldrb	r3, [r3, #2]
 8004804:	0018      	movs	r0, r3
 8004806:	f000 fa4b 	bl	8004ca0 <RTC_ByteToBcd2>
 800480a:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800480c:	0022      	movs	r2, r4
 800480e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	78db      	ldrb	r3, [r3, #3]
 8004814:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	e017      	b.n	800484c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	2240      	movs	r2, #64	; 0x40
 8004824:	4013      	ands	r3, r2
 8004826:	d102      	bne.n	800482e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2200      	movs	r2, #0
 800482c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	785b      	ldrb	r3, [r3, #1]
 8004838:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800483a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004840:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	78db      	ldrb	r3, [r3, #3]
 8004846:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004848:	4313      	orrs	r3, r2
 800484a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	22ca      	movs	r2, #202	; 0xca
 8004852:	625a      	str	r2, [r3, #36]	; 0x24
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2253      	movs	r2, #83	; 0x53
 800485a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800485c:	2513      	movs	r5, #19
 800485e:	197c      	adds	r4, r7, r5
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	0018      	movs	r0, r3
 8004864:	f000 f9ae 	bl	8004bc4 <RTC_EnterInitMode>
 8004868:	0003      	movs	r3, r0
 800486a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800486c:	0028      	movs	r0, r5
 800486e:	183b      	adds	r3, r7, r0
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d120      	bne.n	80048b8 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	491a      	ldr	r1, [pc, #104]	; (80048e8 <HAL_RTC_SetTime+0x14c>)
 800487e:	400a      	ands	r2, r1
 8004880:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4917      	ldr	r1, [pc, #92]	; (80048ec <HAL_RTC_SetTime+0x150>)
 800488e:	400a      	ands	r2, r1
 8004890:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6899      	ldr	r1, [r3, #8]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	68da      	ldr	r2, [r3, #12]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	431a      	orrs	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80048aa:	183c      	adds	r4, r7, r0
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	0018      	movs	r0, r3
 80048b0:	f000 f9cc 	bl	8004c4c <RTC_ExitInitMode>
 80048b4:	0003      	movs	r3, r0
 80048b6:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80048b8:	2313      	movs	r3, #19
 80048ba:	18fb      	adds	r3, r7, r3
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d103      	bne.n	80048ca <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2221      	movs	r2, #33	; 0x21
 80048c6:	2101      	movs	r1, #1
 80048c8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	22ff      	movs	r2, #255	; 0xff
 80048d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	2100      	movs	r1, #0
 80048d8:	5499      	strb	r1, [r3, r2]

  return status;
 80048da:	2313      	movs	r3, #19
 80048dc:	18fb      	adds	r3, r7, r3
 80048de:	781b      	ldrb	r3, [r3, #0]
}
 80048e0:	0018      	movs	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b006      	add	sp, #24
 80048e6:	bdb0      	pop	{r4, r5, r7, pc}
 80048e8:	007f7f7f 	.word	0x007f7f7f
 80048ec:	fffbffff 	.word	0xfffbffff

080048f0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	045b      	lsls	r3, r3, #17
 8004912:	0c5a      	lsrs	r2, r3, #17
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a22      	ldr	r2, [pc, #136]	; (80049a8 <HAL_RTC_GetTime+0xb8>)
 8004920:	4013      	ands	r3, r2
 8004922:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	0c1b      	lsrs	r3, r3, #16
 8004928:	b2db      	uxtb	r3, r3
 800492a:	223f      	movs	r2, #63	; 0x3f
 800492c:	4013      	ands	r3, r2
 800492e:	b2da      	uxtb	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	0a1b      	lsrs	r3, r3, #8
 8004938:	b2db      	uxtb	r3, r3
 800493a:	227f      	movs	r2, #127	; 0x7f
 800493c:	4013      	ands	r3, r2
 800493e:	b2da      	uxtb	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	b2db      	uxtb	r3, r3
 8004948:	227f      	movs	r2, #127	; 0x7f
 800494a:	4013      	ands	r3, r2
 800494c:	b2da      	uxtb	r2, r3
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	0d9b      	lsrs	r3, r3, #22
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2201      	movs	r2, #1
 800495a:	4013      	ands	r3, r2
 800495c:	b2da      	uxtb	r2, r3
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d11a      	bne.n	800499e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	0018      	movs	r0, r3
 800496e:	f000 f9b8 	bl	8004ce2 <RTC_Bcd2ToByte>
 8004972:	0003      	movs	r3, r0
 8004974:	001a      	movs	r2, r3
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	785b      	ldrb	r3, [r3, #1]
 800497e:	0018      	movs	r0, r3
 8004980:	f000 f9af 	bl	8004ce2 <RTC_Bcd2ToByte>
 8004984:	0003      	movs	r3, r0
 8004986:	001a      	movs	r2, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	789b      	ldrb	r3, [r3, #2]
 8004990:	0018      	movs	r0, r3
 8004992:	f000 f9a6 	bl	8004ce2 <RTC_Bcd2ToByte>
 8004996:	0003      	movs	r3, r0
 8004998:	001a      	movs	r2, r3
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	0018      	movs	r0, r3
 80049a2:	46bd      	mov	sp, r7
 80049a4:	b006      	add	sp, #24
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	007f7f7f 	.word	0x007f7f7f

080049ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80049ac:	b5b0      	push	{r4, r5, r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	5c9b      	ldrb	r3, [r3, r2]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d101      	bne.n	80049ca <HAL_RTC_SetDate+0x1e>
 80049c6:	2302      	movs	r3, #2
 80049c8:	e07e      	b.n	8004ac8 <HAL_RTC_SetDate+0x11c>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2220      	movs	r2, #32
 80049ce:	2101      	movs	r1, #1
 80049d0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2221      	movs	r2, #33	; 0x21
 80049d6:	2102      	movs	r1, #2
 80049d8:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10e      	bne.n	80049fe <HAL_RTC_SetDate+0x52>
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	785b      	ldrb	r3, [r3, #1]
 80049e4:	001a      	movs	r2, r3
 80049e6:	2310      	movs	r3, #16
 80049e8:	4013      	ands	r3, r2
 80049ea:	d008      	beq.n	80049fe <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	785b      	ldrb	r3, [r3, #1]
 80049f0:	2210      	movs	r2, #16
 80049f2:	4393      	bics	r3, r2
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	330a      	adds	r3, #10
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d11c      	bne.n	8004a3e <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	78db      	ldrb	r3, [r3, #3]
 8004a08:	0018      	movs	r0, r3
 8004a0a:	f000 f949 	bl	8004ca0 <RTC_ByteToBcd2>
 8004a0e:	0003      	movs	r3, r0
 8004a10:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	785b      	ldrb	r3, [r3, #1]
 8004a16:	0018      	movs	r0, r3
 8004a18:	f000 f942 	bl	8004ca0 <RTC_ByteToBcd2>
 8004a1c:	0003      	movs	r3, r0
 8004a1e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a20:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	789b      	ldrb	r3, [r3, #2]
 8004a26:	0018      	movs	r0, r3
 8004a28:	f000 f93a 	bl	8004ca0 <RTC_ByteToBcd2>
 8004a2c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004a2e:	0022      	movs	r2, r4
 8004a30:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	e00e      	b.n	8004a5c <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	78db      	ldrb	r3, [r3, #3]
 8004a42:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	785b      	ldrb	r3, [r3, #1]
 8004a48:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004a4a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004a50:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	22ca      	movs	r2, #202	; 0xca
 8004a62:	625a      	str	r2, [r3, #36]	; 0x24
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2253      	movs	r2, #83	; 0x53
 8004a6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004a6c:	2513      	movs	r5, #19
 8004a6e:	197c      	adds	r4, r7, r5
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	0018      	movs	r0, r3
 8004a74:	f000 f8a6 	bl	8004bc4 <RTC_EnterInitMode>
 8004a78:	0003      	movs	r3, r0
 8004a7a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8004a7c:	0028      	movs	r0, r5
 8004a7e:	183b      	adds	r3, r7, r0
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10c      	bne.n	8004aa0 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	4910      	ldr	r1, [pc, #64]	; (8004ad0 <HAL_RTC_SetDate+0x124>)
 8004a8e:	400a      	ands	r2, r1
 8004a90:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004a92:	183c      	adds	r4, r7, r0
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	0018      	movs	r0, r3
 8004a98:	f000 f8d8 	bl	8004c4c <RTC_ExitInitMode>
 8004a9c:	0003      	movs	r3, r0
 8004a9e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8004aa0:	2313      	movs	r3, #19
 8004aa2:	18fb      	adds	r3, r7, r3
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d103      	bne.n	8004ab2 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2221      	movs	r2, #33	; 0x21
 8004aae:	2101      	movs	r1, #1
 8004ab0:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	22ff      	movs	r2, #255	; 0xff
 8004ab8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2220      	movs	r2, #32
 8004abe:	2100      	movs	r1, #0
 8004ac0:	5499      	strb	r1, [r3, r2]

  return status;
 8004ac2:	2313      	movs	r3, #19
 8004ac4:	18fb      	adds	r3, r7, r3
 8004ac6:	781b      	ldrb	r3, [r3, #0]
}
 8004ac8:	0018      	movs	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	b006      	add	sp, #24
 8004ace:	bdb0      	pop	{r4, r5, r7, pc}
 8004ad0:	00ffff3f 	.word	0x00ffff3f

08004ad4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	4a21      	ldr	r2, [pc, #132]	; (8004b70 <HAL_RTC_GetDate+0x9c>)
 8004aec:	4013      	ands	r3, r2
 8004aee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	0c1b      	lsrs	r3, r3, #16
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	0a1b      	lsrs	r3, r3, #8
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	221f      	movs	r2, #31
 8004b02:	4013      	ands	r3, r2
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	223f      	movs	r2, #63	; 0x3f
 8004b10:	4013      	ands	r3, r2
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	0b5b      	lsrs	r3, r3, #13
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2207      	movs	r2, #7
 8004b20:	4013      	ands	r3, r2
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d11a      	bne.n	8004b64 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	78db      	ldrb	r3, [r3, #3]
 8004b32:	0018      	movs	r0, r3
 8004b34:	f000 f8d5 	bl	8004ce2 <RTC_Bcd2ToByte>
 8004b38:	0003      	movs	r3, r0
 8004b3a:	001a      	movs	r2, r3
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	785b      	ldrb	r3, [r3, #1]
 8004b44:	0018      	movs	r0, r3
 8004b46:	f000 f8cc 	bl	8004ce2 <RTC_Bcd2ToByte>
 8004b4a:	0003      	movs	r3, r0
 8004b4c:	001a      	movs	r2, r3
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	789b      	ldrb	r3, [r3, #2]
 8004b56:	0018      	movs	r0, r3
 8004b58:	f000 f8c3 	bl	8004ce2 <RTC_Bcd2ToByte>
 8004b5c:	0003      	movs	r3, r0
 8004b5e:	001a      	movs	r2, r3
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	0018      	movs	r0, r3
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	b006      	add	sp, #24
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	46c0      	nop			; (mov r8, r8)
 8004b70:	00ffff3f 	.word	0x00ffff3f

08004b74 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a0e      	ldr	r2, [pc, #56]	; (8004bc0 <HAL_RTC_WaitForSynchro+0x4c>)
 8004b86:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b88:	f7fd fdc4 	bl	8002714 <HAL_GetTick>
 8004b8c:	0003      	movs	r3, r0
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b90:	e00a      	b.n	8004ba8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b92:	f7fd fdbf 	bl	8002714 <HAL_GetTick>
 8004b96:	0002      	movs	r2, r0
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	1ad2      	subs	r2, r2, r3
 8004b9c:	23fa      	movs	r3, #250	; 0xfa
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e006      	b.n	8004bb6 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	d0ee      	beq.n	8004b92 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	b004      	add	sp, #16
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	0001ff5f 	.word	0x0001ff5f

08004bc4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd0:	230f      	movs	r3, #15
 8004bd2:	18fb      	adds	r3, r7, r3
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	2240      	movs	r2, #64	; 0x40
 8004be0:	4013      	ands	r3, r2
 8004be2:	d12c      	bne.n	8004c3e <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68da      	ldr	r2, [r3, #12]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2180      	movs	r1, #128	; 0x80
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004bf4:	f7fd fd8e 	bl	8002714 <HAL_GetTick>
 8004bf8:	0003      	movs	r3, r0
 8004bfa:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004bfc:	e014      	b.n	8004c28 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004bfe:	f7fd fd89 	bl	8002714 <HAL_GetTick>
 8004c02:	0002      	movs	r2, r0
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	1ad2      	subs	r2, r2, r3
 8004c08:	200f      	movs	r0, #15
 8004c0a:	183b      	adds	r3, r7, r0
 8004c0c:	1839      	adds	r1, r7, r0
 8004c0e:	7809      	ldrb	r1, [r1, #0]
 8004c10:	7019      	strb	r1, [r3, #0]
 8004c12:	23fa      	movs	r3, #250	; 0xfa
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d906      	bls.n	8004c28 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2221      	movs	r2, #33	; 0x21
 8004c1e:	2104      	movs	r1, #4
 8004c20:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8004c22:	183b      	adds	r3, r7, r0
 8004c24:	2201      	movs	r2, #1
 8004c26:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	2240      	movs	r2, #64	; 0x40
 8004c30:	4013      	ands	r3, r2
 8004c32:	d104      	bne.n	8004c3e <RTC_EnterInitMode+0x7a>
 8004c34:	230f      	movs	r3, #15
 8004c36:	18fb      	adds	r3, r7, r3
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d1df      	bne.n	8004bfe <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8004c3e:	230f      	movs	r3, #15
 8004c40:	18fb      	adds	r3, r7, r3
 8004c42:	781b      	ldrb	r3, [r3, #0]
}
 8004c44:	0018      	movs	r0, r3
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b004      	add	sp, #16
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c4c:	b590      	push	{r4, r7, lr}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c54:	240f      	movs	r4, #15
 8004c56:	193b      	adds	r3, r7, r4
 8004c58:	2200      	movs	r2, #0
 8004c5a:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68da      	ldr	r2, [r3, #12]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2180      	movs	r1, #128	; 0x80
 8004c68:	438a      	bics	r2, r1
 8004c6a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	2220      	movs	r2, #32
 8004c74:	4013      	ands	r3, r2
 8004c76:	d10c      	bne.n	8004c92 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	f7ff ff7a 	bl	8004b74 <HAL_RTC_WaitForSynchro>
 8004c80:	1e03      	subs	r3, r0, #0
 8004c82:	d006      	beq.n	8004c92 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2221      	movs	r2, #33	; 0x21
 8004c88:	2104      	movs	r1, #4
 8004c8a:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8004c8c:	193b      	adds	r3, r7, r4
 8004c8e:	2201      	movs	r2, #1
 8004c90:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8004c92:	230f      	movs	r3, #15
 8004c94:	18fb      	adds	r3, r7, r3
 8004c96:	781b      	ldrb	r3, [r3, #0]
}
 8004c98:	0018      	movs	r0, r3
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	b005      	add	sp, #20
 8004c9e:	bd90      	pop	{r4, r7, pc}

08004ca0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	0002      	movs	r2, r0
 8004ca8:	1dfb      	adds	r3, r7, #7
 8004caa:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004cb0:	e007      	b.n	8004cc2 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004cb8:	1dfb      	adds	r3, r7, #7
 8004cba:	1dfa      	adds	r2, r7, #7
 8004cbc:	7812      	ldrb	r2, [r2, #0]
 8004cbe:	3a0a      	subs	r2, #10
 8004cc0:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8004cc2:	1dfb      	adds	r3, r7, #7
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	2b09      	cmp	r3, #9
 8004cc8:	d8f3      	bhi.n	8004cb2 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	1dfb      	adds	r3, r7, #7
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	b2db      	uxtb	r3, r3
}
 8004cda:	0018      	movs	r0, r3
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	b004      	add	sp, #16
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	0002      	movs	r2, r0
 8004cea:	1dfb      	adds	r3, r7, #7
 8004cec:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004cf2:	1dfb      	adds	r3, r7, #7
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	091b      	lsrs	r3, r3, #4
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	001a      	movs	r2, r3
 8004cfc:	0013      	movs	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	189b      	adds	r3, r3, r2
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	1dfb      	adds	r3, r7, #7
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	210f      	movs	r1, #15
 8004d10:	400b      	ands	r3, r1
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	18d3      	adds	r3, r2, r3
 8004d16:	b2db      	uxtb	r3, r3
}
 8004d18:	0018      	movs	r0, r3
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	b004      	add	sp, #16
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e032      	b.n	8004d98 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2239      	movs	r2, #57	; 0x39
 8004d36:	5c9b      	ldrb	r3, [r3, r2]
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d107      	bne.n	8004d4e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2238      	movs	r2, #56	; 0x38
 8004d42:	2100      	movs	r1, #0
 8004d44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	0018      	movs	r0, r3
 8004d4a:	f7fd fa79 	bl	8002240 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2239      	movs	r2, #57	; 0x39
 8004d52:	2102      	movs	r1, #2
 8004d54:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	0019      	movs	r1, r3
 8004d60:	0010      	movs	r0, r2
 8004d62:	f000 fbaf 	bl	80054c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	223e      	movs	r2, #62	; 0x3e
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	223a      	movs	r2, #58	; 0x3a
 8004d72:	2101      	movs	r1, #1
 8004d74:	5499      	strb	r1, [r3, r2]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	223b      	movs	r2, #59	; 0x3b
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	5499      	strb	r1, [r3, r2]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	223c      	movs	r2, #60	; 0x3c
 8004d82:	2101      	movs	r1, #1
 8004d84:	5499      	strb	r1, [r3, r2]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	223d      	movs	r2, #61	; 0x3d
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2239      	movs	r2, #57	; 0x39
 8004d92:	2101      	movs	r1, #1
 8004d94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	0018      	movs	r0, r3
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	b002      	add	sp, #8
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e032      	b.n	8004e18 <HAL_TIM_OC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2239      	movs	r2, #57	; 0x39
 8004db6:	5c9b      	ldrb	r3, [r3, r2]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d107      	bne.n	8004dce <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2238      	movs	r2, #56	; 0x38
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f000 f829 	bl	8004e20 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2239      	movs	r2, #57	; 0x39
 8004dd2:	2102      	movs	r1, #2
 8004dd4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	0019      	movs	r1, r3
 8004de0:	0010      	movs	r0, r2
 8004de2:	f000 fb6f 	bl	80054c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	223e      	movs	r2, #62	; 0x3e
 8004dea:	2101      	movs	r1, #1
 8004dec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	223a      	movs	r2, #58	; 0x3a
 8004df2:	2101      	movs	r1, #1
 8004df4:	5499      	strb	r1, [r3, r2]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	223b      	movs	r2, #59	; 0x3b
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	5499      	strb	r1, [r3, r2]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	223c      	movs	r2, #60	; 0x3c
 8004e02:	2101      	movs	r1, #1
 8004e04:	5499      	strb	r1, [r3, r2]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	223d      	movs	r2, #61	; 0x3d
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2239      	movs	r2, #57	; 0x39
 8004e12:	2101      	movs	r1, #1
 8004e14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	0018      	movs	r0, r3
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	b002      	add	sp, #8
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004e28:	46c0      	nop			; (mov r8, r8)
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b002      	add	sp, #8
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e032      	b.n	8004ea8 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2239      	movs	r2, #57	; 0x39
 8004e46:	5c9b      	ldrb	r3, [r3, r2]
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d107      	bne.n	8004e5e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2238      	movs	r2, #56	; 0x38
 8004e52:	2100      	movs	r1, #0
 8004e54:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	0018      	movs	r0, r3
 8004e5a:	f000 f829 	bl	8004eb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2239      	movs	r2, #57	; 0x39
 8004e62:	2102      	movs	r1, #2
 8004e64:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	0019      	movs	r1, r3
 8004e70:	0010      	movs	r0, r2
 8004e72:	f000 fb27 	bl	80054c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	223e      	movs	r2, #62	; 0x3e
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	223a      	movs	r2, #58	; 0x3a
 8004e82:	2101      	movs	r1, #1
 8004e84:	5499      	strb	r1, [r3, r2]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	223b      	movs	r2, #59	; 0x3b
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	5499      	strb	r1, [r3, r2]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	223c      	movs	r2, #60	; 0x3c
 8004e92:	2101      	movs	r1, #1
 8004e94:	5499      	strb	r1, [r3, r2]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	223d      	movs	r2, #61	; 0x3d
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2239      	movs	r2, #57	; 0x39
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	b002      	add	sp, #8
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004eb8:	46c0      	nop			; (mov r8, r8)
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	b002      	add	sp, #8
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d124      	bne.n	8004f20 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	2202      	movs	r2, #2
 8004ede:	4013      	ands	r3, r2
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d11d      	bne.n	8004f20 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2203      	movs	r2, #3
 8004eea:	4252      	negs	r2, r2
 8004eec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	2203      	movs	r2, #3
 8004efc:	4013      	ands	r3, r2
 8004efe:	d004      	beq.n	8004f0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	0018      	movs	r0, r3
 8004f04:	f000 fac6 	bl	8005494 <HAL_TIM_IC_CaptureCallback>
 8004f08:	e007      	b.n	8004f1a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	f000 fab9 	bl	8005484 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	0018      	movs	r0, r3
 8004f16:	f000 fac5 	bl	80054a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	2204      	movs	r2, #4
 8004f28:	4013      	ands	r3, r2
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d125      	bne.n	8004f7a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	2204      	movs	r2, #4
 8004f36:	4013      	ands	r3, r2
 8004f38:	2b04      	cmp	r3, #4
 8004f3a:	d11e      	bne.n	8004f7a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2205      	movs	r2, #5
 8004f42:	4252      	negs	r2, r2
 8004f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699a      	ldr	r2, [r3, #24]
 8004f52:	23c0      	movs	r3, #192	; 0xc0
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4013      	ands	r3, r2
 8004f58:	d004      	beq.n	8004f64 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	f000 fa99 	bl	8005494 <HAL_TIM_IC_CaptureCallback>
 8004f62:	e007      	b.n	8004f74 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	0018      	movs	r0, r3
 8004f68:	f000 fa8c 	bl	8005484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	0018      	movs	r0, r3
 8004f70:	f000 fa98 	bl	80054a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	2208      	movs	r2, #8
 8004f82:	4013      	ands	r3, r2
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d124      	bne.n	8004fd2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	2208      	movs	r2, #8
 8004f90:	4013      	ands	r3, r2
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d11d      	bne.n	8004fd2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2209      	movs	r2, #9
 8004f9c:	4252      	negs	r2, r2
 8004f9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2204      	movs	r2, #4
 8004fa4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	2203      	movs	r2, #3
 8004fae:	4013      	ands	r3, r2
 8004fb0:	d004      	beq.n	8004fbc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f000 fa6d 	bl	8005494 <HAL_TIM_IC_CaptureCallback>
 8004fba:	e007      	b.n	8004fcc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	f000 fa60 	bl	8005484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	f000 fa6c 	bl	80054a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	2210      	movs	r2, #16
 8004fda:	4013      	ands	r3, r2
 8004fdc:	2b10      	cmp	r3, #16
 8004fde:	d125      	bne.n	800502c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	2210      	movs	r2, #16
 8004fe8:	4013      	ands	r3, r2
 8004fea:	2b10      	cmp	r3, #16
 8004fec:	d11e      	bne.n	800502c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2211      	movs	r2, #17
 8004ff4:	4252      	negs	r2, r2
 8004ff6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2208      	movs	r2, #8
 8004ffc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69da      	ldr	r2, [r3, #28]
 8005004:	23c0      	movs	r3, #192	; 0xc0
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4013      	ands	r3, r2
 800500a:	d004      	beq.n	8005016 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	0018      	movs	r0, r3
 8005010:	f000 fa40 	bl	8005494 <HAL_TIM_IC_CaptureCallback>
 8005014:	e007      	b.n	8005026 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	0018      	movs	r0, r3
 800501a:	f000 fa33 	bl	8005484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	0018      	movs	r0, r3
 8005022:	f000 fa3f 	bl	80054a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	2201      	movs	r2, #1
 8005034:	4013      	ands	r3, r2
 8005036:	2b01      	cmp	r3, #1
 8005038:	d10f      	bne.n	800505a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	2201      	movs	r2, #1
 8005042:	4013      	ands	r3, r2
 8005044:	2b01      	cmp	r3, #1
 8005046:	d108      	bne.n	800505a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2202      	movs	r2, #2
 800504e:	4252      	negs	r2, r2
 8005050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	0018      	movs	r0, r3
 8005056:	f000 fa0d 	bl	8005474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	2240      	movs	r2, #64	; 0x40
 8005062:	4013      	ands	r3, r2
 8005064:	2b40      	cmp	r3, #64	; 0x40
 8005066:	d10f      	bne.n	8005088 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	2240      	movs	r2, #64	; 0x40
 8005070:	4013      	ands	r3, r2
 8005072:	2b40      	cmp	r3, #64	; 0x40
 8005074:	d108      	bne.n	8005088 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2241      	movs	r2, #65	; 0x41
 800507c:	4252      	negs	r2, r2
 800507e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	0018      	movs	r0, r3
 8005084:	f000 fa16 	bl	80054b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005088:	46c0      	nop			; (mov r8, r8)
 800508a:	46bd      	mov	sp, r7
 800508c:	b002      	add	sp, #8
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800509c:	2317      	movs	r3, #23
 800509e:	18fb      	adds	r3, r7, r3
 80050a0:	2200      	movs	r2, #0
 80050a2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2238      	movs	r2, #56	; 0x38
 80050a8:	5c9b      	ldrb	r3, [r3, r2]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d101      	bne.n	80050b2 <HAL_TIM_OC_ConfigChannel+0x22>
 80050ae:	2302      	movs	r3, #2
 80050b0:	e042      	b.n	8005138 <HAL_TIM_OC_ConfigChannel+0xa8>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2238      	movs	r2, #56	; 0x38
 80050b6:	2101      	movs	r1, #1
 80050b8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b0c      	cmp	r3, #12
 80050be:	d027      	beq.n	8005110 <HAL_TIM_OC_ConfigChannel+0x80>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b0c      	cmp	r3, #12
 80050c4:	d82c      	bhi.n	8005120 <HAL_TIM_OC_ConfigChannel+0x90>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d019      	beq.n	8005100 <HAL_TIM_OC_ConfigChannel+0x70>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b08      	cmp	r3, #8
 80050d0:	d826      	bhi.n	8005120 <HAL_TIM_OC_ConfigChannel+0x90>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <HAL_TIM_OC_ConfigChannel+0x50>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b04      	cmp	r3, #4
 80050dc:	d008      	beq.n	80050f0 <HAL_TIM_OC_ConfigChannel+0x60>
 80050de:	e01f      	b.n	8005120 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	0011      	movs	r1, r2
 80050e8:	0018      	movs	r0, r3
 80050ea:	f000 fa35 	bl	8005558 <TIM_OC1_SetConfig>
      break;
 80050ee:	e01c      	b.n	800512a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	0011      	movs	r1, r2
 80050f8:	0018      	movs	r0, r3
 80050fa:	f000 fa69 	bl	80055d0 <TIM_OC2_SetConfig>
      break;
 80050fe:	e014      	b.n	800512a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	0011      	movs	r1, r2
 8005108:	0018      	movs	r0, r3
 800510a:	f000 faa3 	bl	8005654 <TIM_OC3_SetConfig>
      break;
 800510e:	e00c      	b.n	800512a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	0011      	movs	r1, r2
 8005118:	0018      	movs	r0, r3
 800511a:	f000 fadb 	bl	80056d4 <TIM_OC4_SetConfig>
      break;
 800511e:	e004      	b.n	800512a <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8005120:	2317      	movs	r3, #23
 8005122:	18fb      	adds	r3, r7, r3
 8005124:	2201      	movs	r2, #1
 8005126:	701a      	strb	r2, [r3, #0]
      break;
 8005128:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2238      	movs	r2, #56	; 0x38
 800512e:	2100      	movs	r1, #0
 8005130:	5499      	strb	r1, [r3, r2]

  return status;
 8005132:	2317      	movs	r3, #23
 8005134:	18fb      	adds	r3, r7, r3
 8005136:	781b      	ldrb	r3, [r3, #0]
}
 8005138:	0018      	movs	r0, r3
 800513a:	46bd      	mov	sp, r7
 800513c:	b006      	add	sp, #24
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800514c:	2317      	movs	r3, #23
 800514e:	18fb      	adds	r3, r7, r3
 8005150:	2200      	movs	r2, #0
 8005152:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2238      	movs	r2, #56	; 0x38
 8005158:	5c9b      	ldrb	r3, [r3, r2]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d101      	bne.n	8005162 <HAL_TIM_PWM_ConfigChannel+0x22>
 800515e:	2302      	movs	r3, #2
 8005160:	e0ad      	b.n	80052be <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2238      	movs	r2, #56	; 0x38
 8005166:	2101      	movs	r1, #1
 8005168:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b0c      	cmp	r3, #12
 800516e:	d100      	bne.n	8005172 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005170:	e076      	b.n	8005260 <HAL_TIM_PWM_ConfigChannel+0x120>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b0c      	cmp	r3, #12
 8005176:	d900      	bls.n	800517a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005178:	e095      	b.n	80052a6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b08      	cmp	r3, #8
 800517e:	d04e      	beq.n	800521e <HAL_TIM_PWM_ConfigChannel+0xde>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b08      	cmp	r3, #8
 8005184:	d900      	bls.n	8005188 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005186:	e08e      	b.n	80052a6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <HAL_TIM_PWM_ConfigChannel+0x56>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b04      	cmp	r3, #4
 8005192:	d021      	beq.n	80051d8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8005194:	e087      	b.n	80052a6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	0011      	movs	r1, r2
 800519e:	0018      	movs	r0, r3
 80051a0:	f000 f9da 	bl	8005558 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699a      	ldr	r2, [r3, #24]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2108      	movs	r1, #8
 80051b0:	430a      	orrs	r2, r1
 80051b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699a      	ldr	r2, [r3, #24]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2104      	movs	r1, #4
 80051c0:	438a      	bics	r2, r1
 80051c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6999      	ldr	r1, [r3, #24]
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	619a      	str	r2, [r3, #24]
      break;
 80051d6:	e06b      	b.n	80052b0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	0011      	movs	r1, r2
 80051e0:	0018      	movs	r0, r3
 80051e2:	f000 f9f5 	bl	80055d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	699a      	ldr	r2, [r3, #24]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2180      	movs	r1, #128	; 0x80
 80051f2:	0109      	lsls	r1, r1, #4
 80051f4:	430a      	orrs	r2, r1
 80051f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699a      	ldr	r2, [r3, #24]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4931      	ldr	r1, [pc, #196]	; (80052c8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005204:	400a      	ands	r2, r1
 8005206:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6999      	ldr	r1, [r3, #24]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	021a      	lsls	r2, r3, #8
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	619a      	str	r2, [r3, #24]
      break;
 800521c:	e048      	b.n	80052b0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	0011      	movs	r1, r2
 8005226:	0018      	movs	r0, r3
 8005228:	f000 fa14 	bl	8005654 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	69da      	ldr	r2, [r3, #28]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2108      	movs	r1, #8
 8005238:	430a      	orrs	r2, r1
 800523a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	69da      	ldr	r2, [r3, #28]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2104      	movs	r1, #4
 8005248:	438a      	bics	r2, r1
 800524a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	69d9      	ldr	r1, [r3, #28]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	61da      	str	r2, [r3, #28]
      break;
 800525e:	e027      	b.n	80052b0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	0011      	movs	r1, r2
 8005268:	0018      	movs	r0, r3
 800526a:	f000 fa33 	bl	80056d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69da      	ldr	r2, [r3, #28]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2180      	movs	r1, #128	; 0x80
 800527a:	0109      	lsls	r1, r1, #4
 800527c:	430a      	orrs	r2, r1
 800527e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	69da      	ldr	r2, [r3, #28]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	490f      	ldr	r1, [pc, #60]	; (80052c8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800528c:	400a      	ands	r2, r1
 800528e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	69d9      	ldr	r1, [r3, #28]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	021a      	lsls	r2, r3, #8
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	61da      	str	r2, [r3, #28]
      break;
 80052a4:	e004      	b.n	80052b0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80052a6:	2317      	movs	r3, #23
 80052a8:	18fb      	adds	r3, r7, r3
 80052aa:	2201      	movs	r2, #1
 80052ac:	701a      	strb	r2, [r3, #0]
      break;
 80052ae:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2238      	movs	r2, #56	; 0x38
 80052b4:	2100      	movs	r1, #0
 80052b6:	5499      	strb	r1, [r3, r2]

  return status;
 80052b8:	2317      	movs	r3, #23
 80052ba:	18fb      	adds	r3, r7, r3
 80052bc:	781b      	ldrb	r3, [r3, #0]
}
 80052be:	0018      	movs	r0, r3
 80052c0:	46bd      	mov	sp, r7
 80052c2:	b006      	add	sp, #24
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	fffffbff 	.word	0xfffffbff

080052cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052d6:	230f      	movs	r3, #15
 80052d8:	18fb      	adds	r3, r7, r3
 80052da:	2200      	movs	r2, #0
 80052dc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2238      	movs	r2, #56	; 0x38
 80052e2:	5c9b      	ldrb	r3, [r3, r2]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d101      	bne.n	80052ec <HAL_TIM_ConfigClockSource+0x20>
 80052e8:	2302      	movs	r3, #2
 80052ea:	e0bc      	b.n	8005466 <HAL_TIM_ConfigClockSource+0x19a>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2238      	movs	r2, #56	; 0x38
 80052f0:	2101      	movs	r1, #1
 80052f2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2239      	movs	r2, #57	; 0x39
 80052f8:	2102      	movs	r1, #2
 80052fa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	2277      	movs	r2, #119	; 0x77
 8005308:	4393      	bics	r3, r2
 800530a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	4a58      	ldr	r2, [pc, #352]	; (8005470 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005310:	4013      	ands	r3, r2
 8005312:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2280      	movs	r2, #128	; 0x80
 8005322:	0192      	lsls	r2, r2, #6
 8005324:	4293      	cmp	r3, r2
 8005326:	d040      	beq.n	80053aa <HAL_TIM_ConfigClockSource+0xde>
 8005328:	2280      	movs	r2, #128	; 0x80
 800532a:	0192      	lsls	r2, r2, #6
 800532c:	4293      	cmp	r3, r2
 800532e:	d900      	bls.n	8005332 <HAL_TIM_ConfigClockSource+0x66>
 8005330:	e088      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x178>
 8005332:	2280      	movs	r2, #128	; 0x80
 8005334:	0152      	lsls	r2, r2, #5
 8005336:	4293      	cmp	r3, r2
 8005338:	d100      	bne.n	800533c <HAL_TIM_ConfigClockSource+0x70>
 800533a:	e088      	b.n	800544e <HAL_TIM_ConfigClockSource+0x182>
 800533c:	2280      	movs	r2, #128	; 0x80
 800533e:	0152      	lsls	r2, r2, #5
 8005340:	4293      	cmp	r3, r2
 8005342:	d900      	bls.n	8005346 <HAL_TIM_ConfigClockSource+0x7a>
 8005344:	e07e      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x178>
 8005346:	2b70      	cmp	r3, #112	; 0x70
 8005348:	d018      	beq.n	800537c <HAL_TIM_ConfigClockSource+0xb0>
 800534a:	d900      	bls.n	800534e <HAL_TIM_ConfigClockSource+0x82>
 800534c:	e07a      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x178>
 800534e:	2b60      	cmp	r3, #96	; 0x60
 8005350:	d04f      	beq.n	80053f2 <HAL_TIM_ConfigClockSource+0x126>
 8005352:	d900      	bls.n	8005356 <HAL_TIM_ConfigClockSource+0x8a>
 8005354:	e076      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x178>
 8005356:	2b50      	cmp	r3, #80	; 0x50
 8005358:	d03b      	beq.n	80053d2 <HAL_TIM_ConfigClockSource+0x106>
 800535a:	d900      	bls.n	800535e <HAL_TIM_ConfigClockSource+0x92>
 800535c:	e072      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x178>
 800535e:	2b40      	cmp	r3, #64	; 0x40
 8005360:	d057      	beq.n	8005412 <HAL_TIM_ConfigClockSource+0x146>
 8005362:	d900      	bls.n	8005366 <HAL_TIM_ConfigClockSource+0x9a>
 8005364:	e06e      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x178>
 8005366:	2b30      	cmp	r3, #48	; 0x30
 8005368:	d063      	beq.n	8005432 <HAL_TIM_ConfigClockSource+0x166>
 800536a:	d86b      	bhi.n	8005444 <HAL_TIM_ConfigClockSource+0x178>
 800536c:	2b20      	cmp	r3, #32
 800536e:	d060      	beq.n	8005432 <HAL_TIM_ConfigClockSource+0x166>
 8005370:	d868      	bhi.n	8005444 <HAL_TIM_ConfigClockSource+0x178>
 8005372:	2b00      	cmp	r3, #0
 8005374:	d05d      	beq.n	8005432 <HAL_TIM_ConfigClockSource+0x166>
 8005376:	2b10      	cmp	r3, #16
 8005378:	d05b      	beq.n	8005432 <HAL_TIM_ConfigClockSource+0x166>
 800537a:	e063      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800538c:	f000 fa62 	bl	8005854 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2277      	movs	r2, #119	; 0x77
 800539c:	4313      	orrs	r3, r2
 800539e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	609a      	str	r2, [r3, #8]
      break;
 80053a8:	e052      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053ba:	f000 fa4b 	bl	8005854 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2180      	movs	r1, #128	; 0x80
 80053ca:	01c9      	lsls	r1, r1, #7
 80053cc:	430a      	orrs	r2, r1
 80053ce:	609a      	str	r2, [r3, #8]
      break;
 80053d0:	e03e      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053de:	001a      	movs	r2, r3
 80053e0:	f000 f9be 	bl	8005760 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2150      	movs	r1, #80	; 0x50
 80053ea:	0018      	movs	r0, r3
 80053ec:	f000 fa18 	bl	8005820 <TIM_ITRx_SetConfig>
      break;
 80053f0:	e02e      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053fe:	001a      	movs	r2, r3
 8005400:	f000 f9dc 	bl	80057bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2160      	movs	r1, #96	; 0x60
 800540a:	0018      	movs	r0, r3
 800540c:	f000 fa08 	bl	8005820 <TIM_ITRx_SetConfig>
      break;
 8005410:	e01e      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800541e:	001a      	movs	r2, r3
 8005420:	f000 f99e 	bl	8005760 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2140      	movs	r1, #64	; 0x40
 800542a:	0018      	movs	r0, r3
 800542c:	f000 f9f8 	bl	8005820 <TIM_ITRx_SetConfig>
      break;
 8005430:	e00e      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	0019      	movs	r1, r3
 800543c:	0010      	movs	r0, r2
 800543e:	f000 f9ef 	bl	8005820 <TIM_ITRx_SetConfig>
      break;
 8005442:	e005      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005444:	230f      	movs	r3, #15
 8005446:	18fb      	adds	r3, r7, r3
 8005448:	2201      	movs	r2, #1
 800544a:	701a      	strb	r2, [r3, #0]
      break;
 800544c:	e000      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800544e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2239      	movs	r2, #57	; 0x39
 8005454:	2101      	movs	r1, #1
 8005456:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2238      	movs	r2, #56	; 0x38
 800545c:	2100      	movs	r1, #0
 800545e:	5499      	strb	r1, [r3, r2]

  return status;
 8005460:	230f      	movs	r3, #15
 8005462:	18fb      	adds	r3, r7, r3
 8005464:	781b      	ldrb	r3, [r3, #0]
}
 8005466:	0018      	movs	r0, r3
 8005468:	46bd      	mov	sp, r7
 800546a:	b004      	add	sp, #16
 800546c:	bd80      	pop	{r7, pc}
 800546e:	46c0      	nop			; (mov r8, r8)
 8005470:	ffff00ff 	.word	0xffff00ff

08005474 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800547c:	46c0      	nop			; (mov r8, r8)
 800547e:	46bd      	mov	sp, r7
 8005480:	b002      	add	sp, #8
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800548c:	46c0      	nop			; (mov r8, r8)
 800548e:	46bd      	mov	sp, r7
 8005490:	b002      	add	sp, #8
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800549c:	46c0      	nop			; (mov r8, r8)
 800549e:	46bd      	mov	sp, r7
 80054a0:	b002      	add	sp, #8
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054ac:	46c0      	nop			; (mov r8, r8)
 80054ae:	46bd      	mov	sp, r7
 80054b0:	b002      	add	sp, #8
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054bc:	46c0      	nop			; (mov r8, r8)
 80054be:	46bd      	mov	sp, r7
 80054c0:	b002      	add	sp, #8
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	2380      	movs	r3, #128	; 0x80
 80054d8:	05db      	lsls	r3, r3, #23
 80054da:	429a      	cmp	r2, r3
 80054dc:	d003      	beq.n	80054e6 <TIM_Base_SetConfig+0x22>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a1b      	ldr	r2, [pc, #108]	; (8005550 <TIM_Base_SetConfig+0x8c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d108      	bne.n	80054f8 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2270      	movs	r2, #112	; 0x70
 80054ea:	4393      	bics	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	2380      	movs	r3, #128	; 0x80
 80054fc:	05db      	lsls	r3, r3, #23
 80054fe:	429a      	cmp	r2, r3
 8005500:	d003      	beq.n	800550a <TIM_Base_SetConfig+0x46>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a12      	ldr	r2, [pc, #72]	; (8005550 <TIM_Base_SetConfig+0x8c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d108      	bne.n	800551c <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	4a11      	ldr	r2, [pc, #68]	; (8005554 <TIM_Base_SetConfig+0x90>)
 800550e:	4013      	ands	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4313      	orrs	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2280      	movs	r2, #128	; 0x80
 8005520:	4393      	bics	r3, r2
 8005522:	001a      	movs	r2, r3
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	689a      	ldr	r2, [r3, #8]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	615a      	str	r2, [r3, #20]
}
 8005548:	46c0      	nop			; (mov r8, r8)
 800554a:	46bd      	mov	sp, r7
 800554c:	b004      	add	sp, #16
 800554e:	bd80      	pop	{r7, pc}
 8005550:	40010800 	.word	0x40010800
 8005554:	fffffcff 	.word	0xfffffcff

08005558 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	2201      	movs	r2, #1
 8005568:	4393      	bics	r3, r2
 800556a:	001a      	movs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2270      	movs	r2, #112	; 0x70
 8005586:	4393      	bics	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2203      	movs	r2, #3
 800558e:	4393      	bics	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	4313      	orrs	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	2202      	movs	r2, #2
 80055a0:	4393      	bics	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	621a      	str	r2, [r3, #32]
}
 80055c8:	46c0      	nop			; (mov r8, r8)
 80055ca:	46bd      	mov	sp, r7
 80055cc:	b006      	add	sp, #24
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	2210      	movs	r2, #16
 80055e0:	4393      	bics	r3, r2
 80055e2:	001a      	movs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4a13      	ldr	r2, [pc, #76]	; (800564c <TIM_OC2_SetConfig+0x7c>)
 80055fe:	4013      	ands	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4a12      	ldr	r2, [pc, #72]	; (8005650 <TIM_OC2_SetConfig+0x80>)
 8005606:	4013      	ands	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	021b      	lsls	r3, r3, #8
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2220      	movs	r2, #32
 800561a:	4393      	bics	r3, r2
 800561c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	621a      	str	r2, [r3, #32]
}
 8005644:	46c0      	nop			; (mov r8, r8)
 8005646:	46bd      	mov	sp, r7
 8005648:	b006      	add	sp, #24
 800564a:	bd80      	pop	{r7, pc}
 800564c:	ffff8fff 	.word	0xffff8fff
 8005650:	fffffcff 	.word	0xfffffcff

08005654 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	4a1a      	ldr	r2, [pc, #104]	; (80056cc <TIM_OC3_SetConfig+0x78>)
 8005664:	401a      	ands	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2270      	movs	r2, #112	; 0x70
 8005680:	4393      	bics	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2203      	movs	r2, #3
 8005688:	4393      	bics	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	4a0d      	ldr	r2, [pc, #52]	; (80056d0 <TIM_OC3_SetConfig+0x7c>)
 800569a:	4013      	ands	r3, r2
 800569c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	021b      	lsls	r3, r3, #8
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	621a      	str	r2, [r3, #32]
}
 80056c4:	46c0      	nop			; (mov r8, r8)
 80056c6:	46bd      	mov	sp, r7
 80056c8:	b006      	add	sp, #24
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	fffffeff 	.word	0xfffffeff
 80056d0:	fffffdff 	.word	0xfffffdff

080056d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	4a1b      	ldr	r2, [pc, #108]	; (8005750 <TIM_OC4_SetConfig+0x7c>)
 80056e4:	401a      	ands	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4a15      	ldr	r2, [pc, #84]	; (8005754 <TIM_OC4_SetConfig+0x80>)
 8005700:	4013      	ands	r3, r2
 8005702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4a14      	ldr	r2, [pc, #80]	; (8005758 <TIM_OC4_SetConfig+0x84>)
 8005708:	4013      	ands	r3, r2
 800570a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	021b      	lsls	r3, r3, #8
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	4313      	orrs	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	4a10      	ldr	r2, [pc, #64]	; (800575c <TIM_OC4_SetConfig+0x88>)
 800571c:	4013      	ands	r3, r2
 800571e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	031b      	lsls	r3, r3, #12
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4313      	orrs	r3, r2
 800572a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	621a      	str	r2, [r3, #32]
}
 8005746:	46c0      	nop			; (mov r8, r8)
 8005748:	46bd      	mov	sp, r7
 800574a:	b006      	add	sp, #24
 800574c:	bd80      	pop	{r7, pc}
 800574e:	46c0      	nop			; (mov r8, r8)
 8005750:	ffffefff 	.word	0xffffefff
 8005754:	ffff8fff 	.word	0xffff8fff
 8005758:	fffffcff 	.word	0xfffffcff
 800575c:	ffffdfff 	.word	0xffffdfff

08005760 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	2201      	movs	r2, #1
 8005778:	4393      	bics	r3, r2
 800577a:	001a      	movs	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	22f0      	movs	r2, #240	; 0xf0
 800578a:	4393      	bics	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	011b      	lsls	r3, r3, #4
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	4313      	orrs	r3, r2
 8005796:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	220a      	movs	r2, #10
 800579c:	4393      	bics	r3, r2
 800579e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	621a      	str	r2, [r3, #32]
}
 80057b4:	46c0      	nop			; (mov r8, r8)
 80057b6:	46bd      	mov	sp, r7
 80057b8:	b006      	add	sp, #24
 80057ba:	bd80      	pop	{r7, pc}

080057bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	2210      	movs	r2, #16
 80057ce:	4393      	bics	r3, r2
 80057d0:	001a      	movs	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	4a0d      	ldr	r2, [pc, #52]	; (800581c <TIM_TI2_ConfigInputStage+0x60>)
 80057e6:	4013      	ands	r3, r2
 80057e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	031b      	lsls	r3, r3, #12
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	22a0      	movs	r2, #160	; 0xa0
 80057f8:	4393      	bics	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	011b      	lsls	r3, r3, #4
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	621a      	str	r2, [r3, #32]
}
 8005812:	46c0      	nop			; (mov r8, r8)
 8005814:	46bd      	mov	sp, r7
 8005816:	b006      	add	sp, #24
 8005818:	bd80      	pop	{r7, pc}
 800581a:	46c0      	nop			; (mov r8, r8)
 800581c:	ffff0fff 	.word	0xffff0fff

08005820 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2270      	movs	r2, #112	; 0x70
 8005834:	4393      	bics	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	4313      	orrs	r3, r2
 800583e:	2207      	movs	r2, #7
 8005840:	4313      	orrs	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	609a      	str	r2, [r3, #8]
}
 800584a:	46c0      	nop			; (mov r8, r8)
 800584c:	46bd      	mov	sp, r7
 800584e:	b004      	add	sp, #16
 8005850:	bd80      	pop	{r7, pc}
	...

08005854 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
 8005860:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	4a09      	ldr	r2, [pc, #36]	; (8005890 <TIM_ETR_SetConfig+0x3c>)
 800586c:	4013      	ands	r3, r2
 800586e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	021a      	lsls	r2, r3, #8
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	431a      	orrs	r2, r3
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	4313      	orrs	r3, r2
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	4313      	orrs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	609a      	str	r2, [r3, #8]
}
 8005888:	46c0      	nop			; (mov r8, r8)
 800588a:	46bd      	mov	sp, r7
 800588c:	b006      	add	sp, #24
 800588e:	bd80      	pop	{r7, pc}
 8005890:	ffff00ff 	.word	0xffff00ff

08005894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2238      	movs	r2, #56	; 0x38
 80058a2:	5c9b      	ldrb	r3, [r3, r2]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e03d      	b.n	8005928 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2238      	movs	r2, #56	; 0x38
 80058b0:	2101      	movs	r1, #1
 80058b2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2239      	movs	r2, #57	; 0x39
 80058b8:	2102      	movs	r1, #2
 80058ba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2270      	movs	r2, #112	; 0x70
 80058d0:	4393      	bics	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	2380      	movs	r3, #128	; 0x80
 80058ec:	05db      	lsls	r3, r3, #23
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d004      	beq.n	80058fc <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a0e      	ldr	r2, [pc, #56]	; (8005930 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d10c      	bne.n	8005916 <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2280      	movs	r2, #128	; 0x80
 8005900:	4393      	bics	r3, r2
 8005902:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	4313      	orrs	r3, r2
 800590c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2239      	movs	r2, #57	; 0x39
 800591a:	2101      	movs	r1, #1
 800591c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2238      	movs	r2, #56	; 0x38
 8005922:	2100      	movs	r1, #0
 8005924:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	0018      	movs	r0, r3
 800592a:	46bd      	mov	sp, r7
 800592c:	b004      	add	sp, #16
 800592e:	bd80      	pop	{r7, pc}
 8005930:	40010800 	.word	0x40010800

08005934 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e044      	b.n	80059d0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800594a:	2b00      	cmp	r3, #0
 800594c:	d107      	bne.n	800595e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2278      	movs	r2, #120	; 0x78
 8005952:	2100      	movs	r1, #0
 8005954:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	0018      	movs	r0, r3
 800595a:	f7fc fcdb 	bl	8002314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2224      	movs	r2, #36	; 0x24
 8005962:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2101      	movs	r1, #1
 8005970:	438a      	bics	r2, r1
 8005972:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	0018      	movs	r0, r3
 8005978:	f000 f830 	bl	80059dc <UART_SetConfig>
 800597c:	0003      	movs	r3, r0
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e024      	b.n	80059d0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	0018      	movs	r0, r3
 8005992:	f000 fa6d 	bl	8005e70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	490d      	ldr	r1, [pc, #52]	; (80059d8 <HAL_UART_Init+0xa4>)
 80059a2:	400a      	ands	r2, r1
 80059a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	212a      	movs	r1, #42	; 0x2a
 80059b2:	438a      	bics	r2, r1
 80059b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2101      	movs	r1, #1
 80059c2:	430a      	orrs	r2, r1
 80059c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	0018      	movs	r0, r3
 80059ca:	f000 fb05 	bl	8005fd8 <UART_CheckIdleState>
 80059ce:	0003      	movs	r3, r0
}
 80059d0:	0018      	movs	r0, r3
 80059d2:	46bd      	mov	sp, r7
 80059d4:	b002      	add	sp, #8
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	ffffb7ff 	.word	0xffffb7ff

080059dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059dc:	b5b0      	push	{r4, r5, r7, lr}
 80059de:	b08e      	sub	sp, #56	; 0x38
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059e4:	231a      	movs	r3, #26
 80059e6:	2218      	movs	r2, #24
 80059e8:	189b      	adds	r3, r3, r2
 80059ea:	19db      	adds	r3, r3, r7
 80059ec:	2200      	movs	r2, #0
 80059ee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	431a      	orrs	r2, r3
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	431a      	orrs	r2, r3
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4ab4      	ldr	r2, [pc, #720]	; (8005ce0 <UART_SetConfig+0x304>)
 8005a10:	4013      	ands	r3, r2
 8005a12:	0019      	movs	r1, r3
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	4aaf      	ldr	r2, [pc, #700]	; (8005ce4 <UART_SetConfig+0x308>)
 8005a26:	4013      	ands	r3, r2
 8005a28:	0019      	movs	r1, r3
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4aa9      	ldr	r2, [pc, #676]	; (8005ce8 <UART_SetConfig+0x30c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d004      	beq.n	8005a50 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	4aa5      	ldr	r2, [pc, #660]	; (8005cec <UART_SetConfig+0x310>)
 8005a58:	4013      	ands	r3, r2
 8005a5a:	0019      	movs	r1, r3
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a62:	430a      	orrs	r2, r1
 8005a64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4aa1      	ldr	r2, [pc, #644]	; (8005cf0 <UART_SetConfig+0x314>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d131      	bne.n	8005ad4 <UART_SetConfig+0xf8>
 8005a70:	4ba0      	ldr	r3, [pc, #640]	; (8005cf4 <UART_SetConfig+0x318>)
 8005a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a74:	220c      	movs	r2, #12
 8005a76:	4013      	ands	r3, r2
 8005a78:	2b0c      	cmp	r3, #12
 8005a7a:	d01d      	beq.n	8005ab8 <UART_SetConfig+0xdc>
 8005a7c:	d823      	bhi.n	8005ac6 <UART_SetConfig+0xea>
 8005a7e:	2b08      	cmp	r3, #8
 8005a80:	d00c      	beq.n	8005a9c <UART_SetConfig+0xc0>
 8005a82:	d820      	bhi.n	8005ac6 <UART_SetConfig+0xea>
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <UART_SetConfig+0xb2>
 8005a88:	2b04      	cmp	r3, #4
 8005a8a:	d00e      	beq.n	8005aaa <UART_SetConfig+0xce>
 8005a8c:	e01b      	b.n	8005ac6 <UART_SetConfig+0xea>
 8005a8e:	231b      	movs	r3, #27
 8005a90:	2218      	movs	r2, #24
 8005a92:	189b      	adds	r3, r3, r2
 8005a94:	19db      	adds	r3, r3, r7
 8005a96:	2200      	movs	r2, #0
 8005a98:	701a      	strb	r2, [r3, #0]
 8005a9a:	e065      	b.n	8005b68 <UART_SetConfig+0x18c>
 8005a9c:	231b      	movs	r3, #27
 8005a9e:	2218      	movs	r2, #24
 8005aa0:	189b      	adds	r3, r3, r2
 8005aa2:	19db      	adds	r3, r3, r7
 8005aa4:	2202      	movs	r2, #2
 8005aa6:	701a      	strb	r2, [r3, #0]
 8005aa8:	e05e      	b.n	8005b68 <UART_SetConfig+0x18c>
 8005aaa:	231b      	movs	r3, #27
 8005aac:	2218      	movs	r2, #24
 8005aae:	189b      	adds	r3, r3, r2
 8005ab0:	19db      	adds	r3, r3, r7
 8005ab2:	2204      	movs	r2, #4
 8005ab4:	701a      	strb	r2, [r3, #0]
 8005ab6:	e057      	b.n	8005b68 <UART_SetConfig+0x18c>
 8005ab8:	231b      	movs	r3, #27
 8005aba:	2218      	movs	r2, #24
 8005abc:	189b      	adds	r3, r3, r2
 8005abe:	19db      	adds	r3, r3, r7
 8005ac0:	2208      	movs	r2, #8
 8005ac2:	701a      	strb	r2, [r3, #0]
 8005ac4:	e050      	b.n	8005b68 <UART_SetConfig+0x18c>
 8005ac6:	231b      	movs	r3, #27
 8005ac8:	2218      	movs	r2, #24
 8005aca:	189b      	adds	r3, r3, r2
 8005acc:	19db      	adds	r3, r3, r7
 8005ace:	2210      	movs	r2, #16
 8005ad0:	701a      	strb	r2, [r3, #0]
 8005ad2:	e049      	b.n	8005b68 <UART_SetConfig+0x18c>
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a83      	ldr	r2, [pc, #524]	; (8005ce8 <UART_SetConfig+0x30c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d13e      	bne.n	8005b5c <UART_SetConfig+0x180>
 8005ade:	4b85      	ldr	r3, [pc, #532]	; (8005cf4 <UART_SetConfig+0x318>)
 8005ae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ae2:	23c0      	movs	r3, #192	; 0xc0
 8005ae4:	011b      	lsls	r3, r3, #4
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	22c0      	movs	r2, #192	; 0xc0
 8005aea:	0112      	lsls	r2, r2, #4
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d027      	beq.n	8005b40 <UART_SetConfig+0x164>
 8005af0:	22c0      	movs	r2, #192	; 0xc0
 8005af2:	0112      	lsls	r2, r2, #4
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d82a      	bhi.n	8005b4e <UART_SetConfig+0x172>
 8005af8:	2280      	movs	r2, #128	; 0x80
 8005afa:	0112      	lsls	r2, r2, #4
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d011      	beq.n	8005b24 <UART_SetConfig+0x148>
 8005b00:	2280      	movs	r2, #128	; 0x80
 8005b02:	0112      	lsls	r2, r2, #4
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d822      	bhi.n	8005b4e <UART_SetConfig+0x172>
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d004      	beq.n	8005b16 <UART_SetConfig+0x13a>
 8005b0c:	2280      	movs	r2, #128	; 0x80
 8005b0e:	00d2      	lsls	r2, r2, #3
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00e      	beq.n	8005b32 <UART_SetConfig+0x156>
 8005b14:	e01b      	b.n	8005b4e <UART_SetConfig+0x172>
 8005b16:	231b      	movs	r3, #27
 8005b18:	2218      	movs	r2, #24
 8005b1a:	189b      	adds	r3, r3, r2
 8005b1c:	19db      	adds	r3, r3, r7
 8005b1e:	2200      	movs	r2, #0
 8005b20:	701a      	strb	r2, [r3, #0]
 8005b22:	e021      	b.n	8005b68 <UART_SetConfig+0x18c>
 8005b24:	231b      	movs	r3, #27
 8005b26:	2218      	movs	r2, #24
 8005b28:	189b      	adds	r3, r3, r2
 8005b2a:	19db      	adds	r3, r3, r7
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	701a      	strb	r2, [r3, #0]
 8005b30:	e01a      	b.n	8005b68 <UART_SetConfig+0x18c>
 8005b32:	231b      	movs	r3, #27
 8005b34:	2218      	movs	r2, #24
 8005b36:	189b      	adds	r3, r3, r2
 8005b38:	19db      	adds	r3, r3, r7
 8005b3a:	2204      	movs	r2, #4
 8005b3c:	701a      	strb	r2, [r3, #0]
 8005b3e:	e013      	b.n	8005b68 <UART_SetConfig+0x18c>
 8005b40:	231b      	movs	r3, #27
 8005b42:	2218      	movs	r2, #24
 8005b44:	189b      	adds	r3, r3, r2
 8005b46:	19db      	adds	r3, r3, r7
 8005b48:	2208      	movs	r2, #8
 8005b4a:	701a      	strb	r2, [r3, #0]
 8005b4c:	e00c      	b.n	8005b68 <UART_SetConfig+0x18c>
 8005b4e:	231b      	movs	r3, #27
 8005b50:	2218      	movs	r2, #24
 8005b52:	189b      	adds	r3, r3, r2
 8005b54:	19db      	adds	r3, r3, r7
 8005b56:	2210      	movs	r2, #16
 8005b58:	701a      	strb	r2, [r3, #0]
 8005b5a:	e005      	b.n	8005b68 <UART_SetConfig+0x18c>
 8005b5c:	231b      	movs	r3, #27
 8005b5e:	2218      	movs	r2, #24
 8005b60:	189b      	adds	r3, r3, r2
 8005b62:	19db      	adds	r3, r3, r7
 8005b64:	2210      	movs	r2, #16
 8005b66:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a5e      	ldr	r2, [pc, #376]	; (8005ce8 <UART_SetConfig+0x30c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d000      	beq.n	8005b74 <UART_SetConfig+0x198>
 8005b72:	e084      	b.n	8005c7e <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b74:	231b      	movs	r3, #27
 8005b76:	2218      	movs	r2, #24
 8005b78:	189b      	adds	r3, r3, r2
 8005b7a:	19db      	adds	r3, r3, r7
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b08      	cmp	r3, #8
 8005b80:	d01d      	beq.n	8005bbe <UART_SetConfig+0x1e2>
 8005b82:	dc20      	bgt.n	8005bc6 <UART_SetConfig+0x1ea>
 8005b84:	2b04      	cmp	r3, #4
 8005b86:	d015      	beq.n	8005bb4 <UART_SetConfig+0x1d8>
 8005b88:	dc1d      	bgt.n	8005bc6 <UART_SetConfig+0x1ea>
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <UART_SetConfig+0x1b8>
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d005      	beq.n	8005b9e <UART_SetConfig+0x1c2>
 8005b92:	e018      	b.n	8005bc6 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b94:	f7fe fc0e 	bl	80043b4 <HAL_RCC_GetPCLK1Freq>
 8005b98:	0003      	movs	r3, r0
 8005b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b9c:	e01c      	b.n	8005bd8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b9e:	4b55      	ldr	r3, [pc, #340]	; (8005cf4 <UART_SetConfig+0x318>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2210      	movs	r2, #16
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	d002      	beq.n	8005bae <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005ba8:	4b53      	ldr	r3, [pc, #332]	; (8005cf8 <UART_SetConfig+0x31c>)
 8005baa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005bac:	e014      	b.n	8005bd8 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8005bae:	4b53      	ldr	r3, [pc, #332]	; (8005cfc <UART_SetConfig+0x320>)
 8005bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005bb2:	e011      	b.n	8005bd8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bb4:	f7fe fb4e 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 8005bb8:	0003      	movs	r3, r0
 8005bba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005bbc:	e00c      	b.n	8005bd8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bbe:	2380      	movs	r3, #128	; 0x80
 8005bc0:	021b      	lsls	r3, r3, #8
 8005bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005bc4:	e008      	b.n	8005bd8 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005bca:	231a      	movs	r3, #26
 8005bcc:	2218      	movs	r2, #24
 8005bce:	189b      	adds	r3, r3, r2
 8005bd0:	19db      	adds	r3, r3, r7
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	701a      	strb	r2, [r3, #0]
        break;
 8005bd6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d100      	bne.n	8005be0 <UART_SetConfig+0x204>
 8005bde:	e12f      	b.n	8005e40 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	0013      	movs	r3, r2
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	189b      	adds	r3, r3, r2
 8005bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d305      	bcc.n	8005bfc <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d906      	bls.n	8005c0a <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8005bfc:	231a      	movs	r3, #26
 8005bfe:	2218      	movs	r2, #24
 8005c00:	189b      	adds	r3, r3, r2
 8005c02:	19db      	adds	r3, r3, r7
 8005c04:	2201      	movs	r2, #1
 8005c06:	701a      	strb	r2, [r3, #0]
 8005c08:	e11a      	b.n	8005e40 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0c:	613b      	str	r3, [r7, #16]
 8005c0e:	2300      	movs	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	6939      	ldr	r1, [r7, #16]
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	000b      	movs	r3, r1
 8005c18:	0e1b      	lsrs	r3, r3, #24
 8005c1a:	0010      	movs	r0, r2
 8005c1c:	0205      	lsls	r5, r0, #8
 8005c1e:	431d      	orrs	r5, r3
 8005c20:	000b      	movs	r3, r1
 8005c22:	021c      	lsls	r4, r3, #8
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	085b      	lsrs	r3, r3, #1
 8005c2a:	60bb      	str	r3, [r7, #8]
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	68b8      	ldr	r0, [r7, #8]
 8005c32:	68f9      	ldr	r1, [r7, #12]
 8005c34:	1900      	adds	r0, r0, r4
 8005c36:	4169      	adcs	r1, r5
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	603b      	str	r3, [r7, #0]
 8005c3e:	2300      	movs	r3, #0
 8005c40:	607b      	str	r3, [r7, #4]
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f7fa faeb 	bl	8000220 <__aeabi_uldivmod>
 8005c4a:	0002      	movs	r2, r0
 8005c4c:	000b      	movs	r3, r1
 8005c4e:	0013      	movs	r3, r2
 8005c50:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c54:	23c0      	movs	r3, #192	; 0xc0
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d309      	bcc.n	8005c70 <UART_SetConfig+0x294>
 8005c5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c5e:	2380      	movs	r3, #128	; 0x80
 8005c60:	035b      	lsls	r3, r3, #13
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d204      	bcs.n	8005c70 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c6c:	60da      	str	r2, [r3, #12]
 8005c6e:	e0e7      	b.n	8005e40 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8005c70:	231a      	movs	r3, #26
 8005c72:	2218      	movs	r2, #24
 8005c74:	189b      	adds	r3, r3, r2
 8005c76:	19db      	adds	r3, r3, r7
 8005c78:	2201      	movs	r2, #1
 8005c7a:	701a      	strb	r2, [r3, #0]
 8005c7c:	e0e0      	b.n	8005e40 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	69da      	ldr	r2, [r3, #28]
 8005c82:	2380      	movs	r3, #128	; 0x80
 8005c84:	021b      	lsls	r3, r3, #8
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d000      	beq.n	8005c8c <UART_SetConfig+0x2b0>
 8005c8a:	e082      	b.n	8005d92 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8005c8c:	231b      	movs	r3, #27
 8005c8e:	2218      	movs	r2, #24
 8005c90:	189b      	adds	r3, r3, r2
 8005c92:	19db      	adds	r3, r3, r7
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	2b08      	cmp	r3, #8
 8005c98:	d834      	bhi.n	8005d04 <UART_SetConfig+0x328>
 8005c9a:	009a      	lsls	r2, r3, #2
 8005c9c:	4b18      	ldr	r3, [pc, #96]	; (8005d00 <UART_SetConfig+0x324>)
 8005c9e:	18d3      	adds	r3, r2, r3
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ca4:	f7fe fb86 	bl	80043b4 <HAL_RCC_GetPCLK1Freq>
 8005ca8:	0003      	movs	r3, r0
 8005caa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cac:	e033      	b.n	8005d16 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cae:	f7fe fb97 	bl	80043e0 <HAL_RCC_GetPCLK2Freq>
 8005cb2:	0003      	movs	r3, r0
 8005cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cb6:	e02e      	b.n	8005d16 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cb8:	4b0e      	ldr	r3, [pc, #56]	; (8005cf4 <UART_SetConfig+0x318>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2210      	movs	r2, #16
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	d002      	beq.n	8005cc8 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005cc2:	4b0d      	ldr	r3, [pc, #52]	; (8005cf8 <UART_SetConfig+0x31c>)
 8005cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005cc6:	e026      	b.n	8005d16 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8005cc8:	4b0c      	ldr	r3, [pc, #48]	; (8005cfc <UART_SetConfig+0x320>)
 8005cca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ccc:	e023      	b.n	8005d16 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cce:	f7fe fac1 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 8005cd2:	0003      	movs	r3, r0
 8005cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cd6:	e01e      	b.n	8005d16 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cd8:	2380      	movs	r3, #128	; 0x80
 8005cda:	021b      	lsls	r3, r3, #8
 8005cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cde:	e01a      	b.n	8005d16 <UART_SetConfig+0x33a>
 8005ce0:	efff69f3 	.word	0xefff69f3
 8005ce4:	ffffcfff 	.word	0xffffcfff
 8005ce8:	40004800 	.word	0x40004800
 8005cec:	fffff4ff 	.word	0xfffff4ff
 8005cf0:	40004400 	.word	0x40004400
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	003d0900 	.word	0x003d0900
 8005cfc:	00f42400 	.word	0x00f42400
 8005d00:	08006e04 	.word	0x08006e04
      default:
        pclk = 0U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005d08:	231a      	movs	r3, #26
 8005d0a:	2218      	movs	r2, #24
 8005d0c:	189b      	adds	r3, r3, r2
 8005d0e:	19db      	adds	r3, r3, r7
 8005d10:	2201      	movs	r2, #1
 8005d12:	701a      	strb	r2, [r3, #0]
        break;
 8005d14:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d100      	bne.n	8005d1e <UART_SetConfig+0x342>
 8005d1c:	e090      	b.n	8005e40 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d20:	005a      	lsls	r2, r3, #1
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	085b      	lsrs	r3, r3, #1
 8005d28:	18d2      	adds	r2, r2, r3
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	0019      	movs	r1, r3
 8005d30:	0010      	movs	r0, r2
 8005d32:	f7fa f9e9 	bl	8000108 <__udivsi3>
 8005d36:	0003      	movs	r3, r0
 8005d38:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3c:	2b0f      	cmp	r3, #15
 8005d3e:	d921      	bls.n	8005d84 <UART_SetConfig+0x3a8>
 8005d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d42:	2380      	movs	r3, #128	; 0x80
 8005d44:	025b      	lsls	r3, r3, #9
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d21c      	bcs.n	8005d84 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	200e      	movs	r0, #14
 8005d50:	2418      	movs	r4, #24
 8005d52:	1903      	adds	r3, r0, r4
 8005d54:	19db      	adds	r3, r3, r7
 8005d56:	210f      	movs	r1, #15
 8005d58:	438a      	bics	r2, r1
 8005d5a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5e:	085b      	lsrs	r3, r3, #1
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2207      	movs	r2, #7
 8005d64:	4013      	ands	r3, r2
 8005d66:	b299      	uxth	r1, r3
 8005d68:	1903      	adds	r3, r0, r4
 8005d6a:	19db      	adds	r3, r3, r7
 8005d6c:	1902      	adds	r2, r0, r4
 8005d6e:	19d2      	adds	r2, r2, r7
 8005d70:	8812      	ldrh	r2, [r2, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	1902      	adds	r2, r0, r4
 8005d7c:	19d2      	adds	r2, r2, r7
 8005d7e:	8812      	ldrh	r2, [r2, #0]
 8005d80:	60da      	str	r2, [r3, #12]
 8005d82:	e05d      	b.n	8005e40 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005d84:	231a      	movs	r3, #26
 8005d86:	2218      	movs	r2, #24
 8005d88:	189b      	adds	r3, r3, r2
 8005d8a:	19db      	adds	r3, r3, r7
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	701a      	strb	r2, [r3, #0]
 8005d90:	e056      	b.n	8005e40 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d92:	231b      	movs	r3, #27
 8005d94:	2218      	movs	r2, #24
 8005d96:	189b      	adds	r3, r3, r2
 8005d98:	19db      	adds	r3, r3, r7
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d822      	bhi.n	8005de6 <UART_SetConfig+0x40a>
 8005da0:	009a      	lsls	r2, r3, #2
 8005da2:	4b2f      	ldr	r3, [pc, #188]	; (8005e60 <UART_SetConfig+0x484>)
 8005da4:	18d3      	adds	r3, r2, r3
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005daa:	f7fe fb03 	bl	80043b4 <HAL_RCC_GetPCLK1Freq>
 8005dae:	0003      	movs	r3, r0
 8005db0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005db2:	e021      	b.n	8005df8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005db4:	f7fe fb14 	bl	80043e0 <HAL_RCC_GetPCLK2Freq>
 8005db8:	0003      	movs	r3, r0
 8005dba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005dbc:	e01c      	b.n	8005df8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dbe:	4b29      	ldr	r3, [pc, #164]	; (8005e64 <UART_SetConfig+0x488>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2210      	movs	r2, #16
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	d002      	beq.n	8005dce <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005dc8:	4b27      	ldr	r3, [pc, #156]	; (8005e68 <UART_SetConfig+0x48c>)
 8005dca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005dcc:	e014      	b.n	8005df8 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8005dce:	4b27      	ldr	r3, [pc, #156]	; (8005e6c <UART_SetConfig+0x490>)
 8005dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005dd2:	e011      	b.n	8005df8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dd4:	f7fe fa3e 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 8005dd8:	0003      	movs	r3, r0
 8005dda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ddc:	e00c      	b.n	8005df8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dde:	2380      	movs	r3, #128	; 0x80
 8005de0:	021b      	lsls	r3, r3, #8
 8005de2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005de4:	e008      	b.n	8005df8 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005dea:	231a      	movs	r3, #26
 8005dec:	2218      	movs	r2, #24
 8005dee:	189b      	adds	r3, r3, r2
 8005df0:	19db      	adds	r3, r3, r7
 8005df2:	2201      	movs	r2, #1
 8005df4:	701a      	strb	r2, [r3, #0]
        break;
 8005df6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d020      	beq.n	8005e40 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	085a      	lsrs	r2, r3, #1
 8005e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e06:	18d2      	adds	r2, r2, r3
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	0019      	movs	r1, r3
 8005e0e:	0010      	movs	r0, r2
 8005e10:	f7fa f97a 	bl	8000108 <__udivsi3>
 8005e14:	0003      	movs	r3, r0
 8005e16:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1a:	2b0f      	cmp	r3, #15
 8005e1c:	d90a      	bls.n	8005e34 <UART_SetConfig+0x458>
 8005e1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e20:	2380      	movs	r3, #128	; 0x80
 8005e22:	025b      	lsls	r3, r3, #9
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d205      	bcs.n	8005e34 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	60da      	str	r2, [r3, #12]
 8005e32:	e005      	b.n	8005e40 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005e34:	231a      	movs	r3, #26
 8005e36:	2218      	movs	r2, #24
 8005e38:	189b      	adds	r3, r3, r2
 8005e3a:	19db      	adds	r3, r3, r7
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	2200      	movs	r2, #0
 8005e44:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005e4c:	231a      	movs	r3, #26
 8005e4e:	2218      	movs	r2, #24
 8005e50:	189b      	adds	r3, r3, r2
 8005e52:	19db      	adds	r3, r3, r7
 8005e54:	781b      	ldrb	r3, [r3, #0]
}
 8005e56:	0018      	movs	r0, r3
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	b00e      	add	sp, #56	; 0x38
 8005e5c:	bdb0      	pop	{r4, r5, r7, pc}
 8005e5e:	46c0      	nop			; (mov r8, r8)
 8005e60:	08006e28 	.word	0x08006e28
 8005e64:	40021000 	.word	0x40021000
 8005e68:	003d0900 	.word	0x003d0900
 8005e6c:	00f42400 	.word	0x00f42400

08005e70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	4013      	ands	r3, r2
 8005e80:	d00b      	beq.n	8005e9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	4a4a      	ldr	r2, [pc, #296]	; (8005fb4 <UART_AdvFeatureConfig+0x144>)
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	0019      	movs	r1, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	d00b      	beq.n	8005ebc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	4a43      	ldr	r2, [pc, #268]	; (8005fb8 <UART_AdvFeatureConfig+0x148>)
 8005eac:	4013      	ands	r3, r2
 8005eae:	0019      	movs	r1, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	2204      	movs	r2, #4
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	d00b      	beq.n	8005ede <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	4a3b      	ldr	r2, [pc, #236]	; (8005fbc <UART_AdvFeatureConfig+0x14c>)
 8005ece:	4013      	ands	r3, r2
 8005ed0:	0019      	movs	r1, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	2208      	movs	r2, #8
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	d00b      	beq.n	8005f00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	4a34      	ldr	r2, [pc, #208]	; (8005fc0 <UART_AdvFeatureConfig+0x150>)
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	0019      	movs	r1, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f04:	2210      	movs	r2, #16
 8005f06:	4013      	ands	r3, r2
 8005f08:	d00b      	beq.n	8005f22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	4a2c      	ldr	r2, [pc, #176]	; (8005fc4 <UART_AdvFeatureConfig+0x154>)
 8005f12:	4013      	ands	r3, r2
 8005f14:	0019      	movs	r1, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	2220      	movs	r2, #32
 8005f28:	4013      	ands	r3, r2
 8005f2a:	d00b      	beq.n	8005f44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	4a25      	ldr	r2, [pc, #148]	; (8005fc8 <UART_AdvFeatureConfig+0x158>)
 8005f34:	4013      	ands	r3, r2
 8005f36:	0019      	movs	r1, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	2240      	movs	r2, #64	; 0x40
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	d01d      	beq.n	8005f8a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	4a1d      	ldr	r2, [pc, #116]	; (8005fcc <UART_AdvFeatureConfig+0x15c>)
 8005f56:	4013      	ands	r3, r2
 8005f58:	0019      	movs	r1, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f6a:	2380      	movs	r3, #128	; 0x80
 8005f6c:	035b      	lsls	r3, r3, #13
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d10b      	bne.n	8005f8a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	4a15      	ldr	r2, [pc, #84]	; (8005fd0 <UART_AdvFeatureConfig+0x160>)
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	0019      	movs	r1, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	2280      	movs	r2, #128	; 0x80
 8005f90:	4013      	ands	r3, r2
 8005f92:	d00b      	beq.n	8005fac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	4a0e      	ldr	r2, [pc, #56]	; (8005fd4 <UART_AdvFeatureConfig+0x164>)
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	0019      	movs	r1, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	605a      	str	r2, [r3, #4]
  }
}
 8005fac:	46c0      	nop			; (mov r8, r8)
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	b002      	add	sp, #8
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	fffdffff 	.word	0xfffdffff
 8005fb8:	fffeffff 	.word	0xfffeffff
 8005fbc:	fffbffff 	.word	0xfffbffff
 8005fc0:	ffff7fff 	.word	0xffff7fff
 8005fc4:	ffffefff 	.word	0xffffefff
 8005fc8:	ffffdfff 	.word	0xffffdfff
 8005fcc:	ffefffff 	.word	0xffefffff
 8005fd0:	ff9fffff 	.word	0xff9fffff
 8005fd4:	fff7ffff 	.word	0xfff7ffff

08005fd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b092      	sub	sp, #72	; 0x48
 8005fdc:	af02      	add	r7, sp, #8
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2284      	movs	r2, #132	; 0x84
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fe8:	f7fc fb94 	bl	8002714 <HAL_GetTick>
 8005fec:	0003      	movs	r3, r0
 8005fee:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2208      	movs	r2, #8
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	2b08      	cmp	r3, #8
 8005ffc:	d12c      	bne.n	8006058 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006000:	2280      	movs	r2, #128	; 0x80
 8006002:	0391      	lsls	r1, r2, #14
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	4a46      	ldr	r2, [pc, #280]	; (8006120 <UART_CheckIdleState+0x148>)
 8006008:	9200      	str	r2, [sp, #0]
 800600a:	2200      	movs	r2, #0
 800600c:	f000 f88c 	bl	8006128 <UART_WaitOnFlagUntilTimeout>
 8006010:	1e03      	subs	r3, r0, #0
 8006012:	d021      	beq.n	8006058 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006014:	f3ef 8310 	mrs	r3, PRIMASK
 8006018:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800601c:	63bb      	str	r3, [r7, #56]	; 0x38
 800601e:	2301      	movs	r3, #1
 8006020:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	f383 8810 	msr	PRIMASK, r3
}
 8006028:	46c0      	nop			; (mov r8, r8)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2180      	movs	r1, #128	; 0x80
 8006036:	438a      	bics	r2, r1
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800603e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006040:	f383 8810 	msr	PRIMASK, r3
}
 8006044:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2220      	movs	r2, #32
 800604a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2278      	movs	r2, #120	; 0x78
 8006050:	2100      	movs	r1, #0
 8006052:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e05f      	b.n	8006118 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2204      	movs	r2, #4
 8006060:	4013      	ands	r3, r2
 8006062:	2b04      	cmp	r3, #4
 8006064:	d146      	bne.n	80060f4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006068:	2280      	movs	r2, #128	; 0x80
 800606a:	03d1      	lsls	r1, r2, #15
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	4a2c      	ldr	r2, [pc, #176]	; (8006120 <UART_CheckIdleState+0x148>)
 8006070:	9200      	str	r2, [sp, #0]
 8006072:	2200      	movs	r2, #0
 8006074:	f000 f858 	bl	8006128 <UART_WaitOnFlagUntilTimeout>
 8006078:	1e03      	subs	r3, r0, #0
 800607a:	d03b      	beq.n	80060f4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800607c:	f3ef 8310 	mrs	r3, PRIMASK
 8006080:	60fb      	str	r3, [r7, #12]
  return(result);
 8006082:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006084:	637b      	str	r3, [r7, #52]	; 0x34
 8006086:	2301      	movs	r3, #1
 8006088:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f383 8810 	msr	PRIMASK, r3
}
 8006090:	46c0      	nop			; (mov r8, r8)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4921      	ldr	r1, [pc, #132]	; (8006124 <UART_CheckIdleState+0x14c>)
 800609e:	400a      	ands	r2, r1
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f383 8810 	msr	PRIMASK, r3
}
 80060ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ae:	f3ef 8310 	mrs	r3, PRIMASK
 80060b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80060b4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b6:	633b      	str	r3, [r7, #48]	; 0x30
 80060b8:	2301      	movs	r3, #1
 80060ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	f383 8810 	msr	PRIMASK, r3
}
 80060c2:	46c0      	nop			; (mov r8, r8)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2101      	movs	r1, #1
 80060d0:	438a      	bics	r2, r1
 80060d2:	609a      	str	r2, [r3, #8]
 80060d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	f383 8810 	msr	PRIMASK, r3
}
 80060de:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2280      	movs	r2, #128	; 0x80
 80060e4:	2120      	movs	r1, #32
 80060e6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2278      	movs	r2, #120	; 0x78
 80060ec:	2100      	movs	r1, #0
 80060ee:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e011      	b.n	8006118 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2220      	movs	r2, #32
 80060f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2280      	movs	r2, #128	; 0x80
 80060fe:	2120      	movs	r1, #32
 8006100:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2278      	movs	r2, #120	; 0x78
 8006112:	2100      	movs	r1, #0
 8006114:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	0018      	movs	r0, r3
 800611a:	46bd      	mov	sp, r7
 800611c:	b010      	add	sp, #64	; 0x40
 800611e:	bd80      	pop	{r7, pc}
 8006120:	01ffffff 	.word	0x01ffffff
 8006124:	fffffedf 	.word	0xfffffedf

08006128 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	603b      	str	r3, [r7, #0]
 8006134:	1dfb      	adds	r3, r7, #7
 8006136:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006138:	e04b      	b.n	80061d2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	3301      	adds	r3, #1
 800613e:	d048      	beq.n	80061d2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006140:	f7fc fae8 	bl	8002714 <HAL_GetTick>
 8006144:	0002      	movs	r2, r0
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	429a      	cmp	r2, r3
 800614e:	d302      	bcc.n	8006156 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e04b      	b.n	80061f2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2204      	movs	r2, #4
 8006162:	4013      	ands	r3, r2
 8006164:	d035      	beq.n	80061d2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	2208      	movs	r2, #8
 800616e:	4013      	ands	r3, r2
 8006170:	2b08      	cmp	r3, #8
 8006172:	d111      	bne.n	8006198 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2208      	movs	r2, #8
 800617a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	0018      	movs	r0, r3
 8006180:	f000 f83c 	bl	80061fc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2284      	movs	r2, #132	; 0x84
 8006188:	2108      	movs	r1, #8
 800618a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2278      	movs	r2, #120	; 0x78
 8006190:	2100      	movs	r1, #0
 8006192:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e02c      	b.n	80061f2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	69da      	ldr	r2, [r3, #28]
 800619e:	2380      	movs	r3, #128	; 0x80
 80061a0:	011b      	lsls	r3, r3, #4
 80061a2:	401a      	ands	r2, r3
 80061a4:	2380      	movs	r3, #128	; 0x80
 80061a6:	011b      	lsls	r3, r3, #4
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d112      	bne.n	80061d2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2280      	movs	r2, #128	; 0x80
 80061b2:	0112      	lsls	r2, r2, #4
 80061b4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	0018      	movs	r0, r3
 80061ba:	f000 f81f 	bl	80061fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2284      	movs	r2, #132	; 0x84
 80061c2:	2120      	movs	r1, #32
 80061c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2278      	movs	r2, #120	; 0x78
 80061ca:	2100      	movs	r1, #0
 80061cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e00f      	b.n	80061f2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	4013      	ands	r3, r2
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	425a      	negs	r2, r3
 80061e2:	4153      	adcs	r3, r2
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	001a      	movs	r2, r3
 80061e8:	1dfb      	adds	r3, r7, #7
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d0a4      	beq.n	800613a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	0018      	movs	r0, r3
 80061f4:	46bd      	mov	sp, r7
 80061f6:	b004      	add	sp, #16
 80061f8:	bd80      	pop	{r7, pc}
	...

080061fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08e      	sub	sp, #56	; 0x38
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006204:	f3ef 8310 	mrs	r3, PRIMASK
 8006208:	617b      	str	r3, [r7, #20]
  return(result);
 800620a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800620c:	637b      	str	r3, [r7, #52]	; 0x34
 800620e:	2301      	movs	r3, #1
 8006210:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	f383 8810 	msr	PRIMASK, r3
}
 8006218:	46c0      	nop			; (mov r8, r8)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4926      	ldr	r1, [pc, #152]	; (80062c0 <UART_EndRxTransfer+0xc4>)
 8006226:	400a      	ands	r2, r1
 8006228:	601a      	str	r2, [r3, #0]
 800622a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800622c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	f383 8810 	msr	PRIMASK, r3
}
 8006234:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006236:	f3ef 8310 	mrs	r3, PRIMASK
 800623a:	623b      	str	r3, [r7, #32]
  return(result);
 800623c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800623e:	633b      	str	r3, [r7, #48]	; 0x30
 8006240:	2301      	movs	r3, #1
 8006242:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	f383 8810 	msr	PRIMASK, r3
}
 800624a:	46c0      	nop			; (mov r8, r8)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689a      	ldr	r2, [r3, #8]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2101      	movs	r1, #1
 8006258:	438a      	bics	r2, r1
 800625a:	609a      	str	r2, [r3, #8]
 800625c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	f383 8810 	msr	PRIMASK, r3
}
 8006266:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800626c:	2b01      	cmp	r3, #1
 800626e:	d118      	bne.n	80062a2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006270:	f3ef 8310 	mrs	r3, PRIMASK
 8006274:	60bb      	str	r3, [r7, #8]
  return(result);
 8006276:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800627a:	2301      	movs	r3, #1
 800627c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f383 8810 	msr	PRIMASK, r3
}
 8006284:	46c0      	nop			; (mov r8, r8)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2110      	movs	r1, #16
 8006292:	438a      	bics	r2, r1
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006298:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	f383 8810 	msr	PRIMASK, r3
}
 80062a0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2280      	movs	r2, #128	; 0x80
 80062a6:	2120      	movs	r1, #32
 80062a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80062b6:	46c0      	nop			; (mov r8, r8)
 80062b8:	46bd      	mov	sp, r7
 80062ba:	b00e      	add	sp, #56	; 0x38
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	46c0      	nop			; (mov r8, r8)
 80062c0:	fffffedf 	.word	0xfffffedf

080062c4 <std>:
 80062c4:	2300      	movs	r3, #0
 80062c6:	b510      	push	{r4, lr}
 80062c8:	0004      	movs	r4, r0
 80062ca:	6003      	str	r3, [r0, #0]
 80062cc:	6043      	str	r3, [r0, #4]
 80062ce:	6083      	str	r3, [r0, #8]
 80062d0:	8181      	strh	r1, [r0, #12]
 80062d2:	6643      	str	r3, [r0, #100]	; 0x64
 80062d4:	81c2      	strh	r2, [r0, #14]
 80062d6:	6103      	str	r3, [r0, #16]
 80062d8:	6143      	str	r3, [r0, #20]
 80062da:	6183      	str	r3, [r0, #24]
 80062dc:	0019      	movs	r1, r3
 80062de:	2208      	movs	r2, #8
 80062e0:	305c      	adds	r0, #92	; 0x5c
 80062e2:	f000 fa05 	bl	80066f0 <memset>
 80062e6:	4b0b      	ldr	r3, [pc, #44]	; (8006314 <std+0x50>)
 80062e8:	6224      	str	r4, [r4, #32]
 80062ea:	6263      	str	r3, [r4, #36]	; 0x24
 80062ec:	4b0a      	ldr	r3, [pc, #40]	; (8006318 <std+0x54>)
 80062ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80062f0:	4b0a      	ldr	r3, [pc, #40]	; (800631c <std+0x58>)
 80062f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80062f4:	4b0a      	ldr	r3, [pc, #40]	; (8006320 <std+0x5c>)
 80062f6:	6323      	str	r3, [r4, #48]	; 0x30
 80062f8:	4b0a      	ldr	r3, [pc, #40]	; (8006324 <std+0x60>)
 80062fa:	429c      	cmp	r4, r3
 80062fc:	d005      	beq.n	800630a <std+0x46>
 80062fe:	4b0a      	ldr	r3, [pc, #40]	; (8006328 <std+0x64>)
 8006300:	429c      	cmp	r4, r3
 8006302:	d002      	beq.n	800630a <std+0x46>
 8006304:	4b09      	ldr	r3, [pc, #36]	; (800632c <std+0x68>)
 8006306:	429c      	cmp	r4, r3
 8006308:	d103      	bne.n	8006312 <std+0x4e>
 800630a:	0020      	movs	r0, r4
 800630c:	3058      	adds	r0, #88	; 0x58
 800630e:	f000 fa6f 	bl	80067f0 <__retarget_lock_init_recursive>
 8006312:	bd10      	pop	{r4, pc}
 8006314:	0800650d 	.word	0x0800650d
 8006318:	08006535 	.word	0x08006535
 800631c:	0800656d 	.word	0x0800656d
 8006320:	08006599 	.word	0x08006599
 8006324:	2000032c 	.word	0x2000032c
 8006328:	20000394 	.word	0x20000394
 800632c:	200003fc 	.word	0x200003fc

08006330 <stdio_exit_handler>:
 8006330:	b510      	push	{r4, lr}
 8006332:	4a03      	ldr	r2, [pc, #12]	; (8006340 <stdio_exit_handler+0x10>)
 8006334:	4903      	ldr	r1, [pc, #12]	; (8006344 <stdio_exit_handler+0x14>)
 8006336:	4804      	ldr	r0, [pc, #16]	; (8006348 <stdio_exit_handler+0x18>)
 8006338:	f000 f86c 	bl	8006414 <_fwalk_sglue>
 800633c:	bd10      	pop	{r4, pc}
 800633e:	46c0      	nop			; (mov r8, r8)
 8006340:	20000124 	.word	0x20000124
 8006344:	08006b09 	.word	0x08006b09
 8006348:	20000130 	.word	0x20000130

0800634c <cleanup_stdio>:
 800634c:	6841      	ldr	r1, [r0, #4]
 800634e:	4b0b      	ldr	r3, [pc, #44]	; (800637c <cleanup_stdio+0x30>)
 8006350:	b510      	push	{r4, lr}
 8006352:	0004      	movs	r4, r0
 8006354:	4299      	cmp	r1, r3
 8006356:	d001      	beq.n	800635c <cleanup_stdio+0x10>
 8006358:	f000 fbd6 	bl	8006b08 <_fflush_r>
 800635c:	68a1      	ldr	r1, [r4, #8]
 800635e:	4b08      	ldr	r3, [pc, #32]	; (8006380 <cleanup_stdio+0x34>)
 8006360:	4299      	cmp	r1, r3
 8006362:	d002      	beq.n	800636a <cleanup_stdio+0x1e>
 8006364:	0020      	movs	r0, r4
 8006366:	f000 fbcf 	bl	8006b08 <_fflush_r>
 800636a:	68e1      	ldr	r1, [r4, #12]
 800636c:	4b05      	ldr	r3, [pc, #20]	; (8006384 <cleanup_stdio+0x38>)
 800636e:	4299      	cmp	r1, r3
 8006370:	d002      	beq.n	8006378 <cleanup_stdio+0x2c>
 8006372:	0020      	movs	r0, r4
 8006374:	f000 fbc8 	bl	8006b08 <_fflush_r>
 8006378:	bd10      	pop	{r4, pc}
 800637a:	46c0      	nop			; (mov r8, r8)
 800637c:	2000032c 	.word	0x2000032c
 8006380:	20000394 	.word	0x20000394
 8006384:	200003fc 	.word	0x200003fc

08006388 <global_stdio_init.part.0>:
 8006388:	b510      	push	{r4, lr}
 800638a:	4b09      	ldr	r3, [pc, #36]	; (80063b0 <global_stdio_init.part.0+0x28>)
 800638c:	4a09      	ldr	r2, [pc, #36]	; (80063b4 <global_stdio_init.part.0+0x2c>)
 800638e:	2104      	movs	r1, #4
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	4809      	ldr	r0, [pc, #36]	; (80063b8 <global_stdio_init.part.0+0x30>)
 8006394:	2200      	movs	r2, #0
 8006396:	f7ff ff95 	bl	80062c4 <std>
 800639a:	2201      	movs	r2, #1
 800639c:	2109      	movs	r1, #9
 800639e:	4807      	ldr	r0, [pc, #28]	; (80063bc <global_stdio_init.part.0+0x34>)
 80063a0:	f7ff ff90 	bl	80062c4 <std>
 80063a4:	2202      	movs	r2, #2
 80063a6:	2112      	movs	r1, #18
 80063a8:	4805      	ldr	r0, [pc, #20]	; (80063c0 <global_stdio_init.part.0+0x38>)
 80063aa:	f7ff ff8b 	bl	80062c4 <std>
 80063ae:	bd10      	pop	{r4, pc}
 80063b0:	20000464 	.word	0x20000464
 80063b4:	08006331 	.word	0x08006331
 80063b8:	2000032c 	.word	0x2000032c
 80063bc:	20000394 	.word	0x20000394
 80063c0:	200003fc 	.word	0x200003fc

080063c4 <__sfp_lock_acquire>:
 80063c4:	b510      	push	{r4, lr}
 80063c6:	4802      	ldr	r0, [pc, #8]	; (80063d0 <__sfp_lock_acquire+0xc>)
 80063c8:	f000 fa13 	bl	80067f2 <__retarget_lock_acquire_recursive>
 80063cc:	bd10      	pop	{r4, pc}
 80063ce:	46c0      	nop			; (mov r8, r8)
 80063d0:	2000046d 	.word	0x2000046d

080063d4 <__sfp_lock_release>:
 80063d4:	b510      	push	{r4, lr}
 80063d6:	4802      	ldr	r0, [pc, #8]	; (80063e0 <__sfp_lock_release+0xc>)
 80063d8:	f000 fa0c 	bl	80067f4 <__retarget_lock_release_recursive>
 80063dc:	bd10      	pop	{r4, pc}
 80063de:	46c0      	nop			; (mov r8, r8)
 80063e0:	2000046d 	.word	0x2000046d

080063e4 <__sinit>:
 80063e4:	b510      	push	{r4, lr}
 80063e6:	0004      	movs	r4, r0
 80063e8:	f7ff ffec 	bl	80063c4 <__sfp_lock_acquire>
 80063ec:	6a23      	ldr	r3, [r4, #32]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d002      	beq.n	80063f8 <__sinit+0x14>
 80063f2:	f7ff ffef 	bl	80063d4 <__sfp_lock_release>
 80063f6:	bd10      	pop	{r4, pc}
 80063f8:	4b04      	ldr	r3, [pc, #16]	; (800640c <__sinit+0x28>)
 80063fa:	6223      	str	r3, [r4, #32]
 80063fc:	4b04      	ldr	r3, [pc, #16]	; (8006410 <__sinit+0x2c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1f6      	bne.n	80063f2 <__sinit+0xe>
 8006404:	f7ff ffc0 	bl	8006388 <global_stdio_init.part.0>
 8006408:	e7f3      	b.n	80063f2 <__sinit+0xe>
 800640a:	46c0      	nop			; (mov r8, r8)
 800640c:	0800634d 	.word	0x0800634d
 8006410:	20000464 	.word	0x20000464

08006414 <_fwalk_sglue>:
 8006414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006416:	0014      	movs	r4, r2
 8006418:	2600      	movs	r6, #0
 800641a:	9000      	str	r0, [sp, #0]
 800641c:	9101      	str	r1, [sp, #4]
 800641e:	68a5      	ldr	r5, [r4, #8]
 8006420:	6867      	ldr	r7, [r4, #4]
 8006422:	3f01      	subs	r7, #1
 8006424:	d504      	bpl.n	8006430 <_fwalk_sglue+0x1c>
 8006426:	6824      	ldr	r4, [r4, #0]
 8006428:	2c00      	cmp	r4, #0
 800642a:	d1f8      	bne.n	800641e <_fwalk_sglue+0xa>
 800642c:	0030      	movs	r0, r6
 800642e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006430:	89ab      	ldrh	r3, [r5, #12]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d908      	bls.n	8006448 <_fwalk_sglue+0x34>
 8006436:	220e      	movs	r2, #14
 8006438:	5eab      	ldrsh	r3, [r5, r2]
 800643a:	3301      	adds	r3, #1
 800643c:	d004      	beq.n	8006448 <_fwalk_sglue+0x34>
 800643e:	0029      	movs	r1, r5
 8006440:	9800      	ldr	r0, [sp, #0]
 8006442:	9b01      	ldr	r3, [sp, #4]
 8006444:	4798      	blx	r3
 8006446:	4306      	orrs	r6, r0
 8006448:	3568      	adds	r5, #104	; 0x68
 800644a:	e7ea      	b.n	8006422 <_fwalk_sglue+0xe>

0800644c <_puts_r>:
 800644c:	6a03      	ldr	r3, [r0, #32]
 800644e:	b570      	push	{r4, r5, r6, lr}
 8006450:	0005      	movs	r5, r0
 8006452:	000e      	movs	r6, r1
 8006454:	6884      	ldr	r4, [r0, #8]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <_puts_r+0x12>
 800645a:	f7ff ffc3 	bl	80063e4 <__sinit>
 800645e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006460:	07db      	lsls	r3, r3, #31
 8006462:	d405      	bmi.n	8006470 <_puts_r+0x24>
 8006464:	89a3      	ldrh	r3, [r4, #12]
 8006466:	059b      	lsls	r3, r3, #22
 8006468:	d402      	bmi.n	8006470 <_puts_r+0x24>
 800646a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800646c:	f000 f9c1 	bl	80067f2 <__retarget_lock_acquire_recursive>
 8006470:	89a3      	ldrh	r3, [r4, #12]
 8006472:	071b      	lsls	r3, r3, #28
 8006474:	d502      	bpl.n	800647c <_puts_r+0x30>
 8006476:	6923      	ldr	r3, [r4, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d11f      	bne.n	80064bc <_puts_r+0x70>
 800647c:	0021      	movs	r1, r4
 800647e:	0028      	movs	r0, r5
 8006480:	f000 f8d2 	bl	8006628 <__swsetup_r>
 8006484:	2800      	cmp	r0, #0
 8006486:	d019      	beq.n	80064bc <_puts_r+0x70>
 8006488:	2501      	movs	r5, #1
 800648a:	426d      	negs	r5, r5
 800648c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800648e:	07db      	lsls	r3, r3, #31
 8006490:	d405      	bmi.n	800649e <_puts_r+0x52>
 8006492:	89a3      	ldrh	r3, [r4, #12]
 8006494:	059b      	lsls	r3, r3, #22
 8006496:	d402      	bmi.n	800649e <_puts_r+0x52>
 8006498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800649a:	f000 f9ab 	bl	80067f4 <__retarget_lock_release_recursive>
 800649e:	0028      	movs	r0, r5
 80064a0:	bd70      	pop	{r4, r5, r6, pc}
 80064a2:	3601      	adds	r6, #1
 80064a4:	60a3      	str	r3, [r4, #8]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	da04      	bge.n	80064b4 <_puts_r+0x68>
 80064aa:	69a2      	ldr	r2, [r4, #24]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	dc16      	bgt.n	80064de <_puts_r+0x92>
 80064b0:	290a      	cmp	r1, #10
 80064b2:	d014      	beq.n	80064de <_puts_r+0x92>
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	6022      	str	r2, [r4, #0]
 80064ba:	7019      	strb	r1, [r3, #0]
 80064bc:	68a3      	ldr	r3, [r4, #8]
 80064be:	7831      	ldrb	r1, [r6, #0]
 80064c0:	3b01      	subs	r3, #1
 80064c2:	2900      	cmp	r1, #0
 80064c4:	d1ed      	bne.n	80064a2 <_puts_r+0x56>
 80064c6:	60a3      	str	r3, [r4, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	da0f      	bge.n	80064ec <_puts_r+0xa0>
 80064cc:	0028      	movs	r0, r5
 80064ce:	0022      	movs	r2, r4
 80064d0:	310a      	adds	r1, #10
 80064d2:	f000 f867 	bl	80065a4 <__swbuf_r>
 80064d6:	250a      	movs	r5, #10
 80064d8:	3001      	adds	r0, #1
 80064da:	d1d7      	bne.n	800648c <_puts_r+0x40>
 80064dc:	e7d4      	b.n	8006488 <_puts_r+0x3c>
 80064de:	0022      	movs	r2, r4
 80064e0:	0028      	movs	r0, r5
 80064e2:	f000 f85f 	bl	80065a4 <__swbuf_r>
 80064e6:	3001      	adds	r0, #1
 80064e8:	d1e8      	bne.n	80064bc <_puts_r+0x70>
 80064ea:	e7cd      	b.n	8006488 <_puts_r+0x3c>
 80064ec:	250a      	movs	r5, #10
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	6022      	str	r2, [r4, #0]
 80064f4:	701d      	strb	r5, [r3, #0]
 80064f6:	e7c9      	b.n	800648c <_puts_r+0x40>

080064f8 <puts>:
 80064f8:	b510      	push	{r4, lr}
 80064fa:	4b03      	ldr	r3, [pc, #12]	; (8006508 <puts+0x10>)
 80064fc:	0001      	movs	r1, r0
 80064fe:	6818      	ldr	r0, [r3, #0]
 8006500:	f7ff ffa4 	bl	800644c <_puts_r>
 8006504:	bd10      	pop	{r4, pc}
 8006506:	46c0      	nop			; (mov r8, r8)
 8006508:	2000017c 	.word	0x2000017c

0800650c <__sread>:
 800650c:	b570      	push	{r4, r5, r6, lr}
 800650e:	000c      	movs	r4, r1
 8006510:	250e      	movs	r5, #14
 8006512:	5f49      	ldrsh	r1, [r1, r5]
 8006514:	f000 f91a 	bl	800674c <_read_r>
 8006518:	2800      	cmp	r0, #0
 800651a:	db03      	blt.n	8006524 <__sread+0x18>
 800651c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800651e:	181b      	adds	r3, r3, r0
 8006520:	6563      	str	r3, [r4, #84]	; 0x54
 8006522:	bd70      	pop	{r4, r5, r6, pc}
 8006524:	89a3      	ldrh	r3, [r4, #12]
 8006526:	4a02      	ldr	r2, [pc, #8]	; (8006530 <__sread+0x24>)
 8006528:	4013      	ands	r3, r2
 800652a:	81a3      	strh	r3, [r4, #12]
 800652c:	e7f9      	b.n	8006522 <__sread+0x16>
 800652e:	46c0      	nop			; (mov r8, r8)
 8006530:	ffffefff 	.word	0xffffefff

08006534 <__swrite>:
 8006534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006536:	001f      	movs	r7, r3
 8006538:	898b      	ldrh	r3, [r1, #12]
 800653a:	0005      	movs	r5, r0
 800653c:	000c      	movs	r4, r1
 800653e:	0016      	movs	r6, r2
 8006540:	05db      	lsls	r3, r3, #23
 8006542:	d505      	bpl.n	8006550 <__swrite+0x1c>
 8006544:	230e      	movs	r3, #14
 8006546:	5ec9      	ldrsh	r1, [r1, r3]
 8006548:	2200      	movs	r2, #0
 800654a:	2302      	movs	r3, #2
 800654c:	f000 f8ea 	bl	8006724 <_lseek_r>
 8006550:	89a3      	ldrh	r3, [r4, #12]
 8006552:	4a05      	ldr	r2, [pc, #20]	; (8006568 <__swrite+0x34>)
 8006554:	0028      	movs	r0, r5
 8006556:	4013      	ands	r3, r2
 8006558:	81a3      	strh	r3, [r4, #12]
 800655a:	0032      	movs	r2, r6
 800655c:	230e      	movs	r3, #14
 800655e:	5ee1      	ldrsh	r1, [r4, r3]
 8006560:	003b      	movs	r3, r7
 8006562:	f000 f907 	bl	8006774 <_write_r>
 8006566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006568:	ffffefff 	.word	0xffffefff

0800656c <__sseek>:
 800656c:	b570      	push	{r4, r5, r6, lr}
 800656e:	000c      	movs	r4, r1
 8006570:	250e      	movs	r5, #14
 8006572:	5f49      	ldrsh	r1, [r1, r5]
 8006574:	f000 f8d6 	bl	8006724 <_lseek_r>
 8006578:	89a3      	ldrh	r3, [r4, #12]
 800657a:	1c42      	adds	r2, r0, #1
 800657c:	d103      	bne.n	8006586 <__sseek+0x1a>
 800657e:	4a05      	ldr	r2, [pc, #20]	; (8006594 <__sseek+0x28>)
 8006580:	4013      	ands	r3, r2
 8006582:	81a3      	strh	r3, [r4, #12]
 8006584:	bd70      	pop	{r4, r5, r6, pc}
 8006586:	2280      	movs	r2, #128	; 0x80
 8006588:	0152      	lsls	r2, r2, #5
 800658a:	4313      	orrs	r3, r2
 800658c:	81a3      	strh	r3, [r4, #12]
 800658e:	6560      	str	r0, [r4, #84]	; 0x54
 8006590:	e7f8      	b.n	8006584 <__sseek+0x18>
 8006592:	46c0      	nop			; (mov r8, r8)
 8006594:	ffffefff 	.word	0xffffefff

08006598 <__sclose>:
 8006598:	b510      	push	{r4, lr}
 800659a:	230e      	movs	r3, #14
 800659c:	5ec9      	ldrsh	r1, [r1, r3]
 800659e:	f000 f8af 	bl	8006700 <_close_r>
 80065a2:	bd10      	pop	{r4, pc}

080065a4 <__swbuf_r>:
 80065a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a6:	0006      	movs	r6, r0
 80065a8:	000d      	movs	r5, r1
 80065aa:	0014      	movs	r4, r2
 80065ac:	2800      	cmp	r0, #0
 80065ae:	d004      	beq.n	80065ba <__swbuf_r+0x16>
 80065b0:	6a03      	ldr	r3, [r0, #32]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <__swbuf_r+0x16>
 80065b6:	f7ff ff15 	bl	80063e4 <__sinit>
 80065ba:	69a3      	ldr	r3, [r4, #24]
 80065bc:	60a3      	str	r3, [r4, #8]
 80065be:	89a3      	ldrh	r3, [r4, #12]
 80065c0:	071b      	lsls	r3, r3, #28
 80065c2:	d528      	bpl.n	8006616 <__swbuf_r+0x72>
 80065c4:	6923      	ldr	r3, [r4, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d025      	beq.n	8006616 <__swbuf_r+0x72>
 80065ca:	6923      	ldr	r3, [r4, #16]
 80065cc:	6820      	ldr	r0, [r4, #0]
 80065ce:	b2ef      	uxtb	r7, r5
 80065d0:	1ac0      	subs	r0, r0, r3
 80065d2:	6963      	ldr	r3, [r4, #20]
 80065d4:	b2ed      	uxtb	r5, r5
 80065d6:	4283      	cmp	r3, r0
 80065d8:	dc05      	bgt.n	80065e6 <__swbuf_r+0x42>
 80065da:	0021      	movs	r1, r4
 80065dc:	0030      	movs	r0, r6
 80065de:	f000 fa93 	bl	8006b08 <_fflush_r>
 80065e2:	2800      	cmp	r0, #0
 80065e4:	d11d      	bne.n	8006622 <__swbuf_r+0x7e>
 80065e6:	68a3      	ldr	r3, [r4, #8]
 80065e8:	3001      	adds	r0, #1
 80065ea:	3b01      	subs	r3, #1
 80065ec:	60a3      	str	r3, [r4, #8]
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	1c5a      	adds	r2, r3, #1
 80065f2:	6022      	str	r2, [r4, #0]
 80065f4:	701f      	strb	r7, [r3, #0]
 80065f6:	6963      	ldr	r3, [r4, #20]
 80065f8:	4283      	cmp	r3, r0
 80065fa:	d004      	beq.n	8006606 <__swbuf_r+0x62>
 80065fc:	89a3      	ldrh	r3, [r4, #12]
 80065fe:	07db      	lsls	r3, r3, #31
 8006600:	d507      	bpl.n	8006612 <__swbuf_r+0x6e>
 8006602:	2d0a      	cmp	r5, #10
 8006604:	d105      	bne.n	8006612 <__swbuf_r+0x6e>
 8006606:	0021      	movs	r1, r4
 8006608:	0030      	movs	r0, r6
 800660a:	f000 fa7d 	bl	8006b08 <_fflush_r>
 800660e:	2800      	cmp	r0, #0
 8006610:	d107      	bne.n	8006622 <__swbuf_r+0x7e>
 8006612:	0028      	movs	r0, r5
 8006614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006616:	0021      	movs	r1, r4
 8006618:	0030      	movs	r0, r6
 800661a:	f000 f805 	bl	8006628 <__swsetup_r>
 800661e:	2800      	cmp	r0, #0
 8006620:	d0d3      	beq.n	80065ca <__swbuf_r+0x26>
 8006622:	2501      	movs	r5, #1
 8006624:	426d      	negs	r5, r5
 8006626:	e7f4      	b.n	8006612 <__swbuf_r+0x6e>

08006628 <__swsetup_r>:
 8006628:	4b30      	ldr	r3, [pc, #192]	; (80066ec <__swsetup_r+0xc4>)
 800662a:	b570      	push	{r4, r5, r6, lr}
 800662c:	0005      	movs	r5, r0
 800662e:	6818      	ldr	r0, [r3, #0]
 8006630:	000c      	movs	r4, r1
 8006632:	2800      	cmp	r0, #0
 8006634:	d004      	beq.n	8006640 <__swsetup_r+0x18>
 8006636:	6a03      	ldr	r3, [r0, #32]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <__swsetup_r+0x18>
 800663c:	f7ff fed2 	bl	80063e4 <__sinit>
 8006640:	230c      	movs	r3, #12
 8006642:	5ee2      	ldrsh	r2, [r4, r3]
 8006644:	b293      	uxth	r3, r2
 8006646:	0711      	lsls	r1, r2, #28
 8006648:	d423      	bmi.n	8006692 <__swsetup_r+0x6a>
 800664a:	06d9      	lsls	r1, r3, #27
 800664c:	d407      	bmi.n	800665e <__swsetup_r+0x36>
 800664e:	2309      	movs	r3, #9
 8006650:	2001      	movs	r0, #1
 8006652:	602b      	str	r3, [r5, #0]
 8006654:	3337      	adds	r3, #55	; 0x37
 8006656:	4313      	orrs	r3, r2
 8006658:	81a3      	strh	r3, [r4, #12]
 800665a:	4240      	negs	r0, r0
 800665c:	bd70      	pop	{r4, r5, r6, pc}
 800665e:	075b      	lsls	r3, r3, #29
 8006660:	d513      	bpl.n	800668a <__swsetup_r+0x62>
 8006662:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006664:	2900      	cmp	r1, #0
 8006666:	d008      	beq.n	800667a <__swsetup_r+0x52>
 8006668:	0023      	movs	r3, r4
 800666a:	3344      	adds	r3, #68	; 0x44
 800666c:	4299      	cmp	r1, r3
 800666e:	d002      	beq.n	8006676 <__swsetup_r+0x4e>
 8006670:	0028      	movs	r0, r5
 8006672:	f000 f8c1 	bl	80067f8 <_free_r>
 8006676:	2300      	movs	r3, #0
 8006678:	6363      	str	r3, [r4, #52]	; 0x34
 800667a:	2224      	movs	r2, #36	; 0x24
 800667c:	89a3      	ldrh	r3, [r4, #12]
 800667e:	4393      	bics	r3, r2
 8006680:	81a3      	strh	r3, [r4, #12]
 8006682:	2300      	movs	r3, #0
 8006684:	6063      	str	r3, [r4, #4]
 8006686:	6923      	ldr	r3, [r4, #16]
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	2308      	movs	r3, #8
 800668c:	89a2      	ldrh	r2, [r4, #12]
 800668e:	4313      	orrs	r3, r2
 8006690:	81a3      	strh	r3, [r4, #12]
 8006692:	6923      	ldr	r3, [r4, #16]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10b      	bne.n	80066b0 <__swsetup_r+0x88>
 8006698:	21a0      	movs	r1, #160	; 0xa0
 800669a:	2280      	movs	r2, #128	; 0x80
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	0089      	lsls	r1, r1, #2
 80066a0:	0092      	lsls	r2, r2, #2
 80066a2:	400b      	ands	r3, r1
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d003      	beq.n	80066b0 <__swsetup_r+0x88>
 80066a8:	0021      	movs	r1, r4
 80066aa:	0028      	movs	r0, r5
 80066ac:	f000 fa80 	bl	8006bb0 <__smakebuf_r>
 80066b0:	220c      	movs	r2, #12
 80066b2:	5ea3      	ldrsh	r3, [r4, r2]
 80066b4:	2001      	movs	r0, #1
 80066b6:	001a      	movs	r2, r3
 80066b8:	b299      	uxth	r1, r3
 80066ba:	4002      	ands	r2, r0
 80066bc:	4203      	tst	r3, r0
 80066be:	d00f      	beq.n	80066e0 <__swsetup_r+0xb8>
 80066c0:	2200      	movs	r2, #0
 80066c2:	60a2      	str	r2, [r4, #8]
 80066c4:	6962      	ldr	r2, [r4, #20]
 80066c6:	4252      	negs	r2, r2
 80066c8:	61a2      	str	r2, [r4, #24]
 80066ca:	2000      	movs	r0, #0
 80066cc:	6922      	ldr	r2, [r4, #16]
 80066ce:	4282      	cmp	r2, r0
 80066d0:	d1c4      	bne.n	800665c <__swsetup_r+0x34>
 80066d2:	0609      	lsls	r1, r1, #24
 80066d4:	d5c2      	bpl.n	800665c <__swsetup_r+0x34>
 80066d6:	2240      	movs	r2, #64	; 0x40
 80066d8:	4313      	orrs	r3, r2
 80066da:	81a3      	strh	r3, [r4, #12]
 80066dc:	3801      	subs	r0, #1
 80066de:	e7bd      	b.n	800665c <__swsetup_r+0x34>
 80066e0:	0788      	lsls	r0, r1, #30
 80066e2:	d400      	bmi.n	80066e6 <__swsetup_r+0xbe>
 80066e4:	6962      	ldr	r2, [r4, #20]
 80066e6:	60a2      	str	r2, [r4, #8]
 80066e8:	e7ef      	b.n	80066ca <__swsetup_r+0xa2>
 80066ea:	46c0      	nop			; (mov r8, r8)
 80066ec:	2000017c 	.word	0x2000017c

080066f0 <memset>:
 80066f0:	0003      	movs	r3, r0
 80066f2:	1882      	adds	r2, r0, r2
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d100      	bne.n	80066fa <memset+0xa>
 80066f8:	4770      	bx	lr
 80066fa:	7019      	strb	r1, [r3, #0]
 80066fc:	3301      	adds	r3, #1
 80066fe:	e7f9      	b.n	80066f4 <memset+0x4>

08006700 <_close_r>:
 8006700:	2300      	movs	r3, #0
 8006702:	b570      	push	{r4, r5, r6, lr}
 8006704:	4d06      	ldr	r5, [pc, #24]	; (8006720 <_close_r+0x20>)
 8006706:	0004      	movs	r4, r0
 8006708:	0008      	movs	r0, r1
 800670a:	602b      	str	r3, [r5, #0]
 800670c:	f7fb fef1 	bl	80024f2 <_close>
 8006710:	1c43      	adds	r3, r0, #1
 8006712:	d103      	bne.n	800671c <_close_r+0x1c>
 8006714:	682b      	ldr	r3, [r5, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d000      	beq.n	800671c <_close_r+0x1c>
 800671a:	6023      	str	r3, [r4, #0]
 800671c:	bd70      	pop	{r4, r5, r6, pc}
 800671e:	46c0      	nop			; (mov r8, r8)
 8006720:	20000468 	.word	0x20000468

08006724 <_lseek_r>:
 8006724:	b570      	push	{r4, r5, r6, lr}
 8006726:	0004      	movs	r4, r0
 8006728:	0008      	movs	r0, r1
 800672a:	0011      	movs	r1, r2
 800672c:	001a      	movs	r2, r3
 800672e:	2300      	movs	r3, #0
 8006730:	4d05      	ldr	r5, [pc, #20]	; (8006748 <_lseek_r+0x24>)
 8006732:	602b      	str	r3, [r5, #0]
 8006734:	f7fb fefe 	bl	8002534 <_lseek>
 8006738:	1c43      	adds	r3, r0, #1
 800673a:	d103      	bne.n	8006744 <_lseek_r+0x20>
 800673c:	682b      	ldr	r3, [r5, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d000      	beq.n	8006744 <_lseek_r+0x20>
 8006742:	6023      	str	r3, [r4, #0]
 8006744:	bd70      	pop	{r4, r5, r6, pc}
 8006746:	46c0      	nop			; (mov r8, r8)
 8006748:	20000468 	.word	0x20000468

0800674c <_read_r>:
 800674c:	b570      	push	{r4, r5, r6, lr}
 800674e:	0004      	movs	r4, r0
 8006750:	0008      	movs	r0, r1
 8006752:	0011      	movs	r1, r2
 8006754:	001a      	movs	r2, r3
 8006756:	2300      	movs	r3, #0
 8006758:	4d05      	ldr	r5, [pc, #20]	; (8006770 <_read_r+0x24>)
 800675a:	602b      	str	r3, [r5, #0]
 800675c:	f7fb fe90 	bl	8002480 <_read>
 8006760:	1c43      	adds	r3, r0, #1
 8006762:	d103      	bne.n	800676c <_read_r+0x20>
 8006764:	682b      	ldr	r3, [r5, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d000      	beq.n	800676c <_read_r+0x20>
 800676a:	6023      	str	r3, [r4, #0]
 800676c:	bd70      	pop	{r4, r5, r6, pc}
 800676e:	46c0      	nop			; (mov r8, r8)
 8006770:	20000468 	.word	0x20000468

08006774 <_write_r>:
 8006774:	b570      	push	{r4, r5, r6, lr}
 8006776:	0004      	movs	r4, r0
 8006778:	0008      	movs	r0, r1
 800677a:	0011      	movs	r1, r2
 800677c:	001a      	movs	r2, r3
 800677e:	2300      	movs	r3, #0
 8006780:	4d05      	ldr	r5, [pc, #20]	; (8006798 <_write_r+0x24>)
 8006782:	602b      	str	r3, [r5, #0]
 8006784:	f7fb fe99 	bl	80024ba <_write>
 8006788:	1c43      	adds	r3, r0, #1
 800678a:	d103      	bne.n	8006794 <_write_r+0x20>
 800678c:	682b      	ldr	r3, [r5, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d000      	beq.n	8006794 <_write_r+0x20>
 8006792:	6023      	str	r3, [r4, #0]
 8006794:	bd70      	pop	{r4, r5, r6, pc}
 8006796:	46c0      	nop			; (mov r8, r8)
 8006798:	20000468 	.word	0x20000468

0800679c <__errno>:
 800679c:	4b01      	ldr	r3, [pc, #4]	; (80067a4 <__errno+0x8>)
 800679e:	6818      	ldr	r0, [r3, #0]
 80067a0:	4770      	bx	lr
 80067a2:	46c0      	nop			; (mov r8, r8)
 80067a4:	2000017c 	.word	0x2000017c

080067a8 <__libc_init_array>:
 80067a8:	b570      	push	{r4, r5, r6, lr}
 80067aa:	2600      	movs	r6, #0
 80067ac:	4c0c      	ldr	r4, [pc, #48]	; (80067e0 <__libc_init_array+0x38>)
 80067ae:	4d0d      	ldr	r5, [pc, #52]	; (80067e4 <__libc_init_array+0x3c>)
 80067b0:	1b64      	subs	r4, r4, r5
 80067b2:	10a4      	asrs	r4, r4, #2
 80067b4:	42a6      	cmp	r6, r4
 80067b6:	d109      	bne.n	80067cc <__libc_init_array+0x24>
 80067b8:	2600      	movs	r6, #0
 80067ba:	f000 fa6d 	bl	8006c98 <_init>
 80067be:	4c0a      	ldr	r4, [pc, #40]	; (80067e8 <__libc_init_array+0x40>)
 80067c0:	4d0a      	ldr	r5, [pc, #40]	; (80067ec <__libc_init_array+0x44>)
 80067c2:	1b64      	subs	r4, r4, r5
 80067c4:	10a4      	asrs	r4, r4, #2
 80067c6:	42a6      	cmp	r6, r4
 80067c8:	d105      	bne.n	80067d6 <__libc_init_array+0x2e>
 80067ca:	bd70      	pop	{r4, r5, r6, pc}
 80067cc:	00b3      	lsls	r3, r6, #2
 80067ce:	58eb      	ldr	r3, [r5, r3]
 80067d0:	4798      	blx	r3
 80067d2:	3601      	adds	r6, #1
 80067d4:	e7ee      	b.n	80067b4 <__libc_init_array+0xc>
 80067d6:	00b3      	lsls	r3, r6, #2
 80067d8:	58eb      	ldr	r3, [r5, r3]
 80067da:	4798      	blx	r3
 80067dc:	3601      	adds	r6, #1
 80067de:	e7f2      	b.n	80067c6 <__libc_init_array+0x1e>
 80067e0:	08006e54 	.word	0x08006e54
 80067e4:	08006e54 	.word	0x08006e54
 80067e8:	08006e58 	.word	0x08006e58
 80067ec:	08006e54 	.word	0x08006e54

080067f0 <__retarget_lock_init_recursive>:
 80067f0:	4770      	bx	lr

080067f2 <__retarget_lock_acquire_recursive>:
 80067f2:	4770      	bx	lr

080067f4 <__retarget_lock_release_recursive>:
 80067f4:	4770      	bx	lr
	...

080067f8 <_free_r>:
 80067f8:	b570      	push	{r4, r5, r6, lr}
 80067fa:	0005      	movs	r5, r0
 80067fc:	2900      	cmp	r1, #0
 80067fe:	d010      	beq.n	8006822 <_free_r+0x2a>
 8006800:	1f0c      	subs	r4, r1, #4
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	da00      	bge.n	800680a <_free_r+0x12>
 8006808:	18e4      	adds	r4, r4, r3
 800680a:	0028      	movs	r0, r5
 800680c:	f000 f8e2 	bl	80069d4 <__malloc_lock>
 8006810:	4a1d      	ldr	r2, [pc, #116]	; (8006888 <_free_r+0x90>)
 8006812:	6813      	ldr	r3, [r2, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d105      	bne.n	8006824 <_free_r+0x2c>
 8006818:	6063      	str	r3, [r4, #4]
 800681a:	6014      	str	r4, [r2, #0]
 800681c:	0028      	movs	r0, r5
 800681e:	f000 f8e1 	bl	80069e4 <__malloc_unlock>
 8006822:	bd70      	pop	{r4, r5, r6, pc}
 8006824:	42a3      	cmp	r3, r4
 8006826:	d908      	bls.n	800683a <_free_r+0x42>
 8006828:	6820      	ldr	r0, [r4, #0]
 800682a:	1821      	adds	r1, r4, r0
 800682c:	428b      	cmp	r3, r1
 800682e:	d1f3      	bne.n	8006818 <_free_r+0x20>
 8006830:	6819      	ldr	r1, [r3, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	1809      	adds	r1, r1, r0
 8006836:	6021      	str	r1, [r4, #0]
 8006838:	e7ee      	b.n	8006818 <_free_r+0x20>
 800683a:	001a      	movs	r2, r3
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <_free_r+0x4e>
 8006842:	42a3      	cmp	r3, r4
 8006844:	d9f9      	bls.n	800683a <_free_r+0x42>
 8006846:	6811      	ldr	r1, [r2, #0]
 8006848:	1850      	adds	r0, r2, r1
 800684a:	42a0      	cmp	r0, r4
 800684c:	d10b      	bne.n	8006866 <_free_r+0x6e>
 800684e:	6820      	ldr	r0, [r4, #0]
 8006850:	1809      	adds	r1, r1, r0
 8006852:	1850      	adds	r0, r2, r1
 8006854:	6011      	str	r1, [r2, #0]
 8006856:	4283      	cmp	r3, r0
 8006858:	d1e0      	bne.n	800681c <_free_r+0x24>
 800685a:	6818      	ldr	r0, [r3, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	1841      	adds	r1, r0, r1
 8006860:	6011      	str	r1, [r2, #0]
 8006862:	6053      	str	r3, [r2, #4]
 8006864:	e7da      	b.n	800681c <_free_r+0x24>
 8006866:	42a0      	cmp	r0, r4
 8006868:	d902      	bls.n	8006870 <_free_r+0x78>
 800686a:	230c      	movs	r3, #12
 800686c:	602b      	str	r3, [r5, #0]
 800686e:	e7d5      	b.n	800681c <_free_r+0x24>
 8006870:	6820      	ldr	r0, [r4, #0]
 8006872:	1821      	adds	r1, r4, r0
 8006874:	428b      	cmp	r3, r1
 8006876:	d103      	bne.n	8006880 <_free_r+0x88>
 8006878:	6819      	ldr	r1, [r3, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	1809      	adds	r1, r1, r0
 800687e:	6021      	str	r1, [r4, #0]
 8006880:	6063      	str	r3, [r4, #4]
 8006882:	6054      	str	r4, [r2, #4]
 8006884:	e7ca      	b.n	800681c <_free_r+0x24>
 8006886:	46c0      	nop			; (mov r8, r8)
 8006888:	20000470 	.word	0x20000470

0800688c <sbrk_aligned>:
 800688c:	b570      	push	{r4, r5, r6, lr}
 800688e:	4e0f      	ldr	r6, [pc, #60]	; (80068cc <sbrk_aligned+0x40>)
 8006890:	000d      	movs	r5, r1
 8006892:	6831      	ldr	r1, [r6, #0]
 8006894:	0004      	movs	r4, r0
 8006896:	2900      	cmp	r1, #0
 8006898:	d102      	bne.n	80068a0 <sbrk_aligned+0x14>
 800689a:	f000 f9eb 	bl	8006c74 <_sbrk_r>
 800689e:	6030      	str	r0, [r6, #0]
 80068a0:	0029      	movs	r1, r5
 80068a2:	0020      	movs	r0, r4
 80068a4:	f000 f9e6 	bl	8006c74 <_sbrk_r>
 80068a8:	1c43      	adds	r3, r0, #1
 80068aa:	d00a      	beq.n	80068c2 <sbrk_aligned+0x36>
 80068ac:	2303      	movs	r3, #3
 80068ae:	1cc5      	adds	r5, r0, #3
 80068b0:	439d      	bics	r5, r3
 80068b2:	42a8      	cmp	r0, r5
 80068b4:	d007      	beq.n	80068c6 <sbrk_aligned+0x3a>
 80068b6:	1a29      	subs	r1, r5, r0
 80068b8:	0020      	movs	r0, r4
 80068ba:	f000 f9db 	bl	8006c74 <_sbrk_r>
 80068be:	3001      	adds	r0, #1
 80068c0:	d101      	bne.n	80068c6 <sbrk_aligned+0x3a>
 80068c2:	2501      	movs	r5, #1
 80068c4:	426d      	negs	r5, r5
 80068c6:	0028      	movs	r0, r5
 80068c8:	bd70      	pop	{r4, r5, r6, pc}
 80068ca:	46c0      	nop			; (mov r8, r8)
 80068cc:	20000474 	.word	0x20000474

080068d0 <_malloc_r>:
 80068d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068d2:	2203      	movs	r2, #3
 80068d4:	1ccb      	adds	r3, r1, #3
 80068d6:	4393      	bics	r3, r2
 80068d8:	3308      	adds	r3, #8
 80068da:	0006      	movs	r6, r0
 80068dc:	001f      	movs	r7, r3
 80068de:	2b0c      	cmp	r3, #12
 80068e0:	d238      	bcs.n	8006954 <_malloc_r+0x84>
 80068e2:	270c      	movs	r7, #12
 80068e4:	42b9      	cmp	r1, r7
 80068e6:	d837      	bhi.n	8006958 <_malloc_r+0x88>
 80068e8:	0030      	movs	r0, r6
 80068ea:	f000 f873 	bl	80069d4 <__malloc_lock>
 80068ee:	4b38      	ldr	r3, [pc, #224]	; (80069d0 <_malloc_r+0x100>)
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	001c      	movs	r4, r3
 80068f6:	2c00      	cmp	r4, #0
 80068f8:	d133      	bne.n	8006962 <_malloc_r+0x92>
 80068fa:	0039      	movs	r1, r7
 80068fc:	0030      	movs	r0, r6
 80068fe:	f7ff ffc5 	bl	800688c <sbrk_aligned>
 8006902:	0004      	movs	r4, r0
 8006904:	1c43      	adds	r3, r0, #1
 8006906:	d15e      	bne.n	80069c6 <_malloc_r+0xf6>
 8006908:	9b00      	ldr	r3, [sp, #0]
 800690a:	681c      	ldr	r4, [r3, #0]
 800690c:	0025      	movs	r5, r4
 800690e:	2d00      	cmp	r5, #0
 8006910:	d14e      	bne.n	80069b0 <_malloc_r+0xe0>
 8006912:	2c00      	cmp	r4, #0
 8006914:	d051      	beq.n	80069ba <_malloc_r+0xea>
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	0029      	movs	r1, r5
 800691a:	18e3      	adds	r3, r4, r3
 800691c:	0030      	movs	r0, r6
 800691e:	9301      	str	r3, [sp, #4]
 8006920:	f000 f9a8 	bl	8006c74 <_sbrk_r>
 8006924:	9b01      	ldr	r3, [sp, #4]
 8006926:	4283      	cmp	r3, r0
 8006928:	d147      	bne.n	80069ba <_malloc_r+0xea>
 800692a:	6823      	ldr	r3, [r4, #0]
 800692c:	0030      	movs	r0, r6
 800692e:	1aff      	subs	r7, r7, r3
 8006930:	0039      	movs	r1, r7
 8006932:	f7ff ffab 	bl	800688c <sbrk_aligned>
 8006936:	3001      	adds	r0, #1
 8006938:	d03f      	beq.n	80069ba <_malloc_r+0xea>
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	19db      	adds	r3, r3, r7
 800693e:	6023      	str	r3, [r4, #0]
 8006940:	9b00      	ldr	r3, [sp, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d040      	beq.n	80069ca <_malloc_r+0xfa>
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	42a2      	cmp	r2, r4
 800694c:	d133      	bne.n	80069b6 <_malloc_r+0xe6>
 800694e:	2200      	movs	r2, #0
 8006950:	605a      	str	r2, [r3, #4]
 8006952:	e014      	b.n	800697e <_malloc_r+0xae>
 8006954:	2b00      	cmp	r3, #0
 8006956:	dac5      	bge.n	80068e4 <_malloc_r+0x14>
 8006958:	230c      	movs	r3, #12
 800695a:	2500      	movs	r5, #0
 800695c:	6033      	str	r3, [r6, #0]
 800695e:	0028      	movs	r0, r5
 8006960:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006962:	6821      	ldr	r1, [r4, #0]
 8006964:	1bc9      	subs	r1, r1, r7
 8006966:	d420      	bmi.n	80069aa <_malloc_r+0xda>
 8006968:	290b      	cmp	r1, #11
 800696a:	d918      	bls.n	800699e <_malloc_r+0xce>
 800696c:	19e2      	adds	r2, r4, r7
 800696e:	6027      	str	r7, [r4, #0]
 8006970:	42a3      	cmp	r3, r4
 8006972:	d112      	bne.n	800699a <_malloc_r+0xca>
 8006974:	9b00      	ldr	r3, [sp, #0]
 8006976:	601a      	str	r2, [r3, #0]
 8006978:	6863      	ldr	r3, [r4, #4]
 800697a:	6011      	str	r1, [r2, #0]
 800697c:	6053      	str	r3, [r2, #4]
 800697e:	0030      	movs	r0, r6
 8006980:	0025      	movs	r5, r4
 8006982:	f000 f82f 	bl	80069e4 <__malloc_unlock>
 8006986:	2207      	movs	r2, #7
 8006988:	350b      	adds	r5, #11
 800698a:	1d23      	adds	r3, r4, #4
 800698c:	4395      	bics	r5, r2
 800698e:	1aea      	subs	r2, r5, r3
 8006990:	429d      	cmp	r5, r3
 8006992:	d0e4      	beq.n	800695e <_malloc_r+0x8e>
 8006994:	1b5b      	subs	r3, r3, r5
 8006996:	50a3      	str	r3, [r4, r2]
 8006998:	e7e1      	b.n	800695e <_malloc_r+0x8e>
 800699a:	605a      	str	r2, [r3, #4]
 800699c:	e7ec      	b.n	8006978 <_malloc_r+0xa8>
 800699e:	6862      	ldr	r2, [r4, #4]
 80069a0:	42a3      	cmp	r3, r4
 80069a2:	d1d5      	bne.n	8006950 <_malloc_r+0x80>
 80069a4:	9b00      	ldr	r3, [sp, #0]
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	e7e9      	b.n	800697e <_malloc_r+0xae>
 80069aa:	0023      	movs	r3, r4
 80069ac:	6864      	ldr	r4, [r4, #4]
 80069ae:	e7a2      	b.n	80068f6 <_malloc_r+0x26>
 80069b0:	002c      	movs	r4, r5
 80069b2:	686d      	ldr	r5, [r5, #4]
 80069b4:	e7ab      	b.n	800690e <_malloc_r+0x3e>
 80069b6:	0013      	movs	r3, r2
 80069b8:	e7c4      	b.n	8006944 <_malloc_r+0x74>
 80069ba:	230c      	movs	r3, #12
 80069bc:	0030      	movs	r0, r6
 80069be:	6033      	str	r3, [r6, #0]
 80069c0:	f000 f810 	bl	80069e4 <__malloc_unlock>
 80069c4:	e7cb      	b.n	800695e <_malloc_r+0x8e>
 80069c6:	6027      	str	r7, [r4, #0]
 80069c8:	e7d9      	b.n	800697e <_malloc_r+0xae>
 80069ca:	605b      	str	r3, [r3, #4]
 80069cc:	deff      	udf	#255	; 0xff
 80069ce:	46c0      	nop			; (mov r8, r8)
 80069d0:	20000470 	.word	0x20000470

080069d4 <__malloc_lock>:
 80069d4:	b510      	push	{r4, lr}
 80069d6:	4802      	ldr	r0, [pc, #8]	; (80069e0 <__malloc_lock+0xc>)
 80069d8:	f7ff ff0b 	bl	80067f2 <__retarget_lock_acquire_recursive>
 80069dc:	bd10      	pop	{r4, pc}
 80069de:	46c0      	nop			; (mov r8, r8)
 80069e0:	2000046c 	.word	0x2000046c

080069e4 <__malloc_unlock>:
 80069e4:	b510      	push	{r4, lr}
 80069e6:	4802      	ldr	r0, [pc, #8]	; (80069f0 <__malloc_unlock+0xc>)
 80069e8:	f7ff ff04 	bl	80067f4 <__retarget_lock_release_recursive>
 80069ec:	bd10      	pop	{r4, pc}
 80069ee:	46c0      	nop			; (mov r8, r8)
 80069f0:	2000046c 	.word	0x2000046c

080069f4 <__sflush_r>:
 80069f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069f6:	898b      	ldrh	r3, [r1, #12]
 80069f8:	0005      	movs	r5, r0
 80069fa:	000c      	movs	r4, r1
 80069fc:	071a      	lsls	r2, r3, #28
 80069fe:	d45c      	bmi.n	8006aba <__sflush_r+0xc6>
 8006a00:	684a      	ldr	r2, [r1, #4]
 8006a02:	2a00      	cmp	r2, #0
 8006a04:	dc04      	bgt.n	8006a10 <__sflush_r+0x1c>
 8006a06:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006a08:	2a00      	cmp	r2, #0
 8006a0a:	dc01      	bgt.n	8006a10 <__sflush_r+0x1c>
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a10:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006a12:	2f00      	cmp	r7, #0
 8006a14:	d0fa      	beq.n	8006a0c <__sflush_r+0x18>
 8006a16:	2200      	movs	r2, #0
 8006a18:	2080      	movs	r0, #128	; 0x80
 8006a1a:	682e      	ldr	r6, [r5, #0]
 8006a1c:	602a      	str	r2, [r5, #0]
 8006a1e:	001a      	movs	r2, r3
 8006a20:	0140      	lsls	r0, r0, #5
 8006a22:	6a21      	ldr	r1, [r4, #32]
 8006a24:	4002      	ands	r2, r0
 8006a26:	4203      	tst	r3, r0
 8006a28:	d034      	beq.n	8006a94 <__sflush_r+0xa0>
 8006a2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a2c:	89a3      	ldrh	r3, [r4, #12]
 8006a2e:	075b      	lsls	r3, r3, #29
 8006a30:	d506      	bpl.n	8006a40 <__sflush_r+0x4c>
 8006a32:	6863      	ldr	r3, [r4, #4]
 8006a34:	1ac0      	subs	r0, r0, r3
 8006a36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d001      	beq.n	8006a40 <__sflush_r+0x4c>
 8006a3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a3e:	1ac0      	subs	r0, r0, r3
 8006a40:	0002      	movs	r2, r0
 8006a42:	2300      	movs	r3, #0
 8006a44:	0028      	movs	r0, r5
 8006a46:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006a48:	6a21      	ldr	r1, [r4, #32]
 8006a4a:	47b8      	blx	r7
 8006a4c:	89a2      	ldrh	r2, [r4, #12]
 8006a4e:	1c43      	adds	r3, r0, #1
 8006a50:	d106      	bne.n	8006a60 <__sflush_r+0x6c>
 8006a52:	6829      	ldr	r1, [r5, #0]
 8006a54:	291d      	cmp	r1, #29
 8006a56:	d82c      	bhi.n	8006ab2 <__sflush_r+0xbe>
 8006a58:	4b2a      	ldr	r3, [pc, #168]	; (8006b04 <__sflush_r+0x110>)
 8006a5a:	410b      	asrs	r3, r1
 8006a5c:	07db      	lsls	r3, r3, #31
 8006a5e:	d428      	bmi.n	8006ab2 <__sflush_r+0xbe>
 8006a60:	2300      	movs	r3, #0
 8006a62:	6063      	str	r3, [r4, #4]
 8006a64:	6923      	ldr	r3, [r4, #16]
 8006a66:	6023      	str	r3, [r4, #0]
 8006a68:	04d2      	lsls	r2, r2, #19
 8006a6a:	d505      	bpl.n	8006a78 <__sflush_r+0x84>
 8006a6c:	1c43      	adds	r3, r0, #1
 8006a6e:	d102      	bne.n	8006a76 <__sflush_r+0x82>
 8006a70:	682b      	ldr	r3, [r5, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d100      	bne.n	8006a78 <__sflush_r+0x84>
 8006a76:	6560      	str	r0, [r4, #84]	; 0x54
 8006a78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a7a:	602e      	str	r6, [r5, #0]
 8006a7c:	2900      	cmp	r1, #0
 8006a7e:	d0c5      	beq.n	8006a0c <__sflush_r+0x18>
 8006a80:	0023      	movs	r3, r4
 8006a82:	3344      	adds	r3, #68	; 0x44
 8006a84:	4299      	cmp	r1, r3
 8006a86:	d002      	beq.n	8006a8e <__sflush_r+0x9a>
 8006a88:	0028      	movs	r0, r5
 8006a8a:	f7ff feb5 	bl	80067f8 <_free_r>
 8006a8e:	2000      	movs	r0, #0
 8006a90:	6360      	str	r0, [r4, #52]	; 0x34
 8006a92:	e7bc      	b.n	8006a0e <__sflush_r+0x1a>
 8006a94:	2301      	movs	r3, #1
 8006a96:	0028      	movs	r0, r5
 8006a98:	47b8      	blx	r7
 8006a9a:	1c43      	adds	r3, r0, #1
 8006a9c:	d1c6      	bne.n	8006a2c <__sflush_r+0x38>
 8006a9e:	682b      	ldr	r3, [r5, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d0c3      	beq.n	8006a2c <__sflush_r+0x38>
 8006aa4:	2b1d      	cmp	r3, #29
 8006aa6:	d001      	beq.n	8006aac <__sflush_r+0xb8>
 8006aa8:	2b16      	cmp	r3, #22
 8006aaa:	d101      	bne.n	8006ab0 <__sflush_r+0xbc>
 8006aac:	602e      	str	r6, [r5, #0]
 8006aae:	e7ad      	b.n	8006a0c <__sflush_r+0x18>
 8006ab0:	89a2      	ldrh	r2, [r4, #12]
 8006ab2:	2340      	movs	r3, #64	; 0x40
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	81a3      	strh	r3, [r4, #12]
 8006ab8:	e7a9      	b.n	8006a0e <__sflush_r+0x1a>
 8006aba:	690e      	ldr	r6, [r1, #16]
 8006abc:	2e00      	cmp	r6, #0
 8006abe:	d0a5      	beq.n	8006a0c <__sflush_r+0x18>
 8006ac0:	680f      	ldr	r7, [r1, #0]
 8006ac2:	600e      	str	r6, [r1, #0]
 8006ac4:	1bba      	subs	r2, r7, r6
 8006ac6:	9201      	str	r2, [sp, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	079b      	lsls	r3, r3, #30
 8006acc:	d100      	bne.n	8006ad0 <__sflush_r+0xdc>
 8006ace:	694a      	ldr	r2, [r1, #20]
 8006ad0:	60a2      	str	r2, [r4, #8]
 8006ad2:	9b01      	ldr	r3, [sp, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	dd99      	ble.n	8006a0c <__sflush_r+0x18>
 8006ad8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006ada:	0032      	movs	r2, r6
 8006adc:	001f      	movs	r7, r3
 8006ade:	0028      	movs	r0, r5
 8006ae0:	9b01      	ldr	r3, [sp, #4]
 8006ae2:	6a21      	ldr	r1, [r4, #32]
 8006ae4:	47b8      	blx	r7
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	dc06      	bgt.n	8006af8 <__sflush_r+0x104>
 8006aea:	2340      	movs	r3, #64	; 0x40
 8006aec:	2001      	movs	r0, #1
 8006aee:	89a2      	ldrh	r2, [r4, #12]
 8006af0:	4240      	negs	r0, r0
 8006af2:	4313      	orrs	r3, r2
 8006af4:	81a3      	strh	r3, [r4, #12]
 8006af6:	e78a      	b.n	8006a0e <__sflush_r+0x1a>
 8006af8:	9b01      	ldr	r3, [sp, #4]
 8006afa:	1836      	adds	r6, r6, r0
 8006afc:	1a1b      	subs	r3, r3, r0
 8006afe:	9301      	str	r3, [sp, #4]
 8006b00:	e7e7      	b.n	8006ad2 <__sflush_r+0xde>
 8006b02:	46c0      	nop			; (mov r8, r8)
 8006b04:	dfbffffe 	.word	0xdfbffffe

08006b08 <_fflush_r>:
 8006b08:	690b      	ldr	r3, [r1, #16]
 8006b0a:	b570      	push	{r4, r5, r6, lr}
 8006b0c:	0005      	movs	r5, r0
 8006b0e:	000c      	movs	r4, r1
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d102      	bne.n	8006b1a <_fflush_r+0x12>
 8006b14:	2500      	movs	r5, #0
 8006b16:	0028      	movs	r0, r5
 8006b18:	bd70      	pop	{r4, r5, r6, pc}
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d004      	beq.n	8006b28 <_fflush_r+0x20>
 8006b1e:	6a03      	ldr	r3, [r0, #32]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <_fflush_r+0x20>
 8006b24:	f7ff fc5e 	bl	80063e4 <__sinit>
 8006b28:	220c      	movs	r2, #12
 8006b2a:	5ea3      	ldrsh	r3, [r4, r2]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d0f1      	beq.n	8006b14 <_fflush_r+0xc>
 8006b30:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b32:	07d2      	lsls	r2, r2, #31
 8006b34:	d404      	bmi.n	8006b40 <_fflush_r+0x38>
 8006b36:	059b      	lsls	r3, r3, #22
 8006b38:	d402      	bmi.n	8006b40 <_fflush_r+0x38>
 8006b3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b3c:	f7ff fe59 	bl	80067f2 <__retarget_lock_acquire_recursive>
 8006b40:	0028      	movs	r0, r5
 8006b42:	0021      	movs	r1, r4
 8006b44:	f7ff ff56 	bl	80069f4 <__sflush_r>
 8006b48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b4a:	0005      	movs	r5, r0
 8006b4c:	07db      	lsls	r3, r3, #31
 8006b4e:	d4e2      	bmi.n	8006b16 <_fflush_r+0xe>
 8006b50:	89a3      	ldrh	r3, [r4, #12]
 8006b52:	059b      	lsls	r3, r3, #22
 8006b54:	d4df      	bmi.n	8006b16 <_fflush_r+0xe>
 8006b56:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b58:	f7ff fe4c 	bl	80067f4 <__retarget_lock_release_recursive>
 8006b5c:	e7db      	b.n	8006b16 <_fflush_r+0xe>
	...

08006b60 <__swhatbuf_r>:
 8006b60:	b570      	push	{r4, r5, r6, lr}
 8006b62:	000e      	movs	r6, r1
 8006b64:	001d      	movs	r5, r3
 8006b66:	230e      	movs	r3, #14
 8006b68:	5ec9      	ldrsh	r1, [r1, r3]
 8006b6a:	0014      	movs	r4, r2
 8006b6c:	b096      	sub	sp, #88	; 0x58
 8006b6e:	2900      	cmp	r1, #0
 8006b70:	da0c      	bge.n	8006b8c <__swhatbuf_r+0x2c>
 8006b72:	89b2      	ldrh	r2, [r6, #12]
 8006b74:	2380      	movs	r3, #128	; 0x80
 8006b76:	0011      	movs	r1, r2
 8006b78:	4019      	ands	r1, r3
 8006b7a:	421a      	tst	r2, r3
 8006b7c:	d013      	beq.n	8006ba6 <__swhatbuf_r+0x46>
 8006b7e:	2100      	movs	r1, #0
 8006b80:	3b40      	subs	r3, #64	; 0x40
 8006b82:	2000      	movs	r0, #0
 8006b84:	6029      	str	r1, [r5, #0]
 8006b86:	6023      	str	r3, [r4, #0]
 8006b88:	b016      	add	sp, #88	; 0x58
 8006b8a:	bd70      	pop	{r4, r5, r6, pc}
 8006b8c:	466a      	mov	r2, sp
 8006b8e:	f000 f84d 	bl	8006c2c <_fstat_r>
 8006b92:	2800      	cmp	r0, #0
 8006b94:	dbed      	blt.n	8006b72 <__swhatbuf_r+0x12>
 8006b96:	23f0      	movs	r3, #240	; 0xf0
 8006b98:	9901      	ldr	r1, [sp, #4]
 8006b9a:	021b      	lsls	r3, r3, #8
 8006b9c:	4019      	ands	r1, r3
 8006b9e:	4b03      	ldr	r3, [pc, #12]	; (8006bac <__swhatbuf_r+0x4c>)
 8006ba0:	18c9      	adds	r1, r1, r3
 8006ba2:	424b      	negs	r3, r1
 8006ba4:	4159      	adcs	r1, r3
 8006ba6:	2380      	movs	r3, #128	; 0x80
 8006ba8:	00db      	lsls	r3, r3, #3
 8006baa:	e7ea      	b.n	8006b82 <__swhatbuf_r+0x22>
 8006bac:	ffffe000 	.word	0xffffe000

08006bb0 <__smakebuf_r>:
 8006bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bb2:	2602      	movs	r6, #2
 8006bb4:	898b      	ldrh	r3, [r1, #12]
 8006bb6:	0005      	movs	r5, r0
 8006bb8:	000c      	movs	r4, r1
 8006bba:	4233      	tst	r3, r6
 8006bbc:	d006      	beq.n	8006bcc <__smakebuf_r+0x1c>
 8006bbe:	0023      	movs	r3, r4
 8006bc0:	3347      	adds	r3, #71	; 0x47
 8006bc2:	6023      	str	r3, [r4, #0]
 8006bc4:	6123      	str	r3, [r4, #16]
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	6163      	str	r3, [r4, #20]
 8006bca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006bcc:	466a      	mov	r2, sp
 8006bce:	ab01      	add	r3, sp, #4
 8006bd0:	f7ff ffc6 	bl	8006b60 <__swhatbuf_r>
 8006bd4:	9900      	ldr	r1, [sp, #0]
 8006bd6:	0007      	movs	r7, r0
 8006bd8:	0028      	movs	r0, r5
 8006bda:	f7ff fe79 	bl	80068d0 <_malloc_r>
 8006bde:	2800      	cmp	r0, #0
 8006be0:	d108      	bne.n	8006bf4 <__smakebuf_r+0x44>
 8006be2:	220c      	movs	r2, #12
 8006be4:	5ea3      	ldrsh	r3, [r4, r2]
 8006be6:	059a      	lsls	r2, r3, #22
 8006be8:	d4ef      	bmi.n	8006bca <__smakebuf_r+0x1a>
 8006bea:	2203      	movs	r2, #3
 8006bec:	4393      	bics	r3, r2
 8006bee:	431e      	orrs	r6, r3
 8006bf0:	81a6      	strh	r6, [r4, #12]
 8006bf2:	e7e4      	b.n	8006bbe <__smakebuf_r+0xe>
 8006bf4:	2380      	movs	r3, #128	; 0x80
 8006bf6:	89a2      	ldrh	r2, [r4, #12]
 8006bf8:	6020      	str	r0, [r4, #0]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	81a3      	strh	r3, [r4, #12]
 8006bfe:	9b00      	ldr	r3, [sp, #0]
 8006c00:	6120      	str	r0, [r4, #16]
 8006c02:	6163      	str	r3, [r4, #20]
 8006c04:	9b01      	ldr	r3, [sp, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00c      	beq.n	8006c24 <__smakebuf_r+0x74>
 8006c0a:	0028      	movs	r0, r5
 8006c0c:	230e      	movs	r3, #14
 8006c0e:	5ee1      	ldrsh	r1, [r4, r3]
 8006c10:	f000 f81e 	bl	8006c50 <_isatty_r>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	d005      	beq.n	8006c24 <__smakebuf_r+0x74>
 8006c18:	2303      	movs	r3, #3
 8006c1a:	89a2      	ldrh	r2, [r4, #12]
 8006c1c:	439a      	bics	r2, r3
 8006c1e:	3b02      	subs	r3, #2
 8006c20:	4313      	orrs	r3, r2
 8006c22:	81a3      	strh	r3, [r4, #12]
 8006c24:	89a3      	ldrh	r3, [r4, #12]
 8006c26:	433b      	orrs	r3, r7
 8006c28:	81a3      	strh	r3, [r4, #12]
 8006c2a:	e7ce      	b.n	8006bca <__smakebuf_r+0x1a>

08006c2c <_fstat_r>:
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	b570      	push	{r4, r5, r6, lr}
 8006c30:	4d06      	ldr	r5, [pc, #24]	; (8006c4c <_fstat_r+0x20>)
 8006c32:	0004      	movs	r4, r0
 8006c34:	0008      	movs	r0, r1
 8006c36:	0011      	movs	r1, r2
 8006c38:	602b      	str	r3, [r5, #0]
 8006c3a:	f7fb fc64 	bl	8002506 <_fstat>
 8006c3e:	1c43      	adds	r3, r0, #1
 8006c40:	d103      	bne.n	8006c4a <_fstat_r+0x1e>
 8006c42:	682b      	ldr	r3, [r5, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d000      	beq.n	8006c4a <_fstat_r+0x1e>
 8006c48:	6023      	str	r3, [r4, #0]
 8006c4a:	bd70      	pop	{r4, r5, r6, pc}
 8006c4c:	20000468 	.word	0x20000468

08006c50 <_isatty_r>:
 8006c50:	2300      	movs	r3, #0
 8006c52:	b570      	push	{r4, r5, r6, lr}
 8006c54:	4d06      	ldr	r5, [pc, #24]	; (8006c70 <_isatty_r+0x20>)
 8006c56:	0004      	movs	r4, r0
 8006c58:	0008      	movs	r0, r1
 8006c5a:	602b      	str	r3, [r5, #0]
 8006c5c:	f7fb fc61 	bl	8002522 <_isatty>
 8006c60:	1c43      	adds	r3, r0, #1
 8006c62:	d103      	bne.n	8006c6c <_isatty_r+0x1c>
 8006c64:	682b      	ldr	r3, [r5, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d000      	beq.n	8006c6c <_isatty_r+0x1c>
 8006c6a:	6023      	str	r3, [r4, #0]
 8006c6c:	bd70      	pop	{r4, r5, r6, pc}
 8006c6e:	46c0      	nop			; (mov r8, r8)
 8006c70:	20000468 	.word	0x20000468

08006c74 <_sbrk_r>:
 8006c74:	2300      	movs	r3, #0
 8006c76:	b570      	push	{r4, r5, r6, lr}
 8006c78:	4d06      	ldr	r5, [pc, #24]	; (8006c94 <_sbrk_r+0x20>)
 8006c7a:	0004      	movs	r4, r0
 8006c7c:	0008      	movs	r0, r1
 8006c7e:	602b      	str	r3, [r5, #0]
 8006c80:	f7fb fc64 	bl	800254c <_sbrk>
 8006c84:	1c43      	adds	r3, r0, #1
 8006c86:	d103      	bne.n	8006c90 <_sbrk_r+0x1c>
 8006c88:	682b      	ldr	r3, [r5, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d000      	beq.n	8006c90 <_sbrk_r+0x1c>
 8006c8e:	6023      	str	r3, [r4, #0]
 8006c90:	bd70      	pop	{r4, r5, r6, pc}
 8006c92:	46c0      	nop			; (mov r8, r8)
 8006c94:	20000468 	.word	0x20000468

08006c98 <_init>:
 8006c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9a:	46c0      	nop			; (mov r8, r8)
 8006c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c9e:	bc08      	pop	{r3}
 8006ca0:	469e      	mov	lr, r3
 8006ca2:	4770      	bx	lr

08006ca4 <_fini>:
 8006ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca6:	46c0      	nop			; (mov r8, r8)
 8006ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006caa:	bc08      	pop	{r3}
 8006cac:	469e      	mov	lr, r3
 8006cae:	4770      	bx	lr
