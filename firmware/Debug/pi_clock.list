
pi_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  080066b4  080066b4  000166b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006928  08006928  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08006928  08006928  00016928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006930  08006930  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006930  08006930  00016930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006934  08006934  00016934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08006938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000180  08006ab8  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08006ab8  00020478  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000117dc  00000000  00000000  000201eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002862  00000000  00000000  000319c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001020  00000000  00000000  00034230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c89  00000000  00000000  00035250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013b70  00000000  00000000  00035ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014dea  00000000  00000000  00049a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00073f27  00000000  00000000  0005e833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004354  00000000  00000000  000d275c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000d6ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000180 	.word	0x20000180
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800669c 	.word	0x0800669c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000184 	.word	0x20000184
 8000104:	0800669c 	.word	0x0800669c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f834 	bl	80004b4 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	46ce      	mov	lr, r9
 800045c:	4699      	mov	r9, r3
 800045e:	0c03      	lsrs	r3, r0, #16
 8000460:	469c      	mov	ip, r3
 8000462:	0413      	lsls	r3, r2, #16
 8000464:	4647      	mov	r7, r8
 8000466:	0c1b      	lsrs	r3, r3, #16
 8000468:	001d      	movs	r5, r3
 800046a:	000e      	movs	r6, r1
 800046c:	4661      	mov	r1, ip
 800046e:	0404      	lsls	r4, r0, #16
 8000470:	0c24      	lsrs	r4, r4, #16
 8000472:	b580      	push	{r7, lr}
 8000474:	0007      	movs	r7, r0
 8000476:	0c10      	lsrs	r0, r2, #16
 8000478:	434b      	muls	r3, r1
 800047a:	4365      	muls	r5, r4
 800047c:	4341      	muls	r1, r0
 800047e:	4360      	muls	r0, r4
 8000480:	0c2c      	lsrs	r4, r5, #16
 8000482:	18c0      	adds	r0, r0, r3
 8000484:	1820      	adds	r0, r4, r0
 8000486:	468c      	mov	ip, r1
 8000488:	4283      	cmp	r3, r0
 800048a:	d903      	bls.n	8000494 <__aeabi_lmul+0x3c>
 800048c:	2380      	movs	r3, #128	; 0x80
 800048e:	025b      	lsls	r3, r3, #9
 8000490:	4698      	mov	r8, r3
 8000492:	44c4      	add	ip, r8
 8000494:	4649      	mov	r1, r9
 8000496:	4379      	muls	r1, r7
 8000498:	4356      	muls	r6, r2
 800049a:	0c03      	lsrs	r3, r0, #16
 800049c:	042d      	lsls	r5, r5, #16
 800049e:	0c2d      	lsrs	r5, r5, #16
 80004a0:	1989      	adds	r1, r1, r6
 80004a2:	4463      	add	r3, ip
 80004a4:	0400      	lsls	r0, r0, #16
 80004a6:	1940      	adds	r0, r0, r5
 80004a8:	18c9      	adds	r1, r1, r3
 80004aa:	bcc0      	pop	{r6, r7}
 80004ac:	46b9      	mov	r9, r7
 80004ae:	46b0      	mov	r8, r6
 80004b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__udivmoddi4>:
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	4657      	mov	r7, sl
 80004b8:	464e      	mov	r6, r9
 80004ba:	4645      	mov	r5, r8
 80004bc:	46de      	mov	lr, fp
 80004be:	b5e0      	push	{r5, r6, r7, lr}
 80004c0:	0004      	movs	r4, r0
 80004c2:	000d      	movs	r5, r1
 80004c4:	4692      	mov	sl, r2
 80004c6:	4699      	mov	r9, r3
 80004c8:	b083      	sub	sp, #12
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d830      	bhi.n	8000530 <__udivmoddi4+0x7c>
 80004ce:	d02d      	beq.n	800052c <__udivmoddi4+0x78>
 80004d0:	4649      	mov	r1, r9
 80004d2:	4650      	mov	r0, sl
 80004d4:	f000 f8ba 	bl	800064c <__clzdi2>
 80004d8:	0029      	movs	r1, r5
 80004da:	0006      	movs	r6, r0
 80004dc:	0020      	movs	r0, r4
 80004de:	f000 f8b5 	bl	800064c <__clzdi2>
 80004e2:	1a33      	subs	r3, r6, r0
 80004e4:	4698      	mov	r8, r3
 80004e6:	3b20      	subs	r3, #32
 80004e8:	d434      	bmi.n	8000554 <__udivmoddi4+0xa0>
 80004ea:	469b      	mov	fp, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	465a      	mov	r2, fp
 80004f0:	4093      	lsls	r3, r2
 80004f2:	4642      	mov	r2, r8
 80004f4:	001f      	movs	r7, r3
 80004f6:	4653      	mov	r3, sl
 80004f8:	4093      	lsls	r3, r2
 80004fa:	001e      	movs	r6, r3
 80004fc:	42af      	cmp	r7, r5
 80004fe:	d83b      	bhi.n	8000578 <__udivmoddi4+0xc4>
 8000500:	42af      	cmp	r7, r5
 8000502:	d100      	bne.n	8000506 <__udivmoddi4+0x52>
 8000504:	e079      	b.n	80005fa <__udivmoddi4+0x146>
 8000506:	465b      	mov	r3, fp
 8000508:	1ba4      	subs	r4, r4, r6
 800050a:	41bd      	sbcs	r5, r7
 800050c:	2b00      	cmp	r3, #0
 800050e:	da00      	bge.n	8000512 <__udivmoddi4+0x5e>
 8000510:	e076      	b.n	8000600 <__udivmoddi4+0x14c>
 8000512:	2200      	movs	r2, #0
 8000514:	2300      	movs	r3, #0
 8000516:	9200      	str	r2, [sp, #0]
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2301      	movs	r3, #1
 800051c:	465a      	mov	r2, fp
 800051e:	4093      	lsls	r3, r2
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	4642      	mov	r2, r8
 8000526:	4093      	lsls	r3, r2
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	e029      	b.n	8000580 <__udivmoddi4+0xcc>
 800052c:	4282      	cmp	r2, r0
 800052e:	d9cf      	bls.n	80004d0 <__udivmoddi4+0x1c>
 8000530:	2200      	movs	r2, #0
 8000532:	2300      	movs	r3, #0
 8000534:	9200      	str	r2, [sp, #0]
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <__udivmoddi4+0x8e>
 800053e:	601c      	str	r4, [r3, #0]
 8000540:	605d      	str	r5, [r3, #4]
 8000542:	9800      	ldr	r0, [sp, #0]
 8000544:	9901      	ldr	r1, [sp, #4]
 8000546:	b003      	add	sp, #12
 8000548:	bcf0      	pop	{r4, r5, r6, r7}
 800054a:	46bb      	mov	fp, r7
 800054c:	46b2      	mov	sl, r6
 800054e:	46a9      	mov	r9, r5
 8000550:	46a0      	mov	r8, r4
 8000552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000554:	4642      	mov	r2, r8
 8000556:	469b      	mov	fp, r3
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	4652      	mov	r2, sl
 800055e:	40da      	lsrs	r2, r3
 8000560:	4641      	mov	r1, r8
 8000562:	0013      	movs	r3, r2
 8000564:	464a      	mov	r2, r9
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	4642      	mov	r2, r8
 800056c:	431f      	orrs	r7, r3
 800056e:	4653      	mov	r3, sl
 8000570:	4093      	lsls	r3, r2
 8000572:	001e      	movs	r6, r3
 8000574:	42af      	cmp	r7, r5
 8000576:	d9c3      	bls.n	8000500 <__udivmoddi4+0x4c>
 8000578:	2200      	movs	r2, #0
 800057a:	2300      	movs	r3, #0
 800057c:	9200      	str	r2, [sp, #0]
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	4643      	mov	r3, r8
 8000582:	2b00      	cmp	r3, #0
 8000584:	d0d8      	beq.n	8000538 <__udivmoddi4+0x84>
 8000586:	07fb      	lsls	r3, r7, #31
 8000588:	0872      	lsrs	r2, r6, #1
 800058a:	431a      	orrs	r2, r3
 800058c:	4646      	mov	r6, r8
 800058e:	087b      	lsrs	r3, r7, #1
 8000590:	e00e      	b.n	80005b0 <__udivmoddi4+0xfc>
 8000592:	42ab      	cmp	r3, r5
 8000594:	d101      	bne.n	800059a <__udivmoddi4+0xe6>
 8000596:	42a2      	cmp	r2, r4
 8000598:	d80c      	bhi.n	80005b4 <__udivmoddi4+0x100>
 800059a:	1aa4      	subs	r4, r4, r2
 800059c:	419d      	sbcs	r5, r3
 800059e:	2001      	movs	r0, #1
 80005a0:	1924      	adds	r4, r4, r4
 80005a2:	416d      	adcs	r5, r5
 80005a4:	2100      	movs	r1, #0
 80005a6:	3e01      	subs	r6, #1
 80005a8:	1824      	adds	r4, r4, r0
 80005aa:	414d      	adcs	r5, r1
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d006      	beq.n	80005be <__udivmoddi4+0x10a>
 80005b0:	42ab      	cmp	r3, r5
 80005b2:	d9ee      	bls.n	8000592 <__udivmoddi4+0xde>
 80005b4:	3e01      	subs	r6, #1
 80005b6:	1924      	adds	r4, r4, r4
 80005b8:	416d      	adcs	r5, r5
 80005ba:	2e00      	cmp	r6, #0
 80005bc:	d1f8      	bne.n	80005b0 <__udivmoddi4+0xfc>
 80005be:	9800      	ldr	r0, [sp, #0]
 80005c0:	9901      	ldr	r1, [sp, #4]
 80005c2:	465b      	mov	r3, fp
 80005c4:	1900      	adds	r0, r0, r4
 80005c6:	4169      	adcs	r1, r5
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	db24      	blt.n	8000616 <__udivmoddi4+0x162>
 80005cc:	002b      	movs	r3, r5
 80005ce:	465a      	mov	r2, fp
 80005d0:	4644      	mov	r4, r8
 80005d2:	40d3      	lsrs	r3, r2
 80005d4:	002a      	movs	r2, r5
 80005d6:	40e2      	lsrs	r2, r4
 80005d8:	001c      	movs	r4, r3
 80005da:	465b      	mov	r3, fp
 80005dc:	0015      	movs	r5, r2
 80005de:	2b00      	cmp	r3, #0
 80005e0:	db2a      	blt.n	8000638 <__udivmoddi4+0x184>
 80005e2:	0026      	movs	r6, r4
 80005e4:	409e      	lsls	r6, r3
 80005e6:	0033      	movs	r3, r6
 80005e8:	0026      	movs	r6, r4
 80005ea:	4647      	mov	r7, r8
 80005ec:	40be      	lsls	r6, r7
 80005ee:	0032      	movs	r2, r6
 80005f0:	1a80      	subs	r0, r0, r2
 80005f2:	4199      	sbcs	r1, r3
 80005f4:	9000      	str	r0, [sp, #0]
 80005f6:	9101      	str	r1, [sp, #4]
 80005f8:	e79e      	b.n	8000538 <__udivmoddi4+0x84>
 80005fa:	42a3      	cmp	r3, r4
 80005fc:	d8bc      	bhi.n	8000578 <__udivmoddi4+0xc4>
 80005fe:	e782      	b.n	8000506 <__udivmoddi4+0x52>
 8000600:	4642      	mov	r2, r8
 8000602:	2320      	movs	r3, #32
 8000604:	2100      	movs	r1, #0
 8000606:	1a9b      	subs	r3, r3, r2
 8000608:	2200      	movs	r2, #0
 800060a:	9100      	str	r1, [sp, #0]
 800060c:	9201      	str	r2, [sp, #4]
 800060e:	2201      	movs	r2, #1
 8000610:	40da      	lsrs	r2, r3
 8000612:	9201      	str	r2, [sp, #4]
 8000614:	e785      	b.n	8000522 <__udivmoddi4+0x6e>
 8000616:	4642      	mov	r2, r8
 8000618:	2320      	movs	r3, #32
 800061a:	1a9b      	subs	r3, r3, r2
 800061c:	002a      	movs	r2, r5
 800061e:	4646      	mov	r6, r8
 8000620:	409a      	lsls	r2, r3
 8000622:	0023      	movs	r3, r4
 8000624:	40f3      	lsrs	r3, r6
 8000626:	4644      	mov	r4, r8
 8000628:	4313      	orrs	r3, r2
 800062a:	002a      	movs	r2, r5
 800062c:	40e2      	lsrs	r2, r4
 800062e:	001c      	movs	r4, r3
 8000630:	465b      	mov	r3, fp
 8000632:	0015      	movs	r5, r2
 8000634:	2b00      	cmp	r3, #0
 8000636:	dad4      	bge.n	80005e2 <__udivmoddi4+0x12e>
 8000638:	4642      	mov	r2, r8
 800063a:	002f      	movs	r7, r5
 800063c:	2320      	movs	r3, #32
 800063e:	0026      	movs	r6, r4
 8000640:	4097      	lsls	r7, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	40de      	lsrs	r6, r3
 8000646:	003b      	movs	r3, r7
 8000648:	4333      	orrs	r3, r6
 800064a:	e7cd      	b.n	80005e8 <__udivmoddi4+0x134>

0800064c <__clzdi2>:
 800064c:	b510      	push	{r4, lr}
 800064e:	2900      	cmp	r1, #0
 8000650:	d103      	bne.n	800065a <__clzdi2+0xe>
 8000652:	f000 f807 	bl	8000664 <__clzsi2>
 8000656:	3020      	adds	r0, #32
 8000658:	e002      	b.n	8000660 <__clzdi2+0x14>
 800065a:	0008      	movs	r0, r1
 800065c:	f000 f802 	bl	8000664 <__clzsi2>
 8000660:	bd10      	pop	{r4, pc}
 8000662:	46c0      	nop			; (mov r8, r8)

08000664 <__clzsi2>:
 8000664:	211c      	movs	r1, #28
 8000666:	2301      	movs	r3, #1
 8000668:	041b      	lsls	r3, r3, #16
 800066a:	4298      	cmp	r0, r3
 800066c:	d301      	bcc.n	8000672 <__clzsi2+0xe>
 800066e:	0c00      	lsrs	r0, r0, #16
 8000670:	3910      	subs	r1, #16
 8000672:	0a1b      	lsrs	r3, r3, #8
 8000674:	4298      	cmp	r0, r3
 8000676:	d301      	bcc.n	800067c <__clzsi2+0x18>
 8000678:	0a00      	lsrs	r0, r0, #8
 800067a:	3908      	subs	r1, #8
 800067c:	091b      	lsrs	r3, r3, #4
 800067e:	4298      	cmp	r0, r3
 8000680:	d301      	bcc.n	8000686 <__clzsi2+0x22>
 8000682:	0900      	lsrs	r0, r0, #4
 8000684:	3904      	subs	r1, #4
 8000686:	a202      	add	r2, pc, #8	; (adr r2, 8000690 <__clzsi2+0x2c>)
 8000688:	5c10      	ldrb	r0, [r2, r0]
 800068a:	1840      	adds	r0, r0, r1
 800068c:	4770      	bx	lr
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	02020304 	.word	0x02020304
 8000694:	01010101 	.word	0x01010101
	...

080006a0 <segment_write>:
		{ 1, 0, 0, 1, 0, 0, 0, 1 }, // Y (31)
		{ 1, 0, 1, 0, 0, 1, 0, 0 }, // Z (32)
		{ 1, 1, 1, 1, 1, 1, 1, 1 }, // BLANK (33)
		{ 1, 0, 0, 1, 1, 1, 0, 0 } }; // DEG (34)

void segment_write(seven_segment *seg, uint8_t dot) {
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	000a      	movs	r2, r1
 80006aa:	1cfb      	adds	r3, r7, #3
 80006ac:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(seg->enable_port, seg->enable_pin, 0);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6958      	ldr	r0, [r3, #20]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	8b1b      	ldrh	r3, [r3, #24]
 80006b6:	2200      	movs	r2, #0
 80006b8:	0019      	movs	r1, r3
 80006ba:	f001 fddc 	bl	8002276 <HAL_GPIO_WritePin>

	for (uint8_t i = 0; i < 8; i++) {
 80006be:	230f      	movs	r3, #15
 80006c0:	18fb      	adds	r3, r7, r3
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
 80006c6:	e039      	b.n	800073c <segment_write+0x9c>
		if((i == 0) && (dot == 1)){
 80006c8:	230f      	movs	r3, #15
 80006ca:	18fb      	adds	r3, r7, r3
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d10c      	bne.n	80006ec <segment_write+0x4c>
 80006d2:	1cfb      	adds	r3, r7, #3
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d108      	bne.n	80006ec <segment_write+0x4c>
			HAL_GPIO_WritePin(seg->a_port, seg->a_pin, 0);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	68d8      	ldr	r0, [r3, #12]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	8a1b      	ldrh	r3, [r3, #16]
 80006e2:	2200      	movs	r2, #0
 80006e4:	0019      	movs	r1, r3
 80006e6:	f001 fdc6 	bl	8002276 <HAL_GPIO_WritePin>
 80006ea:	e011      	b.n	8000710 <segment_write+0x70>
		}else{
			HAL_GPIO_WritePin(seg->a_port, seg->a_pin, segment_data[seg->data][i]);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	68d8      	ldr	r0, [r3, #12]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	8a1c      	ldrh	r4, [r3, #16]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	001a      	movs	r2, r3
 80006fa:	230f      	movs	r3, #15
 80006fc:	18fb      	adds	r3, r7, r3
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4917      	ldr	r1, [pc, #92]	; (8000760 <segment_write+0xc0>)
 8000702:	00d2      	lsls	r2, r2, #3
 8000704:	188a      	adds	r2, r1, r2
 8000706:	5cd3      	ldrb	r3, [r2, r3]
 8000708:	001a      	movs	r2, r3
 800070a:	0021      	movs	r1, r4
 800070c:	f001 fdb3 	bl	8002276 <HAL_GPIO_WritePin>
		}

		HAL_GPIO_WritePin(seg->clock_port, seg->clock_pin, 0);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6858      	ldr	r0, [r3, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	891b      	ldrh	r3, [r3, #8]
 8000718:	2200      	movs	r2, #0
 800071a:	0019      	movs	r1, r3
 800071c:	f001 fdab 	bl	8002276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(seg->clock_port, seg->clock_pin, 1);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6858      	ldr	r0, [r3, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	891b      	ldrh	r3, [r3, #8]
 8000728:	2201      	movs	r2, #1
 800072a:	0019      	movs	r1, r3
 800072c:	f001 fda3 	bl	8002276 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 8; i++) {
 8000730:	210f      	movs	r1, #15
 8000732:	187b      	adds	r3, r7, r1
 8000734:	781a      	ldrb	r2, [r3, #0]
 8000736:	187b      	adds	r3, r7, r1
 8000738:	3201      	adds	r2, #1
 800073a:	701a      	strb	r2, [r3, #0]
 800073c:	230f      	movs	r3, #15
 800073e:	18fb      	adds	r3, r7, r3
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b07      	cmp	r3, #7
 8000744:	d9c0      	bls.n	80006c8 <segment_write+0x28>
	}
	HAL_GPIO_WritePin(seg->enable_port, seg->enable_pin, seg->enable_segment);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6958      	ldr	r0, [r3, #20]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	8b19      	ldrh	r1, [r3, #24]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	789b      	ldrb	r3, [r3, #2]
 8000752:	001a      	movs	r2, r3
 8000754:	f001 fd8f 	bl	8002276 <HAL_GPIO_WritePin>
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b005      	add	sp, #20
 800075e:	bd90      	pop	{r4, r7, pc}
 8000760:	20000000 	.word	0x20000000

08000764 <display_write_segment>:
//		segment_write(disp->second_one);
//		disp->second_one->data_old = disp->second_one->data;
//	}
//}

void display_write_segment(display_segment *disp_segment, uint8_t dot) {
 8000764:	b5b0      	push	{r4, r5, r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	000a      	movs	r2, r1
 800076e:	1cfb      	adds	r3, r7, #3
 8000770:	701a      	strb	r2, [r3, #0]
	uint8_t data = disp_segment->data;
 8000772:	210f      	movs	r1, #15
 8000774:	187b      	adds	r3, r7, r1
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	7812      	ldrb	r2, [r2, #0]
 800077a:	701a      	strb	r2, [r3, #0]
	if (data != disp_segment->data_old) {
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	785b      	ldrb	r3, [r3, #1]
 8000780:	187a      	adds	r2, r7, r1
 8000782:	7812      	ldrb	r2, [r2, #0]
 8000784:	429a      	cmp	r2, r3
 8000786:	d02b      	beq.n	80007e0 <display_write_segment+0x7c>
		disp_segment->data_old = disp_segment->data;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	781a      	ldrb	r2, [r3, #0]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	705a      	strb	r2, [r3, #1]

		disp_segment->one->data = data % 10;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	689c      	ldr	r4, [r3, #8]
 8000794:	000d      	movs	r5, r1
 8000796:	197b      	adds	r3, r7, r5
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	210a      	movs	r1, #10
 800079c:	0018      	movs	r0, r3
 800079e:	f7ff fd4b 	bl	8000238 <__aeabi_uidivmod>
 80007a2:	000b      	movs	r3, r1
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	7023      	strb	r3, [r4, #0]
		data /= 10;
 80007a8:	197c      	adds	r4, r7, r5
 80007aa:	197b      	adds	r3, r7, r5
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	210a      	movs	r1, #10
 80007b0:	0018      	movs	r0, r3
 80007b2:	f7ff fcbb 	bl	800012c <__udivsi3>
 80007b6:	0003      	movs	r3, r0
 80007b8:	7023      	strb	r3, [r4, #0]
		disp_segment->ten->data = data;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	197a      	adds	r2, r7, r5
 80007c0:	7812      	ldrb	r2, [r2, #0]
 80007c2:	701a      	strb	r2, [r3, #0]

		segment_write(disp_segment->one, dot);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	689a      	ldr	r2, [r3, #8]
 80007c8:	1cfb      	adds	r3, r7, #3
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	0019      	movs	r1, r3
 80007ce:	0010      	movs	r0, r2
 80007d0:	f7ff ff66 	bl	80006a0 <segment_write>
		segment_write(disp_segment->ten, 0);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	2100      	movs	r1, #0
 80007da:	0018      	movs	r0, r3
 80007dc:	f7ff ff60 	bl	80006a0 <segment_write>
	}
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b004      	add	sp, #16
 80007e6:	bdb0      	pop	{r4, r5, r7, pc}

080007e8 <process_button>:
	temp_value = HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port, BTN_RIGHT_Pin);
	*button_value |= (temp_value << 0);
	return 0;
}

void process_button(Button *btn) {
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	uint8_t raw_state = HAL_GPIO_ReadPin(btn->port, btn->pin);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	691a      	ldr	r2, [r3, #16]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	8a9b      	ldrh	r3, [r3, #20]
 80007f8:	210f      	movs	r1, #15
 80007fa:	187c      	adds	r4, r7, r1
 80007fc:	0019      	movs	r1, r3
 80007fe:	0010      	movs	r0, r2
 8000800:	f001 fd1c 	bl	800223c <HAL_GPIO_ReadPin>
 8000804:	0003      	movs	r3, r0
 8000806:	7023      	strb	r3, [r4, #0]
	uint32_t now = HAL_GetTick();
 8000808:	f001 fa9e 	bl	8001d48 <HAL_GetTick>
 800080c:	0003      	movs	r3, r0
 800080e:	60bb      	str	r3, [r7, #8]

	switch (btn->state) {
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b04      	cmp	r3, #4
 8000816:	d900      	bls.n	800081a <process_button+0x32>
 8000818:	e073      	b.n	8000902 <process_button+0x11a>
 800081a:	009a      	lsls	r2, r3, #2
 800081c:	4b3b      	ldr	r3, [pc, #236]	; (800090c <process_button+0x124>)
 800081e:	18d3      	adds	r3, r2, r3
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	469f      	mov	pc, r3
	case BUTTON_IDLE:
		if (raw_state != btn->last_raw_state) {
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	7b1b      	ldrb	r3, [r3, #12]
 8000828:	220f      	movs	r2, #15
 800082a:	18ba      	adds	r2, r7, r2
 800082c:	7812      	ldrb	r2, [r2, #0]
 800082e:	429a      	cmp	r2, r3
 8000830:	d060      	beq.n	80008f4 <process_button+0x10c>
			btn->last_change_time = now;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	68ba      	ldr	r2, [r7, #8]
 8000836:	605a      	str	r2, [r3, #4]
			btn->state = BUTTON_DEBOUNCING;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800083e:	e059      	b.n	80008f4 <process_button+0x10c>

	case BUTTON_DEBOUNCING:
		if ((now - btn->last_change_time) >= DEBOUNCE_TIME_MS) {
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	68ba      	ldr	r2, [r7, #8]
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	2b1d      	cmp	r3, #29
 800084a:	d955      	bls.n	80008f8 <process_button+0x110>
			if (raw_state != btn->last_raw_state) {
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	7b1b      	ldrb	r3, [r3, #12]
 8000850:	210f      	movs	r1, #15
 8000852:	187a      	adds	r2, r7, r1
 8000854:	7812      	ldrb	r2, [r2, #0]
 8000856:	429a      	cmp	r2, r3
 8000858:	d012      	beq.n	8000880 <process_button+0x98>
				btn->last_raw_state = raw_state;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	187a      	adds	r2, r7, r1
 800085e:	7812      	ldrb	r2, [r2, #0]
 8000860:	731a      	strb	r2, [r3, #12]
				if (raw_state) {  // Button pressed
 8000862:	187b      	adds	r3, r7, r1
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d006      	beq.n	8000878 <process_button+0x90>
					btn->press_time = now;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	68ba      	ldr	r2, [r7, #8]
 800086e:	609a      	str	r2, [r3, #8]
					btn->state = BUTTON_PRESSED;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2202      	movs	r2, #2
 8000874:	701a      	strb	r2, [r3, #0]
				}
			} else {
				btn->state = BUTTON_IDLE;
			}
		}
		break;
 8000876:	e03f      	b.n	80008f8 <process_button+0x110>
					btn->state = BUTTON_IDLE;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
		break;
 800087e:	e03b      	b.n	80008f8 <process_button+0x110>
				btn->state = BUTTON_IDLE;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
		break;
 8000886:	e037      	b.n	80008f8 <process_button+0x110>

	case BUTTON_PRESSED:
		if (!raw_state) {
 8000888:	230f      	movs	r3, #15
 800088a:	18fb      	adds	r3, r7, r3
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d10f      	bne.n	80008b2 <process_button+0xca>
			if ((now - btn->press_time) < LONG_PRESS_TIME_MS) {
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	1ad2      	subs	r2, r2, r3
 800089a:	23fa      	movs	r3, #250	; 0xfa
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	429a      	cmp	r2, r3
 80008a0:	d203      	bcs.n	80008aa <process_button+0xc2>
				printf("Short Press Detected\n");
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <process_button+0x128>)
 80008a4:	0018      	movs	r0, r3
 80008a6:	f004 fe01 	bl	80054ac <puts>
			}
			btn->state = BUTTON_RELEASED;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2204      	movs	r2, #4
 80008ae:	701a      	strb	r2, [r3, #0]
		} else if ((now - btn->press_time) >= LONG_PRESS_TIME_MS) {
			printf("Long Press Detected\n");
			btn->state = BUTTON_LONG_PRESS;
		}
		break;
 80008b0:	e024      	b.n	80008fc <process_button+0x114>
		} else if ((now - btn->press_time) >= LONG_PRESS_TIME_MS) {
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	68ba      	ldr	r2, [r7, #8]
 80008b8:	1ad2      	subs	r2, r2, r3
 80008ba:	23fa      	movs	r3, #250	; 0xfa
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	429a      	cmp	r2, r3
 80008c0:	d31c      	bcc.n	80008fc <process_button+0x114>
			printf("Long Press Detected\n");
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <process_button+0x12c>)
 80008c4:	0018      	movs	r0, r3
 80008c6:	f004 fdf1 	bl	80054ac <puts>
			btn->state = BUTTON_LONG_PRESS;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2203      	movs	r2, #3
 80008ce:	701a      	strb	r2, [r3, #0]
		break;
 80008d0:	e014      	b.n	80008fc <process_button+0x114>

	case BUTTON_LONG_PRESS:
		if (!raw_state) {
 80008d2:	230f      	movs	r3, #15
 80008d4:	18fb      	adds	r3, r7, r3
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d111      	bne.n	8000900 <process_button+0x118>
			btn->state = BUTTON_RELEASED;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2204      	movs	r2, #4
 80008e0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80008e2:	e00d      	b.n	8000900 <process_button+0x118>

	case BUTTON_RELEASED:
		printf("Button Released\n");
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <process_button+0x130>)
 80008e6:	0018      	movs	r0, r3
 80008e8:	f004 fde0 	bl	80054ac <puts>
		btn->state = BUTTON_IDLE;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
		break;
 80008f2:	e006      	b.n	8000902 <process_button+0x11a>
		break;
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	e004      	b.n	8000902 <process_button+0x11a>
		break;
 80008f8:	46c0      	nop			; (mov r8, r8)
 80008fa:	e002      	b.n	8000902 <process_button+0x11a>
		break;
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	e000      	b.n	8000902 <process_button+0x11a>
		break;
 8000900:	46c0      	nop			; (mov r8, r8)
	}
}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	b005      	add	sp, #20
 8000908:	bd90      	pop	{r4, r7, pc}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	08006788 	.word	0x08006788
 8000910:	080066b4 	.word	0x080066b4
 8000914:	080066cc 	.word	0x080066cc
 8000918:	080066e0 	.word	0x080066e0

0800091c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800091c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800091e:	b0fd      	sub	sp, #500	; 0x1f4
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	clock_value = 0;
 8000922:	4bf8      	ldr	r3, [pc, #992]	; (8000d04 <main+0x3e8>)
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000928:	f001 f9a8 	bl	8001c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092c:	f000 fb82 	bl	8001034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000930:	f000 fdd8 	bl	80014e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000934:	f000 fc06 	bl	8001144 <MX_I2C1_Init>
  MX_RTC_Init();
 8000938:	f000 fc44 	bl	80011c4 <MX_RTC_Init>
  MX_TIM2_Init();
 800093c:	f000 fca6 	bl	800128c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000940:	f000 fda0 	bl	8001484 <MX_USART2_UART_Init>
  MX_TIM21_Init();
 8000944:	f000 fd22 	bl	800138c <MX_TIM21_Init>
  	  char rx_buffer[64];
  	  char tx_buffer[16];
  	  char time_buffer[32];
  	  char date_buffer[32];

	HAL_GPIO_WritePin(EN_HO_GPIO_Port, EN_HO_Pin, 0);
 8000948:	4bef      	ldr	r3, [pc, #956]	; (8000d08 <main+0x3ec>)
 800094a:	2200      	movs	r2, #0
 800094c:	2110      	movs	r1, #16
 800094e:	0018      	movs	r0, r3
 8000950:	f001 fc91 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_HT_GPIO_Port, EN_HT_Pin, 0);
 8000954:	23a0      	movs	r3, #160	; 0xa0
 8000956:	05db      	lsls	r3, r3, #23
 8000958:	2200      	movs	r2, #0
 800095a:	2108      	movs	r1, #8
 800095c:	0018      	movs	r0, r3
 800095e:	f001 fc8a 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_MO_GPIO_Port, EN_MO_Pin, 0);
 8000962:	2380      	movs	r3, #128	; 0x80
 8000964:	015b      	lsls	r3, r3, #5
 8000966:	48e8      	ldr	r0, [pc, #928]	; (8000d08 <main+0x3ec>)
 8000968:	2200      	movs	r2, #0
 800096a:	0019      	movs	r1, r3
 800096c:	f001 fc83 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_MT_GPIO_Port, EN_MT_Pin, 0);
 8000970:	4be5      	ldr	r3, [pc, #916]	; (8000d08 <main+0x3ec>)
 8000972:	2200      	movs	r2, #0
 8000974:	2120      	movs	r1, #32
 8000976:	0018      	movs	r0, r3
 8000978:	f001 fc7d 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_SO_GPIO_Port, EN_SO_Pin, 0);
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	01db      	lsls	r3, r3, #7
 8000980:	48e1      	ldr	r0, [pc, #900]	; (8000d08 <main+0x3ec>)
 8000982:	2200      	movs	r2, #0
 8000984:	0019      	movs	r1, r3
 8000986:	f001 fc76 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_ST_GPIO_Port, EN_ST_Pin, 0);
 800098a:	2380      	movs	r3, #128	; 0x80
 800098c:	019b      	lsls	r3, r3, #6
 800098e:	48de      	ldr	r0, [pc, #888]	; (8000d08 <main+0x3ec>)
 8000990:	2200      	movs	r2, #0
 8000992:	0019      	movs	r1, r3
 8000994:	f001 fc6f 	bl	8002276 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(A_HT_GPIO_Port, A_HT_Pin, 1);
 8000998:	23a0      	movs	r3, #160	; 0xa0
 800099a:	05db      	lsls	r3, r3, #23
 800099c:	2201      	movs	r2, #1
 800099e:	2102      	movs	r1, #2
 80009a0:	0018      	movs	r0, r3
 80009a2:	f001 fc68 	bl	8002276 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLEAR_GPIO_Port, CLEAR_Pin, 1);
 80009a6:	23a0      	movs	r3, #160	; 0xa0
 80009a8:	05db      	lsls	r3, r3, #23
 80009aa:	2201      	movs	r2, #1
 80009ac:	2101      	movs	r1, #1
 80009ae:	0018      	movs	r0, r3
 80009b0:	f001 fc61 	bl	8002276 <HAL_GPIO_WritePin>

	RTC_TimeTypeDef sTimeStamp;
	RTC_DateTypeDef sTimeStampDate;

	sTimeStamp.Hours = 23;
 80009b4:	21a4      	movs	r1, #164	; 0xa4
 80009b6:	0049      	lsls	r1, r1, #1
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2217      	movs	r2, #23
 80009bc:	701a      	strb	r2, [r3, #0]
	sTimeStamp.Minutes = 59;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	223b      	movs	r2, #59	; 0x3b
 80009c2:	705a      	strb	r2, [r3, #1]
	sTimeStamp.Seconds = 58;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	223a      	movs	r2, #58	; 0x3a
 80009c8:	709a      	strb	r2, [r3, #2]

	sTimeStamp.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2200      	movs	r2, #0
 80009ce:	60da      	str	r2, [r3, #12]
	sTimeStamp.StoreOperation = RTC_STOREOPERATION_SET;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2280      	movs	r2, #128	; 0x80
 80009d4:	02d2      	lsls	r2, r2, #11
 80009d6:	611a      	str	r2, [r3, #16]

	sTimeStamp.StoreOperation = RTC_STOREOPERATION_SET;
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	02d2      	lsls	r2, r2, #11
 80009de:	611a      	str	r2, [r3, #16]
	HAL_StatusTypeDef result;

	result = HAL_RTC_SetTime(&hrtc, &sTimeStamp, RTC_FORMAT_BIN);
 80009e0:	25ee      	movs	r5, #238	; 0xee
 80009e2:	35ff      	adds	r5, #255	; 0xff
 80009e4:	197c      	adds	r4, r7, r5
 80009e6:	1879      	adds	r1, r7, r1
 80009e8:	4bc8      	ldr	r3, [pc, #800]	; (8000d0c <main+0x3f0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	0018      	movs	r0, r3
 80009ee:	f002 fd29 	bl	8003444 <HAL_RTC_SetTime>
 80009f2:	0003      	movs	r3, r0
 80009f4:	7023      	strb	r3, [r4, #0]
	if(result != HAL_OK){
 80009f6:	197b      	adds	r3, r7, r5
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d000      	beq.n	8000a00 <main+0xe4>
		while(1);
 80009fe:	e7fe      	b.n	80009fe <main+0xe2>

	display_segment disp_hour;
	display_segment disp_minute;
	display_segment disp_second;

	hour_ten.a_port = A_HT_GPIO_Port;
 8000a00:	2094      	movs	r0, #148	; 0x94
 8000a02:	0040      	lsls	r0, r0, #1
 8000a04:	183b      	adds	r3, r7, r0
 8000a06:	22a0      	movs	r2, #160	; 0xa0
 8000a08:	05d2      	lsls	r2, r2, #23
 8000a0a:	60da      	str	r2, [r3, #12]
	hour_ten.a_pin = A_HT_Pin;
 8000a0c:	183b      	adds	r3, r7, r0
 8000a0e:	2202      	movs	r2, #2
 8000a10:	821a      	strh	r2, [r3, #16]
	hour_ten.clock_port = CLK_A_HT_GPIO_Port;
 8000a12:	183b      	adds	r3, r7, r0
 8000a14:	22a0      	movs	r2, #160	; 0xa0
 8000a16:	05d2      	lsls	r2, r2, #23
 8000a18:	605a      	str	r2, [r3, #4]
	hour_ten.clock_pin = CLK_A_HT_Pin;
 8000a1a:	183b      	adds	r3, r7, r0
 8000a1c:	2204      	movs	r2, #4
 8000a1e:	811a      	strh	r2, [r3, #8]
	hour_ten.enable_port = EN_HT_GPIO_Port;
 8000a20:	183b      	adds	r3, r7, r0
 8000a22:	22a0      	movs	r2, #160	; 0xa0
 8000a24:	05d2      	lsls	r2, r2, #23
 8000a26:	615a      	str	r2, [r3, #20]
	hour_ten.enable_pin = EN_HT_Pin;
 8000a28:	183b      	adds	r3, r7, r0
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	831a      	strh	r2, [r3, #24]
	hour_ten.enable_segment = 1;
 8000a2e:	183b      	adds	r3, r7, r0
 8000a30:	2201      	movs	r2, #1
 8000a32:	709a      	strb	r2, [r3, #2]

	hour_one.a_port = A_HO_GPIO_Port;
 8000a34:	2486      	movs	r4, #134	; 0x86
 8000a36:	0064      	lsls	r4, r4, #1
 8000a38:	193b      	adds	r3, r7, r4
 8000a3a:	22a0      	movs	r2, #160	; 0xa0
 8000a3c:	05d2      	lsls	r2, r2, #23
 8000a3e:	60da      	str	r2, [r3, #12]
	hour_one.a_pin = A_HO_Pin;
 8000a40:	193b      	adds	r3, r7, r4
 8000a42:	2210      	movs	r2, #16
 8000a44:	821a      	strh	r2, [r3, #16]
	hour_one.clock_port = CLK_A_HO_GPIO_Port;
 8000a46:	193b      	adds	r3, r7, r4
 8000a48:	22a0      	movs	r2, #160	; 0xa0
 8000a4a:	05d2      	lsls	r2, r2, #23
 8000a4c:	605a      	str	r2, [r3, #4]
	hour_one.clock_pin = CLK_A_HO_Pin;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2220      	movs	r2, #32
 8000a52:	811a      	strh	r2, [r3, #8]
	hour_one.enable_port = EN_HO_GPIO_Port;
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	4aac      	ldr	r2, [pc, #688]	; (8000d08 <main+0x3ec>)
 8000a58:	615a      	str	r2, [r3, #20]
	hour_one.enable_pin = EN_HO_Pin;
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	2210      	movs	r2, #16
 8000a5e:	831a      	strh	r2, [r3, #24]
	hour_one.enable_segment = 1;
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	2201      	movs	r2, #1
 8000a64:	709a      	strb	r2, [r3, #2]

	minute_ten.a_port = A_MT_GPIO_Port;
 8000a66:	4baa      	ldr	r3, [pc, #680]	; (8000d10 <main+0x3f4>)
 8000a68:	21f8      	movs	r1, #248	; 0xf8
 8000a6a:	0049      	lsls	r1, r1, #1
 8000a6c:	185b      	adds	r3, r3, r1
 8000a6e:	19db      	adds	r3, r3, r7
 8000a70:	22a0      	movs	r2, #160	; 0xa0
 8000a72:	05d2      	lsls	r2, r2, #23
 8000a74:	60da      	str	r2, [r3, #12]
	minute_ten.a_pin = A_MT_Pin;
 8000a76:	4ba6      	ldr	r3, [pc, #664]	; (8000d10 <main+0x3f4>)
 8000a78:	185b      	adds	r3, r3, r1
 8000a7a:	19db      	adds	r3, r3, r7
 8000a7c:	2240      	movs	r2, #64	; 0x40
 8000a7e:	821a      	strh	r2, [r3, #16]
	minute_ten.clock_port = CLK_A_MT_GPIO_Port;
 8000a80:	4ba3      	ldr	r3, [pc, #652]	; (8000d10 <main+0x3f4>)
 8000a82:	185b      	adds	r3, r3, r1
 8000a84:	19db      	adds	r3, r3, r7
 8000a86:	22a0      	movs	r2, #160	; 0xa0
 8000a88:	05d2      	lsls	r2, r2, #23
 8000a8a:	605a      	str	r2, [r3, #4]
	minute_ten.clock_pin = CLK_A_MT_Pin;
 8000a8c:	4ba0      	ldr	r3, [pc, #640]	; (8000d10 <main+0x3f4>)
 8000a8e:	185b      	adds	r3, r3, r1
 8000a90:	19db      	adds	r3, r3, r7
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	811a      	strh	r2, [r3, #8]
	minute_ten.enable_port = EN_MT_GPIO_Port;
 8000a96:	4b9e      	ldr	r3, [pc, #632]	; (8000d10 <main+0x3f4>)
 8000a98:	185b      	adds	r3, r3, r1
 8000a9a:	19db      	adds	r3, r3, r7
 8000a9c:	4a9a      	ldr	r2, [pc, #616]	; (8000d08 <main+0x3ec>)
 8000a9e:	615a      	str	r2, [r3, #20]
	minute_ten.enable_pin = EN_MT_Pin;
 8000aa0:	4b9b      	ldr	r3, [pc, #620]	; (8000d10 <main+0x3f4>)
 8000aa2:	185b      	adds	r3, r3, r1
 8000aa4:	19db      	adds	r3, r3, r7
 8000aa6:	2220      	movs	r2, #32
 8000aa8:	831a      	strh	r2, [r3, #24]
	minute_ten.enable_segment = 1;
 8000aaa:	4b99      	ldr	r3, [pc, #612]	; (8000d10 <main+0x3f4>)
 8000aac:	185b      	adds	r3, r3, r1
 8000aae:	19db      	adds	r3, r3, r7
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	709a      	strb	r2, [r3, #2]

	minute_one.a_port = A_MO_GPIO_Port;
 8000ab4:	4b97      	ldr	r3, [pc, #604]	; (8000d14 <main+0x3f8>)
 8000ab6:	185b      	adds	r3, r3, r1
 8000ab8:	19db      	adds	r3, r3, r7
 8000aba:	22a0      	movs	r2, #160	; 0xa0
 8000abc:	05d2      	lsls	r2, r2, #23
 8000abe:	60da      	str	r2, [r3, #12]
	minute_one.a_pin = A_MO_Pin;
 8000ac0:	4b94      	ldr	r3, [pc, #592]	; (8000d14 <main+0x3f8>)
 8000ac2:	185b      	adds	r3, r3, r1
 8000ac4:	19db      	adds	r3, r3, r7
 8000ac6:	2280      	movs	r2, #128	; 0x80
 8000ac8:	0052      	lsls	r2, r2, #1
 8000aca:	821a      	strh	r2, [r3, #16]
	minute_one.clock_port = CLK_A_MO_GPIO_Port;
 8000acc:	4b91      	ldr	r3, [pc, #580]	; (8000d14 <main+0x3f8>)
 8000ace:	185b      	adds	r3, r3, r1
 8000ad0:	19db      	adds	r3, r3, r7
 8000ad2:	22a0      	movs	r2, #160	; 0xa0
 8000ad4:	05d2      	lsls	r2, r2, #23
 8000ad6:	605a      	str	r2, [r3, #4]
	minute_one.clock_pin = CLK_A_MO_Pin;
 8000ad8:	4b8e      	ldr	r3, [pc, #568]	; (8000d14 <main+0x3f8>)
 8000ada:	185b      	adds	r3, r3, r1
 8000adc:	19db      	adds	r3, r3, r7
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	0092      	lsls	r2, r2, #2
 8000ae2:	811a      	strh	r2, [r3, #8]
	minute_one.enable_port = EN_MO_GPIO_Port;
 8000ae4:	4b8b      	ldr	r3, [pc, #556]	; (8000d14 <main+0x3f8>)
 8000ae6:	185b      	adds	r3, r3, r1
 8000ae8:	19db      	adds	r3, r3, r7
 8000aea:	4a87      	ldr	r2, [pc, #540]	; (8000d08 <main+0x3ec>)
 8000aec:	615a      	str	r2, [r3, #20]
	minute_one.enable_pin = EN_MO_Pin;
 8000aee:	4b89      	ldr	r3, [pc, #548]	; (8000d14 <main+0x3f8>)
 8000af0:	185b      	adds	r3, r3, r1
 8000af2:	19db      	adds	r3, r3, r7
 8000af4:	2280      	movs	r2, #128	; 0x80
 8000af6:	0152      	lsls	r2, r2, #5
 8000af8:	831a      	strh	r2, [r3, #24]
	minute_one.enable_segment = 1;
 8000afa:	4b86      	ldr	r3, [pc, #536]	; (8000d14 <main+0x3f8>)
 8000afc:	185b      	adds	r3, r3, r1
 8000afe:	19db      	adds	r3, r3, r7
 8000b00:	2201      	movs	r2, #1
 8000b02:	709a      	strb	r2, [r3, #2]

	second_ten.a_port = A_ST_GPIO_Port;
 8000b04:	4b84      	ldr	r3, [pc, #528]	; (8000d18 <main+0x3fc>)
 8000b06:	185b      	adds	r3, r3, r1
 8000b08:	19db      	adds	r3, r3, r7
 8000b0a:	22a0      	movs	r2, #160	; 0xa0
 8000b0c:	05d2      	lsls	r2, r2, #23
 8000b0e:	60da      	str	r2, [r3, #12]
	second_ten.a_pin = A_ST_Pin;
 8000b10:	4b81      	ldr	r3, [pc, #516]	; (8000d18 <main+0x3fc>)
 8000b12:	185b      	adds	r3, r3, r1
 8000b14:	19db      	adds	r3, r3, r7
 8000b16:	2280      	movs	r2, #128	; 0x80
 8000b18:	00d2      	lsls	r2, r2, #3
 8000b1a:	821a      	strh	r2, [r3, #16]
	second_ten.clock_port = CLK_A_ST_GPIO_Port;
 8000b1c:	4b7e      	ldr	r3, [pc, #504]	; (8000d18 <main+0x3fc>)
 8000b1e:	185b      	adds	r3, r3, r1
 8000b20:	19db      	adds	r3, r3, r7
 8000b22:	22a0      	movs	r2, #160	; 0xa0
 8000b24:	05d2      	lsls	r2, r2, #23
 8000b26:	605a      	str	r2, [r3, #4]
	second_ten.clock_pin = CLK_A_ST_Pin;
 8000b28:	4b7b      	ldr	r3, [pc, #492]	; (8000d18 <main+0x3fc>)
 8000b2a:	185b      	adds	r3, r3, r1
 8000b2c:	19db      	adds	r3, r3, r7
 8000b2e:	2280      	movs	r2, #128	; 0x80
 8000b30:	0112      	lsls	r2, r2, #4
 8000b32:	811a      	strh	r2, [r3, #8]
	second_ten.enable_port = EN_ST_GPIO_Port;
 8000b34:	4b78      	ldr	r3, [pc, #480]	; (8000d18 <main+0x3fc>)
 8000b36:	185b      	adds	r3, r3, r1
 8000b38:	19db      	adds	r3, r3, r7
 8000b3a:	4a73      	ldr	r2, [pc, #460]	; (8000d08 <main+0x3ec>)
 8000b3c:	615a      	str	r2, [r3, #20]
	second_ten.enable_pin = EN_ST_Pin;
 8000b3e:	4b76      	ldr	r3, [pc, #472]	; (8000d18 <main+0x3fc>)
 8000b40:	185b      	adds	r3, r3, r1
 8000b42:	19db      	adds	r3, r3, r7
 8000b44:	2280      	movs	r2, #128	; 0x80
 8000b46:	0192      	lsls	r2, r2, #6
 8000b48:	831a      	strh	r2, [r3, #24]
	second_ten.enable_segment = 1;
 8000b4a:	4b73      	ldr	r3, [pc, #460]	; (8000d18 <main+0x3fc>)
 8000b4c:	185b      	adds	r3, r3, r1
 8000b4e:	19db      	adds	r3, r3, r7
 8000b50:	2201      	movs	r2, #1
 8000b52:	709a      	strb	r2, [r3, #2]

	second_one.a_port = A_SO_GPIO_Port;
 8000b54:	4b71      	ldr	r3, [pc, #452]	; (8000d1c <main+0x400>)
 8000b56:	185b      	adds	r3, r3, r1
 8000b58:	19db      	adds	r3, r3, r7
 8000b5a:	22a0      	movs	r2, #160	; 0xa0
 8000b5c:	05d2      	lsls	r2, r2, #23
 8000b5e:	60da      	str	r2, [r3, #12]
	second_one.a_pin = A_SO_Pin;
 8000b60:	4b6e      	ldr	r3, [pc, #440]	; (8000d1c <main+0x400>)
 8000b62:	185b      	adds	r3, r3, r1
 8000b64:	19db      	adds	r3, r3, r7
 8000b66:	2280      	movs	r2, #128	; 0x80
 8000b68:	0152      	lsls	r2, r2, #5
 8000b6a:	821a      	strh	r2, [r3, #16]
	second_one.clock_port = CLK_A_SO_GPIO_Port;
 8000b6c:	4b6b      	ldr	r3, [pc, #428]	; (8000d1c <main+0x400>)
 8000b6e:	185b      	adds	r3, r3, r1
 8000b70:	19db      	adds	r3, r3, r7
 8000b72:	22a0      	movs	r2, #160	; 0xa0
 8000b74:	05d2      	lsls	r2, r2, #23
 8000b76:	605a      	str	r2, [r3, #4]
	second_one.clock_pin = CLK_A_SO_Pin;
 8000b78:	4b68      	ldr	r3, [pc, #416]	; (8000d1c <main+0x400>)
 8000b7a:	185b      	adds	r3, r3, r1
 8000b7c:	19db      	adds	r3, r3, r7
 8000b7e:	4a68      	ldr	r2, [pc, #416]	; (8000d20 <main+0x404>)
 8000b80:	811a      	strh	r2, [r3, #8]
	second_one.enable_port = EN_SO_GPIO_Port;
 8000b82:	4b66      	ldr	r3, [pc, #408]	; (8000d1c <main+0x400>)
 8000b84:	185b      	adds	r3, r3, r1
 8000b86:	19db      	adds	r3, r3, r7
 8000b88:	4a5f      	ldr	r2, [pc, #380]	; (8000d08 <main+0x3ec>)
 8000b8a:	615a      	str	r2, [r3, #20]
	second_one.enable_pin = EN_SO_Pin;
 8000b8c:	4b63      	ldr	r3, [pc, #396]	; (8000d1c <main+0x400>)
 8000b8e:	185b      	adds	r3, r3, r1
 8000b90:	19db      	adds	r3, r3, r7
 8000b92:	2280      	movs	r2, #128	; 0x80
 8000b94:	01d2      	lsls	r2, r2, #7
 8000b96:	831a      	strh	r2, [r3, #24]
	second_one.enable_segment = 1;
 8000b98:	4b60      	ldr	r3, [pc, #384]	; (8000d1c <main+0x400>)
 8000b9a:	185b      	adds	r3, r3, r1
 8000b9c:	19db      	adds	r3, r3, r7
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	709a      	strb	r2, [r3, #2]

	disp_hour.ten = &hour_ten;
 8000ba2:	4b60      	ldr	r3, [pc, #384]	; (8000d24 <main+0x408>)
 8000ba4:	185b      	adds	r3, r3, r1
 8000ba6:	19db      	adds	r3, r3, r7
 8000ba8:	183a      	adds	r2, r7, r0
 8000baa:	605a      	str	r2, [r3, #4]
	disp_hour.one = &hour_one;
 8000bac:	4b5d      	ldr	r3, [pc, #372]	; (8000d24 <main+0x408>)
 8000bae:	185b      	adds	r3, r3, r1
 8000bb0:	19db      	adds	r3, r3, r7
 8000bb2:	193a      	adds	r2, r7, r4
 8000bb4:	609a      	str	r2, [r3, #8]
	disp_hour.data = 00;
 8000bb6:	4b5b      	ldr	r3, [pc, #364]	; (8000d24 <main+0x408>)
 8000bb8:	000d      	movs	r5, r1
 8000bba:	195b      	adds	r3, r3, r5
 8000bbc:	19db      	adds	r3, r3, r7
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
	disp_hour.data_old = 255;
 8000bc2:	4b58      	ldr	r3, [pc, #352]	; (8000d24 <main+0x408>)
 8000bc4:	195b      	adds	r3, r3, r5
 8000bc6:	19db      	adds	r3, r3, r7
 8000bc8:	22ff      	movs	r2, #255	; 0xff
 8000bca:	705a      	strb	r2, [r3, #1]

	disp_minute.ten = &minute_ten;
 8000bcc:	4b56      	ldr	r3, [pc, #344]	; (8000d28 <main+0x40c>)
 8000bce:	195b      	adds	r3, r3, r5
 8000bd0:	19db      	adds	r3, r3, r7
 8000bd2:	22f0      	movs	r2, #240	; 0xf0
 8000bd4:	18ba      	adds	r2, r7, r2
 8000bd6:	605a      	str	r2, [r3, #4]
	disp_minute.one = &minute_one;
 8000bd8:	4b53      	ldr	r3, [pc, #332]	; (8000d28 <main+0x40c>)
 8000bda:	195b      	adds	r3, r3, r5
 8000bdc:	19db      	adds	r3, r3, r7
 8000bde:	22d4      	movs	r2, #212	; 0xd4
 8000be0:	18ba      	adds	r2, r7, r2
 8000be2:	609a      	str	r2, [r3, #8]
	disp_minute.data = 00;
 8000be4:	4b50      	ldr	r3, [pc, #320]	; (8000d28 <main+0x40c>)
 8000be6:	195b      	adds	r3, r3, r5
 8000be8:	19db      	adds	r3, r3, r7
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
	disp_minute.data_old = 255;
 8000bee:	4b4e      	ldr	r3, [pc, #312]	; (8000d28 <main+0x40c>)
 8000bf0:	195b      	adds	r3, r3, r5
 8000bf2:	19db      	adds	r3, r3, r7
 8000bf4:	22ff      	movs	r2, #255	; 0xff
 8000bf6:	705a      	strb	r2, [r3, #1]

	disp_second.ten = &second_ten;
 8000bf8:	4b4c      	ldr	r3, [pc, #304]	; (8000d2c <main+0x410>)
 8000bfa:	195b      	adds	r3, r3, r5
 8000bfc:	19db      	adds	r3, r3, r7
 8000bfe:	22b8      	movs	r2, #184	; 0xb8
 8000c00:	18ba      	adds	r2, r7, r2
 8000c02:	605a      	str	r2, [r3, #4]
	disp_second.one = &second_one;
 8000c04:	4b49      	ldr	r3, [pc, #292]	; (8000d2c <main+0x410>)
 8000c06:	195b      	adds	r3, r3, r5
 8000c08:	19db      	adds	r3, r3, r7
 8000c0a:	229c      	movs	r2, #156	; 0x9c
 8000c0c:	18ba      	adds	r2, r7, r2
 8000c0e:	609a      	str	r2, [r3, #8]
	disp_second.data = 00;
 8000c10:	4b46      	ldr	r3, [pc, #280]	; (8000d2c <main+0x410>)
 8000c12:	195b      	adds	r3, r3, r5
 8000c14:	19db      	adds	r3, r3, r7
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
	disp_second.data_old = 255;
 8000c1a:	4b44      	ldr	r3, [pc, #272]	; (8000d2c <main+0x410>)
 8000c1c:	195b      	adds	r3, r3, r5
 8000c1e:	19db      	adds	r3, r3, r7
 8000c20:	22ff      	movs	r2, #255	; 0xff
 8000c22:	705a      	strb	r2, [r3, #1]

	Button button_up = {
 8000c24:	4b42      	ldr	r3, [pc, #264]	; (8000d30 <main+0x414>)
 8000c26:	195b      	adds	r3, r3, r5
 8000c28:	19db      	adds	r3, r3, r7
 8000c2a:	4a42      	ldr	r2, [pc, #264]	; (8000d34 <main+0x418>)
 8000c2c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c2e:	c313      	stmia	r3!, {r0, r1, r4}
 8000c30:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c32:	c313      	stmia	r3!, {r0, r1, r4}
			0,
			BTN_UP_GPIO_Port,
			BTN_UP_Pin
	};

	Button button_down = {
 8000c34:	4b40      	ldr	r3, [pc, #256]	; (8000d38 <main+0x41c>)
 8000c36:	195b      	adds	r3, r3, r5
 8000c38:	19db      	adds	r3, r3, r7
 8000c3a:	4a40      	ldr	r2, [pc, #256]	; (8000d3c <main+0x420>)
 8000c3c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c3e:	c313      	stmia	r3!, {r0, r1, r4}
 8000c40:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c42:	c313      	stmia	r3!, {r0, r1, r4}
			0,
			0,
			BTN_DOWN_GPIO_Port,
			BTN_DOWN_Pin
	};
	Button button_left = {
 8000c44:	4b3e      	ldr	r3, [pc, #248]	; (8000d40 <main+0x424>)
 8000c46:	195b      	adds	r3, r3, r5
 8000c48:	19db      	adds	r3, r3, r7
 8000c4a:	4a3e      	ldr	r2, [pc, #248]	; (8000d44 <main+0x428>)
 8000c4c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c4e:	c313      	stmia	r3!, {r0, r1, r4}
 8000c50:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c52:	c313      	stmia	r3!, {r0, r1, r4}
			0,
			0,
			BTN_LEFT_GPIO_Port,
			BTN_LEFT_Pin
	};
	Button button_right = {
 8000c54:	4b3c      	ldr	r3, [pc, #240]	; (8000d48 <main+0x42c>)
 8000c56:	195b      	adds	r3, r3, r5
 8000c58:	19db      	adds	r3, r3, r7
 8000c5a:	4a3c      	ldr	r2, [pc, #240]	; (8000d4c <main+0x430>)
 8000c5c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c5e:	c313      	stmia	r3!, {r0, r1, r4}
 8000c60:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c62:	c313      	stmia	r3!, {r0, r1, r4}
			0,
			BTN_RIGHT_GPIO_Port,
			BTN_RIGHT_Pin
	};

	button_up.state_old = 0;
 8000c64:	4b32      	ldr	r3, [pc, #200]	; (8000d30 <main+0x414>)
 8000c66:	195b      	adds	r3, r3, r5
 8000c68:	19db      	adds	r3, r3, r7
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	705a      	strb	r2, [r3, #1]
	button_down.state_old = 0;
 8000c6e:	4b32      	ldr	r3, [pc, #200]	; (8000d38 <main+0x41c>)
 8000c70:	195b      	adds	r3, r3, r5
 8000c72:	19db      	adds	r3, r3, r7
 8000c74:	2200      	movs	r2, #0
 8000c76:	705a      	strb	r2, [r3, #1]
	button_left.state_old = 0;
 8000c78:	4b31      	ldr	r3, [pc, #196]	; (8000d40 <main+0x424>)
 8000c7a:	195b      	adds	r3, r3, r5
 8000c7c:	19db      	adds	r3, r3, r7
 8000c7e:	2200      	movs	r2, #0
 8000c80:	705a      	strb	r2, [r3, #1]

	DisplayState display_state = DISPLAY_INIT;
 8000c82:	23f0      	movs	r3, #240	; 0xf0
 8000c84:	33ff      	adds	r3, #255	; 0xff
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
	PiTime pi_times;
	uint8_t dot = 0;
 8000c8c:	23f7      	movs	r3, #247	; 0xf7
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	18fb      	adds	r3, r7, r3
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		process_button(&button_up);
 8000c96:	2360      	movs	r3, #96	; 0x60
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f7ff fda4 	bl	80007e8 <process_button>
		process_button(&button_down);
 8000ca0:	2348      	movs	r3, #72	; 0x48
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f7ff fd9f 	bl	80007e8 <process_button>
		process_button(&button_left);
 8000caa:	2330      	movs	r3, #48	; 0x30
 8000cac:	18fb      	adds	r3, r7, r3
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f7ff fd9a 	bl	80007e8 <process_button>
		process_button(&button_right);
 8000cb4:	2318      	movs	r3, #24
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f7ff fd95 	bl	80007e8 <process_button>

		if(button_up.state == BUTTON_PRESSED){
 8000cbe:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <main+0x414>)
 8000cc0:	22f8      	movs	r2, #248	; 0xf8
 8000cc2:	0052      	lsls	r2, r2, #1
 8000cc4:	189b      	adds	r3, r3, r2
 8000cc6:	19db      	adds	r3, r3, r7
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d140      	bne.n	8000d50 <main+0x434>
			if(button_up.state_old == 0){
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <main+0x414>)
 8000cd0:	189b      	adds	r3, r3, r2
 8000cd2:	19db      	adds	r3, r3, r7
 8000cd4:	785b      	ldrb	r3, [r3, #1]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d147      	bne.n	8000d6a <main+0x44e>
				button_up.state_old = 1;
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <main+0x414>)
 8000cdc:	189b      	adds	r3, r3, r2
 8000cde:	19db      	adds	r3, r3, r7
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	705a      	strb	r2, [r3, #1]
				if(display_state == DISPLAY_TIME){
 8000ce4:	22f0      	movs	r2, #240	; 0xf0
 8000ce6:	32ff      	adds	r2, #255	; 0xff
 8000ce8:	18bb      	adds	r3, r7, r2
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d103      	bne.n	8000cf8 <main+0x3dc>
					display_state = DISPLAY_DATE;
 8000cf0:	18bb      	adds	r3, r7, r2
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	e038      	b.n	8000d6a <main+0x44e>
				}else{
					display_state = DISPLAY_TIME;
 8000cf8:	23f0      	movs	r3, #240	; 0xf0
 8000cfa:	33ff      	adds	r3, #255	; 0xff
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	e032      	b.n	8000d6a <main+0x44e>
 8000d04:	20000320 	.word	0x20000320
 8000d08:	50000400 	.word	0x50000400
 8000d0c:	200001f0 	.word	0x200001f0
 8000d10:	ffffff00 	.word	0xffffff00
 8000d14:	fffffee4 	.word	0xfffffee4
 8000d18:	fffffec8 	.word	0xfffffec8
 8000d1c:	fffffeac 	.word	0xfffffeac
 8000d20:	ffff8000 	.word	0xffff8000
 8000d24:	fffffea0 	.word	0xfffffea0
 8000d28:	fffffe94 	.word	0xfffffe94
 8000d2c:	fffffe88 	.word	0xfffffe88
 8000d30:	fffffe70 	.word	0xfffffe70
 8000d34:	08006700 	.word	0x08006700
 8000d38:	fffffe58 	.word	0xfffffe58
 8000d3c:	08006718 	.word	0x08006718
 8000d40:	fffffe40 	.word	0xfffffe40
 8000d44:	08006730 	.word	0x08006730
 8000d48:	fffffe28 	.word	0xfffffe28
 8000d4c:	08006748 	.word	0x08006748
				}
			}
		}else if(button_up.state == BUTTON_RELEASED){
 8000d50:	4bae      	ldr	r3, [pc, #696]	; (800100c <main+0x6f0>)
 8000d52:	22f8      	movs	r2, #248	; 0xf8
 8000d54:	0052      	lsls	r2, r2, #1
 8000d56:	189b      	adds	r3, r3, r2
 8000d58:	19db      	adds	r3, r3, r7
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b04      	cmp	r3, #4
 8000d5e:	d104      	bne.n	8000d6a <main+0x44e>
			button_up.state_old = 0;
 8000d60:	4baa      	ldr	r3, [pc, #680]	; (800100c <main+0x6f0>)
 8000d62:	189b      	adds	r3, r3, r2
 8000d64:	19db      	adds	r3, r3, r7
 8000d66:	2200      	movs	r2, #0
 8000d68:	705a      	strb	r2, [r3, #1]
		}

		if (button_down.state == BUTTON_LONG_PRESS) {
 8000d6a:	4ba9      	ldr	r3, [pc, #676]	; (8001010 <main+0x6f4>)
 8000d6c:	24f8      	movs	r4, #248	; 0xf8
 8000d6e:	0064      	lsls	r4, r4, #1
 8000d70:	191b      	adds	r3, r3, r4
 8000d72:	19db      	adds	r3, r3, r7
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	d14d      	bne.n	8000e16 <main+0x4fa>
			if(button_down.state_old == 0){
 8000d7a:	4ba5      	ldr	r3, [pc, #660]	; (8001010 <main+0x6f4>)
 8000d7c:	191b      	adds	r3, r3, r4
 8000d7e:	19db      	adds	r3, r3, r7
 8000d80:	785b      	ldrb	r3, [r3, #1]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d154      	bne.n	8000e30 <main+0x514>
				button_down.state_old = 1;
 8000d86:	4ba2      	ldr	r3, [pc, #648]	; (8001010 <main+0x6f4>)
 8000d88:	191b      	adds	r3, r3, r4
 8000d8a:	19db      	adds	r3, r3, r7
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	705a      	strb	r2, [r3, #1]
				send_uart_command("time");
 8000d90:	4ba0      	ldr	r3, [pc, #640]	; (8001014 <main+0x6f8>)
 8000d92:	0018      	movs	r0, r3
 8000d94:	f000 fc68 	bl	8001668 <send_uart_command>
				receive_uart_response(time_buffer, sizeof(time_buffer));
 8000d98:	25be      	movs	r5, #190	; 0xbe
 8000d9a:	006d      	lsls	r5, r5, #1
 8000d9c:	197b      	adds	r3, r7, r5
 8000d9e:	2120      	movs	r1, #32
 8000da0:	0018      	movs	r0, r3
 8000da2:	f000 fc81 	bl	80016a8 <receive_uart_response>
				parse_time_string(time_buffer, &pi_times);
 8000da6:	003a      	movs	r2, r7
 8000da8:	197b      	adds	r3, r7, r5
 8000daa:	0011      	movs	r1, r2
 8000dac:	0018      	movs	r0, r3
 8000dae:	f000 fcbf 	bl	8001730 <parse_time_string>

				sTimeStamp.Hours = (uint8_t) pi_times.hours;
 8000db2:	4b99      	ldr	r3, [pc, #612]	; (8001018 <main+0x6fc>)
 8000db4:	191b      	adds	r3, r3, r4
 8000db6:	19db      	adds	r3, r3, r7
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	21a4      	movs	r1, #164	; 0xa4
 8000dbe:	0049      	lsls	r1, r1, #1
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	701a      	strb	r2, [r3, #0]
				sTimeStamp.Minutes = (uint8_t) pi_times.minutes;
 8000dc4:	4b94      	ldr	r3, [pc, #592]	; (8001018 <main+0x6fc>)
 8000dc6:	191b      	adds	r3, r3, r4
 8000dc8:	19db      	adds	r3, r3, r7
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	705a      	strb	r2, [r3, #1]
				sTimeStamp.Seconds = (uint8_t) pi_times.seconds;
 8000dd2:	4b91      	ldr	r3, [pc, #580]	; (8001018 <main+0x6fc>)
 8000dd4:	191b      	adds	r3, r3, r4
 8000dd6:	19db      	adds	r3, r3, r7
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	709a      	strb	r2, [r3, #2]

				sTimeStamp.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
				sTimeStamp.StoreOperation = RTC_STOREOPERATION_SET;
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	2280      	movs	r2, #128	; 0x80
 8000dea:	02d2      	lsls	r2, r2, #11
 8000dec:	611a      	str	r2, [r3, #16]

				sTimeStamp.StoreOperation = RTC_STOREOPERATION_SET;
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2280      	movs	r2, #128	; 0x80
 8000df2:	02d2      	lsls	r2, r2, #11
 8000df4:	611a      	str	r2, [r3, #16]
				HAL_StatusTypeDef result;

				result = HAL_RTC_SetTime(&hrtc, &sTimeStamp, RTC_FORMAT_BIN);
 8000df6:	25f6      	movs	r5, #246	; 0xf6
 8000df8:	006d      	lsls	r5, r5, #1
 8000dfa:	197c      	adds	r4, r7, r5
 8000dfc:	1879      	adds	r1, r7, r1
 8000dfe:	4b87      	ldr	r3, [pc, #540]	; (800101c <main+0x700>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	0018      	movs	r0, r3
 8000e04:	f002 fb1e 	bl	8003444 <HAL_RTC_SetTime>
 8000e08:	0003      	movs	r3, r0
 8000e0a:	7023      	strb	r3, [r4, #0]
				if(result != HAL_OK){
 8000e0c:	197b      	adds	r3, r7, r5
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d00d      	beq.n	8000e30 <main+0x514>
					while(1);
 8000e14:	e7fe      	b.n	8000e14 <main+0x4f8>
				}
			}
		}else if(button_down.state == BUTTON_RELEASED){
 8000e16:	4b7e      	ldr	r3, [pc, #504]	; (8001010 <main+0x6f4>)
 8000e18:	22f8      	movs	r2, #248	; 0xf8
 8000e1a:	0052      	lsls	r2, r2, #1
 8000e1c:	189b      	adds	r3, r3, r2
 8000e1e:	19db      	adds	r3, r3, r7
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	d104      	bne.n	8000e30 <main+0x514>
			button_down.state_old = 0;
 8000e26:	4b7a      	ldr	r3, [pc, #488]	; (8001010 <main+0x6f4>)
 8000e28:	189b      	adds	r3, r3, r2
 8000e2a:	19db      	adds	r3, r3, r7
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	705a      	strb	r2, [r3, #1]
		}

		if (button_left.state == BUTTON_LONG_PRESS) {
 8000e30:	4b7b      	ldr	r3, [pc, #492]	; (8001020 <main+0x704>)
 8000e32:	24f8      	movs	r4, #248	; 0xf8
 8000e34:	0064      	lsls	r4, r4, #1
 8000e36:	191b      	adds	r3, r3, r4
 8000e38:	19db      	adds	r3, r3, r7
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d152      	bne.n	8000ee6 <main+0x5ca>
			if(button_left.state_old == 0){
 8000e40:	4b77      	ldr	r3, [pc, #476]	; (8001020 <main+0x704>)
 8000e42:	191b      	adds	r3, r3, r4
 8000e44:	19db      	adds	r3, r3, r7
 8000e46:	785b      	ldrb	r3, [r3, #1]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d159      	bne.n	8000f00 <main+0x5e4>
				button_left.state_old = 1;
 8000e4c:	4b74      	ldr	r3, [pc, #464]	; (8001020 <main+0x704>)
 8000e4e:	191b      	adds	r3, r3, r4
 8000e50:	19db      	adds	r3, r3, r7
 8000e52:	2201      	movs	r2, #1
 8000e54:	705a      	strb	r2, [r3, #1]
				send_uart_command("date");
 8000e56:	4b73      	ldr	r3, [pc, #460]	; (8001024 <main+0x708>)
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f000 fc05 	bl	8001668 <send_uart_command>
				receive_uart_response(date_buffer, sizeof(date_buffer));
 8000e5e:	25ae      	movs	r5, #174	; 0xae
 8000e60:	006d      	lsls	r5, r5, #1
 8000e62:	197b      	adds	r3, r7, r5
 8000e64:	2120      	movs	r1, #32
 8000e66:	0018      	movs	r0, r3
 8000e68:	f000 fc1e 	bl	80016a8 <receive_uart_response>
				parse_date_string(date_buffer, &pi_times);
 8000e6c:	003a      	movs	r2, r7
 8000e6e:	197b      	adds	r3, r7, r5
 8000e70:	0011      	movs	r1, r2
 8000e72:	0018      	movs	r0, r3
 8000e74:	f000 fc72 	bl	800175c <parse_date_string>

				sTimeStampDate.Year = (uint8_t) (pi_times.years % 100);
 8000e78:	4b67      	ldr	r3, [pc, #412]	; (8001018 <main+0x6fc>)
 8000e7a:	191b      	adds	r3, r3, r4
 8000e7c:	19db      	adds	r3, r3, r7
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	2164      	movs	r1, #100	; 0x64
 8000e82:	0018      	movs	r0, r3
 8000e84:	f7ff fac2 	bl	800040c <__aeabi_idivmod>
 8000e88:	000b      	movs	r3, r1
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	25a2      	movs	r5, #162	; 0xa2
 8000e8e:	006d      	lsls	r5, r5, #1
 8000e90:	197b      	adds	r3, r7, r5
 8000e92:	70da      	strb	r2, [r3, #3]
				sTimeStampDate.Month = (uint8_t) pi_times.months;
 8000e94:	4b60      	ldr	r3, [pc, #384]	; (8001018 <main+0x6fc>)
 8000e96:	191b      	adds	r3, r3, r4
 8000e98:	19db      	adds	r3, r3, r7
 8000e9a:	691b      	ldr	r3, [r3, #16]
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	197b      	adds	r3, r7, r5
 8000ea0:	705a      	strb	r2, [r3, #1]
				sTimeStampDate.Date = (uint8_t) pi_times.seconds;
 8000ea2:	4b5d      	ldr	r3, [pc, #372]	; (8001018 <main+0x6fc>)
 8000ea4:	191b      	adds	r3, r3, r4
 8000ea6:	19db      	adds	r3, r3, r7
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	197b      	adds	r3, r7, r5
 8000eae:	709a      	strb	r2, [r3, #2]

				result = HAL_RTC_SetTime(&hrtc, &sTimeStamp, RTC_FORMAT_BIN);
 8000eb0:	26ee      	movs	r6, #238	; 0xee
 8000eb2:	36ff      	adds	r6, #255	; 0xff
 8000eb4:	19bc      	adds	r4, r7, r6
 8000eb6:	23a4      	movs	r3, #164	; 0xa4
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	18f9      	adds	r1, r7, r3
 8000ebc:	4b57      	ldr	r3, [pc, #348]	; (800101c <main+0x700>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f002 fabf 	bl	8003444 <HAL_RTC_SetTime>
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	7023      	strb	r3, [r4, #0]
				result = HAL_RTC_SetDate(&hrtc, &sTimeStampDate, RTC_FORMAT_BIN);
 8000eca:	19bc      	adds	r4, r7, r6
 8000ecc:	1979      	adds	r1, r7, r5
 8000ece:	4b53      	ldr	r3, [pc, #332]	; (800101c <main+0x700>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f002 fbbe 	bl	8003654 <HAL_RTC_SetDate>
 8000ed8:	0003      	movs	r3, r0
 8000eda:	7023      	strb	r3, [r4, #0]
				if(result != HAL_OK){
 8000edc:	19bb      	adds	r3, r7, r6
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d00d      	beq.n	8000f00 <main+0x5e4>
					while(1);
 8000ee4:	e7fe      	b.n	8000ee4 <main+0x5c8>
				}
			}
		}else if(button_left.state == BUTTON_RELEASED){
 8000ee6:	4b4e      	ldr	r3, [pc, #312]	; (8001020 <main+0x704>)
 8000ee8:	22f8      	movs	r2, #248	; 0xf8
 8000eea:	0052      	lsls	r2, r2, #1
 8000eec:	189b      	adds	r3, r3, r2
 8000eee:	19db      	adds	r3, r3, r7
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	d104      	bne.n	8000f00 <main+0x5e4>
			button_left.state_old = 0;
 8000ef6:	4b4a      	ldr	r3, [pc, #296]	; (8001020 <main+0x704>)
 8000ef8:	189b      	adds	r3, r3, r2
 8000efa:	19db      	adds	r3, r3, r7
 8000efc:	2200      	movs	r2, #0
 8000efe:	705a      	strb	r2, [r3, #1]
		}

		result = HAL_RTC_GetDate(&hrtc, &sTimeStampDate, RTC_FORMAT_BIN);
 8000f00:	25ee      	movs	r5, #238	; 0xee
 8000f02:	35ff      	adds	r5, #255	; 0xff
 8000f04:	197c      	adds	r4, r7, r5
 8000f06:	23a2      	movs	r3, #162	; 0xa2
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	18f9      	adds	r1, r7, r3
 8000f0c:	4b43      	ldr	r3, [pc, #268]	; (800101c <main+0x700>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	0018      	movs	r0, r3
 8000f12:	f002 fc33 	bl	800377c <HAL_RTC_GetDate>
 8000f16:	0003      	movs	r3, r0
 8000f18:	7023      	strb	r3, [r4, #0]
		result = HAL_RTC_GetTime(&hrtc, &sTimeStamp, RTC_FORMAT_BIN);
 8000f1a:	197c      	adds	r4, r7, r5
 8000f1c:	23a4      	movs	r3, #164	; 0xa4
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	18f9      	adds	r1, r7, r3
 8000f22:	4b3e      	ldr	r3, [pc, #248]	; (800101c <main+0x700>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	0018      	movs	r0, r3
 8000f28:	f002 fb36 	bl	8003598 <HAL_RTC_GetTime>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	7023      	strb	r3, [r4, #0]


		switch(display_state){
 8000f30:	23f0      	movs	r3, #240	; 0xf0
 8000f32:	33ff      	adds	r3, #255	; 0xff
 8000f34:	18fb      	adds	r3, r7, r3
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d046      	beq.n	8000fca <main+0x6ae>
 8000f3c:	dc47      	bgt.n	8000fce <main+0x6b2>
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d027      	beq.n	8000f92 <main+0x676>
 8000f42:	dc44      	bgt.n	8000fce <main+0x6b2>
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d002      	beq.n	8000f4e <main+0x632>
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d006      	beq.n	8000f5a <main+0x63e>
			dot = 1;
			break;
		case DISPLAY_TEMPERATURE:
			break;
		default:
			break;
 8000f4c:	e03f      	b.n	8000fce <main+0x6b2>
			display_state = DISPLAY_TIME;
 8000f4e:	23f0      	movs	r3, #240	; 0xf0
 8000f50:	33ff      	adds	r3, #255	; 0xff
 8000f52:	18fb      	adds	r3, r7, r3
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
			break;
 8000f58:	e03a      	b.n	8000fd0 <main+0x6b4>
			disp_hour.data = sTimeStamp.Hours;
 8000f5a:	21a4      	movs	r1, #164	; 0xa4
 8000f5c:	0049      	lsls	r1, r1, #1
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	781a      	ldrb	r2, [r3, #0]
 8000f62:	4b31      	ldr	r3, [pc, #196]	; (8001028 <main+0x70c>)
 8000f64:	20f8      	movs	r0, #248	; 0xf8
 8000f66:	0040      	lsls	r0, r0, #1
 8000f68:	181b      	adds	r3, r3, r0
 8000f6a:	19db      	adds	r3, r3, r7
 8000f6c:	701a      	strb	r2, [r3, #0]
			disp_minute.data = sTimeStamp.Minutes;
 8000f6e:	187b      	adds	r3, r7, r1
 8000f70:	785a      	ldrb	r2, [r3, #1]
 8000f72:	4b2e      	ldr	r3, [pc, #184]	; (800102c <main+0x710>)
 8000f74:	181b      	adds	r3, r3, r0
 8000f76:	19db      	adds	r3, r3, r7
 8000f78:	701a      	strb	r2, [r3, #0]
			disp_second.data = sTimeStamp.Seconds;
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	789a      	ldrb	r2, [r3, #2]
 8000f7e:	4b2c      	ldr	r3, [pc, #176]	; (8001030 <main+0x714>)
 8000f80:	181b      	adds	r3, r3, r0
 8000f82:	19db      	adds	r3, r3, r7
 8000f84:	701a      	strb	r2, [r3, #0]
			dot = 0;
 8000f86:	23f7      	movs	r3, #247	; 0xf7
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	18fb      	adds	r3, r7, r3
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
			break;
 8000f90:	e01e      	b.n	8000fd0 <main+0x6b4>
			disp_hour.data = sTimeStampDate.Date;
 8000f92:	21a2      	movs	r1, #162	; 0xa2
 8000f94:	0049      	lsls	r1, r1, #1
 8000f96:	187b      	adds	r3, r7, r1
 8000f98:	789a      	ldrb	r2, [r3, #2]
 8000f9a:	4b23      	ldr	r3, [pc, #140]	; (8001028 <main+0x70c>)
 8000f9c:	20f8      	movs	r0, #248	; 0xf8
 8000f9e:	0040      	lsls	r0, r0, #1
 8000fa0:	181b      	adds	r3, r3, r0
 8000fa2:	19db      	adds	r3, r3, r7
 8000fa4:	701a      	strb	r2, [r3, #0]
			disp_minute.data = sTimeStampDate.Month;
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	785a      	ldrb	r2, [r3, #1]
 8000faa:	4b20      	ldr	r3, [pc, #128]	; (800102c <main+0x710>)
 8000fac:	181b      	adds	r3, r3, r0
 8000fae:	19db      	adds	r3, r3, r7
 8000fb0:	701a      	strb	r2, [r3, #0]
			disp_second.data = sTimeStampDate.Year;
 8000fb2:	187b      	adds	r3, r7, r1
 8000fb4:	78da      	ldrb	r2, [r3, #3]
 8000fb6:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <main+0x714>)
 8000fb8:	181b      	adds	r3, r3, r0
 8000fba:	19db      	adds	r3, r3, r7
 8000fbc:	701a      	strb	r2, [r3, #0]
			dot = 1;
 8000fbe:	23f7      	movs	r3, #247	; 0xf7
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
			break;
 8000fc8:	e002      	b.n	8000fd0 <main+0x6b4>
			break;
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	e000      	b.n	8000fd0 <main+0x6b4>
			break;
 8000fce:	46c0      	nop			; (mov r8, r8)
		}

		display_write_segment(&disp_hour, dot);
 8000fd0:	24f7      	movs	r4, #247	; 0xf7
 8000fd2:	0064      	lsls	r4, r4, #1
 8000fd4:	193b      	adds	r3, r7, r4
 8000fd6:	781a      	ldrb	r2, [r3, #0]
 8000fd8:	2390      	movs	r3, #144	; 0x90
 8000fda:	18fb      	adds	r3, r7, r3
 8000fdc:	0011      	movs	r1, r2
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f7ff fbc0 	bl	8000764 <display_write_segment>
		display_write_segment(&disp_minute, dot);
 8000fe4:	193b      	adds	r3, r7, r4
 8000fe6:	781a      	ldrb	r2, [r3, #0]
 8000fe8:	2384      	movs	r3, #132	; 0x84
 8000fea:	18fb      	adds	r3, r7, r3
 8000fec:	0011      	movs	r1, r2
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f7ff fbb8 	bl	8000764 <display_write_segment>
		display_write_segment(&disp_second, dot);
 8000ff4:	193b      	adds	r3, r7, r4
 8000ff6:	781a      	ldrb	r2, [r3, #0]
 8000ff8:	2378      	movs	r3, #120	; 0x78
 8000ffa:	18fb      	adds	r3, r7, r3
 8000ffc:	0011      	movs	r1, r2
 8000ffe:	0018      	movs	r0, r3
 8001000:	f7ff fbb0 	bl	8000764 <display_write_segment>

		HAL_Delay(10);
 8001004:	200a      	movs	r0, #10
 8001006:	f000 fea9 	bl	8001d5c <HAL_Delay>
		process_button(&button_up);
 800100a:	e644      	b.n	8000c96 <main+0x37a>
 800100c:	fffffe70 	.word	0xfffffe70
 8001010:	fffffe58 	.word	0xfffffe58
 8001014:	080066f0 	.word	0x080066f0
 8001018:	fffffe10 	.word	0xfffffe10
 800101c:	200001f0 	.word	0x200001f0
 8001020:	fffffe40 	.word	0xfffffe40
 8001024:	080066f8 	.word	0x080066f8
 8001028:	fffffea0 	.word	0xfffffea0
 800102c:	fffffe94 	.word	0xfffffe94
 8001030:	fffffe88 	.word	0xfffffe88

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b590      	push	{r4, r7, lr}
 8001036:	b099      	sub	sp, #100	; 0x64
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	242c      	movs	r4, #44	; 0x2c
 800103c:	193b      	adds	r3, r7, r4
 800103e:	0018      	movs	r0, r3
 8001040:	2334      	movs	r3, #52	; 0x34
 8001042:	001a      	movs	r2, r3
 8001044:	2100      	movs	r1, #0
 8001046:	f004 fb57 	bl	80056f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800104a:	2318      	movs	r3, #24
 800104c:	18fb      	adds	r3, r7, r3
 800104e:	0018      	movs	r0, r3
 8001050:	2314      	movs	r3, #20
 8001052:	001a      	movs	r2, r3
 8001054:	2100      	movs	r1, #0
 8001056:	f004 fb4f 	bl	80056f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800105a:	003b      	movs	r3, r7
 800105c:	0018      	movs	r0, r3
 800105e:	2318      	movs	r3, #24
 8001060:	001a      	movs	r2, r3
 8001062:	2100      	movs	r1, #0
 8001064:	f004 fb48 	bl	80056f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001068:	4b33      	ldr	r3, [pc, #204]	; (8001138 <SystemClock_Config+0x104>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a33      	ldr	r2, [pc, #204]	; (800113c <SystemClock_Config+0x108>)
 800106e:	401a      	ands	r2, r3
 8001070:	4b31      	ldr	r3, [pc, #196]	; (8001138 <SystemClock_Config+0x104>)
 8001072:	2180      	movs	r1, #128	; 0x80
 8001074:	0109      	lsls	r1, r1, #4
 8001076:	430a      	orrs	r2, r1
 8001078:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800107a:	f001 fa6d 	bl	8002558 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800107e:	4b30      	ldr	r3, [pc, #192]	; (8001140 <SystemClock_Config+0x10c>)
 8001080:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001082:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <SystemClock_Config+0x10c>)
 8001084:	492d      	ldr	r1, [pc, #180]	; (800113c <SystemClock_Config+0x108>)
 8001086:	400a      	ands	r2, r1
 8001088:	651a      	str	r2, [r3, #80]	; 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800108a:	193b      	adds	r3, r7, r4
 800108c:	2206      	movs	r2, #6
 800108e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001090:	193b      	adds	r3, r7, r4
 8001092:	2280      	movs	r2, #128	; 0x80
 8001094:	0052      	lsls	r2, r2, #1
 8001096:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001098:	0021      	movs	r1, r4
 800109a:	187b      	adds	r3, r7, r1
 800109c:	2201      	movs	r2, #1
 800109e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	2210      	movs	r2, #16
 80010a4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	2202      	movs	r2, #2
 80010aa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	2200      	movs	r2, #0
 80010b0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80010b2:	187b      	adds	r3, r7, r1
 80010b4:	2280      	movs	r2, #128	; 0x80
 80010b6:	02d2      	lsls	r2, r2, #11
 80010b8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	2280      	movs	r2, #128	; 0x80
 80010be:	03d2      	lsls	r2, r2, #15
 80010c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	0018      	movs	r0, r3
 80010c6:	f001 fa55 	bl	8002574 <HAL_RCC_OscConfig>
 80010ca:	1e03      	subs	r3, r0, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010ce:	f000 fac5 	bl	800165c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d2:	2118      	movs	r1, #24
 80010d4:	187b      	adds	r3, r7, r1
 80010d6:	220f      	movs	r2, #15
 80010d8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	2203      	movs	r2, #3
 80010de:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e0:	187b      	adds	r3, r7, r1
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010e6:	187b      	adds	r3, r7, r1
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ec:	187b      	adds	r3, r7, r1
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010f2:	187b      	adds	r3, r7, r1
 80010f4:	2101      	movs	r1, #1
 80010f6:	0018      	movs	r0, r3
 80010f8:	f001 fdb8 	bl	8002c6c <HAL_RCC_ClockConfig>
 80010fc:	1e03      	subs	r3, r0, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001100:	f000 faac 	bl	800165c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001104:	003b      	movs	r3, r7
 8001106:	222a      	movs	r2, #42	; 0x2a
 8001108:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800110a:	003b      	movs	r3, r7
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001110:	003b      	movs	r3, r7
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001116:	003b      	movs	r3, r7
 8001118:	2280      	movs	r2, #128	; 0x80
 800111a:	0252      	lsls	r2, r2, #9
 800111c:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800111e:	003b      	movs	r3, r7
 8001120:	0018      	movs	r0, r3
 8001122:	f001 ffc7 	bl	80030b4 <HAL_RCCEx_PeriphCLKConfig>
 8001126:	1e03      	subs	r3, r0, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800112a:	f000 fa97 	bl	800165c <Error_Handler>
  }
}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b019      	add	sp, #100	; 0x64
 8001134:	bd90      	pop	{r4, r7, pc}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	40007000 	.word	0x40007000
 800113c:	ffffe7ff 	.word	0xffffe7ff
 8001140:	40021000 	.word	0x40021000

08001144 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_I2C1_Init+0x74>)
 800114a:	4a1c      	ldr	r2, [pc, #112]	; (80011bc <MX_I2C1_Init+0x78>)
 800114c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800114e:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <MX_I2C1_Init+0x74>)
 8001150:	4a1b      	ldr	r2, [pc, #108]	; (80011c0 <MX_I2C1_Init+0x7c>)
 8001152:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <MX_I2C1_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_I2C1_Init+0x74>)
 800115c:	2201      	movs	r2, #1
 800115e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_I2C1_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_I2C1_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_I2C1_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_I2C1_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_I2C1_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_I2C1_Init+0x74>)
 8001180:	0018      	movs	r0, r3
 8001182:	f001 f8bb 	bl	80022fc <HAL_I2C_Init>
 8001186:	1e03      	subs	r3, r0, #0
 8001188:	d001      	beq.n	800118e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800118a:	f000 fa67 	bl	800165c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <MX_I2C1_Init+0x74>)
 8001190:	2100      	movs	r1, #0
 8001192:	0018      	movs	r0, r3
 8001194:	f001 f948 	bl	8002428 <HAL_I2CEx_ConfigAnalogFilter>
 8001198:	1e03      	subs	r3, r0, #0
 800119a:	d001      	beq.n	80011a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800119c:	f000 fa5e 	bl	800165c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <MX_I2C1_Init+0x74>)
 80011a2:	2100      	movs	r1, #0
 80011a4:	0018      	movs	r0, r3
 80011a6:	f001 f98b 	bl	80024c0 <HAL_I2CEx_ConfigDigitalFilter>
 80011aa:	1e03      	subs	r3, r0, #0
 80011ac:	d001      	beq.n	80011b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011ae:	f000 fa55 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	2000019c 	.word	0x2000019c
 80011bc:	40005400 	.word	0x40005400
 80011c0:	00707cbb 	.word	0x00707cbb

080011c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	0018      	movs	r0, r3
 80011ce:	2314      	movs	r3, #20
 80011d0:	001a      	movs	r2, r3
 80011d2:	2100      	movs	r1, #0
 80011d4:	f004 fa90 	bl	80056f8 <memset>
  RTC_DateTypeDef sDate = {0};
 80011d8:	003b      	movs	r3, r7
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011de:	4b29      	ldr	r3, [pc, #164]	; (8001284 <MX_RTC_Init+0xc0>)
 80011e0:	4a29      	ldr	r2, [pc, #164]	; (8001288 <MX_RTC_Init+0xc4>)
 80011e2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011e4:	4b27      	ldr	r3, [pc, #156]	; (8001284 <MX_RTC_Init+0xc0>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <MX_RTC_Init+0xc0>)
 80011ec:	227f      	movs	r2, #127	; 0x7f
 80011ee:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011f0:	4b24      	ldr	r3, [pc, #144]	; (8001284 <MX_RTC_Init+0xc0>)
 80011f2:	22ff      	movs	r2, #255	; 0xff
 80011f4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011f6:	4b23      	ldr	r3, [pc, #140]	; (8001284 <MX_RTC_Init+0xc0>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80011fc:	4b21      	ldr	r3, [pc, #132]	; (8001284 <MX_RTC_Init+0xc0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001202:	4b20      	ldr	r3, [pc, #128]	; (8001284 <MX_RTC_Init+0xc0>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001208:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <MX_RTC_Init+0xc0>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800120e:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <MX_RTC_Init+0xc0>)
 8001210:	0018      	movs	r0, r3
 8001212:	f002 f87b 	bl	800330c <HAL_RTC_Init>
 8001216:	1e03      	subs	r3, r0, #0
 8001218:	d001      	beq.n	800121e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800121a:	f000 fa1f 	bl	800165c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2200      	movs	r2, #0
 8001228:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2200      	movs	r2, #0
 800122e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800123c:	1d39      	adds	r1, r7, #4
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_RTC_Init+0xc0>)
 8001240:	2201      	movs	r2, #1
 8001242:	0018      	movs	r0, r3
 8001244:	f002 f8fe 	bl	8003444 <HAL_RTC_SetTime>
 8001248:	1e03      	subs	r3, r0, #0
 800124a:	d001      	beq.n	8001250 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800124c:	f000 fa06 	bl	800165c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001250:	003b      	movs	r3, r7
 8001252:	2201      	movs	r2, #1
 8001254:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001256:	003b      	movs	r3, r7
 8001258:	2201      	movs	r2, #1
 800125a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800125c:	003b      	movs	r3, r7
 800125e:	2201      	movs	r2, #1
 8001260:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x25;
 8001262:	003b      	movs	r3, r7
 8001264:	2225      	movs	r2, #37	; 0x25
 8001266:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001268:	0039      	movs	r1, r7
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_RTC_Init+0xc0>)
 800126c:	2201      	movs	r2, #1
 800126e:	0018      	movs	r0, r3
 8001270:	f002 f9f0 	bl	8003654 <HAL_RTC_SetDate>
 8001274:	1e03      	subs	r3, r0, #0
 8001276:	d001      	beq.n	800127c <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8001278:	f000 f9f0 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800127c:	46c0      	nop			; (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	b006      	add	sp, #24
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200001f0 	.word	0x200001f0
 8001288:	40002800 	.word	0x40002800

0800128c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001292:	2318      	movs	r3, #24
 8001294:	18fb      	adds	r3, r7, r3
 8001296:	0018      	movs	r0, r3
 8001298:	2310      	movs	r3, #16
 800129a:	001a      	movs	r2, r3
 800129c:	2100      	movs	r1, #0
 800129e:	f004 fa2b 	bl	80056f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a2:	2310      	movs	r3, #16
 80012a4:	18fb      	adds	r3, r7, r3
 80012a6:	0018      	movs	r0, r3
 80012a8:	2308      	movs	r3, #8
 80012aa:	001a      	movs	r2, r3
 80012ac:	2100      	movs	r1, #0
 80012ae:	f004 fa23 	bl	80056f8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012b2:	003b      	movs	r3, r7
 80012b4:	0018      	movs	r0, r3
 80012b6:	2310      	movs	r3, #16
 80012b8:	001a      	movs	r2, r3
 80012ba:	2100      	movs	r1, #0
 80012bc:	f004 fa1c 	bl	80056f8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012c0:	4b30      	ldr	r3, [pc, #192]	; (8001384 <MX_TIM2_Init+0xf8>)
 80012c2:	2280      	movs	r2, #128	; 0x80
 80012c4:	05d2      	lsls	r2, r2, #23
 80012c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 80012c8:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <MX_TIM2_Init+0xf8>)
 80012ca:	221f      	movs	r2, #31
 80012cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ce:	4b2d      	ldr	r3, [pc, #180]	; (8001384 <MX_TIM2_Init+0xf8>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80012d4:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <MX_TIM2_Init+0xf8>)
 80012d6:	4a2c      	ldr	r2, [pc, #176]	; (8001388 <MX_TIM2_Init+0xfc>)
 80012d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012da:	4b2a      	ldr	r3, [pc, #168]	; (8001384 <MX_TIM2_Init+0xf8>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012e0:	4b28      	ldr	r3, [pc, #160]	; (8001384 <MX_TIM2_Init+0xf8>)
 80012e2:	2280      	movs	r2, #128	; 0x80
 80012e4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012e6:	4b27      	ldr	r3, [pc, #156]	; (8001384 <MX_TIM2_Init+0xf8>)
 80012e8:	0018      	movs	r0, r3
 80012ea:	f002 fb6d 	bl	80039c8 <HAL_TIM_Base_Init>
 80012ee:	1e03      	subs	r3, r0, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80012f2:	f000 f9b3 	bl	800165c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f6:	2118      	movs	r1, #24
 80012f8:	187b      	adds	r3, r7, r1
 80012fa:	2280      	movs	r2, #128	; 0x80
 80012fc:	0152      	lsls	r2, r2, #5
 80012fe:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001300:	187a      	adds	r2, r7, r1
 8001302:	4b20      	ldr	r3, [pc, #128]	; (8001384 <MX_TIM2_Init+0xf8>)
 8001304:	0011      	movs	r1, r2
 8001306:	0018      	movs	r0, r3
 8001308:	f002 fe34 	bl	8003f74 <HAL_TIM_ConfigClockSource>
 800130c:	1e03      	subs	r3, r0, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001310:	f000 f9a4 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001314:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <MX_TIM2_Init+0xf8>)
 8001316:	0018      	movs	r0, r3
 8001318:	f002 fbde 	bl	8003ad8 <HAL_TIM_PWM_Init>
 800131c:	1e03      	subs	r3, r0, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001320:	f000 f99c 	bl	800165c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001324:	2110      	movs	r1, #16
 8001326:	187b      	adds	r3, r7, r1
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132c:	187b      	adds	r3, r7, r1
 800132e:	2200      	movs	r2, #0
 8001330:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001332:	187a      	adds	r2, r7, r1
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <MX_TIM2_Init+0xf8>)
 8001336:	0011      	movs	r1, r2
 8001338:	0018      	movs	r0, r3
 800133a:	f003 f8ff 	bl	800453c <HAL_TIMEx_MasterConfigSynchronization>
 800133e:	1e03      	subs	r3, r0, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001342:	f000 f98b 	bl	800165c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001346:	003b      	movs	r3, r7
 8001348:	2260      	movs	r2, #96	; 0x60
 800134a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 499;
 800134c:	003b      	movs	r3, r7
 800134e:	22f4      	movs	r2, #244	; 0xf4
 8001350:	32ff      	adds	r2, #255	; 0xff
 8001352:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001354:	003b      	movs	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800135a:	003b      	movs	r3, r7
 800135c:	2200      	movs	r2, #0
 800135e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001360:	0039      	movs	r1, r7
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <MX_TIM2_Init+0xf8>)
 8001364:	2208      	movs	r2, #8
 8001366:	0018      	movs	r0, r3
 8001368:	f002 fd3e 	bl	8003de8 <HAL_TIM_PWM_ConfigChannel>
 800136c:	1e03      	subs	r3, r0, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001370:	f000 f974 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <MX_TIM2_Init+0xf8>)
 8001376:	0018      	movs	r0, r3
 8001378:	f000 faa8 	bl	80018cc <HAL_TIM_MspPostInit>

}
 800137c:	46c0      	nop			; (mov r8, r8)
 800137e:	46bd      	mov	sp, r7
 8001380:	b00a      	add	sp, #40	; 0x28
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000214 	.word	0x20000214
 8001388:	000003e7 	.word	0x000003e7

0800138c <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	; 0x28
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001392:	2318      	movs	r3, #24
 8001394:	18fb      	adds	r3, r7, r3
 8001396:	0018      	movs	r0, r3
 8001398:	2310      	movs	r3, #16
 800139a:	001a      	movs	r2, r3
 800139c:	2100      	movs	r1, #0
 800139e:	f004 f9ab 	bl	80056f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a2:	2310      	movs	r3, #16
 80013a4:	18fb      	adds	r3, r7, r3
 80013a6:	0018      	movs	r0, r3
 80013a8:	2308      	movs	r3, #8
 80013aa:	001a      	movs	r2, r3
 80013ac:	2100      	movs	r1, #0
 80013ae:	f004 f9a3 	bl	80056f8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b2:	003b      	movs	r3, r7
 80013b4:	0018      	movs	r0, r3
 80013b6:	2310      	movs	r3, #16
 80013b8:	001a      	movs	r2, r3
 80013ba:	2100      	movs	r1, #0
 80013bc:	f004 f99c 	bl	80056f8 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 80013c0:	4b2e      	ldr	r3, [pc, #184]	; (800147c <MX_TIM21_Init+0xf0>)
 80013c2:	4a2f      	ldr	r2, [pc, #188]	; (8001480 <MX_TIM21_Init+0xf4>)
 80013c4:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 31;
 80013c6:	4b2d      	ldr	r3, [pc, #180]	; (800147c <MX_TIM21_Init+0xf0>)
 80013c8:	221f      	movs	r2, #31
 80013ca:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013cc:	4b2b      	ldr	r3, [pc, #172]	; (800147c <MX_TIM21_Init+0xf0>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 1000;
 80013d2:	4b2a      	ldr	r3, [pc, #168]	; (800147c <MX_TIM21_Init+0xf0>)
 80013d4:	22fa      	movs	r2, #250	; 0xfa
 80013d6:	0092      	lsls	r2, r2, #2
 80013d8:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013da:	4b28      	ldr	r3, [pc, #160]	; (800147c <MX_TIM21_Init+0xf0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e0:	4b26      	ldr	r3, [pc, #152]	; (800147c <MX_TIM21_Init+0xf0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80013e6:	4b25      	ldr	r3, [pc, #148]	; (800147c <MX_TIM21_Init+0xf0>)
 80013e8:	0018      	movs	r0, r3
 80013ea:	f002 faed 	bl	80039c8 <HAL_TIM_Base_Init>
 80013ee:	1e03      	subs	r3, r0, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM21_Init+0x6a>
  {
    Error_Handler();
 80013f2:	f000 f933 	bl	800165c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f6:	2118      	movs	r1, #24
 80013f8:	187b      	adds	r3, r7, r1
 80013fa:	2280      	movs	r2, #128	; 0x80
 80013fc:	0152      	lsls	r2, r2, #5
 80013fe:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8001400:	187a      	adds	r2, r7, r1
 8001402:	4b1e      	ldr	r3, [pc, #120]	; (800147c <MX_TIM21_Init+0xf0>)
 8001404:	0011      	movs	r1, r2
 8001406:	0018      	movs	r0, r3
 8001408:	f002 fdb4 	bl	8003f74 <HAL_TIM_ConfigClockSource>
 800140c:	1e03      	subs	r3, r0, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM21_Init+0x88>
  {
    Error_Handler();
 8001410:	f000 f924 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <MX_TIM21_Init+0xf0>)
 8001416:	0018      	movs	r0, r3
 8001418:	f002 fb16 	bl	8003a48 <HAL_TIM_OC_Init>
 800141c:	1e03      	subs	r3, r0, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM21_Init+0x98>
  {
    Error_Handler();
 8001420:	f000 f91c 	bl	800165c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001424:	2110      	movs	r1, #16
 8001426:	187b      	adds	r3, r7, r1
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142c:	187b      	adds	r3, r7, r1
 800142e:	2200      	movs	r2, #0
 8001430:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8001432:	187a      	adds	r2, r7, r1
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_TIM21_Init+0xf0>)
 8001436:	0011      	movs	r1, r2
 8001438:	0018      	movs	r0, r3
 800143a:	f003 f87f 	bl	800453c <HAL_TIMEx_MasterConfigSynchronization>
 800143e:	1e03      	subs	r3, r0, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM21_Init+0xba>
  {
    Error_Handler();
 8001442:	f000 f90b 	bl	800165c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001446:	003b      	movs	r3, r7
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800144c:	003b      	movs	r3, r7
 800144e:	2200      	movs	r2, #0
 8001450:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001452:	003b      	movs	r3, r7
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001458:	003b      	movs	r3, r7
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800145e:	0039      	movs	r1, r7
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_TIM21_Init+0xf0>)
 8001462:	2200      	movs	r2, #0
 8001464:	0018      	movs	r0, r3
 8001466:	f002 fc67 	bl	8003d38 <HAL_TIM_OC_ConfigChannel>
 800146a:	1e03      	subs	r3, r0, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM21_Init+0xe6>
  {
    Error_Handler();
 800146e:	f000 f8f5 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	46bd      	mov	sp, r7
 8001476:	b00a      	add	sp, #40	; 0x28
 8001478:	bd80      	pop	{r7, pc}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	20000254 	.word	0x20000254
 8001480:	40010800 	.word	0x40010800

08001484 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <MX_USART2_UART_Init+0x58>)
 800148a:	4a15      	ldr	r2, [pc, #84]	; (80014e0 <MX_USART2_UART_Init+0x5c>)
 800148c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <MX_USART2_UART_Init+0x58>)
 8001490:	22e1      	movs	r2, #225	; 0xe1
 8001492:	0252      	lsls	r2, r2, #9
 8001494:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <MX_USART2_UART_Init+0x58>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <MX_USART2_UART_Init+0x58>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <MX_USART2_UART_Init+0x58>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <MX_USART2_UART_Init+0x58>)
 80014aa:	220c      	movs	r2, #12
 80014ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <MX_USART2_UART_Init+0x58>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <MX_USART2_UART_Init+0x58>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <MX_USART2_UART_Init+0x58>)
 80014bc:	2200      	movs	r2, #0
 80014be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <MX_USART2_UART_Init+0x58>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <MX_USART2_UART_Init+0x58>)
 80014c8:	0018      	movs	r0, r3
 80014ca:	f003 f887 	bl	80045dc <HAL_UART_Init>
 80014ce:	1e03      	subs	r3, r0, #0
 80014d0:	d001      	beq.n	80014d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014d2:	f000 f8c3 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000294 	.word	0x20000294
 80014e0:	40004400 	.word	0x40004400

080014e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b089      	sub	sp, #36	; 0x24
 80014e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ea:	240c      	movs	r4, #12
 80014ec:	193b      	adds	r3, r7, r4
 80014ee:	0018      	movs	r0, r3
 80014f0:	2314      	movs	r3, #20
 80014f2:	001a      	movs	r2, r3
 80014f4:	2100      	movs	r1, #0
 80014f6:	f004 f8ff 	bl	80056f8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	4b52      	ldr	r3, [pc, #328]	; (8001644 <MX_GPIO_Init+0x160>)
 80014fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014fe:	4b51      	ldr	r3, [pc, #324]	; (8001644 <MX_GPIO_Init+0x160>)
 8001500:	2104      	movs	r1, #4
 8001502:	430a      	orrs	r2, r1
 8001504:	62da      	str	r2, [r3, #44]	; 0x2c
 8001506:	4b4f      	ldr	r3, [pc, #316]	; (8001644 <MX_GPIO_Init+0x160>)
 8001508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150a:	2204      	movs	r2, #4
 800150c:	4013      	ands	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	4b4c      	ldr	r3, [pc, #304]	; (8001644 <MX_GPIO_Init+0x160>)
 8001514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001516:	4b4b      	ldr	r3, [pc, #300]	; (8001644 <MX_GPIO_Init+0x160>)
 8001518:	2101      	movs	r1, #1
 800151a:	430a      	orrs	r2, r1
 800151c:	62da      	str	r2, [r3, #44]	; 0x2c
 800151e:	4b49      	ldr	r3, [pc, #292]	; (8001644 <MX_GPIO_Init+0x160>)
 8001520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001522:	2201      	movs	r2, #1
 8001524:	4013      	ands	r3, r2
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	4b46      	ldr	r3, [pc, #280]	; (8001644 <MX_GPIO_Init+0x160>)
 800152c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800152e:	4b45      	ldr	r3, [pc, #276]	; (8001644 <MX_GPIO_Init+0x160>)
 8001530:	2102      	movs	r1, #2
 8001532:	430a      	orrs	r2, r1
 8001534:	62da      	str	r2, [r3, #44]	; 0x2c
 8001536:	4b43      	ldr	r3, [pc, #268]	; (8001644 <MX_GPIO_Init+0x160>)
 8001538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153a:	2202      	movs	r2, #2
 800153c:	4013      	ands	r3, r2
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLEAR_Pin|A_HT_Pin|CLK_A_HT_Pin|EN_HT_Pin
 8001542:	4941      	ldr	r1, [pc, #260]	; (8001648 <MX_GPIO_Init+0x164>)
 8001544:	23a0      	movs	r3, #160	; 0xa0
 8001546:	05db      	lsls	r3, r3, #23
 8001548:	2200      	movs	r2, #0
 800154a:	0018      	movs	r0, r3
 800154c:	f000 fe93 	bl	8002276 <HAL_GPIO_WritePin>
                          |A_HO_Pin|CLK_A_HO_Pin|A_MT_Pin|CLK_A_MT_Pin
                          |A_MO_Pin|CLK_A_MO_Pin|A_ST_Pin|CLK_A_ST_Pin
                          |A_SO_Pin|CLK_A_SO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|EN_MO_Pin|EN_ST_Pin|EN_SO_Pin
 8001550:	493e      	ldr	r1, [pc, #248]	; (800164c <MX_GPIO_Init+0x168>)
 8001552:	4b3f      	ldr	r3, [pc, #252]	; (8001650 <MX_GPIO_Init+0x16c>)
 8001554:	2200      	movs	r2, #0
 8001556:	0018      	movs	r0, r3
 8001558:	f000 fe8d 	bl	8002276 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CLEAR_Pin A_HT_Pin CLK_A_HT_Pin A_HO_Pin
                           CLK_A_HO_Pin A_MT_Pin CLK_A_MT_Pin A_MO_Pin
                           CLK_A_MO_Pin A_ST_Pin CLK_A_ST_Pin A_SO_Pin
                           CLK_A_SO_Pin */
  GPIO_InitStruct.Pin = CLEAR_Pin|A_HT_Pin|CLK_A_HT_Pin|A_HO_Pin
 800155c:	193b      	adds	r3, r7, r4
 800155e:	4a3d      	ldr	r2, [pc, #244]	; (8001654 <MX_GPIO_Init+0x170>)
 8001560:	601a      	str	r2, [r3, #0]
                          |CLK_A_HO_Pin|A_MT_Pin|CLK_A_MT_Pin|A_MO_Pin
                          |CLK_A_MO_Pin|A_ST_Pin|CLK_A_ST_Pin|A_SO_Pin
                          |CLK_A_SO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	193b      	adds	r3, r7, r4
 8001564:	2201      	movs	r2, #1
 8001566:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	193b      	adds	r3, r7, r4
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800156e:	193b      	adds	r3, r7, r4
 8001570:	2202      	movs	r2, #2
 8001572:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	193a      	adds	r2, r7, r4
 8001576:	23a0      	movs	r3, #160	; 0xa0
 8001578:	05db      	lsls	r3, r3, #23
 800157a:	0011      	movs	r1, r2
 800157c:	0018      	movs	r0, r3
 800157e:	f000 fcef 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_HT_Pin */
  GPIO_InitStruct.Pin = EN_HT_Pin;
 8001582:	193b      	adds	r3, r7, r4
 8001584:	2208      	movs	r2, #8
 8001586:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001588:	193b      	adds	r3, r7, r4
 800158a:	2201      	movs	r2, #1
 800158c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	193b      	adds	r3, r7, r4
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001594:	193b      	adds	r3, r7, r4
 8001596:	2203      	movs	r2, #3
 8001598:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EN_HT_GPIO_Port, &GPIO_InitStruct);
 800159a:	193a      	adds	r2, r7, r4
 800159c:	23a0      	movs	r3, #160	; 0xa0
 800159e:	05db      	lsls	r3, r3, #23
 80015a0:	0011      	movs	r1, r2
 80015a2:	0018      	movs	r0, r3
 80015a4:	f000 fcdc 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_UP_Pin BTN_DOWN_Pin BTN_LEFT_Pin BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_DOWN_Pin|BTN_LEFT_Pin|BTN_RIGHT_Pin;
 80015a8:	0021      	movs	r1, r4
 80015aa:	187b      	adds	r3, r7, r1
 80015ac:	220f      	movs	r2, #15
 80015ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015b0:	187b      	adds	r3, r7, r1
 80015b2:	2288      	movs	r2, #136	; 0x88
 80015b4:	0352      	lsls	r2, r2, #13
 80015b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	187b      	adds	r3, r7, r1
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015be:	000c      	movs	r4, r1
 80015c0:	187b      	adds	r3, r7, r1
 80015c2:	4a23      	ldr	r2, [pc, #140]	; (8001650 <MX_GPIO_Init+0x16c>)
 80015c4:	0019      	movs	r1, r3
 80015c6:	0010      	movs	r0, r2
 80015c8:	f000 fcca 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015cc:	0021      	movs	r1, r4
 80015ce:	187b      	adds	r3, r7, r1
 80015d0:	2280      	movs	r2, #128	; 0x80
 80015d2:	0112      	lsls	r2, r2, #4
 80015d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d6:	000c      	movs	r4, r1
 80015d8:	193b      	adds	r3, r7, r4
 80015da:	2201      	movs	r2, #1
 80015dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	193b      	adds	r3, r7, r4
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	193b      	adds	r3, r7, r4
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ea:	193b      	adds	r3, r7, r4
 80015ec:	4a18      	ldr	r2, [pc, #96]	; (8001650 <MX_GPIO_Init+0x16c>)
 80015ee:	0019      	movs	r1, r3
 80015f0:	0010      	movs	r0, r2
 80015f2:	f000 fcb5 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_MO_Pin EN_ST_Pin EN_SO_Pin EN_HO_Pin
                           EN_MT_Pin */
  GPIO_InitStruct.Pin = EN_MO_Pin|EN_ST_Pin|EN_SO_Pin|EN_HO_Pin
 80015f6:	0021      	movs	r1, r4
 80015f8:	187b      	adds	r3, r7, r1
 80015fa:	4a17      	ldr	r2, [pc, #92]	; (8001658 <MX_GPIO_Init+0x174>)
 80015fc:	601a      	str	r2, [r3, #0]
                          |EN_MT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fe:	187b      	adds	r3, r7, r1
 8001600:	2201      	movs	r2, #1
 8001602:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	187b      	adds	r3, r7, r1
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800160a:	187b      	adds	r3, r7, r1
 800160c:	2202      	movs	r2, #2
 800160e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001610:	187b      	adds	r3, r7, r1
 8001612:	4a0f      	ldr	r2, [pc, #60]	; (8001650 <MX_GPIO_Init+0x16c>)
 8001614:	0019      	movs	r1, r3
 8001616:	0010      	movs	r0, r2
 8001618:	f000 fca2 	bl	8001f60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800161c:	2200      	movs	r2, #0
 800161e:	2100      	movs	r1, #0
 8001620:	2005      	movs	r0, #5
 8001622:	f000 fc6b 	bl	8001efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001626:	2005      	movs	r0, #5
 8001628:	f000 fc7d 	bl	8001f26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	2100      	movs	r1, #0
 8001630:	2006      	movs	r0, #6
 8001632:	f000 fc63 	bl	8001efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001636:	2006      	movs	r0, #6
 8001638:	f000 fc75 	bl	8001f26 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800163c:	46c0      	nop			; (mov r8, r8)
 800163e:	46bd      	mov	sp, r7
 8001640:	b009      	add	sp, #36	; 0x24
 8001642:	bd90      	pop	{r4, r7, pc}
 8001644:	40021000 	.word	0x40021000
 8001648:	00009fff 	.word	0x00009fff
 800164c:	00007830 	.word	0x00007830
 8001650:	50000400 	.word	0x50000400
 8001654:	00009ff7 	.word	0x00009ff7
 8001658:	00007030 	.word	0x00007030

0800165c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001660:	b672      	cpsid	i
}
 8001662:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001664:	e7fe      	b.n	8001664 <Error_Handler+0x8>
	...

08001668 <send_uart_command>:
#include <string.h>

extern UART_HandleTypeDef huart2;


void send_uart_command(const char* cmd) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	0018      	movs	r0, r3
 8001674:	f7fe fd48 	bl	8000108 <strlen>
 8001678:	0003      	movs	r3, r0
 800167a:	b29a      	uxth	r2, r3
 800167c:	2301      	movs	r3, #1
 800167e:	425b      	negs	r3, r3
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	4807      	ldr	r0, [pc, #28]	; (80016a0 <send_uart_command+0x38>)
 8001684:	f002 fffe 	bl	8004684 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)"\n", 1, HAL_MAX_DELAY); // newline terminator
 8001688:	2301      	movs	r3, #1
 800168a:	425b      	negs	r3, r3
 800168c:	4905      	ldr	r1, [pc, #20]	; (80016a4 <send_uart_command+0x3c>)
 800168e:	4804      	ldr	r0, [pc, #16]	; (80016a0 <send_uart_command+0x38>)
 8001690:	2201      	movs	r2, #1
 8001692:	f002 fff7 	bl	8004684 <HAL_UART_Transmit>
}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	46bd      	mov	sp, r7
 800169a:	b002      	add	sp, #8
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	20000294 	.word	0x20000294
 80016a4:	08006760 	.word	0x08006760

080016a8 <receive_uart_response>:

void receive_uart_response(char* buffer, uint16_t size) {
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	000a      	movs	r2, r1
 80016b2:	1cbb      	adds	r3, r7, #2
 80016b4:	801a      	strh	r2, [r3, #0]
    uint8_t ch;
    uint16_t idx = 0;
 80016b6:	230e      	movs	r3, #14
 80016b8:	18fb      	adds	r3, r7, r3
 80016ba:	2200      	movs	r2, #0
 80016bc:	801a      	strh	r2, [r3, #0]

    while (idx < size - 1) {
 80016be:	e01f      	b.n	8001700 <receive_uart_response+0x58>
        if (HAL_UART_Receive(&huart2, &ch, 1, HAL_MAX_DELAY) == HAL_OK) {
 80016c0:	2301      	movs	r3, #1
 80016c2:	425b      	negs	r3, r3
 80016c4:	240d      	movs	r4, #13
 80016c6:	1939      	adds	r1, r7, r4
 80016c8:	4818      	ldr	r0, [pc, #96]	; (800172c <receive_uart_response+0x84>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	f003 f87a 	bl	80047c4 <HAL_UART_Receive>
 80016d0:	0003      	movs	r3, r0
 80016d2:	0019      	movs	r1, r3
 80016d4:	200e      	movs	r0, #14
 80016d6:	183b      	adds	r3, r7, r0
 80016d8:	183a      	adds	r2, r7, r0
 80016da:	8812      	ldrh	r2, [r2, #0]
 80016dc:	801a      	strh	r2, [r3, #0]
 80016de:	2900      	cmp	r1, #0
 80016e0:	d10e      	bne.n	8001700 <receive_uart_response+0x58>
            if (ch == '\n') break;
 80016e2:	193b      	adds	r3, r7, r4
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b0a      	cmp	r3, #10
 80016e8:	d013      	beq.n	8001712 <receive_uart_response+0x6a>
            buffer[idx++] = ch;
 80016ea:	183b      	adds	r3, r7, r0
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	183a      	adds	r2, r7, r0
 80016f0:	1c59      	adds	r1, r3, #1
 80016f2:	8011      	strh	r1, [r2, #0]
 80016f4:	001a      	movs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	189b      	adds	r3, r3, r2
 80016fa:	193a      	adds	r2, r7, r4
 80016fc:	7812      	ldrb	r2, [r2, #0]
 80016fe:	701a      	strb	r2, [r3, #0]
    while (idx < size - 1) {
 8001700:	230e      	movs	r3, #14
 8001702:	18fb      	adds	r3, r7, r3
 8001704:	881a      	ldrh	r2, [r3, #0]
 8001706:	1cbb      	adds	r3, r7, #2
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	3b01      	subs	r3, #1
 800170c:	429a      	cmp	r2, r3
 800170e:	dbd7      	blt.n	80016c0 <receive_uart_response+0x18>
 8001710:	e000      	b.n	8001714 <receive_uart_response+0x6c>
            if (ch == '\n') break;
 8001712:	46c0      	nop			; (mov r8, r8)
        }
    }
    buffer[idx] = '\0'; // Null-terminate
 8001714:	230e      	movs	r3, #14
 8001716:	18fb      	adds	r3, r7, r3
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	18d3      	adds	r3, r2, r3
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	46bd      	mov	sp, r7
 8001726:	b005      	add	sp, #20
 8001728:	bd90      	pop	{r4, r7, pc}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	20000294 	.word	0x20000294

08001730 <parse_time_string>:

void parse_time_string(const char* time_str, PiTime *pi_times) {
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b085      	sub	sp, #20
 8001734:	af02      	add	r7, sp, #8
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
    // Expects format: "HH:MM:SS"
    sscanf(time_str, "%d:%d:%d", &pi_times->hours, &pi_times->minutes, &pi_times->seconds);
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	1d1c      	adds	r4, r3, #4
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	3308      	adds	r3, #8
 8001744:	4904      	ldr	r1, [pc, #16]	; (8001758 <parse_time_string+0x28>)
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	0023      	movs	r3, r4
 800174c:	f003 feb8 	bl	80054c0 <siscanf>
}
 8001750:	46c0      	nop			; (mov r8, r8)
 8001752:	46bd      	mov	sp, r7
 8001754:	b003      	add	sp, #12
 8001756:	bd90      	pop	{r4, r7, pc}
 8001758:	08006764 	.word	0x08006764

0800175c <parse_date_string>:

void parse_date_string(const char* date_str,PiTime *pi_times) {
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b085      	sub	sp, #20
 8001760:	af02      	add	r7, sp, #8
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
    // Expects format: "YYYY-MM-DD"
    sscanf(date_str, "%d-%d-%d", &pi_times->years, &pi_times->months, &pi_times->seconds);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	330c      	adds	r3, #12
 800176a:	001a      	movs	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	3310      	adds	r3, #16
 8001770:	001c      	movs	r4, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	3308      	adds	r3, #8
 8001776:	4905      	ldr	r1, [pc, #20]	; (800178c <parse_date_string+0x30>)
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	0023      	movs	r3, r4
 800177e:	f003 fe9f 	bl	80054c0 <siscanf>
}
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	46bd      	mov	sp, r7
 8001786:	b003      	add	sp, #12
 8001788:	bd90      	pop	{r4, r7, pc}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	08006770 	.word	0x08006770

08001790 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001794:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <HAL_MspInit+0x24>)
 8001796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_MspInit+0x24>)
 800179a:	2101      	movs	r1, #1
 800179c:	430a      	orrs	r2, r1
 800179e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <HAL_MspInit+0x24>)
 80017a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017a4:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <HAL_MspInit+0x24>)
 80017a6:	2180      	movs	r1, #128	; 0x80
 80017a8:	0549      	lsls	r1, r1, #21
 80017aa:	430a      	orrs	r2, r1
 80017ac:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40021000 	.word	0x40021000

080017b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b089      	sub	sp, #36	; 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	240c      	movs	r4, #12
 80017c2:	193b      	adds	r3, r7, r4
 80017c4:	0018      	movs	r0, r3
 80017c6:	2314      	movs	r3, #20
 80017c8:	001a      	movs	r2, r3
 80017ca:	2100      	movs	r1, #0
 80017cc:	f003 ff94 	bl	80056f8 <memset>
  if(hi2c->Instance==I2C1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a18      	ldr	r2, [pc, #96]	; (8001838 <HAL_I2C_MspInit+0x80>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d129      	bne.n	800182e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <HAL_I2C_MspInit+0x84>)
 80017dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <HAL_I2C_MspInit+0x84>)
 80017e0:	2102      	movs	r1, #2
 80017e2:	430a      	orrs	r2, r1
 80017e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_I2C_MspInit+0x84>)
 80017e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ea:	2202      	movs	r2, #2
 80017ec:	4013      	ands	r3, r2
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017f2:	193b      	adds	r3, r7, r4
 80017f4:	22c0      	movs	r2, #192	; 0xc0
 80017f6:	0092      	lsls	r2, r2, #2
 80017f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017fa:	0021      	movs	r1, r4
 80017fc:	187b      	adds	r3, r7, r1
 80017fe:	2212      	movs	r2, #18
 8001800:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	187b      	adds	r3, r7, r1
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001808:	187b      	adds	r3, r7, r1
 800180a:	2203      	movs	r2, #3
 800180c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800180e:	187b      	adds	r3, r7, r1
 8001810:	2204      	movs	r2, #4
 8001812:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001814:	187b      	adds	r3, r7, r1
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <HAL_I2C_MspInit+0x88>)
 8001818:	0019      	movs	r1, r3
 800181a:	0010      	movs	r0, r2
 800181c:	f000 fba0 	bl	8001f60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_I2C_MspInit+0x84>)
 8001822:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_I2C_MspInit+0x84>)
 8001826:	2180      	movs	r1, #128	; 0x80
 8001828:	0389      	lsls	r1, r1, #14
 800182a:	430a      	orrs	r2, r1
 800182c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	46bd      	mov	sp, r7
 8001832:	b009      	add	sp, #36	; 0x24
 8001834:	bd90      	pop	{r4, r7, pc}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	40005400 	.word	0x40005400
 800183c:	40021000 	.word	0x40021000
 8001840:	50000400 	.word	0x50000400

08001844 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a06      	ldr	r2, [pc, #24]	; (800186c <HAL_RTC_MspInit+0x28>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d106      	bne.n	8001864 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_RTC_MspInit+0x2c>)
 8001858:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800185a:	4b05      	ldr	r3, [pc, #20]	; (8001870 <HAL_RTC_MspInit+0x2c>)
 800185c:	2180      	movs	r1, #128	; 0x80
 800185e:	02c9      	lsls	r1, r1, #11
 8001860:	430a      	orrs	r2, r1
 8001862:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001864:	46c0      	nop			; (mov r8, r8)
 8001866:	46bd      	mov	sp, r7
 8001868:	b002      	add	sp, #8
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40002800 	.word	0x40002800
 8001870:	40021000 	.word	0x40021000

08001874 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	05db      	lsls	r3, r3, #23
 8001884:	429a      	cmp	r2, r3
 8001886:	d106      	bne.n	8001896 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001888:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <HAL_TIM_Base_MspInit+0x50>)
 800188a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800188c:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <HAL_TIM_Base_MspInit+0x50>)
 800188e:	2101      	movs	r1, #1
 8001890:	430a      	orrs	r2, r1
 8001892:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8001894:	e012      	b.n	80018bc <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM21)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a0b      	ldr	r2, [pc, #44]	; (80018c8 <HAL_TIM_Base_MspInit+0x54>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d10d      	bne.n	80018bc <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM21_CLK_ENABLE();
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <HAL_TIM_Base_MspInit+0x50>)
 80018a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <HAL_TIM_Base_MspInit+0x50>)
 80018a6:	2104      	movs	r1, #4
 80018a8:	430a      	orrs	r2, r1
 80018aa:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	2100      	movs	r1, #0
 80018b0:	2014      	movs	r0, #20
 80018b2:	f000 fb23 	bl	8001efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80018b6:	2014      	movs	r0, #20
 80018b8:	f000 fb35 	bl	8001f26 <HAL_NVIC_EnableIRQ>
}
 80018bc:	46c0      	nop			; (mov r8, r8)
 80018be:	46bd      	mov	sp, r7
 80018c0:	b002      	add	sp, #8
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40010800 	.word	0x40010800

080018cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b089      	sub	sp, #36	; 0x24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	240c      	movs	r4, #12
 80018d6:	193b      	adds	r3, r7, r4
 80018d8:	0018      	movs	r0, r3
 80018da:	2314      	movs	r3, #20
 80018dc:	001a      	movs	r2, r3
 80018de:	2100      	movs	r1, #0
 80018e0:	f003 ff0a 	bl	80056f8 <memset>
  if(htim->Instance==TIM2)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	05db      	lsls	r3, r3, #23
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d122      	bne.n	8001936 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <HAL_TIM_MspPostInit+0x74>)
 80018f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_TIM_MspPostInit+0x74>)
 80018f6:	2102      	movs	r1, #2
 80018f8:	430a      	orrs	r2, r1
 80018fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80018fc:	4b10      	ldr	r3, [pc, #64]	; (8001940 <HAL_TIM_MspPostInit+0x74>)
 80018fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001900:	2202      	movs	r2, #2
 8001902:	4013      	ands	r3, r2
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001908:	193b      	adds	r3, r7, r4
 800190a:	2280      	movs	r2, #128	; 0x80
 800190c:	00d2      	lsls	r2, r2, #3
 800190e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	0021      	movs	r1, r4
 8001912:	187b      	adds	r3, r7, r1
 8001914:	2202      	movs	r2, #2
 8001916:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	187b      	adds	r3, r7, r1
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	187b      	adds	r3, r7, r1
 8001920:	2200      	movs	r2, #0
 8001922:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001924:	187b      	adds	r3, r7, r1
 8001926:	2202      	movs	r2, #2
 8001928:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192a:	187b      	adds	r3, r7, r1
 800192c:	4a05      	ldr	r2, [pc, #20]	; (8001944 <HAL_TIM_MspPostInit+0x78>)
 800192e:	0019      	movs	r1, r3
 8001930:	0010      	movs	r0, r2
 8001932:	f000 fb15 	bl	8001f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	46bd      	mov	sp, r7
 800193a:	b009      	add	sp, #36	; 0x24
 800193c:	bd90      	pop	{r4, r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	40021000 	.word	0x40021000
 8001944:	50000400 	.word	0x50000400

08001948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b089      	sub	sp, #36	; 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	240c      	movs	r4, #12
 8001952:	193b      	adds	r3, r7, r4
 8001954:	0018      	movs	r0, r3
 8001956:	2314      	movs	r3, #20
 8001958:	001a      	movs	r2, r3
 800195a:	2100      	movs	r1, #0
 800195c:	f003 fecc 	bl	80056f8 <memset>
  if(huart->Instance==USART2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <HAL_UART_MspInit+0x7c>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d128      	bne.n	80019bc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800196a:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <HAL_UART_MspInit+0x80>)
 800196c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800196e:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <HAL_UART_MspInit+0x80>)
 8001970:	2180      	movs	r1, #128	; 0x80
 8001972:	0289      	lsls	r1, r1, #10
 8001974:	430a      	orrs	r2, r1
 8001976:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <HAL_UART_MspInit+0x80>)
 800197a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_UART_MspInit+0x80>)
 800197e:	2102      	movs	r1, #2
 8001980:	430a      	orrs	r2, r1
 8001982:	62da      	str	r2, [r3, #44]	; 0x2c
 8001984:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <HAL_UART_MspInit+0x80>)
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	2202      	movs	r2, #2
 800198a:	4013      	ands	r3, r2
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB6     ------> USART2_TX
    PB7     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001990:	0021      	movs	r1, r4
 8001992:	187b      	adds	r3, r7, r1
 8001994:	22c0      	movs	r2, #192	; 0xc0
 8001996:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	187b      	adds	r3, r7, r1
 800199a:	2202      	movs	r2, #2
 800199c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	187b      	adds	r3, r7, r1
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a4:	187b      	adds	r3, r7, r1
 80019a6:	2203      	movs	r2, #3
 80019a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 80019aa:	187b      	adds	r3, r7, r1
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b0:	187b      	adds	r3, r7, r1
 80019b2:	4a06      	ldr	r2, [pc, #24]	; (80019cc <HAL_UART_MspInit+0x84>)
 80019b4:	0019      	movs	r1, r3
 80019b6:	0010      	movs	r0, r2
 80019b8:	f000 fad2 	bl	8001f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019bc:	46c0      	nop			; (mov r8, r8)
 80019be:	46bd      	mov	sp, r7
 80019c0:	b009      	add	sp, #36	; 0x24
 80019c2:	bd90      	pop	{r4, r7, pc}
 80019c4:	40004400 	.word	0x40004400
 80019c8:	40021000 	.word	0x40021000
 80019cc:	50000400 	.word	0x50000400

080019d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80019d4:	e7fe      	b.n	80019d4 <NMI_Handler+0x4>

080019d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019da:	e7fe      	b.n	80019da <HardFault_Handler+0x4>

080019dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80019e0:	46c0      	nop			; (mov r8, r8)
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f4:	f000 f996 	bl	8001d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f8:	46c0      	nop			; (mov r8, r8)
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

	ext_btn_up_value = HAL_GPIO_ReadPin(BTN_UP_GPIO_Port, BTN_UP_Pin);
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <EXTI0_1_IRQHandler+0x3c>)
 8001a06:	2101      	movs	r1, #1
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f000 fc17 	bl	800223c <HAL_GPIO_ReadPin>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	001a      	movs	r2, r3
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <EXTI0_1_IRQHandler+0x40>)
 8001a14:	701a      	strb	r2, [r3, #0]
	ext_btn_down_value = HAL_GPIO_ReadPin(BTN_DOWN_GPIO_Port, BTN_DOWN_Pin);
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <EXTI0_1_IRQHandler+0x3c>)
 8001a18:	2102      	movs	r1, #2
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f000 fc0e 	bl	800223c <HAL_GPIO_ReadPin>
 8001a20:	0003      	movs	r3, r0
 8001a22:	001a      	movs	r2, r3
 8001a24:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <EXTI0_1_IRQHandler+0x44>)
 8001a26:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_UP_Pin);
 8001a28:	2001      	movs	r0, #1
 8001a2a:	f000 fc41 	bl	80022b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_DOWN_Pin);
 8001a2e:	2002      	movs	r0, #2
 8001a30:	f000 fc3e 	bl	80022b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001a34:	46c0      	nop			; (mov r8, r8)
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	50000400 	.word	0x50000400
 8001a40:	2000031c 	.word	0x2000031c
 8001a44:	2000031d 	.word	0x2000031d

08001a48 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

	ext_btn_left_value = HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port, BTN_LEFT_Pin);
 8001a4c:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <EXTI2_3_IRQHandler+0x3c>)
 8001a4e:	2104      	movs	r1, #4
 8001a50:	0018      	movs	r0, r3
 8001a52:	f000 fbf3 	bl	800223c <HAL_GPIO_ReadPin>
 8001a56:	0003      	movs	r3, r0
 8001a58:	001a      	movs	r2, r3
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <EXTI2_3_IRQHandler+0x40>)
 8001a5c:	701a      	strb	r2, [r3, #0]
	ext_btn_right_value = HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port, BTN_RIGHT_Pin);
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <EXTI2_3_IRQHandler+0x3c>)
 8001a60:	2108      	movs	r1, #8
 8001a62:	0018      	movs	r0, r3
 8001a64:	f000 fbea 	bl	800223c <HAL_GPIO_ReadPin>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	001a      	movs	r2, r3
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <EXTI2_3_IRQHandler+0x44>)
 8001a6e:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_LEFT_Pin);
 8001a70:	2004      	movs	r0, #4
 8001a72:	f000 fc1d 	bl	80022b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_RIGHT_Pin);
 8001a76:	2008      	movs	r0, #8
 8001a78:	f000 fc1a 	bl	80022b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001a7c:	46c0      	nop			; (mov r8, r8)
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	50000400 	.word	0x50000400
 8001a88:	2000031e 	.word	0x2000031e
 8001a8c:	2000031f 	.word	0x2000031f

08001a90 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */
	clock_value++;
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <TIM21_IRQHandler+0x1c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	4b04      	ldr	r3, [pc, #16]	; (8001aac <TIM21_IRQHandler+0x1c>)
 8001a9c:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8001a9e:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <TIM21_IRQHandler+0x20>)
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f002 f861 	bl	8003b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000320 	.word	0x20000320
 8001ab0:	20000254 	.word	0x20000254

08001ab4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	e00a      	b.n	8001adc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ac6:	e000      	b.n	8001aca <_read+0x16>
 8001ac8:	bf00      	nop
 8001aca:	0001      	movs	r1, r0
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	60ba      	str	r2, [r7, #8]
 8001ad2:	b2ca      	uxtb	r2, r1
 8001ad4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	dbf0      	blt.n	8001ac6 <_read+0x12>
  }

  return len;
 8001ae4:	687b      	ldr	r3, [r7, #4]
}
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	b006      	add	sp, #24
 8001aec:	bd80      	pop	{r7, pc}

08001aee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b086      	sub	sp, #24
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	e009      	b.n	8001b14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	60ba      	str	r2, [r7, #8]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	0018      	movs	r0, r3
 8001b0a:	e000      	b.n	8001b0e <_write+0x20>
 8001b0c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	3301      	adds	r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	dbf1      	blt.n	8001b00 <_write+0x12>
  }
  return len;
 8001b1c:	687b      	ldr	r3, [r7, #4]
}
 8001b1e:	0018      	movs	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b006      	add	sp, #24
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <_close>:

int _close(int file)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	425b      	negs	r3, r3
}
 8001b32:	0018      	movs	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	b002      	add	sp, #8
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	2280      	movs	r2, #128	; 0x80
 8001b48:	0192      	lsls	r2, r2, #6
 8001b4a:	605a      	str	r2, [r3, #4]
  return 0;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	0018      	movs	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b002      	add	sp, #8
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <_isatty>:

int _isatty(int file)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b5e:	2301      	movs	r3, #1
}
 8001b60:	0018      	movs	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b002      	add	sp, #8
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	0018      	movs	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b004      	add	sp, #16
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b88:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <_sbrk+0x5c>)
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <_sbrk+0x60>)
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b94:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <_sbrk+0x64>)
 8001b9e:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <_sbrk+0x68>)
 8001ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <_sbrk+0x64>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	18d3      	adds	r3, r2, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d207      	bcs.n	8001bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb0:	f003 fdf8 	bl	80057a4 <__errno>
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	425b      	negs	r3, r3
 8001bbe:	e009      	b.n	8001bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <_sbrk+0x64>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bc6:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <_sbrk+0x64>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	18d2      	adds	r2, r2, r3
 8001bce:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <_sbrk+0x64>)
 8001bd0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
}
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b006      	add	sp, #24
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20002000 	.word	0x20002000
 8001be0:	00000400 	.word	0x00000400
 8001be4:	20000324 	.word	0x20000324
 8001be8:	20000478 	.word	0x20000478

08001bec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf0:	46c0      	nop			; (mov r8, r8)
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001bf8:	4813      	ldr	r0, [pc, #76]	; (8001c48 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001bfa:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bfc:	f7ff fff6 	bl	8001bec <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001c00:	4812      	ldr	r0, [pc, #72]	; (8001c4c <LoopForever+0x6>)
    LDR R1, [R0]
 8001c02:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001c04:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001c06:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <LoopForever+0xa>)
    CMP R1, R2
 8001c08:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001c0a:	d105      	bne.n	8001c18 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001c0c:	4811      	ldr	r0, [pc, #68]	; (8001c54 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001c0e:	4912      	ldr	r1, [pc, #72]	; (8001c58 <LoopForever+0x12>)
    STR R1, [R0]
 8001c10:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001c12:	4812      	ldr	r0, [pc, #72]	; (8001c5c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001c14:	4912      	ldr	r1, [pc, #72]	; (8001c60 <LoopForever+0x1a>)
    STR R1, [R0]
 8001c16:	6001      	str	r1, [r0, #0]

08001c18 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c18:	4812      	ldr	r0, [pc, #72]	; (8001c64 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001c1a:	4913      	ldr	r1, [pc, #76]	; (8001c68 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001c1c:	4a13      	ldr	r2, [pc, #76]	; (8001c6c <LoopForever+0x26>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c20:	e002      	b.n	8001c28 <LoopCopyDataInit>

08001c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c26:	3304      	adds	r3, #4

08001c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c2c:	d3f9      	bcc.n	8001c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2e:	4a10      	ldr	r2, [pc, #64]	; (8001c70 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001c30:	4c10      	ldr	r4, [pc, #64]	; (8001c74 <LoopForever+0x2e>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c34:	e001      	b.n	8001c3a <LoopFillZerobss>

08001c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c38:	3204      	adds	r2, #4

08001c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c3c:	d3fb      	bcc.n	8001c36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c3e:	f003 fdb7 	bl	80057b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c42:	f7fe fe6b 	bl	800091c <main>

08001c46 <LoopForever>:

LoopForever:
    b LoopForever
 8001c46:	e7fe      	b.n	8001c46 <LoopForever>
   ldr   r0, =_estack
 8001c48:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8001c4c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001c50:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001c54:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001c58:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001c5c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001c60:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c68:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001c6c:	08006938 	.word	0x08006938
  ldr r2, =_sbss
 8001c70:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001c74:	20000478 	.word	0x20000478

08001c78 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c78:	e7fe      	b.n	8001c78 <ADC1_IRQHandler>
	...

08001c7c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c82:	1dfb      	adds	r3, r7, #7
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HAL_Init+0x3c>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_Init+0x3c>)
 8001c8e:	2140      	movs	r1, #64	; 0x40
 8001c90:	430a      	orrs	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c94:	2003      	movs	r0, #3
 8001c96:	f000 f811 	bl	8001cbc <HAL_InitTick>
 8001c9a:	1e03      	subs	r3, r0, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001c9e:	1dfb      	adds	r3, r7, #7
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	701a      	strb	r2, [r3, #0]
 8001ca4:	e001      	b.n	8001caa <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ca6:	f7ff fd73 	bl	8001790 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001caa:	1dfb      	adds	r3, r7, #7
 8001cac:	781b      	ldrb	r3, [r3, #0]
}
 8001cae:	0018      	movs	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b002      	add	sp, #8
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	40022000 	.word	0x40022000

08001cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc4:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <HAL_InitTick+0x5c>)
 8001cc6:	681c      	ldr	r4, [r3, #0]
 8001cc8:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <HAL_InitTick+0x60>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	0019      	movs	r1, r3
 8001cce:	23fa      	movs	r3, #250	; 0xfa
 8001cd0:	0098      	lsls	r0, r3, #2
 8001cd2:	f7fe fa2b 	bl	800012c <__udivsi3>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	0019      	movs	r1, r3
 8001cda:	0020      	movs	r0, r4
 8001cdc:	f7fe fa26 	bl	800012c <__udivsi3>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f000 f92f 	bl	8001f46 <HAL_SYSTICK_Config>
 8001ce8:	1e03      	subs	r3, r0, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e00f      	b.n	8001d10 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d80b      	bhi.n	8001d0e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	425b      	negs	r3, r3
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f000 f8fc 	bl	8001efc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_InitTick+0x64>)
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e000      	b.n	8001d10 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
}
 8001d10:	0018      	movs	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	b003      	add	sp, #12
 8001d16:	bd90      	pop	{r4, r7, pc}
 8001d18:	20000118 	.word	0x20000118
 8001d1c:	20000120 	.word	0x20000120
 8001d20:	2000011c 	.word	0x2000011c

08001d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <HAL_IncTick+0x1c>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	001a      	movs	r2, r3
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_IncTick+0x20>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	18d2      	adds	r2, r2, r3
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <HAL_IncTick+0x20>)
 8001d36:	601a      	str	r2, [r3, #0]
}
 8001d38:	46c0      	nop			; (mov r8, r8)
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	20000120 	.word	0x20000120
 8001d44:	20000328 	.word	0x20000328

08001d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d4c:	4b02      	ldr	r3, [pc, #8]	; (8001d58 <HAL_GetTick+0x10>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	0018      	movs	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	20000328 	.word	0x20000328

08001d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d64:	f7ff fff0 	bl	8001d48 <HAL_GetTick>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	3301      	adds	r3, #1
 8001d74:	d005      	beq.n	8001d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d76:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <HAL_Delay+0x44>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	001a      	movs	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	189b      	adds	r3, r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	f7ff ffe0 	bl	8001d48 <HAL_GetTick>
 8001d88:	0002      	movs	r2, r0
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d8f7      	bhi.n	8001d84 <HAL_Delay+0x28>
  {
  }
}
 8001d94:	46c0      	nop			; (mov r8, r8)
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	b004      	add	sp, #16
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	20000120 	.word	0x20000120

08001da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	0002      	movs	r2, r0
 8001dac:	1dfb      	adds	r3, r7, #7
 8001dae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001db0:	1dfb      	adds	r3, r7, #7
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b7f      	cmp	r3, #127	; 0x7f
 8001db6:	d809      	bhi.n	8001dcc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db8:	1dfb      	adds	r3, r7, #7
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	001a      	movs	r2, r3
 8001dbe:	231f      	movs	r3, #31
 8001dc0:	401a      	ands	r2, r3
 8001dc2:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <__NVIC_EnableIRQ+0x30>)
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	4091      	lsls	r1, r2
 8001dc8:	000a      	movs	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]
  }
}
 8001dcc:	46c0      	nop			; (mov r8, r8)
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b002      	add	sp, #8
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	e000e100 	.word	0xe000e100

08001dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	0002      	movs	r2, r0
 8001de0:	6039      	str	r1, [r7, #0]
 8001de2:	1dfb      	adds	r3, r7, #7
 8001de4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001de6:	1dfb      	adds	r3, r7, #7
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b7f      	cmp	r3, #127	; 0x7f
 8001dec:	d828      	bhi.n	8001e40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dee:	4a2f      	ldr	r2, [pc, #188]	; (8001eac <__NVIC_SetPriority+0xd4>)
 8001df0:	1dfb      	adds	r3, r7, #7
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	b25b      	sxtb	r3, r3
 8001df6:	089b      	lsrs	r3, r3, #2
 8001df8:	33c0      	adds	r3, #192	; 0xc0
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	589b      	ldr	r3, [r3, r2]
 8001dfe:	1dfa      	adds	r2, r7, #7
 8001e00:	7812      	ldrb	r2, [r2, #0]
 8001e02:	0011      	movs	r1, r2
 8001e04:	2203      	movs	r2, #3
 8001e06:	400a      	ands	r2, r1
 8001e08:	00d2      	lsls	r2, r2, #3
 8001e0a:	21ff      	movs	r1, #255	; 0xff
 8001e0c:	4091      	lsls	r1, r2
 8001e0e:	000a      	movs	r2, r1
 8001e10:	43d2      	mvns	r2, r2
 8001e12:	401a      	ands	r2, r3
 8001e14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	019b      	lsls	r3, r3, #6
 8001e1a:	22ff      	movs	r2, #255	; 0xff
 8001e1c:	401a      	ands	r2, r3
 8001e1e:	1dfb      	adds	r3, r7, #7
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	0018      	movs	r0, r3
 8001e24:	2303      	movs	r3, #3
 8001e26:	4003      	ands	r3, r0
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e2c:	481f      	ldr	r0, [pc, #124]	; (8001eac <__NVIC_SetPriority+0xd4>)
 8001e2e:	1dfb      	adds	r3, r7, #7
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	b25b      	sxtb	r3, r3
 8001e34:	089b      	lsrs	r3, r3, #2
 8001e36:	430a      	orrs	r2, r1
 8001e38:	33c0      	adds	r3, #192	; 0xc0
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e3e:	e031      	b.n	8001ea4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e40:	4a1b      	ldr	r2, [pc, #108]	; (8001eb0 <__NVIC_SetPriority+0xd8>)
 8001e42:	1dfb      	adds	r3, r7, #7
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	0019      	movs	r1, r3
 8001e48:	230f      	movs	r3, #15
 8001e4a:	400b      	ands	r3, r1
 8001e4c:	3b08      	subs	r3, #8
 8001e4e:	089b      	lsrs	r3, r3, #2
 8001e50:	3306      	adds	r3, #6
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	18d3      	adds	r3, r2, r3
 8001e56:	3304      	adds	r3, #4
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	1dfa      	adds	r2, r7, #7
 8001e5c:	7812      	ldrb	r2, [r2, #0]
 8001e5e:	0011      	movs	r1, r2
 8001e60:	2203      	movs	r2, #3
 8001e62:	400a      	ands	r2, r1
 8001e64:	00d2      	lsls	r2, r2, #3
 8001e66:	21ff      	movs	r1, #255	; 0xff
 8001e68:	4091      	lsls	r1, r2
 8001e6a:	000a      	movs	r2, r1
 8001e6c:	43d2      	mvns	r2, r2
 8001e6e:	401a      	ands	r2, r3
 8001e70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	019b      	lsls	r3, r3, #6
 8001e76:	22ff      	movs	r2, #255	; 0xff
 8001e78:	401a      	ands	r2, r3
 8001e7a:	1dfb      	adds	r3, r7, #7
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	0018      	movs	r0, r3
 8001e80:	2303      	movs	r3, #3
 8001e82:	4003      	ands	r3, r0
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e88:	4809      	ldr	r0, [pc, #36]	; (8001eb0 <__NVIC_SetPriority+0xd8>)
 8001e8a:	1dfb      	adds	r3, r7, #7
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	001c      	movs	r4, r3
 8001e90:	230f      	movs	r3, #15
 8001e92:	4023      	ands	r3, r4
 8001e94:	3b08      	subs	r3, #8
 8001e96:	089b      	lsrs	r3, r3, #2
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	3306      	adds	r3, #6
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	18c3      	adds	r3, r0, r3
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	601a      	str	r2, [r3, #0]
}
 8001ea4:	46c0      	nop			; (mov r8, r8)
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	b003      	add	sp, #12
 8001eaa:	bd90      	pop	{r4, r7, pc}
 8001eac:	e000e100 	.word	0xe000e100
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	1e5a      	subs	r2, r3, #1
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	045b      	lsls	r3, r3, #17
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d301      	bcc.n	8001ecc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e010      	b.n	8001eee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <SysTick_Config+0x44>)
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	3a01      	subs	r2, #1
 8001ed2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	425b      	negs	r3, r3
 8001ed8:	2103      	movs	r1, #3
 8001eda:	0018      	movs	r0, r3
 8001edc:	f7ff ff7c 	bl	8001dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <SysTick_Config+0x44>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee6:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <SysTick_Config+0x44>)
 8001ee8:	2207      	movs	r2, #7
 8001eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	0018      	movs	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	b002      	add	sp, #8
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	e000e010 	.word	0xe000e010

08001efc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
 8001f06:	210f      	movs	r1, #15
 8001f08:	187b      	adds	r3, r7, r1
 8001f0a:	1c02      	adds	r2, r0, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	187b      	adds	r3, r7, r1
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	b25b      	sxtb	r3, r3
 8001f16:	0011      	movs	r1, r2
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f7ff ff5d 	bl	8001dd8 <__NVIC_SetPriority>
}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	46bd      	mov	sp, r7
 8001f22:	b004      	add	sp, #16
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	1dfb      	adds	r3, r7, #7
 8001f30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f32:	1dfb      	adds	r3, r7, #7
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	b25b      	sxtb	r3, r3
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f7ff ff33 	bl	8001da4 <__NVIC_EnableIRQ>
}
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b002      	add	sp, #8
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	0018      	movs	r0, r3
 8001f52:	f7ff ffaf 	bl	8001eb4 <SysTick_Config>
 8001f56:	0003      	movs	r3, r0
}
 8001f58:	0018      	movs	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b002      	add	sp, #8
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f76:	e149      	b.n	800220c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	4091      	lsls	r1, r2
 8001f82:	000a      	movs	r2, r1
 8001f84:	4013      	ands	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d100      	bne.n	8001f90 <HAL_GPIO_Init+0x30>
 8001f8e:	e13a      	b.n	8002206 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2203      	movs	r2, #3
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d005      	beq.n	8001fa8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d130      	bne.n	800200a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	409a      	lsls	r2, r3
 8001fb6:	0013      	movs	r3, r2
 8001fb8:	43da      	mvns	r2, r3
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	409a      	lsls	r2, r3
 8001fca:	0013      	movs	r3, r2
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fde:	2201      	movs	r2, #1
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	409a      	lsls	r2, r3
 8001fe4:	0013      	movs	r3, r2
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4013      	ands	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	091b      	lsrs	r3, r3, #4
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	0013      	movs	r3, r2
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2203      	movs	r2, #3
 8002010:	4013      	ands	r3, r2
 8002012:	2b03      	cmp	r3, #3
 8002014:	d017      	beq.n	8002046 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	2203      	movs	r2, #3
 8002022:	409a      	lsls	r2, r3
 8002024:	0013      	movs	r3, r2
 8002026:	43da      	mvns	r2, r3
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	4013      	ands	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	409a      	lsls	r2, r3
 8002038:	0013      	movs	r3, r2
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2203      	movs	r2, #3
 800204c:	4013      	ands	r3, r2
 800204e:	2b02      	cmp	r3, #2
 8002050:	d123      	bne.n	800209a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	08da      	lsrs	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3208      	adds	r2, #8
 800205a:	0092      	lsls	r2, r2, #2
 800205c:	58d3      	ldr	r3, [r2, r3]
 800205e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2207      	movs	r2, #7
 8002064:	4013      	ands	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	220f      	movs	r2, #15
 800206a:	409a      	lsls	r2, r3
 800206c:	0013      	movs	r3, r2
 800206e:	43da      	mvns	r2, r3
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	691a      	ldr	r2, [r3, #16]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2107      	movs	r1, #7
 800207e:	400b      	ands	r3, r1
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	409a      	lsls	r2, r3
 8002084:	0013      	movs	r3, r2
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	08da      	lsrs	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3208      	adds	r2, #8
 8002094:	0092      	lsls	r2, r2, #2
 8002096:	6939      	ldr	r1, [r7, #16]
 8002098:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	2203      	movs	r2, #3
 80020a6:	409a      	lsls	r2, r3
 80020a8:	0013      	movs	r3, r2
 80020aa:	43da      	mvns	r2, r3
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2203      	movs	r2, #3
 80020b8:	401a      	ands	r2, r3
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	409a      	lsls	r2, r3
 80020c0:	0013      	movs	r3, r2
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	23c0      	movs	r3, #192	; 0xc0
 80020d4:	029b      	lsls	r3, r3, #10
 80020d6:	4013      	ands	r3, r2
 80020d8:	d100      	bne.n	80020dc <HAL_GPIO_Init+0x17c>
 80020da:	e094      	b.n	8002206 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020dc:	4b51      	ldr	r3, [pc, #324]	; (8002224 <HAL_GPIO_Init+0x2c4>)
 80020de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020e0:	4b50      	ldr	r3, [pc, #320]	; (8002224 <HAL_GPIO_Init+0x2c4>)
 80020e2:	2101      	movs	r1, #1
 80020e4:	430a      	orrs	r2, r1
 80020e6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80020e8:	4a4f      	ldr	r2, [pc, #316]	; (8002228 <HAL_GPIO_Init+0x2c8>)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	3302      	adds	r3, #2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	589b      	ldr	r3, [r3, r2]
 80020f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2203      	movs	r2, #3
 80020fa:	4013      	ands	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	220f      	movs	r2, #15
 8002100:	409a      	lsls	r2, r3
 8002102:	0013      	movs	r3, r2
 8002104:	43da      	mvns	r2, r3
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4013      	ands	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	23a0      	movs	r3, #160	; 0xa0
 8002110:	05db      	lsls	r3, r3, #23
 8002112:	429a      	cmp	r2, r3
 8002114:	d013      	beq.n	800213e <HAL_GPIO_Init+0x1de>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a44      	ldr	r2, [pc, #272]	; (800222c <HAL_GPIO_Init+0x2cc>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d00d      	beq.n	800213a <HAL_GPIO_Init+0x1da>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a43      	ldr	r2, [pc, #268]	; (8002230 <HAL_GPIO_Init+0x2d0>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d007      	beq.n	8002136 <HAL_GPIO_Init+0x1d6>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a42      	ldr	r2, [pc, #264]	; (8002234 <HAL_GPIO_Init+0x2d4>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d101      	bne.n	8002132 <HAL_GPIO_Init+0x1d2>
 800212e:	2305      	movs	r3, #5
 8002130:	e006      	b.n	8002140 <HAL_GPIO_Init+0x1e0>
 8002132:	2306      	movs	r3, #6
 8002134:	e004      	b.n	8002140 <HAL_GPIO_Init+0x1e0>
 8002136:	2302      	movs	r3, #2
 8002138:	e002      	b.n	8002140 <HAL_GPIO_Init+0x1e0>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <HAL_GPIO_Init+0x1e0>
 800213e:	2300      	movs	r3, #0
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	2103      	movs	r1, #3
 8002144:	400a      	ands	r2, r1
 8002146:	0092      	lsls	r2, r2, #2
 8002148:	4093      	lsls	r3, r2
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002150:	4935      	ldr	r1, [pc, #212]	; (8002228 <HAL_GPIO_Init+0x2c8>)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	089b      	lsrs	r3, r3, #2
 8002156:	3302      	adds	r3, #2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800215e:	4b36      	ldr	r3, [pc, #216]	; (8002238 <HAL_GPIO_Init+0x2d8>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	43da      	mvns	r2, r3
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4013      	ands	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	035b      	lsls	r3, r3, #13
 8002176:	4013      	ands	r3, r2
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4313      	orrs	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002182:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <HAL_GPIO_Init+0x2d8>)
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002188:	4b2b      	ldr	r3, [pc, #172]	; (8002238 <HAL_GPIO_Init+0x2d8>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	43da      	mvns	r2, r3
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	039b      	lsls	r3, r3, #14
 80021a0:	4013      	ands	r3, r2
 80021a2:	d003      	beq.n	80021ac <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021ac:	4b22      	ldr	r3, [pc, #136]	; (8002238 <HAL_GPIO_Init+0x2d8>)
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80021b2:	4b21      	ldr	r3, [pc, #132]	; (8002238 <HAL_GPIO_Init+0x2d8>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	43da      	mvns	r2, r3
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4013      	ands	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	029b      	lsls	r3, r3, #10
 80021ca:	4013      	ands	r3, r2
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021d6:	4b18      	ldr	r3, [pc, #96]	; (8002238 <HAL_GPIO_Init+0x2d8>)
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021dc:	4b16      	ldr	r3, [pc, #88]	; (8002238 <HAL_GPIO_Init+0x2d8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	43da      	mvns	r2, r3
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	025b      	lsls	r3, r3, #9
 80021f4:	4013      	ands	r3, r2
 80021f6:	d003      	beq.n	8002200 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002200:	4b0d      	ldr	r3, [pc, #52]	; (8002238 <HAL_GPIO_Init+0x2d8>)
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	3301      	adds	r3, #1
 800220a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	40da      	lsrs	r2, r3
 8002214:	1e13      	subs	r3, r2, #0
 8002216:	d000      	beq.n	800221a <HAL_GPIO_Init+0x2ba>
 8002218:	e6ae      	b.n	8001f78 <HAL_GPIO_Init+0x18>
  }
}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	46c0      	nop			; (mov r8, r8)
 800221e:	46bd      	mov	sp, r7
 8002220:	b006      	add	sp, #24
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	40010000 	.word	0x40010000
 800222c:	50000400 	.word	0x50000400
 8002230:	50000800 	.word	0x50000800
 8002234:	50001c00 	.word	0x50001c00
 8002238:	40010400 	.word	0x40010400

0800223c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	000a      	movs	r2, r1
 8002246:	1cbb      	adds	r3, r7, #2
 8002248:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	1cba      	adds	r2, r7, #2
 8002250:	8812      	ldrh	r2, [r2, #0]
 8002252:	4013      	ands	r3, r2
 8002254:	d004      	beq.n	8002260 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002256:	230f      	movs	r3, #15
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	2201      	movs	r2, #1
 800225c:	701a      	strb	r2, [r3, #0]
 800225e:	e003      	b.n	8002268 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002260:	230f      	movs	r3, #15
 8002262:	18fb      	adds	r3, r7, r3
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002268:	230f      	movs	r3, #15
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	781b      	ldrb	r3, [r3, #0]
}
 800226e:	0018      	movs	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	b004      	add	sp, #16
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	0008      	movs	r0, r1
 8002280:	0011      	movs	r1, r2
 8002282:	1cbb      	adds	r3, r7, #2
 8002284:	1c02      	adds	r2, r0, #0
 8002286:	801a      	strh	r2, [r3, #0]
 8002288:	1c7b      	adds	r3, r7, #1
 800228a:	1c0a      	adds	r2, r1, #0
 800228c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800228e:	1c7b      	adds	r3, r7, #1
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d004      	beq.n	80022a0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002296:	1cbb      	adds	r3, r7, #2
 8002298:	881a      	ldrh	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800229e:	e003      	b.n	80022a8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80022a0:	1cbb      	adds	r3, r7, #2
 80022a2:	881a      	ldrh	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022a8:	46c0      	nop			; (mov r8, r8)
 80022aa:	46bd      	mov	sp, r7
 80022ac:	b002      	add	sp, #8
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	0002      	movs	r2, r0
 80022b8:	1dbb      	adds	r3, r7, #6
 80022ba:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022bc:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	1dba      	adds	r2, r7, #6
 80022c2:	8812      	ldrh	r2, [r2, #0]
 80022c4:	4013      	ands	r3, r2
 80022c6:	d008      	beq.n	80022da <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80022ca:	1dba      	adds	r2, r7, #6
 80022cc:	8812      	ldrh	r2, [r2, #0]
 80022ce:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022d0:	1dbb      	adds	r3, r7, #6
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	0018      	movs	r0, r3
 80022d6:	f000 f807 	bl	80022e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	46bd      	mov	sp, r7
 80022de:	b002      	add	sp, #8
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	40010400 	.word	0x40010400

080022e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	0002      	movs	r2, r0
 80022f0:	1dbb      	adds	r3, r7, #6
 80022f2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022f4:	46c0      	nop			; (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b002      	add	sp, #8
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e082      	b.n	8002414 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2241      	movs	r2, #65	; 0x41
 8002312:	5c9b      	ldrb	r3, [r3, r2]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d107      	bne.n	800232a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2240      	movs	r2, #64	; 0x40
 800231e:	2100      	movs	r1, #0
 8002320:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	0018      	movs	r0, r3
 8002326:	f7ff fa47 	bl	80017b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2241      	movs	r2, #65	; 0x41
 800232e:	2124      	movs	r1, #36	; 0x24
 8002330:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2101      	movs	r1, #1
 800233e:	438a      	bics	r2, r1
 8002340:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4934      	ldr	r1, [pc, #208]	; (800241c <HAL_I2C_Init+0x120>)
 800234c:	400a      	ands	r2, r1
 800234e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4931      	ldr	r1, [pc, #196]	; (8002420 <HAL_I2C_Init+0x124>)
 800235c:	400a      	ands	r2, r1
 800235e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d108      	bne.n	800237a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2180      	movs	r1, #128	; 0x80
 8002372:	0209      	lsls	r1, r1, #8
 8002374:	430a      	orrs	r2, r1
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	e007      	b.n	800238a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2184      	movs	r1, #132	; 0x84
 8002384:	0209      	lsls	r1, r1, #8
 8002386:	430a      	orrs	r2, r1
 8002388:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d104      	bne.n	800239c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2280      	movs	r2, #128	; 0x80
 8002398:	0112      	lsls	r2, r2, #4
 800239a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	491f      	ldr	r1, [pc, #124]	; (8002424 <HAL_I2C_Init+0x128>)
 80023a8:	430a      	orrs	r2, r1
 80023aa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	491a      	ldr	r1, [pc, #104]	; (8002420 <HAL_I2C_Init+0x124>)
 80023b8:	400a      	ands	r2, r1
 80023ba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	431a      	orrs	r2, r3
 80023c6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69d9      	ldr	r1, [r3, #28]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1a      	ldr	r2, [r3, #32]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2101      	movs	r1, #1
 80023f2:	430a      	orrs	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2241      	movs	r2, #65	; 0x41
 8002400:	2120      	movs	r1, #32
 8002402:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2242      	movs	r2, #66	; 0x42
 800240e:	2100      	movs	r1, #0
 8002410:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	0018      	movs	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	b002      	add	sp, #8
 800241a:	bd80      	pop	{r7, pc}
 800241c:	f0ffffff 	.word	0xf0ffffff
 8002420:	ffff7fff 	.word	0xffff7fff
 8002424:	02008000 	.word	0x02008000

08002428 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2241      	movs	r2, #65	; 0x41
 8002436:	5c9b      	ldrb	r3, [r3, r2]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b20      	cmp	r3, #32
 800243c:	d138      	bne.n	80024b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2240      	movs	r2, #64	; 0x40
 8002442:	5c9b      	ldrb	r3, [r3, r2]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002448:	2302      	movs	r3, #2
 800244a:	e032      	b.n	80024b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2240      	movs	r2, #64	; 0x40
 8002450:	2101      	movs	r1, #1
 8002452:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2241      	movs	r2, #65	; 0x41
 8002458:	2124      	movs	r1, #36	; 0x24
 800245a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2101      	movs	r1, #1
 8002468:	438a      	bics	r2, r1
 800246a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4911      	ldr	r1, [pc, #68]	; (80024bc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002478:	400a      	ands	r2, r1
 800247a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6819      	ldr	r1, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2101      	movs	r1, #1
 8002498:	430a      	orrs	r2, r1
 800249a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2241      	movs	r2, #65	; 0x41
 80024a0:	2120      	movs	r1, #32
 80024a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2240      	movs	r2, #64	; 0x40
 80024a8:	2100      	movs	r1, #0
 80024aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	e000      	b.n	80024b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024b0:	2302      	movs	r3, #2
  }
}
 80024b2:	0018      	movs	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	b002      	add	sp, #8
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	ffffefff 	.word	0xffffefff

080024c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2241      	movs	r2, #65	; 0x41
 80024ce:	5c9b      	ldrb	r3, [r3, r2]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b20      	cmp	r3, #32
 80024d4:	d139      	bne.n	800254a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2240      	movs	r2, #64	; 0x40
 80024da:	5c9b      	ldrb	r3, [r3, r2]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e033      	b.n	800254c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2240      	movs	r2, #64	; 0x40
 80024e8:	2101      	movs	r1, #1
 80024ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2241      	movs	r2, #65	; 0x41
 80024f0:	2124      	movs	r1, #36	; 0x24
 80024f2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2101      	movs	r1, #1
 8002500:	438a      	bics	r2, r1
 8002502:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4a11      	ldr	r2, [pc, #68]	; (8002554 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002510:	4013      	ands	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	021b      	lsls	r3, r3, #8
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2101      	movs	r1, #1
 8002532:	430a      	orrs	r2, r1
 8002534:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2241      	movs	r2, #65	; 0x41
 800253a:	2120      	movs	r1, #32
 800253c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2240      	movs	r2, #64	; 0x40
 8002542:	2100      	movs	r1, #0
 8002544:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	e000      	b.n	800254c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800254a:	2302      	movs	r3, #2
  }
}
 800254c:	0018      	movs	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	b004      	add	sp, #16
 8002552:	bd80      	pop	{r7, pc}
 8002554:	fffff0ff 	.word	0xfffff0ff

08002558 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800255c:	4b04      	ldr	r3, [pc, #16]	; (8002570 <HAL_PWR_EnableBkUpAccess+0x18>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b03      	ldr	r3, [pc, #12]	; (8002570 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002562:	2180      	movs	r1, #128	; 0x80
 8002564:	0049      	lsls	r1, r1, #1
 8002566:	430a      	orrs	r2, r1
 8002568:	601a      	str	r2, [r3, #0]
}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40007000 	.word	0x40007000

08002574 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002574:	b5b0      	push	{r4, r5, r7, lr}
 8002576:	b08a      	sub	sp, #40	; 0x28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d102      	bne.n	8002588 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	f000 fb6c 	bl	8002c60 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002588:	4bc8      	ldr	r3, [pc, #800]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	220c      	movs	r2, #12
 800258e:	4013      	ands	r3, r2
 8002590:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002592:	4bc6      	ldr	r3, [pc, #792]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	2380      	movs	r3, #128	; 0x80
 8002598:	025b      	lsls	r3, r3, #9
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2201      	movs	r2, #1
 80025a4:	4013      	ands	r3, r2
 80025a6:	d100      	bne.n	80025aa <HAL_RCC_OscConfig+0x36>
 80025a8:	e07d      	b.n	80026a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d007      	beq.n	80025c0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	2b0c      	cmp	r3, #12
 80025b4:	d112      	bne.n	80025dc <HAL_RCC_OscConfig+0x68>
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	025b      	lsls	r3, r3, #9
 80025bc:	429a      	cmp	r2, r3
 80025be:	d10d      	bne.n	80025dc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c0:	4bba      	ldr	r3, [pc, #744]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	029b      	lsls	r3, r3, #10
 80025c8:	4013      	ands	r3, r2
 80025ca:	d100      	bne.n	80025ce <HAL_RCC_OscConfig+0x5a>
 80025cc:	e06a      	b.n	80026a4 <HAL_RCC_OscConfig+0x130>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d166      	bne.n	80026a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	f000 fb42 	bl	8002c60 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	025b      	lsls	r3, r3, #9
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d107      	bne.n	80025f8 <HAL_RCC_OscConfig+0x84>
 80025e8:	4bb0      	ldr	r3, [pc, #704]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4baf      	ldr	r3, [pc, #700]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 80025ee:	2180      	movs	r1, #128	; 0x80
 80025f0:	0249      	lsls	r1, r1, #9
 80025f2:	430a      	orrs	r2, r1
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	e027      	b.n	8002648 <HAL_RCC_OscConfig+0xd4>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	23a0      	movs	r3, #160	; 0xa0
 80025fe:	02db      	lsls	r3, r3, #11
 8002600:	429a      	cmp	r2, r3
 8002602:	d10e      	bne.n	8002622 <HAL_RCC_OscConfig+0xae>
 8002604:	4ba9      	ldr	r3, [pc, #676]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4ba8      	ldr	r3, [pc, #672]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 800260a:	2180      	movs	r1, #128	; 0x80
 800260c:	02c9      	lsls	r1, r1, #11
 800260e:	430a      	orrs	r2, r1
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	4ba6      	ldr	r3, [pc, #664]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	4ba5      	ldr	r3, [pc, #660]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 8002618:	2180      	movs	r1, #128	; 0x80
 800261a:	0249      	lsls	r1, r1, #9
 800261c:	430a      	orrs	r2, r1
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	e012      	b.n	8002648 <HAL_RCC_OscConfig+0xd4>
 8002622:	4ba2      	ldr	r3, [pc, #648]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	4ba1      	ldr	r3, [pc, #644]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 8002628:	49a1      	ldr	r1, [pc, #644]	; (80028b0 <HAL_RCC_OscConfig+0x33c>)
 800262a:	400a      	ands	r2, r1
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	4b9f      	ldr	r3, [pc, #636]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	025b      	lsls	r3, r3, #9
 8002636:	4013      	ands	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4b9b      	ldr	r3, [pc, #620]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4b9a      	ldr	r3, [pc, #616]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 8002642:	499c      	ldr	r1, [pc, #624]	; (80028b4 <HAL_RCC_OscConfig+0x340>)
 8002644:	400a      	ands	r2, r1
 8002646:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d014      	beq.n	800267a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7ff fb7a 	bl	8001d48 <HAL_GetTick>
 8002654:	0003      	movs	r3, r0
 8002656:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800265a:	f7ff fb75 	bl	8001d48 <HAL_GetTick>
 800265e:	0002      	movs	r2, r0
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b64      	cmp	r3, #100	; 0x64
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e2f9      	b.n	8002c60 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800266c:	4b8f      	ldr	r3, [pc, #572]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	029b      	lsls	r3, r3, #10
 8002674:	4013      	ands	r3, r2
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0xe6>
 8002678:	e015      	b.n	80026a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267a:	f7ff fb65 	bl	8001d48 <HAL_GetTick>
 800267e:	0003      	movs	r3, r0
 8002680:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002684:	f7ff fb60 	bl	8001d48 <HAL_GetTick>
 8002688:	0002      	movs	r2, r0
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e2e4      	b.n	8002c60 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002696:	4b85      	ldr	r3, [pc, #532]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	2380      	movs	r3, #128	; 0x80
 800269c:	029b      	lsls	r3, r3, #10
 800269e:	4013      	ands	r3, r2
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0x110>
 80026a2:	e000      	b.n	80026a6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2202      	movs	r2, #2
 80026ac:	4013      	ands	r3, r2
 80026ae:	d100      	bne.n	80026b2 <HAL_RCC_OscConfig+0x13e>
 80026b0:	e099      	b.n	80027e6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	2220      	movs	r2, #32
 80026bc:	4013      	ands	r3, r2
 80026be:	d009      	beq.n	80026d4 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80026c0:	4b7a      	ldr	r3, [pc, #488]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b79      	ldr	r3, [pc, #484]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 80026c6:	2120      	movs	r1, #32
 80026c8:	430a      	orrs	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	2220      	movs	r2, #32
 80026d0:	4393      	bics	r3, r2
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d005      	beq.n	80026e6 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	2b0c      	cmp	r3, #12
 80026de:	d13e      	bne.n	800275e <HAL_RCC_OscConfig+0x1ea>
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d13b      	bne.n	800275e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80026e6:	4b71      	ldr	r3, [pc, #452]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2204      	movs	r2, #4
 80026ec:	4013      	ands	r3, r2
 80026ee:	d004      	beq.n	80026fa <HAL_RCC_OscConfig+0x186>
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e2b2      	b.n	8002c60 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fa:	4b6c      	ldr	r3, [pc, #432]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4a6e      	ldr	r2, [pc, #440]	; (80028b8 <HAL_RCC_OscConfig+0x344>)
 8002700:	4013      	ands	r3, r2
 8002702:	0019      	movs	r1, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	021a      	lsls	r2, r3, #8
 800270a:	4b68      	ldr	r3, [pc, #416]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 800270c:	430a      	orrs	r2, r1
 800270e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002710:	4b66      	ldr	r3, [pc, #408]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2209      	movs	r2, #9
 8002716:	4393      	bics	r3, r2
 8002718:	0019      	movs	r1, r3
 800271a:	4b64      	ldr	r3, [pc, #400]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 800271c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271e:	430a      	orrs	r2, r1
 8002720:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002722:	f000 fbeb 	bl	8002efc <HAL_RCC_GetSysClockFreq>
 8002726:	0001      	movs	r1, r0
 8002728:	4b60      	ldr	r3, [pc, #384]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	220f      	movs	r2, #15
 8002730:	4013      	ands	r3, r2
 8002732:	4a62      	ldr	r2, [pc, #392]	; (80028bc <HAL_RCC_OscConfig+0x348>)
 8002734:	5cd3      	ldrb	r3, [r2, r3]
 8002736:	000a      	movs	r2, r1
 8002738:	40da      	lsrs	r2, r3
 800273a:	4b61      	ldr	r3, [pc, #388]	; (80028c0 <HAL_RCC_OscConfig+0x34c>)
 800273c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800273e:	4b61      	ldr	r3, [pc, #388]	; (80028c4 <HAL_RCC_OscConfig+0x350>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2513      	movs	r5, #19
 8002744:	197c      	adds	r4, r7, r5
 8002746:	0018      	movs	r0, r3
 8002748:	f7ff fab8 	bl	8001cbc <HAL_InitTick>
 800274c:	0003      	movs	r3, r0
 800274e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002750:	197b      	adds	r3, r7, r5
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d046      	beq.n	80027e6 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002758:	197b      	adds	r3, r7, r5
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	e280      	b.n	8002c60 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	2b00      	cmp	r3, #0
 8002762:	d027      	beq.n	80027b4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002764:	4b51      	ldr	r3, [pc, #324]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2209      	movs	r2, #9
 800276a:	4393      	bics	r3, r2
 800276c:	0019      	movs	r1, r3
 800276e:	4b4f      	ldr	r3, [pc, #316]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 8002770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002772:	430a      	orrs	r2, r1
 8002774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002776:	f7ff fae7 	bl	8001d48 <HAL_GetTick>
 800277a:	0003      	movs	r3, r0
 800277c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002780:	f7ff fae2 	bl	8001d48 <HAL_GetTick>
 8002784:	0002      	movs	r2, r0
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e266      	b.n	8002c60 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002792:	4b46      	ldr	r3, [pc, #280]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2204      	movs	r2, #4
 8002798:	4013      	ands	r3, r2
 800279a:	d0f1      	beq.n	8002780 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279c:	4b43      	ldr	r3, [pc, #268]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	4a45      	ldr	r2, [pc, #276]	; (80028b8 <HAL_RCC_OscConfig+0x344>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	0019      	movs	r1, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	021a      	lsls	r2, r3, #8
 80027ac:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 80027ae:	430a      	orrs	r2, r1
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	e018      	b.n	80027e6 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b4:	4b3d      	ldr	r3, [pc, #244]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4b3c      	ldr	r3, [pc, #240]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 80027ba:	2101      	movs	r1, #1
 80027bc:	438a      	bics	r2, r1
 80027be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c0:	f7ff fac2 	bl	8001d48 <HAL_GetTick>
 80027c4:	0003      	movs	r3, r0
 80027c6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ca:	f7ff fabd 	bl	8001d48 <HAL_GetTick>
 80027ce:	0002      	movs	r2, r0
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e241      	b.n	8002c60 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027dc:	4b33      	ldr	r3, [pc, #204]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2204      	movs	r2, #4
 80027e2:	4013      	ands	r3, r2
 80027e4:	d1f1      	bne.n	80027ca <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2210      	movs	r2, #16
 80027ec:	4013      	ands	r3, r2
 80027ee:	d100      	bne.n	80027f2 <HAL_RCC_OscConfig+0x27e>
 80027f0:	e0a1      	b.n	8002936 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d140      	bne.n	800287a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027f8:	4b2c      	ldr	r3, [pc, #176]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4013      	ands	r3, r2
 8002802:	d005      	beq.n	8002810 <HAL_RCC_OscConfig+0x29c>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e227      	b.n	8002c60 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002810:	4b26      	ldr	r3, [pc, #152]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	4a2c      	ldr	r2, [pc, #176]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 8002816:	4013      	ands	r3, r2
 8002818:	0019      	movs	r1, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1a      	ldr	r2, [r3, #32]
 800281e:	4b23      	ldr	r3, [pc, #140]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 8002820:	430a      	orrs	r2, r1
 8002822:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002824:	4b21      	ldr	r3, [pc, #132]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	021b      	lsls	r3, r3, #8
 800282a:	0a19      	lsrs	r1, r3, #8
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	061a      	lsls	r2, r3, #24
 8002832:	4b1e      	ldr	r3, [pc, #120]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 8002834:	430a      	orrs	r2, r1
 8002836:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	0b5b      	lsrs	r3, r3, #13
 800283e:	3301      	adds	r3, #1
 8002840:	2280      	movs	r2, #128	; 0x80
 8002842:	0212      	lsls	r2, r2, #8
 8002844:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002846:	4b19      	ldr	r3, [pc, #100]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	091b      	lsrs	r3, r3, #4
 800284c:	210f      	movs	r1, #15
 800284e:	400b      	ands	r3, r1
 8002850:	491a      	ldr	r1, [pc, #104]	; (80028bc <HAL_RCC_OscConfig+0x348>)
 8002852:	5ccb      	ldrb	r3, [r1, r3]
 8002854:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002856:	4b1a      	ldr	r3, [pc, #104]	; (80028c0 <HAL_RCC_OscConfig+0x34c>)
 8002858:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800285a:	4b1a      	ldr	r3, [pc, #104]	; (80028c4 <HAL_RCC_OscConfig+0x350>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2513      	movs	r5, #19
 8002860:	197c      	adds	r4, r7, r5
 8002862:	0018      	movs	r0, r3
 8002864:	f7ff fa2a 	bl	8001cbc <HAL_InitTick>
 8002868:	0003      	movs	r3, r0
 800286a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800286c:	197b      	adds	r3, r7, r5
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d060      	beq.n	8002936 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002874:	197b      	adds	r3, r7, r5
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	e1f2      	b.n	8002c60 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d03f      	beq.n	8002902 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	4b09      	ldr	r3, [pc, #36]	; (80028ac <HAL_RCC_OscConfig+0x338>)
 8002888:	2180      	movs	r1, #128	; 0x80
 800288a:	0049      	lsls	r1, r1, #1
 800288c:	430a      	orrs	r2, r1
 800288e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7ff fa5a 	bl	8001d48 <HAL_GetTick>
 8002894:	0003      	movs	r3, r0
 8002896:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002898:	e018      	b.n	80028cc <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800289a:	f7ff fa55 	bl	8001d48 <HAL_GetTick>
 800289e:	0002      	movs	r2, r0
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d911      	bls.n	80028cc <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e1d9      	b.n	8002c60 <HAL_RCC_OscConfig+0x6ec>
 80028ac:	40021000 	.word	0x40021000
 80028b0:	fffeffff 	.word	0xfffeffff
 80028b4:	fffbffff 	.word	0xfffbffff
 80028b8:	ffffe0ff 	.word	0xffffe0ff
 80028bc:	0800679c 	.word	0x0800679c
 80028c0:	20000118 	.word	0x20000118
 80028c4:	2000011c 	.word	0x2000011c
 80028c8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028cc:	4bc9      	ldr	r3, [pc, #804]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	2380      	movs	r3, #128	; 0x80
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4013      	ands	r3, r2
 80028d6:	d0e0      	beq.n	800289a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028d8:	4bc6      	ldr	r3, [pc, #792]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	4ac6      	ldr	r2, [pc, #792]	; (8002bf8 <HAL_RCC_OscConfig+0x684>)
 80028de:	4013      	ands	r3, r2
 80028e0:	0019      	movs	r1, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1a      	ldr	r2, [r3, #32]
 80028e6:	4bc3      	ldr	r3, [pc, #780]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 80028e8:	430a      	orrs	r2, r1
 80028ea:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028ec:	4bc1      	ldr	r3, [pc, #772]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	021b      	lsls	r3, r3, #8
 80028f2:	0a19      	lsrs	r1, r3, #8
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	061a      	lsls	r2, r3, #24
 80028fa:	4bbe      	ldr	r3, [pc, #760]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 80028fc:	430a      	orrs	r2, r1
 80028fe:	605a      	str	r2, [r3, #4]
 8002900:	e019      	b.n	8002936 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002902:	4bbc      	ldr	r3, [pc, #752]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	4bbb      	ldr	r3, [pc, #748]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002908:	49bc      	ldr	r1, [pc, #752]	; (8002bfc <HAL_RCC_OscConfig+0x688>)
 800290a:	400a      	ands	r2, r1
 800290c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290e:	f7ff fa1b 	bl	8001d48 <HAL_GetTick>
 8002912:	0003      	movs	r3, r0
 8002914:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002918:	f7ff fa16 	bl	8001d48 <HAL_GetTick>
 800291c:	0002      	movs	r2, r0
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e19a      	b.n	8002c60 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800292a:	4bb2      	ldr	r3, [pc, #712]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	2380      	movs	r3, #128	; 0x80
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4013      	ands	r3, r2
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2208      	movs	r2, #8
 800293c:	4013      	ands	r3, r2
 800293e:	d036      	beq.n	80029ae <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d019      	beq.n	800297c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002948:	4baa      	ldr	r3, [pc, #680]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 800294a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800294c:	4ba9      	ldr	r3, [pc, #676]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 800294e:	2101      	movs	r1, #1
 8002950:	430a      	orrs	r2, r1
 8002952:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002954:	f7ff f9f8 	bl	8001d48 <HAL_GetTick>
 8002958:	0003      	movs	r3, r0
 800295a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800295e:	f7ff f9f3 	bl	8001d48 <HAL_GetTick>
 8002962:	0002      	movs	r2, r0
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e177      	b.n	8002c60 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002970:	4ba0      	ldr	r3, [pc, #640]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002974:	2202      	movs	r2, #2
 8002976:	4013      	ands	r3, r2
 8002978:	d0f1      	beq.n	800295e <HAL_RCC_OscConfig+0x3ea>
 800297a:	e018      	b.n	80029ae <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800297c:	4b9d      	ldr	r3, [pc, #628]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 800297e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002980:	4b9c      	ldr	r3, [pc, #624]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002982:	2101      	movs	r1, #1
 8002984:	438a      	bics	r2, r1
 8002986:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002988:	f7ff f9de 	bl	8001d48 <HAL_GetTick>
 800298c:	0003      	movs	r3, r0
 800298e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002992:	f7ff f9d9 	bl	8001d48 <HAL_GetTick>
 8002996:	0002      	movs	r2, r0
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e15d      	b.n	8002c60 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029a4:	4b93      	ldr	r3, [pc, #588]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 80029a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a8:	2202      	movs	r2, #2
 80029aa:	4013      	ands	r3, r2
 80029ac:	d1f1      	bne.n	8002992 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2204      	movs	r2, #4
 80029b4:	4013      	ands	r3, r2
 80029b6:	d100      	bne.n	80029ba <HAL_RCC_OscConfig+0x446>
 80029b8:	e0ae      	b.n	8002b18 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ba:	2023      	movs	r0, #35	; 0x23
 80029bc:	183b      	adds	r3, r7, r0
 80029be:	2200      	movs	r2, #0
 80029c0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029c2:	4b8c      	ldr	r3, [pc, #560]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 80029c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	055b      	lsls	r3, r3, #21
 80029ca:	4013      	ands	r3, r2
 80029cc:	d109      	bne.n	80029e2 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ce:	4b89      	ldr	r3, [pc, #548]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 80029d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029d2:	4b88      	ldr	r3, [pc, #544]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 80029d4:	2180      	movs	r1, #128	; 0x80
 80029d6:	0549      	lsls	r1, r1, #21
 80029d8:	430a      	orrs	r2, r1
 80029da:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80029dc:	183b      	adds	r3, r7, r0
 80029de:	2201      	movs	r2, #1
 80029e0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e2:	4b87      	ldr	r3, [pc, #540]	; (8002c00 <HAL_RCC_OscConfig+0x68c>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4013      	ands	r3, r2
 80029ec:	d11a      	bne.n	8002a24 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ee:	4b84      	ldr	r3, [pc, #528]	; (8002c00 <HAL_RCC_OscConfig+0x68c>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	4b83      	ldr	r3, [pc, #524]	; (8002c00 <HAL_RCC_OscConfig+0x68c>)
 80029f4:	2180      	movs	r1, #128	; 0x80
 80029f6:	0049      	lsls	r1, r1, #1
 80029f8:	430a      	orrs	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029fc:	f7ff f9a4 	bl	8001d48 <HAL_GetTick>
 8002a00:	0003      	movs	r3, r0
 8002a02:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a06:	f7ff f99f 	bl	8001d48 <HAL_GetTick>
 8002a0a:	0002      	movs	r2, r0
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b64      	cmp	r3, #100	; 0x64
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e123      	b.n	8002c60 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a18:	4b79      	ldr	r3, [pc, #484]	; (8002c00 <HAL_RCC_OscConfig+0x68c>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	2380      	movs	r3, #128	; 0x80
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4013      	ands	r3, r2
 8002a22:	d0f0      	beq.n	8002a06 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d107      	bne.n	8002a40 <HAL_RCC_OscConfig+0x4cc>
 8002a30:	4b70      	ldr	r3, [pc, #448]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002a32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a34:	4b6f      	ldr	r3, [pc, #444]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002a36:	2180      	movs	r1, #128	; 0x80
 8002a38:	0049      	lsls	r1, r1, #1
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	651a      	str	r2, [r3, #80]	; 0x50
 8002a3e:	e031      	b.n	8002aa4 <HAL_RCC_OscConfig+0x530>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10c      	bne.n	8002a62 <HAL_RCC_OscConfig+0x4ee>
 8002a48:	4b6a      	ldr	r3, [pc, #424]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002a4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a4c:	4b69      	ldr	r3, [pc, #420]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002a4e:	496b      	ldr	r1, [pc, #428]	; (8002bfc <HAL_RCC_OscConfig+0x688>)
 8002a50:	400a      	ands	r2, r1
 8002a52:	651a      	str	r2, [r3, #80]	; 0x50
 8002a54:	4b67      	ldr	r3, [pc, #412]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002a56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a58:	4b66      	ldr	r3, [pc, #408]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002a5a:	496a      	ldr	r1, [pc, #424]	; (8002c04 <HAL_RCC_OscConfig+0x690>)
 8002a5c:	400a      	ands	r2, r1
 8002a5e:	651a      	str	r2, [r3, #80]	; 0x50
 8002a60:	e020      	b.n	8002aa4 <HAL_RCC_OscConfig+0x530>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	23a0      	movs	r3, #160	; 0xa0
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d10e      	bne.n	8002a8c <HAL_RCC_OscConfig+0x518>
 8002a6e:	4b61      	ldr	r3, [pc, #388]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002a70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a72:	4b60      	ldr	r3, [pc, #384]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002a74:	2180      	movs	r1, #128	; 0x80
 8002a76:	00c9      	lsls	r1, r1, #3
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	651a      	str	r2, [r3, #80]	; 0x50
 8002a7c:	4b5d      	ldr	r3, [pc, #372]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002a7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a80:	4b5c      	ldr	r3, [pc, #368]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002a82:	2180      	movs	r1, #128	; 0x80
 8002a84:	0049      	lsls	r1, r1, #1
 8002a86:	430a      	orrs	r2, r1
 8002a88:	651a      	str	r2, [r3, #80]	; 0x50
 8002a8a:	e00b      	b.n	8002aa4 <HAL_RCC_OscConfig+0x530>
 8002a8c:	4b59      	ldr	r3, [pc, #356]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002a8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a90:	4b58      	ldr	r3, [pc, #352]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002a92:	495a      	ldr	r1, [pc, #360]	; (8002bfc <HAL_RCC_OscConfig+0x688>)
 8002a94:	400a      	ands	r2, r1
 8002a96:	651a      	str	r2, [r3, #80]	; 0x50
 8002a98:	4b56      	ldr	r3, [pc, #344]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002a9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a9c:	4b55      	ldr	r3, [pc, #340]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002a9e:	4959      	ldr	r1, [pc, #356]	; (8002c04 <HAL_RCC_OscConfig+0x690>)
 8002aa0:	400a      	ands	r2, r1
 8002aa2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d015      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aac:	f7ff f94c 	bl	8001d48 <HAL_GetTick>
 8002ab0:	0003      	movs	r3, r0
 8002ab2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ab4:	e009      	b.n	8002aca <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab6:	f7ff f947 	bl	8001d48 <HAL_GetTick>
 8002aba:	0002      	movs	r2, r0
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	4a51      	ldr	r2, [pc, #324]	; (8002c08 <HAL_RCC_OscConfig+0x694>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e0ca      	b.n	8002c60 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aca:	4b4a      	ldr	r3, [pc, #296]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002acc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ace:	2380      	movs	r3, #128	; 0x80
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d0ef      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x542>
 8002ad6:	e014      	b.n	8002b02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad8:	f7ff f936 	bl	8001d48 <HAL_GetTick>
 8002adc:	0003      	movs	r3, r0
 8002ade:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ae0:	e009      	b.n	8002af6 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ae2:	f7ff f931 	bl	8001d48 <HAL_GetTick>
 8002ae6:	0002      	movs	r2, r0
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	4a46      	ldr	r2, [pc, #280]	; (8002c08 <HAL_RCC_OscConfig+0x694>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e0b4      	b.n	8002c60 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002af6:	4b3f      	ldr	r3, [pc, #252]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002af8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4013      	ands	r3, r2
 8002b00:	d1ef      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b02:	2323      	movs	r3, #35	; 0x23
 8002b04:	18fb      	adds	r3, r7, r3
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d105      	bne.n	8002b18 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b0c:	4b39      	ldr	r3, [pc, #228]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b10:	4b38      	ldr	r3, [pc, #224]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002b12:	493e      	ldr	r1, [pc, #248]	; (8002c0c <HAL_RCC_OscConfig+0x698>)
 8002b14:	400a      	ands	r2, r1
 8002b16:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d100      	bne.n	8002b22 <HAL_RCC_OscConfig+0x5ae>
 8002b20:	e09d      	b.n	8002c5e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	2b0c      	cmp	r3, #12
 8002b26:	d100      	bne.n	8002b2a <HAL_RCC_OscConfig+0x5b6>
 8002b28:	e076      	b.n	8002c18 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d145      	bne.n	8002bbe <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b32:	4b30      	ldr	r3, [pc, #192]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	4b2f      	ldr	r3, [pc, #188]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002b38:	4935      	ldr	r1, [pc, #212]	; (8002c10 <HAL_RCC_OscConfig+0x69c>)
 8002b3a:	400a      	ands	r2, r1
 8002b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3e:	f7ff f903 	bl	8001d48 <HAL_GetTick>
 8002b42:	0003      	movs	r3, r0
 8002b44:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b48:	f7ff f8fe 	bl	8001d48 <HAL_GetTick>
 8002b4c:	0002      	movs	r2, r0
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e082      	b.n	8002c60 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b5a:	4b26      	ldr	r3, [pc, #152]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	2380      	movs	r3, #128	; 0x80
 8002b60:	049b      	lsls	r3, r3, #18
 8002b62:	4013      	ands	r3, r2
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b66:	4b23      	ldr	r3, [pc, #140]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	4a2a      	ldr	r2, [pc, #168]	; (8002c14 <HAL_RCC_OscConfig+0x6a0>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	0019      	movs	r1, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	4b1c      	ldr	r3, [pc, #112]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002b82:	430a      	orrs	r2, r1
 8002b84:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b86:	4b1b      	ldr	r3, [pc, #108]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002b8c:	2180      	movs	r1, #128	; 0x80
 8002b8e:	0449      	lsls	r1, r1, #17
 8002b90:	430a      	orrs	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b94:	f7ff f8d8 	bl	8001d48 <HAL_GetTick>
 8002b98:	0003      	movs	r3, r0
 8002b9a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9e:	f7ff f8d3 	bl	8001d48 <HAL_GetTick>
 8002ba2:	0002      	movs	r2, r0
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e057      	b.n	8002c60 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002bb0:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	2380      	movs	r3, #128	; 0x80
 8002bb6:	049b      	lsls	r3, r3, #18
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d0f0      	beq.n	8002b9e <HAL_RCC_OscConfig+0x62a>
 8002bbc:	e04f      	b.n	8002c5e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bbe:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002bc4:	4912      	ldr	r1, [pc, #72]	; (8002c10 <HAL_RCC_OscConfig+0x69c>)
 8002bc6:	400a      	ands	r2, r1
 8002bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bca:	f7ff f8bd 	bl	8001d48 <HAL_GetTick>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd4:	f7ff f8b8 	bl	8001d48 <HAL_GetTick>
 8002bd8:	0002      	movs	r2, r0
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e03c      	b.n	8002c60 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002be6:	4b03      	ldr	r3, [pc, #12]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	049b      	lsls	r3, r3, #18
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x660>
 8002bf2:	e034      	b.n	8002c5e <HAL_RCC_OscConfig+0x6ea>
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	ffff1fff 	.word	0xffff1fff
 8002bfc:	fffffeff 	.word	0xfffffeff
 8002c00:	40007000 	.word	0x40007000
 8002c04:	fffffbff 	.word	0xfffffbff
 8002c08:	00001388 	.word	0x00001388
 8002c0c:	efffffff 	.word	0xefffffff
 8002c10:	feffffff 	.word	0xfeffffff
 8002c14:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e01d      	b.n	8002c60 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c24:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <HAL_RCC_OscConfig+0x6f4>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	2380      	movs	r3, #128	; 0x80
 8002c2e:	025b      	lsls	r3, r3, #9
 8002c30:	401a      	ands	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d10f      	bne.n	8002c5a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	23f0      	movs	r3, #240	; 0xf0
 8002c3e:	039b      	lsls	r3, r3, #14
 8002c40:	401a      	ands	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d107      	bne.n	8002c5a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	23c0      	movs	r3, #192	; 0xc0
 8002c4e:	041b      	lsls	r3, r3, #16
 8002c50:	401a      	ands	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d001      	beq.n	8002c5e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	0018      	movs	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	b00a      	add	sp, #40	; 0x28
 8002c66:	bdb0      	pop	{r4, r5, r7, pc}
 8002c68:	40021000 	.word	0x40021000

08002c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c6c:	b5b0      	push	{r4, r5, r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e128      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c80:	4b96      	ldr	r3, [pc, #600]	; (8002edc <HAL_RCC_ClockConfig+0x270>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2201      	movs	r2, #1
 8002c86:	4013      	ands	r3, r2
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d91e      	bls.n	8002ccc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8e:	4b93      	ldr	r3, [pc, #588]	; (8002edc <HAL_RCC_ClockConfig+0x270>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2201      	movs	r2, #1
 8002c94:	4393      	bics	r3, r2
 8002c96:	0019      	movs	r1, r3
 8002c98:	4b90      	ldr	r3, [pc, #576]	; (8002edc <HAL_RCC_ClockConfig+0x270>)
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ca0:	f7ff f852 	bl	8001d48 <HAL_GetTick>
 8002ca4:	0003      	movs	r3, r0
 8002ca6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca8:	e009      	b.n	8002cbe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002caa:	f7ff f84d 	bl	8001d48 <HAL_GetTick>
 8002cae:	0002      	movs	r2, r0
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	4a8a      	ldr	r2, [pc, #552]	; (8002ee0 <HAL_RCC_ClockConfig+0x274>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e109      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cbe:	4b87      	ldr	r3, [pc, #540]	; (8002edc <HAL_RCC_ClockConfig+0x270>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d1ee      	bne.n	8002caa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d009      	beq.n	8002cea <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd6:	4b83      	ldr	r3, [pc, #524]	; (8002ee4 <HAL_RCC_ClockConfig+0x278>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	22f0      	movs	r2, #240	; 0xf0
 8002cdc:	4393      	bics	r3, r2
 8002cde:	0019      	movs	r1, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	4b7f      	ldr	r3, [pc, #508]	; (8002ee4 <HAL_RCC_ClockConfig+0x278>)
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d100      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0x8a>
 8002cf4:	e089      	b.n	8002e0a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d107      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cfe:	4b79      	ldr	r3, [pc, #484]	; (8002ee4 <HAL_RCC_ClockConfig+0x278>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	2380      	movs	r3, #128	; 0x80
 8002d04:	029b      	lsls	r3, r3, #10
 8002d06:	4013      	ands	r3, r2
 8002d08:	d120      	bne.n	8002d4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e0e1      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d107      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d16:	4b73      	ldr	r3, [pc, #460]	; (8002ee4 <HAL_RCC_ClockConfig+0x278>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	2380      	movs	r3, #128	; 0x80
 8002d1c:	049b      	lsls	r3, r3, #18
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d114      	bne.n	8002d4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e0d5      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d106      	bne.n	8002d3c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d2e:	4b6d      	ldr	r3, [pc, #436]	; (8002ee4 <HAL_RCC_ClockConfig+0x278>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2204      	movs	r2, #4
 8002d34:	4013      	ands	r3, r2
 8002d36:	d109      	bne.n	8002d4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0ca      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d3c:	4b69      	ldr	r3, [pc, #420]	; (8002ee4 <HAL_RCC_ClockConfig+0x278>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4013      	ands	r3, r2
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0c2      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d4c:	4b65      	ldr	r3, [pc, #404]	; (8002ee4 <HAL_RCC_ClockConfig+0x278>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	2203      	movs	r2, #3
 8002d52:	4393      	bics	r3, r2
 8002d54:	0019      	movs	r1, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	4b62      	ldr	r3, [pc, #392]	; (8002ee4 <HAL_RCC_ClockConfig+0x278>)
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d60:	f7fe fff2 	bl	8001d48 <HAL_GetTick>
 8002d64:	0003      	movs	r3, r0
 8002d66:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d111      	bne.n	8002d94 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d70:	e009      	b.n	8002d86 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d72:	f7fe ffe9 	bl	8001d48 <HAL_GetTick>
 8002d76:	0002      	movs	r2, r0
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	4a58      	ldr	r2, [pc, #352]	; (8002ee0 <HAL_RCC_ClockConfig+0x274>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e0a5      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d86:	4b57      	ldr	r3, [pc, #348]	; (8002ee4 <HAL_RCC_ClockConfig+0x278>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	220c      	movs	r2, #12
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d1ef      	bne.n	8002d72 <HAL_RCC_ClockConfig+0x106>
 8002d92:	e03a      	b.n	8002e0a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d111      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d9c:	e009      	b.n	8002db2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d9e:	f7fe ffd3 	bl	8001d48 <HAL_GetTick>
 8002da2:	0002      	movs	r2, r0
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	4a4d      	ldr	r2, [pc, #308]	; (8002ee0 <HAL_RCC_ClockConfig+0x274>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e08f      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002db2:	4b4c      	ldr	r3, [pc, #304]	; (8002ee4 <HAL_RCC_ClockConfig+0x278>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	220c      	movs	r2, #12
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b0c      	cmp	r3, #12
 8002dbc:	d1ef      	bne.n	8002d9e <HAL_RCC_ClockConfig+0x132>
 8002dbe:	e024      	b.n	8002e0a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d11b      	bne.n	8002e00 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dc8:	e009      	b.n	8002dde <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dca:	f7fe ffbd 	bl	8001d48 <HAL_GetTick>
 8002dce:	0002      	movs	r2, r0
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	4a42      	ldr	r2, [pc, #264]	; (8002ee0 <HAL_RCC_ClockConfig+0x274>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e079      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dde:	4b41      	ldr	r3, [pc, #260]	; (8002ee4 <HAL_RCC_ClockConfig+0x278>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	220c      	movs	r2, #12
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d1ef      	bne.n	8002dca <HAL_RCC_ClockConfig+0x15e>
 8002dea:	e00e      	b.n	8002e0a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dec:	f7fe ffac 	bl	8001d48 <HAL_GetTick>
 8002df0:	0002      	movs	r2, r0
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	4a3a      	ldr	r2, [pc, #232]	; (8002ee0 <HAL_RCC_ClockConfig+0x274>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e068      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e00:	4b38      	ldr	r3, [pc, #224]	; (8002ee4 <HAL_RCC_ClockConfig+0x278>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	220c      	movs	r2, #12
 8002e06:	4013      	ands	r3, r2
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e0a:	4b34      	ldr	r3, [pc, #208]	; (8002edc <HAL_RCC_ClockConfig+0x270>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	4013      	ands	r3, r2
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d21e      	bcs.n	8002e56 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e18:	4b30      	ldr	r3, [pc, #192]	; (8002edc <HAL_RCC_ClockConfig+0x270>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	4393      	bics	r3, r2
 8002e20:	0019      	movs	r1, r3
 8002e22:	4b2e      	ldr	r3, [pc, #184]	; (8002edc <HAL_RCC_ClockConfig+0x270>)
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e2a:	f7fe ff8d 	bl	8001d48 <HAL_GetTick>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e32:	e009      	b.n	8002e48 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e34:	f7fe ff88 	bl	8001d48 <HAL_GetTick>
 8002e38:	0002      	movs	r2, r0
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	4a28      	ldr	r2, [pc, #160]	; (8002ee0 <HAL_RCC_ClockConfig+0x274>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e044      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e48:	4b24      	ldr	r3, [pc, #144]	; (8002edc <HAL_RCC_ClockConfig+0x270>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	4013      	ands	r3, r2
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d1ee      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d009      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e60:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <HAL_RCC_ClockConfig+0x278>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4a20      	ldr	r2, [pc, #128]	; (8002ee8 <HAL_RCC_ClockConfig+0x27c>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	0019      	movs	r1, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ee4 <HAL_RCC_ClockConfig+0x278>)
 8002e70:	430a      	orrs	r2, r1
 8002e72:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2208      	movs	r2, #8
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d00a      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e7e:	4b19      	ldr	r3, [pc, #100]	; (8002ee4 <HAL_RCC_ClockConfig+0x278>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	4a1a      	ldr	r2, [pc, #104]	; (8002eec <HAL_RCC_ClockConfig+0x280>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	0019      	movs	r1, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	00da      	lsls	r2, r3, #3
 8002e8e:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <HAL_RCC_ClockConfig+0x278>)
 8002e90:	430a      	orrs	r2, r1
 8002e92:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e94:	f000 f832 	bl	8002efc <HAL_RCC_GetSysClockFreq>
 8002e98:	0001      	movs	r1, r0
 8002e9a:	4b12      	ldr	r3, [pc, #72]	; (8002ee4 <HAL_RCC_ClockConfig+0x278>)
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	091b      	lsrs	r3, r3, #4
 8002ea0:	220f      	movs	r2, #15
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	4a12      	ldr	r2, [pc, #72]	; (8002ef0 <HAL_RCC_ClockConfig+0x284>)
 8002ea6:	5cd3      	ldrb	r3, [r2, r3]
 8002ea8:	000a      	movs	r2, r1
 8002eaa:	40da      	lsrs	r2, r3
 8002eac:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <HAL_RCC_ClockConfig+0x288>)
 8002eae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002eb0:	4b11      	ldr	r3, [pc, #68]	; (8002ef8 <HAL_RCC_ClockConfig+0x28c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	250b      	movs	r5, #11
 8002eb6:	197c      	adds	r4, r7, r5
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f7fe feff 	bl	8001cbc <HAL_InitTick>
 8002ebe:	0003      	movs	r3, r0
 8002ec0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002ec2:	197b      	adds	r3, r7, r5
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002eca:	197b      	adds	r3, r7, r5
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	e000      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b004      	add	sp, #16
 8002ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	40022000 	.word	0x40022000
 8002ee0:	00001388 	.word	0x00001388
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	fffff8ff 	.word	0xfffff8ff
 8002eec:	ffffc7ff 	.word	0xffffc7ff
 8002ef0:	0800679c 	.word	0x0800679c
 8002ef4:	20000118 	.word	0x20000118
 8002ef8:	2000011c 	.word	0x2000011c

08002efc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002efc:	b5b0      	push	{r4, r5, r7, lr}
 8002efe:	b08e      	sub	sp, #56	; 0x38
 8002f00:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002f02:	4b4c      	ldr	r3, [pc, #304]	; (8003034 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f0a:	230c      	movs	r3, #12
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b0c      	cmp	r3, #12
 8002f10:	d014      	beq.n	8002f3c <HAL_RCC_GetSysClockFreq+0x40>
 8002f12:	d900      	bls.n	8002f16 <HAL_RCC_GetSysClockFreq+0x1a>
 8002f14:	e07b      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x112>
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d002      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x24>
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d00b      	beq.n	8002f36 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f1e:	e076      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002f20:	4b44      	ldr	r3, [pc, #272]	; (8003034 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2210      	movs	r2, #16
 8002f26:	4013      	ands	r3, r2
 8002f28:	d002      	beq.n	8002f30 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002f2a:	4b43      	ldr	r3, [pc, #268]	; (8003038 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002f2c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002f2e:	e07c      	b.n	800302a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002f30:	4b42      	ldr	r3, [pc, #264]	; (800303c <HAL_RCC_GetSysClockFreq+0x140>)
 8002f32:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f34:	e079      	b.n	800302a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f36:	4b42      	ldr	r3, [pc, #264]	; (8003040 <HAL_RCC_GetSysClockFreq+0x144>)
 8002f38:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f3a:	e076      	b.n	800302a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3e:	0c9a      	lsrs	r2, r3, #18
 8002f40:	230f      	movs	r3, #15
 8002f42:	401a      	ands	r2, r3
 8002f44:	4b3f      	ldr	r3, [pc, #252]	; (8003044 <HAL_RCC_GetSysClockFreq+0x148>)
 8002f46:	5c9b      	ldrb	r3, [r3, r2]
 8002f48:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4c:	0d9a      	lsrs	r2, r3, #22
 8002f4e:	2303      	movs	r3, #3
 8002f50:	4013      	ands	r3, r2
 8002f52:	3301      	adds	r3, #1
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f56:	4b37      	ldr	r3, [pc, #220]	; (8003034 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	2380      	movs	r3, #128	; 0x80
 8002f5c:	025b      	lsls	r3, r3, #9
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d01a      	beq.n	8002f98 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f64:	61bb      	str	r3, [r7, #24]
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	4a35      	ldr	r2, [pc, #212]	; (8003040 <HAL_RCC_GetSysClockFreq+0x144>)
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	69b8      	ldr	r0, [r7, #24]
 8002f70:	69f9      	ldr	r1, [r7, #28]
 8002f72:	f7fd fa71 	bl	8000458 <__aeabi_lmul>
 8002f76:	0002      	movs	r2, r0
 8002f78:	000b      	movs	r3, r1
 8002f7a:	0010      	movs	r0, r2
 8002f7c:	0019      	movs	r1, r3
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f7fd fa45 	bl	8000418 <__aeabi_uldivmod>
 8002f8e:	0002      	movs	r2, r0
 8002f90:	000b      	movs	r3, r1
 8002f92:	0013      	movs	r3, r2
 8002f94:	637b      	str	r3, [r7, #52]	; 0x34
 8002f96:	e037      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002f98:	4b26      	ldr	r3, [pc, #152]	; (8003034 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2210      	movs	r2, #16
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d01a      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	4a23      	ldr	r2, [pc, #140]	; (8003038 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002fac:	2300      	movs	r3, #0
 8002fae:	68b8      	ldr	r0, [r7, #8]
 8002fb0:	68f9      	ldr	r1, [r7, #12]
 8002fb2:	f7fd fa51 	bl	8000458 <__aeabi_lmul>
 8002fb6:	0002      	movs	r2, r0
 8002fb8:	000b      	movs	r3, r1
 8002fba:	0010      	movs	r0, r2
 8002fbc:	0019      	movs	r1, r3
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	603b      	str	r3, [r7, #0]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	607b      	str	r3, [r7, #4]
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f7fd fa25 	bl	8000418 <__aeabi_uldivmod>
 8002fce:	0002      	movs	r2, r0
 8002fd0:	000b      	movs	r3, r1
 8002fd2:	0013      	movs	r3, r2
 8002fd4:	637b      	str	r3, [r7, #52]	; 0x34
 8002fd6:	e017      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fda:	0018      	movs	r0, r3
 8002fdc:	2300      	movs	r3, #0
 8002fde:	0019      	movs	r1, r3
 8002fe0:	4a16      	ldr	r2, [pc, #88]	; (800303c <HAL_RCC_GetSysClockFreq+0x140>)
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	f7fd fa38 	bl	8000458 <__aeabi_lmul>
 8002fe8:	0002      	movs	r2, r0
 8002fea:	000b      	movs	r3, r1
 8002fec:	0010      	movs	r0, r2
 8002fee:	0019      	movs	r1, r3
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	001c      	movs	r4, r3
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	001d      	movs	r5, r3
 8002ff8:	0022      	movs	r2, r4
 8002ffa:	002b      	movs	r3, r5
 8002ffc:	f7fd fa0c 	bl	8000418 <__aeabi_uldivmod>
 8003000:	0002      	movs	r2, r0
 8003002:	000b      	movs	r3, r1
 8003004:	0013      	movs	r3, r2
 8003006:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800300c:	e00d      	b.n	800302a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <HAL_RCC_GetSysClockFreq+0x138>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	0b5b      	lsrs	r3, r3, #13
 8003014:	2207      	movs	r2, #7
 8003016:	4013      	ands	r3, r2
 8003018:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	3301      	adds	r3, #1
 800301e:	2280      	movs	r2, #128	; 0x80
 8003020:	0212      	lsls	r2, r2, #8
 8003022:	409a      	lsls	r2, r3
 8003024:	0013      	movs	r3, r2
 8003026:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003028:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800302c:	0018      	movs	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	b00e      	add	sp, #56	; 0x38
 8003032:	bdb0      	pop	{r4, r5, r7, pc}
 8003034:	40021000 	.word	0x40021000
 8003038:	003d0900 	.word	0x003d0900
 800303c:	00f42400 	.word	0x00f42400
 8003040:	007a1200 	.word	0x007a1200
 8003044:	080067b4 	.word	0x080067b4

08003048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800304c:	4b02      	ldr	r3, [pc, #8]	; (8003058 <HAL_RCC_GetHCLKFreq+0x10>)
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	0018      	movs	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	20000118 	.word	0x20000118

0800305c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003060:	f7ff fff2 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8003064:	0001      	movs	r1, r0
 8003066:	4b06      	ldr	r3, [pc, #24]	; (8003080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	0a1b      	lsrs	r3, r3, #8
 800306c:	2207      	movs	r2, #7
 800306e:	4013      	ands	r3, r2
 8003070:	4a04      	ldr	r2, [pc, #16]	; (8003084 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003072:	5cd3      	ldrb	r3, [r2, r3]
 8003074:	40d9      	lsrs	r1, r3
 8003076:	000b      	movs	r3, r1
}
 8003078:	0018      	movs	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	40021000 	.word	0x40021000
 8003084:	080067ac 	.word	0x080067ac

08003088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800308c:	f7ff ffdc 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8003090:	0001      	movs	r1, r0
 8003092:	4b06      	ldr	r3, [pc, #24]	; (80030ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	0adb      	lsrs	r3, r3, #11
 8003098:	2207      	movs	r2, #7
 800309a:	4013      	ands	r3, r2
 800309c:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800309e:	5cd3      	ldrb	r3, [r2, r3]
 80030a0:	40d9      	lsrs	r1, r3
 80030a2:	000b      	movs	r3, r1
}
 80030a4:	0018      	movs	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	40021000 	.word	0x40021000
 80030b0:	080067ac 	.word	0x080067ac

080030b4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80030bc:	2017      	movs	r0, #23
 80030be:	183b      	adds	r3, r7, r0
 80030c0:	2200      	movs	r2, #0
 80030c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2220      	movs	r2, #32
 80030ca:	4013      	ands	r3, r2
 80030cc:	d100      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80030ce:	e0c7      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030d0:	4b84      	ldr	r3, [pc, #528]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030d4:	2380      	movs	r3, #128	; 0x80
 80030d6:	055b      	lsls	r3, r3, #21
 80030d8:	4013      	ands	r3, r2
 80030da:	d109      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030dc:	4b81      	ldr	r3, [pc, #516]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030e0:	4b80      	ldr	r3, [pc, #512]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030e2:	2180      	movs	r1, #128	; 0x80
 80030e4:	0549      	lsls	r1, r1, #21
 80030e6:	430a      	orrs	r2, r1
 80030e8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80030ea:	183b      	adds	r3, r7, r0
 80030ec:	2201      	movs	r2, #1
 80030ee:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f0:	4b7d      	ldr	r3, [pc, #500]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	2380      	movs	r3, #128	; 0x80
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4013      	ands	r3, r2
 80030fa:	d11a      	bne.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030fc:	4b7a      	ldr	r3, [pc, #488]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	4b79      	ldr	r3, [pc, #484]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003102:	2180      	movs	r1, #128	; 0x80
 8003104:	0049      	lsls	r1, r1, #1
 8003106:	430a      	orrs	r2, r1
 8003108:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800310a:	f7fe fe1d 	bl	8001d48 <HAL_GetTick>
 800310e:	0003      	movs	r3, r0
 8003110:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003112:	e008      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003114:	f7fe fe18 	bl	8001d48 <HAL_GetTick>
 8003118:	0002      	movs	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b64      	cmp	r3, #100	; 0x64
 8003120:	d901      	bls.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e0d9      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003126:	4b70      	ldr	r3, [pc, #448]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	4013      	ands	r3, r2
 8003130:	d0f0      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003132:	4b6c      	ldr	r3, [pc, #432]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	23c0      	movs	r3, #192	; 0xc0
 8003138:	039b      	lsls	r3, r3, #14
 800313a:	4013      	ands	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	23c0      	movs	r3, #192	; 0xc0
 8003144:	039b      	lsls	r3, r3, #14
 8003146:	4013      	ands	r3, r2
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	429a      	cmp	r2, r3
 800314c:	d013      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	23c0      	movs	r3, #192	; 0xc0
 8003154:	029b      	lsls	r3, r3, #10
 8003156:	401a      	ands	r2, r3
 8003158:	23c0      	movs	r3, #192	; 0xc0
 800315a:	029b      	lsls	r3, r3, #10
 800315c:	429a      	cmp	r2, r3
 800315e:	d10a      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003160:	4b60      	ldr	r3, [pc, #384]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	2380      	movs	r3, #128	; 0x80
 8003166:	029b      	lsls	r3, r3, #10
 8003168:	401a      	ands	r2, r3
 800316a:	2380      	movs	r3, #128	; 0x80
 800316c:	029b      	lsls	r3, r3, #10
 800316e:	429a      	cmp	r2, r3
 8003170:	d101      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e0b1      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003176:	4b5b      	ldr	r3, [pc, #364]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003178:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800317a:	23c0      	movs	r3, #192	; 0xc0
 800317c:	029b      	lsls	r3, r3, #10
 800317e:	4013      	ands	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d03b      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	23c0      	movs	r3, #192	; 0xc0
 800318e:	029b      	lsls	r3, r3, #10
 8003190:	4013      	ands	r3, r2
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	429a      	cmp	r2, r3
 8003196:	d033      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2220      	movs	r2, #32
 800319e:	4013      	ands	r3, r2
 80031a0:	d02e      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80031a2:	4b50      	ldr	r3, [pc, #320]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a6:	4a51      	ldr	r2, [pc, #324]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031ac:	4b4d      	ldr	r3, [pc, #308]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031b0:	4b4c      	ldr	r3, [pc, #304]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031b2:	2180      	movs	r1, #128	; 0x80
 80031b4:	0309      	lsls	r1, r1, #12
 80031b6:	430a      	orrs	r2, r1
 80031b8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031ba:	4b4a      	ldr	r3, [pc, #296]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031be:	4b49      	ldr	r3, [pc, #292]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031c0:	494b      	ldr	r1, [pc, #300]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80031c2:	400a      	ands	r2, r1
 80031c4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80031c6:	4b47      	ldr	r3, [pc, #284]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	2380      	movs	r3, #128	; 0x80
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	4013      	ands	r3, r2
 80031d4:	d014      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d6:	f7fe fdb7 	bl	8001d48 <HAL_GetTick>
 80031da:	0003      	movs	r3, r0
 80031dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031de:	e009      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e0:	f7fe fdb2 	bl	8001d48 <HAL_GetTick>
 80031e4:	0002      	movs	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	4a42      	ldr	r2, [pc, #264]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e072      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031f4:	4b3b      	ldr	r3, [pc, #236]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031f8:	2380      	movs	r3, #128	; 0x80
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4013      	ands	r3, r2
 80031fe:	d0ef      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2220      	movs	r2, #32
 8003206:	4013      	ands	r3, r2
 8003208:	d01f      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	23c0      	movs	r3, #192	; 0xc0
 8003210:	029b      	lsls	r3, r3, #10
 8003212:	401a      	ands	r2, r3
 8003214:	23c0      	movs	r3, #192	; 0xc0
 8003216:	029b      	lsls	r3, r3, #10
 8003218:	429a      	cmp	r2, r3
 800321a:	d10c      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800321c:	4b31      	ldr	r3, [pc, #196]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a35      	ldr	r2, [pc, #212]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003222:	4013      	ands	r3, r2
 8003224:	0019      	movs	r1, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	23c0      	movs	r3, #192	; 0xc0
 800322c:	039b      	lsls	r3, r3, #14
 800322e:	401a      	ands	r2, r3
 8003230:	4b2c      	ldr	r3, [pc, #176]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003232:	430a      	orrs	r2, r1
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003238:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	23c0      	movs	r3, #192	; 0xc0
 8003240:	029b      	lsls	r3, r3, #10
 8003242:	401a      	ands	r2, r3
 8003244:	4b27      	ldr	r3, [pc, #156]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003246:	430a      	orrs	r2, r1
 8003248:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800324a:	2317      	movs	r3, #23
 800324c:	18fb      	adds	r3, r7, r3
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d105      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003254:	4b23      	ldr	r3, [pc, #140]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003258:	4b22      	ldr	r3, [pc, #136]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800325a:	4928      	ldr	r1, [pc, #160]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800325c:	400a      	ands	r2, r1
 800325e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2202      	movs	r2, #2
 8003266:	4013      	ands	r3, r2
 8003268:	d009      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800326a:	4b1e      	ldr	r3, [pc, #120]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800326c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326e:	220c      	movs	r2, #12
 8003270:	4393      	bics	r3, r2
 8003272:	0019      	movs	r1, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	4b1a      	ldr	r3, [pc, #104]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800327a:	430a      	orrs	r2, r1
 800327c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2204      	movs	r2, #4
 8003284:	4013      	ands	r3, r2
 8003286:	d009      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003288:	4b16      	ldr	r3, [pc, #88]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800328a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328c:	4a1c      	ldr	r2, [pc, #112]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800328e:	4013      	ands	r3, r2
 8003290:	0019      	movs	r1, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003298:	430a      	orrs	r2, r1
 800329a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2208      	movs	r2, #8
 80032a2:	4013      	ands	r3, r2
 80032a4:	d009      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032a6:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032aa:	4a16      	ldr	r2, [pc, #88]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	0019      	movs	r1, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032b6:	430a      	orrs	r2, r1
 80032b8:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2280      	movs	r2, #128	; 0x80
 80032c0:	4013      	ands	r3, r2
 80032c2:	d009      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80032c4:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c8:	4a0f      	ldr	r2, [pc, #60]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	0019      	movs	r1, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032d4:	430a      	orrs	r2, r1
 80032d6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	0018      	movs	r0, r3
 80032dc:	46bd      	mov	sp, r7
 80032de:	b006      	add	sp, #24
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40007000 	.word	0x40007000
 80032ec:	fffcffff 	.word	0xfffcffff
 80032f0:	fff7ffff 	.word	0xfff7ffff
 80032f4:	00001388 	.word	0x00001388
 80032f8:	ffcfffff 	.word	0xffcfffff
 80032fc:	efffffff 	.word	0xefffffff
 8003300:	fffff3ff 	.word	0xfffff3ff
 8003304:	ffffcfff 	.word	0xffffcfff
 8003308:	fff3ffff 	.word	0xfff3ffff

0800330c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800330c:	b5b0      	push	{r4, r5, r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003314:	230f      	movs	r3, #15
 8003316:	18fb      	adds	r3, r7, r3
 8003318:	2201      	movs	r2, #1
 800331a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e088      	b.n	8003438 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2221      	movs	r2, #33	; 0x21
 800332a:	5c9b      	ldrb	r3, [r3, r2]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d107      	bne.n	8003342 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2220      	movs	r2, #32
 8003336:	2100      	movs	r1, #0
 8003338:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	0018      	movs	r0, r3
 800333e:	f7fe fa81 	bl	8001844 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2221      	movs	r2, #33	; 0x21
 8003346:	2102      	movs	r1, #2
 8003348:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	2210      	movs	r2, #16
 8003352:	4013      	ands	r3, r2
 8003354:	2b10      	cmp	r3, #16
 8003356:	d05f      	beq.n	8003418 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	22ca      	movs	r2, #202	; 0xca
 800335e:	625a      	str	r2, [r3, #36]	; 0x24
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2253      	movs	r2, #83	; 0x53
 8003366:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003368:	250f      	movs	r5, #15
 800336a:	197c      	adds	r4, r7, r5
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	0018      	movs	r0, r3
 8003370:	f000 fa7c 	bl	800386c <RTC_EnterInitMode>
 8003374:	0003      	movs	r3, r0
 8003376:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8003378:	0028      	movs	r0, r5
 800337a:	183b      	adds	r3, r7, r0
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d12c      	bne.n	80033dc <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	492c      	ldr	r1, [pc, #176]	; (8003440 <HAL_RTC_Init+0x134>)
 800338e:	400a      	ands	r2, r1
 8003390:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6899      	ldr	r1, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	68d2      	ldr	r2, [r2, #12]
 80033b8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6919      	ldr	r1, [r3, #16]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	041a      	lsls	r2, r3, #16
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80033ce:	183c      	adds	r4, r7, r0
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	0018      	movs	r0, r3
 80033d4:	f000 fa8e 	bl	80038f4 <RTC_ExitInitMode>
 80033d8:	0003      	movs	r3, r0
 80033da:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80033dc:	230f      	movs	r3, #15
 80033de:	18fb      	adds	r3, r7, r3
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d113      	bne.n	800340e <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2103      	movs	r1, #3
 80033f2:	438a      	bics	r2, r1
 80033f4:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	69da      	ldr	r2, [r3, #28]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	431a      	orrs	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	22ff      	movs	r2, #255	; 0xff
 8003414:	625a      	str	r2, [r3, #36]	; 0x24
 8003416:	e003      	b.n	8003420 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003418:	230f      	movs	r3, #15
 800341a:	18fb      	adds	r3, r7, r3
 800341c:	2200      	movs	r2, #0
 800341e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8003420:	230f      	movs	r3, #15
 8003422:	18fb      	adds	r3, r7, r3
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d103      	bne.n	8003432 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2221      	movs	r2, #33	; 0x21
 800342e:	2101      	movs	r1, #1
 8003430:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003432:	230f      	movs	r3, #15
 8003434:	18fb      	adds	r3, r7, r3
 8003436:	781b      	ldrb	r3, [r3, #0]
}
 8003438:	0018      	movs	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	b004      	add	sp, #16
 800343e:	bdb0      	pop	{r4, r5, r7, pc}
 8003440:	ff8fffbf 	.word	0xff8fffbf

08003444 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003444:	b5b0      	push	{r4, r5, r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	5c9b      	ldrb	r3, [r3, r2]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d101      	bne.n	8003462 <HAL_RTC_SetTime+0x1e>
 800345e:	2302      	movs	r3, #2
 8003460:	e092      	b.n	8003588 <HAL_RTC_SetTime+0x144>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2220      	movs	r2, #32
 8003466:	2101      	movs	r1, #1
 8003468:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2221      	movs	r2, #33	; 0x21
 800346e:	2102      	movs	r1, #2
 8003470:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d125      	bne.n	80034c4 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2240      	movs	r2, #64	; 0x40
 8003480:	4013      	ands	r3, r2
 8003482:	d102      	bne.n	800348a <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2200      	movs	r2, #0
 8003488:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	0018      	movs	r0, r3
 8003490:	f000 fa5a 	bl	8003948 <RTC_ByteToBcd2>
 8003494:	0003      	movs	r3, r0
 8003496:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	785b      	ldrb	r3, [r3, #1]
 800349c:	0018      	movs	r0, r3
 800349e:	f000 fa53 	bl	8003948 <RTC_ByteToBcd2>
 80034a2:	0003      	movs	r3, r0
 80034a4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80034a6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	789b      	ldrb	r3, [r3, #2]
 80034ac:	0018      	movs	r0, r3
 80034ae:	f000 fa4b 	bl	8003948 <RTC_ByteToBcd2>
 80034b2:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80034b4:	0022      	movs	r2, r4
 80034b6:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	78db      	ldrb	r3, [r3, #3]
 80034bc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80034be:	4313      	orrs	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	e017      	b.n	80034f4 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2240      	movs	r2, #64	; 0x40
 80034cc:	4013      	ands	r3, r2
 80034ce:	d102      	bne.n	80034d6 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2200      	movs	r2, #0
 80034d4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	785b      	ldrb	r3, [r3, #1]
 80034e0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80034e2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80034e8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	78db      	ldrb	r3, [r3, #3]
 80034ee:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	22ca      	movs	r2, #202	; 0xca
 80034fa:	625a      	str	r2, [r3, #36]	; 0x24
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2253      	movs	r2, #83	; 0x53
 8003502:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003504:	2513      	movs	r5, #19
 8003506:	197c      	adds	r4, r7, r5
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	0018      	movs	r0, r3
 800350c:	f000 f9ae 	bl	800386c <RTC_EnterInitMode>
 8003510:	0003      	movs	r3, r0
 8003512:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003514:	0028      	movs	r0, r5
 8003516:	183b      	adds	r3, r7, r0
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d120      	bne.n	8003560 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	491a      	ldr	r1, [pc, #104]	; (8003590 <HAL_RTC_SetTime+0x14c>)
 8003526:	400a      	ands	r2, r1
 8003528:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4917      	ldr	r1, [pc, #92]	; (8003594 <HAL_RTC_SetTime+0x150>)
 8003536:	400a      	ands	r2, r1
 8003538:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6899      	ldr	r1, [r3, #8]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	431a      	orrs	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003552:	183c      	adds	r4, r7, r0
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	0018      	movs	r0, r3
 8003558:	f000 f9cc 	bl	80038f4 <RTC_ExitInitMode>
 800355c:	0003      	movs	r3, r0
 800355e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8003560:	2313      	movs	r3, #19
 8003562:	18fb      	adds	r3, r7, r3
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d103      	bne.n	8003572 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2221      	movs	r2, #33	; 0x21
 800356e:	2101      	movs	r1, #1
 8003570:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	22ff      	movs	r2, #255	; 0xff
 8003578:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2220      	movs	r2, #32
 800357e:	2100      	movs	r1, #0
 8003580:	5499      	strb	r1, [r3, r2]

  return status;
 8003582:	2313      	movs	r3, #19
 8003584:	18fb      	adds	r3, r7, r3
 8003586:	781b      	ldrb	r3, [r3, #0]
}
 8003588:	0018      	movs	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	b006      	add	sp, #24
 800358e:	bdb0      	pop	{r4, r5, r7, pc}
 8003590:	007f7f7f 	.word	0x007f7f7f
 8003594:	fffbffff 	.word	0xfffbffff

08003598 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	045b      	lsls	r3, r3, #17
 80035ba:	0c5a      	lsrs	r2, r3, #17
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a22      	ldr	r2, [pc, #136]	; (8003650 <HAL_RTC_GetTime+0xb8>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	0c1b      	lsrs	r3, r3, #16
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	223f      	movs	r2, #63	; 0x3f
 80035d4:	4013      	ands	r3, r2
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	0a1b      	lsrs	r3, r3, #8
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	227f      	movs	r2, #127	; 0x7f
 80035e4:	4013      	ands	r3, r2
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	227f      	movs	r2, #127	; 0x7f
 80035f2:	4013      	ands	r3, r2
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	0d9b      	lsrs	r3, r3, #22
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2201      	movs	r2, #1
 8003602:	4013      	ands	r3, r2
 8003604:	b2da      	uxtb	r2, r3
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d11a      	bne.n	8003646 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	0018      	movs	r0, r3
 8003616:	f000 f9b8 	bl	800398a <RTC_Bcd2ToByte>
 800361a:	0003      	movs	r3, r0
 800361c:	001a      	movs	r2, r3
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	785b      	ldrb	r3, [r3, #1]
 8003626:	0018      	movs	r0, r3
 8003628:	f000 f9af 	bl	800398a <RTC_Bcd2ToByte>
 800362c:	0003      	movs	r3, r0
 800362e:	001a      	movs	r2, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	789b      	ldrb	r3, [r3, #2]
 8003638:	0018      	movs	r0, r3
 800363a:	f000 f9a6 	bl	800398a <RTC_Bcd2ToByte>
 800363e:	0003      	movs	r3, r0
 8003640:	001a      	movs	r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	0018      	movs	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	b006      	add	sp, #24
 800364e:	bd80      	pop	{r7, pc}
 8003650:	007f7f7f 	.word	0x007f7f7f

08003654 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003654:	b5b0      	push	{r4, r5, r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2220      	movs	r2, #32
 8003668:	5c9b      	ldrb	r3, [r3, r2]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <HAL_RTC_SetDate+0x1e>
 800366e:	2302      	movs	r3, #2
 8003670:	e07e      	b.n	8003770 <HAL_RTC_SetDate+0x11c>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	2101      	movs	r1, #1
 8003678:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2221      	movs	r2, #33	; 0x21
 800367e:	2102      	movs	r1, #2
 8003680:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10e      	bne.n	80036a6 <HAL_RTC_SetDate+0x52>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	785b      	ldrb	r3, [r3, #1]
 800368c:	001a      	movs	r2, r3
 800368e:	2310      	movs	r3, #16
 8003690:	4013      	ands	r3, r2
 8003692:	d008      	beq.n	80036a6 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	785b      	ldrb	r3, [r3, #1]
 8003698:	2210      	movs	r2, #16
 800369a:	4393      	bics	r3, r2
 800369c:	b2db      	uxtb	r3, r3
 800369e:	330a      	adds	r3, #10
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d11c      	bne.n	80036e6 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	78db      	ldrb	r3, [r3, #3]
 80036b0:	0018      	movs	r0, r3
 80036b2:	f000 f949 	bl	8003948 <RTC_ByteToBcd2>
 80036b6:	0003      	movs	r3, r0
 80036b8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	785b      	ldrb	r3, [r3, #1]
 80036be:	0018      	movs	r0, r3
 80036c0:	f000 f942 	bl	8003948 <RTC_ByteToBcd2>
 80036c4:	0003      	movs	r3, r0
 80036c6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80036c8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	789b      	ldrb	r3, [r3, #2]
 80036ce:	0018      	movs	r0, r3
 80036d0:	f000 f93a 	bl	8003948 <RTC_ByteToBcd2>
 80036d4:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80036d6:	0022      	movs	r2, r4
 80036d8:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80036e0:	4313      	orrs	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	e00e      	b.n	8003704 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	78db      	ldrb	r3, [r3, #3]
 80036ea:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	785b      	ldrb	r3, [r3, #1]
 80036f0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80036f2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80036f8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003700:	4313      	orrs	r3, r2
 8003702:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	22ca      	movs	r2, #202	; 0xca
 800370a:	625a      	str	r2, [r3, #36]	; 0x24
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2253      	movs	r2, #83	; 0x53
 8003712:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003714:	2513      	movs	r5, #19
 8003716:	197c      	adds	r4, r7, r5
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	0018      	movs	r0, r3
 800371c:	f000 f8a6 	bl	800386c <RTC_EnterInitMode>
 8003720:	0003      	movs	r3, r0
 8003722:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003724:	0028      	movs	r0, r5
 8003726:	183b      	adds	r3, r7, r0
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10c      	bne.n	8003748 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4910      	ldr	r1, [pc, #64]	; (8003778 <HAL_RTC_SetDate+0x124>)
 8003736:	400a      	ands	r2, r1
 8003738:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800373a:	183c      	adds	r4, r7, r0
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	0018      	movs	r0, r3
 8003740:	f000 f8d8 	bl	80038f4 <RTC_ExitInitMode>
 8003744:	0003      	movs	r3, r0
 8003746:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8003748:	2313      	movs	r3, #19
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d103      	bne.n	800375a <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2221      	movs	r2, #33	; 0x21
 8003756:	2101      	movs	r1, #1
 8003758:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	22ff      	movs	r2, #255	; 0xff
 8003760:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2220      	movs	r2, #32
 8003766:	2100      	movs	r1, #0
 8003768:	5499      	strb	r1, [r3, r2]

  return status;
 800376a:	2313      	movs	r3, #19
 800376c:	18fb      	adds	r3, r7, r3
 800376e:	781b      	ldrb	r3, [r3, #0]
}
 8003770:	0018      	movs	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	b006      	add	sp, #24
 8003776:	bdb0      	pop	{r4, r5, r7, pc}
 8003778:	00ffff3f 	.word	0x00ffff3f

0800377c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	4a21      	ldr	r2, [pc, #132]	; (8003818 <HAL_RTC_GetDate+0x9c>)
 8003794:	4013      	ands	r3, r2
 8003796:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	0c1b      	lsrs	r3, r3, #16
 800379c:	b2da      	uxtb	r2, r3
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	221f      	movs	r2, #31
 80037aa:	4013      	ands	r3, r2
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	223f      	movs	r2, #63	; 0x3f
 80037b8:	4013      	ands	r3, r2
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	0b5b      	lsrs	r3, r3, #13
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2207      	movs	r2, #7
 80037c8:	4013      	ands	r3, r2
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d11a      	bne.n	800380c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	78db      	ldrb	r3, [r3, #3]
 80037da:	0018      	movs	r0, r3
 80037dc:	f000 f8d5 	bl	800398a <RTC_Bcd2ToByte>
 80037e0:	0003      	movs	r3, r0
 80037e2:	001a      	movs	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	785b      	ldrb	r3, [r3, #1]
 80037ec:	0018      	movs	r0, r3
 80037ee:	f000 f8cc 	bl	800398a <RTC_Bcd2ToByte>
 80037f2:	0003      	movs	r3, r0
 80037f4:	001a      	movs	r2, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	789b      	ldrb	r3, [r3, #2]
 80037fe:	0018      	movs	r0, r3
 8003800:	f000 f8c3 	bl	800398a <RTC_Bcd2ToByte>
 8003804:	0003      	movs	r3, r0
 8003806:	001a      	movs	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	0018      	movs	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	b006      	add	sp, #24
 8003814:	bd80      	pop	{r7, pc}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	00ffff3f 	.word	0x00ffff3f

0800381c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a0e      	ldr	r2, [pc, #56]	; (8003868 <HAL_RTC_WaitForSynchro+0x4c>)
 800382e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003830:	f7fe fa8a 	bl	8001d48 <HAL_GetTick>
 8003834:	0003      	movs	r3, r0
 8003836:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003838:	e00a      	b.n	8003850 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800383a:	f7fe fa85 	bl	8001d48 <HAL_GetTick>
 800383e:	0002      	movs	r2, r0
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1ad2      	subs	r2, r2, r3
 8003844:	23fa      	movs	r3, #250	; 0xfa
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	429a      	cmp	r2, r3
 800384a:	d901      	bls.n	8003850 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e006      	b.n	800385e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	4013      	ands	r3, r2
 800385a:	d0ee      	beq.n	800383a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	0018      	movs	r0, r3
 8003860:	46bd      	mov	sp, r7
 8003862:	b004      	add	sp, #16
 8003864:	bd80      	pop	{r7, pc}
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	0001ff5f 	.word	0x0001ff5f

0800386c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003878:	230f      	movs	r3, #15
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2240      	movs	r2, #64	; 0x40
 8003888:	4013      	ands	r3, r2
 800388a:	d12c      	bne.n	80038e6 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2180      	movs	r1, #128	; 0x80
 8003898:	430a      	orrs	r2, r1
 800389a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800389c:	f7fe fa54 	bl	8001d48 <HAL_GetTick>
 80038a0:	0003      	movs	r3, r0
 80038a2:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80038a4:	e014      	b.n	80038d0 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80038a6:	f7fe fa4f 	bl	8001d48 <HAL_GetTick>
 80038aa:	0002      	movs	r2, r0
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	1ad2      	subs	r2, r2, r3
 80038b0:	200f      	movs	r0, #15
 80038b2:	183b      	adds	r3, r7, r0
 80038b4:	1839      	adds	r1, r7, r0
 80038b6:	7809      	ldrb	r1, [r1, #0]
 80038b8:	7019      	strb	r1, [r3, #0]
 80038ba:	23fa      	movs	r3, #250	; 0xfa
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	429a      	cmp	r2, r3
 80038c0:	d906      	bls.n	80038d0 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2221      	movs	r2, #33	; 0x21
 80038c6:	2104      	movs	r1, #4
 80038c8:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80038ca:	183b      	adds	r3, r7, r0
 80038cc:	2201      	movs	r2, #1
 80038ce:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	2240      	movs	r2, #64	; 0x40
 80038d8:	4013      	ands	r3, r2
 80038da:	d104      	bne.n	80038e6 <RTC_EnterInitMode+0x7a>
 80038dc:	230f      	movs	r3, #15
 80038de:	18fb      	adds	r3, r7, r3
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d1df      	bne.n	80038a6 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80038e6:	230f      	movs	r3, #15
 80038e8:	18fb      	adds	r3, r7, r3
 80038ea:	781b      	ldrb	r3, [r3, #0]
}
 80038ec:	0018      	movs	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	b004      	add	sp, #16
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80038f4:	b590      	push	{r4, r7, lr}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038fc:	240f      	movs	r4, #15
 80038fe:	193b      	adds	r3, r7, r4
 8003900:	2200      	movs	r2, #0
 8003902:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2180      	movs	r1, #128	; 0x80
 8003910:	438a      	bics	r2, r1
 8003912:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2220      	movs	r2, #32
 800391c:	4013      	ands	r3, r2
 800391e:	d10c      	bne.n	800393a <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	0018      	movs	r0, r3
 8003924:	f7ff ff7a 	bl	800381c <HAL_RTC_WaitForSynchro>
 8003928:	1e03      	subs	r3, r0, #0
 800392a:	d006      	beq.n	800393a <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2221      	movs	r2, #33	; 0x21
 8003930:	2104      	movs	r1, #4
 8003932:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8003934:	193b      	adds	r3, r7, r4
 8003936:	2201      	movs	r2, #1
 8003938:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800393a:	230f      	movs	r3, #15
 800393c:	18fb      	adds	r3, r7, r3
 800393e:	781b      	ldrb	r3, [r3, #0]
}
 8003940:	0018      	movs	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	b005      	add	sp, #20
 8003946:	bd90      	pop	{r4, r7, pc}

08003948 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	0002      	movs	r2, r0
 8003950:	1dfb      	adds	r3, r7, #7
 8003952:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003958:	e007      	b.n	800396a <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3301      	adds	r3, #1
 800395e:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003960:	1dfb      	adds	r3, r7, #7
 8003962:	1dfa      	adds	r2, r7, #7
 8003964:	7812      	ldrb	r2, [r2, #0]
 8003966:	3a0a      	subs	r2, #10
 8003968:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 800396a:	1dfb      	adds	r3, r7, #7
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b09      	cmp	r3, #9
 8003970:	d8f3      	bhi.n	800395a <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	b2da      	uxtb	r2, r3
 800397a:	1dfb      	adds	r3, r7, #7
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	4313      	orrs	r3, r2
 8003980:	b2db      	uxtb	r3, r3
}
 8003982:	0018      	movs	r0, r3
 8003984:	46bd      	mov	sp, r7
 8003986:	b004      	add	sp, #16
 8003988:	bd80      	pop	{r7, pc}

0800398a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b084      	sub	sp, #16
 800398e:	af00      	add	r7, sp, #0
 8003990:	0002      	movs	r2, r0
 8003992:	1dfb      	adds	r3, r7, #7
 8003994:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800399a:	1dfb      	adds	r3, r7, #7
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	001a      	movs	r2, r3
 80039a4:	0013      	movs	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	189b      	adds	r3, r3, r2
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	1dfb      	adds	r3, r7, #7
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	210f      	movs	r1, #15
 80039b8:	400b      	ands	r3, r1
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	18d3      	adds	r3, r2, r3
 80039be:	b2db      	uxtb	r3, r3
}
 80039c0:	0018      	movs	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b004      	add	sp, #16
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e032      	b.n	8003a40 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2239      	movs	r2, #57	; 0x39
 80039de:	5c9b      	ldrb	r3, [r3, r2]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d107      	bne.n	80039f6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2238      	movs	r2, #56	; 0x38
 80039ea:	2100      	movs	r1, #0
 80039ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	0018      	movs	r0, r3
 80039f2:	f7fd ff3f 	bl	8001874 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2239      	movs	r2, #57	; 0x39
 80039fa:	2102      	movs	r1, #2
 80039fc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3304      	adds	r3, #4
 8003a06:	0019      	movs	r1, r3
 8003a08:	0010      	movs	r0, r2
 8003a0a:	f000 fbaf 	bl	800416c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	223e      	movs	r2, #62	; 0x3e
 8003a12:	2101      	movs	r1, #1
 8003a14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	223a      	movs	r2, #58	; 0x3a
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	5499      	strb	r1, [r3, r2]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	223b      	movs	r2, #59	; 0x3b
 8003a22:	2101      	movs	r1, #1
 8003a24:	5499      	strb	r1, [r3, r2]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	223c      	movs	r2, #60	; 0x3c
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	5499      	strb	r1, [r3, r2]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	223d      	movs	r2, #61	; 0x3d
 8003a32:	2101      	movs	r1, #1
 8003a34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2239      	movs	r2, #57	; 0x39
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	0018      	movs	r0, r3
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b002      	add	sp, #8
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e032      	b.n	8003ac0 <HAL_TIM_OC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2239      	movs	r2, #57	; 0x39
 8003a5e:	5c9b      	ldrb	r3, [r3, r2]
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d107      	bne.n	8003a76 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2238      	movs	r2, #56	; 0x38
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	0018      	movs	r0, r3
 8003a72:	f000 f829 	bl	8003ac8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2239      	movs	r2, #57	; 0x39
 8003a7a:	2102      	movs	r1, #2
 8003a7c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3304      	adds	r3, #4
 8003a86:	0019      	movs	r1, r3
 8003a88:	0010      	movs	r0, r2
 8003a8a:	f000 fb6f 	bl	800416c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	223e      	movs	r2, #62	; 0x3e
 8003a92:	2101      	movs	r1, #1
 8003a94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	223a      	movs	r2, #58	; 0x3a
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	5499      	strb	r1, [r3, r2]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	223b      	movs	r2, #59	; 0x3b
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	5499      	strb	r1, [r3, r2]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	223c      	movs	r2, #60	; 0x3c
 8003aaa:	2101      	movs	r1, #1
 8003aac:	5499      	strb	r1, [r3, r2]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	223d      	movs	r2, #61	; 0x3d
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2239      	movs	r2, #57	; 0x39
 8003aba:	2101      	movs	r1, #1
 8003abc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b002      	add	sp, #8
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003ad0:	46c0      	nop			; (mov r8, r8)
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	b002      	add	sp, #8
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e032      	b.n	8003b50 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2239      	movs	r2, #57	; 0x39
 8003aee:	5c9b      	ldrb	r3, [r3, r2]
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d107      	bne.n	8003b06 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2238      	movs	r2, #56	; 0x38
 8003afa:	2100      	movs	r1, #0
 8003afc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	0018      	movs	r0, r3
 8003b02:	f000 f829 	bl	8003b58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2239      	movs	r2, #57	; 0x39
 8003b0a:	2102      	movs	r1, #2
 8003b0c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3304      	adds	r3, #4
 8003b16:	0019      	movs	r1, r3
 8003b18:	0010      	movs	r0, r2
 8003b1a:	f000 fb27 	bl	800416c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	223e      	movs	r2, #62	; 0x3e
 8003b22:	2101      	movs	r1, #1
 8003b24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	223a      	movs	r2, #58	; 0x3a
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	5499      	strb	r1, [r3, r2]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	223b      	movs	r2, #59	; 0x3b
 8003b32:	2101      	movs	r1, #1
 8003b34:	5499      	strb	r1, [r3, r2]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	223c      	movs	r2, #60	; 0x3c
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	5499      	strb	r1, [r3, r2]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	223d      	movs	r2, #61	; 0x3d
 8003b42:	2101      	movs	r1, #1
 8003b44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2239      	movs	r2, #57	; 0x39
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	0018      	movs	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	b002      	add	sp, #8
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b60:	46c0      	nop			; (mov r8, r8)
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b002      	add	sp, #8
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	2202      	movs	r2, #2
 8003b78:	4013      	ands	r3, r2
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d124      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	2202      	movs	r2, #2
 8003b86:	4013      	ands	r3, r2
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d11d      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2203      	movs	r2, #3
 8003b92:	4252      	negs	r2, r2
 8003b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	2203      	movs	r2, #3
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	d004      	beq.n	8003bb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	0018      	movs	r0, r3
 8003bac:	f000 fac6 	bl	800413c <HAL_TIM_IC_CaptureCallback>
 8003bb0:	e007      	b.n	8003bc2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f000 fab9 	bl	800412c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f000 fac5 	bl	800414c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	2204      	movs	r2, #4
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d125      	bne.n	8003c22 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	2204      	movs	r2, #4
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d11e      	bne.n	8003c22 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2205      	movs	r2, #5
 8003bea:	4252      	negs	r2, r2
 8003bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699a      	ldr	r2, [r3, #24]
 8003bfa:	23c0      	movs	r3, #192	; 0xc0
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4013      	ands	r3, r2
 8003c00:	d004      	beq.n	8003c0c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	0018      	movs	r0, r3
 8003c06:	f000 fa99 	bl	800413c <HAL_TIM_IC_CaptureCallback>
 8003c0a:	e007      	b.n	8003c1c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	0018      	movs	r0, r3
 8003c10:	f000 fa8c 	bl	800412c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	0018      	movs	r0, r3
 8003c18:	f000 fa98 	bl	800414c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	2208      	movs	r2, #8
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d124      	bne.n	8003c7a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	2208      	movs	r2, #8
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d11d      	bne.n	8003c7a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2209      	movs	r2, #9
 8003c44:	4252      	negs	r2, r2
 8003c46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2204      	movs	r2, #4
 8003c4c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	2203      	movs	r2, #3
 8003c56:	4013      	ands	r3, r2
 8003c58:	d004      	beq.n	8003c64 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f000 fa6d 	bl	800413c <HAL_TIM_IC_CaptureCallback>
 8003c62:	e007      	b.n	8003c74 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	0018      	movs	r0, r3
 8003c68:	f000 fa60 	bl	800412c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	0018      	movs	r0, r3
 8003c70:	f000 fa6c 	bl	800414c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	2210      	movs	r2, #16
 8003c82:	4013      	ands	r3, r2
 8003c84:	2b10      	cmp	r3, #16
 8003c86:	d125      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	2210      	movs	r2, #16
 8003c90:	4013      	ands	r3, r2
 8003c92:	2b10      	cmp	r3, #16
 8003c94:	d11e      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2211      	movs	r2, #17
 8003c9c:	4252      	negs	r2, r2
 8003c9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2208      	movs	r2, #8
 8003ca4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	69da      	ldr	r2, [r3, #28]
 8003cac:	23c0      	movs	r3, #192	; 0xc0
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	d004      	beq.n	8003cbe <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f000 fa40 	bl	800413c <HAL_TIM_IC_CaptureCallback>
 8003cbc:	e007      	b.n	8003cce <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	f000 fa33 	bl	800412c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	0018      	movs	r0, r3
 8003cca:	f000 fa3f 	bl	800414c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d10f      	bne.n	8003d02 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d108      	bne.n	8003d02 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	4252      	negs	r2, r2
 8003cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f000 fa0d 	bl	800411c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	2240      	movs	r2, #64	; 0x40
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b40      	cmp	r3, #64	; 0x40
 8003d0e:	d10f      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	2240      	movs	r2, #64	; 0x40
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2b40      	cmp	r3, #64	; 0x40
 8003d1c:	d108      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2241      	movs	r2, #65	; 0x41
 8003d24:	4252      	negs	r2, r2
 8003d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f000 fa16 	bl	800415c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d30:	46c0      	nop			; (mov r8, r8)
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b002      	add	sp, #8
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d44:	2317      	movs	r3, #23
 8003d46:	18fb      	adds	r3, r7, r3
 8003d48:	2200      	movs	r2, #0
 8003d4a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2238      	movs	r2, #56	; 0x38
 8003d50:	5c9b      	ldrb	r3, [r3, r2]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_TIM_OC_ConfigChannel+0x22>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e042      	b.n	8003de0 <HAL_TIM_OC_ConfigChannel+0xa8>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2238      	movs	r2, #56	; 0x38
 8003d5e:	2101      	movs	r1, #1
 8003d60:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b0c      	cmp	r3, #12
 8003d66:	d027      	beq.n	8003db8 <HAL_TIM_OC_ConfigChannel+0x80>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b0c      	cmp	r3, #12
 8003d6c:	d82c      	bhi.n	8003dc8 <HAL_TIM_OC_ConfigChannel+0x90>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d019      	beq.n	8003da8 <HAL_TIM_OC_ConfigChannel+0x70>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d826      	bhi.n	8003dc8 <HAL_TIM_OC_ConfigChannel+0x90>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <HAL_TIM_OC_ConfigChannel+0x50>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d008      	beq.n	8003d98 <HAL_TIM_OC_ConfigChannel+0x60>
 8003d86:	e01f      	b.n	8003dc8 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	0011      	movs	r1, r2
 8003d90:	0018      	movs	r0, r3
 8003d92:	f000 fa35 	bl	8004200 <TIM_OC1_SetConfig>
      break;
 8003d96:	e01c      	b.n	8003dd2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	0011      	movs	r1, r2
 8003da0:	0018      	movs	r0, r3
 8003da2:	f000 fa69 	bl	8004278 <TIM_OC2_SetConfig>
      break;
 8003da6:	e014      	b.n	8003dd2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	0011      	movs	r1, r2
 8003db0:	0018      	movs	r0, r3
 8003db2:	f000 faa3 	bl	80042fc <TIM_OC3_SetConfig>
      break;
 8003db6:	e00c      	b.n	8003dd2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	0011      	movs	r1, r2
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f000 fadb 	bl	800437c <TIM_OC4_SetConfig>
      break;
 8003dc6:	e004      	b.n	8003dd2 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8003dc8:	2317      	movs	r3, #23
 8003dca:	18fb      	adds	r3, r7, r3
 8003dcc:	2201      	movs	r2, #1
 8003dce:	701a      	strb	r2, [r3, #0]
      break;
 8003dd0:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2238      	movs	r2, #56	; 0x38
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	5499      	strb	r1, [r3, r2]

  return status;
 8003dda:	2317      	movs	r3, #23
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	781b      	ldrb	r3, [r3, #0]
}
 8003de0:	0018      	movs	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b006      	add	sp, #24
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003df4:	2317      	movs	r3, #23
 8003df6:	18fb      	adds	r3, r7, r3
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2238      	movs	r2, #56	; 0x38
 8003e00:	5c9b      	ldrb	r3, [r3, r2]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <HAL_TIM_PWM_ConfigChannel+0x22>
 8003e06:	2302      	movs	r3, #2
 8003e08:	e0ad      	b.n	8003f66 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2238      	movs	r2, #56	; 0x38
 8003e0e:	2101      	movs	r1, #1
 8003e10:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b0c      	cmp	r3, #12
 8003e16:	d100      	bne.n	8003e1a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003e18:	e076      	b.n	8003f08 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b0c      	cmp	r3, #12
 8003e1e:	d900      	bls.n	8003e22 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003e20:	e095      	b.n	8003f4e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d04e      	beq.n	8003ec6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d900      	bls.n	8003e30 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003e2e:	e08e      	b.n	8003f4e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_TIM_PWM_ConfigChannel+0x56>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d021      	beq.n	8003e80 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003e3c:	e087      	b.n	8003f4e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	0011      	movs	r1, r2
 8003e46:	0018      	movs	r0, r3
 8003e48:	f000 f9da 	bl	8004200 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699a      	ldr	r2, [r3, #24]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2108      	movs	r1, #8
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699a      	ldr	r2, [r3, #24]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2104      	movs	r1, #4
 8003e68:	438a      	bics	r2, r1
 8003e6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6999      	ldr	r1, [r3, #24]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	619a      	str	r2, [r3, #24]
      break;
 8003e7e:	e06b      	b.n	8003f58 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	0011      	movs	r1, r2
 8003e88:	0018      	movs	r0, r3
 8003e8a:	f000 f9f5 	bl	8004278 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	699a      	ldr	r2, [r3, #24]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2180      	movs	r1, #128	; 0x80
 8003e9a:	0109      	lsls	r1, r1, #4
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699a      	ldr	r2, [r3, #24]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4931      	ldr	r1, [pc, #196]	; (8003f70 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003eac:	400a      	ands	r2, r1
 8003eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6999      	ldr	r1, [r3, #24]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	021a      	lsls	r2, r3, #8
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	619a      	str	r2, [r3, #24]
      break;
 8003ec4:	e048      	b.n	8003f58 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	0011      	movs	r1, r2
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f000 fa14 	bl	80042fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	69da      	ldr	r2, [r3, #28]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2108      	movs	r1, #8
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69da      	ldr	r2, [r3, #28]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2104      	movs	r1, #4
 8003ef0:	438a      	bics	r2, r1
 8003ef2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	69d9      	ldr	r1, [r3, #28]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	61da      	str	r2, [r3, #28]
      break;
 8003f06:	e027      	b.n	8003f58 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	0011      	movs	r1, r2
 8003f10:	0018      	movs	r0, r3
 8003f12:	f000 fa33 	bl	800437c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	69da      	ldr	r2, [r3, #28]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2180      	movs	r1, #128	; 0x80
 8003f22:	0109      	lsls	r1, r1, #4
 8003f24:	430a      	orrs	r2, r1
 8003f26:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	69da      	ldr	r2, [r3, #28]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	490f      	ldr	r1, [pc, #60]	; (8003f70 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003f34:	400a      	ands	r2, r1
 8003f36:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	69d9      	ldr	r1, [r3, #28]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	021a      	lsls	r2, r3, #8
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	61da      	str	r2, [r3, #28]
      break;
 8003f4c:	e004      	b.n	8003f58 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003f4e:	2317      	movs	r3, #23
 8003f50:	18fb      	adds	r3, r7, r3
 8003f52:	2201      	movs	r2, #1
 8003f54:	701a      	strb	r2, [r3, #0]
      break;
 8003f56:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2238      	movs	r2, #56	; 0x38
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	5499      	strb	r1, [r3, r2]

  return status;
 8003f60:	2317      	movs	r3, #23
 8003f62:	18fb      	adds	r3, r7, r3
 8003f64:	781b      	ldrb	r3, [r3, #0]
}
 8003f66:	0018      	movs	r0, r3
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	b006      	add	sp, #24
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	46c0      	nop			; (mov r8, r8)
 8003f70:	fffffbff 	.word	0xfffffbff

08003f74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f7e:	230f      	movs	r3, #15
 8003f80:	18fb      	adds	r3, r7, r3
 8003f82:	2200      	movs	r2, #0
 8003f84:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2238      	movs	r2, #56	; 0x38
 8003f8a:	5c9b      	ldrb	r3, [r3, r2]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_TIM_ConfigClockSource+0x20>
 8003f90:	2302      	movs	r3, #2
 8003f92:	e0bc      	b.n	800410e <HAL_TIM_ConfigClockSource+0x19a>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2238      	movs	r2, #56	; 0x38
 8003f98:	2101      	movs	r1, #1
 8003f9a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2239      	movs	r2, #57	; 0x39
 8003fa0:	2102      	movs	r1, #2
 8003fa2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2277      	movs	r2, #119	; 0x77
 8003fb0:	4393      	bics	r3, r2
 8003fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4a58      	ldr	r2, [pc, #352]	; (8004118 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2280      	movs	r2, #128	; 0x80
 8003fca:	0192      	lsls	r2, r2, #6
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d040      	beq.n	8004052 <HAL_TIM_ConfigClockSource+0xde>
 8003fd0:	2280      	movs	r2, #128	; 0x80
 8003fd2:	0192      	lsls	r2, r2, #6
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d900      	bls.n	8003fda <HAL_TIM_ConfigClockSource+0x66>
 8003fd8:	e088      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x178>
 8003fda:	2280      	movs	r2, #128	; 0x80
 8003fdc:	0152      	lsls	r2, r2, #5
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d100      	bne.n	8003fe4 <HAL_TIM_ConfigClockSource+0x70>
 8003fe2:	e088      	b.n	80040f6 <HAL_TIM_ConfigClockSource+0x182>
 8003fe4:	2280      	movs	r2, #128	; 0x80
 8003fe6:	0152      	lsls	r2, r2, #5
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d900      	bls.n	8003fee <HAL_TIM_ConfigClockSource+0x7a>
 8003fec:	e07e      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x178>
 8003fee:	2b70      	cmp	r3, #112	; 0x70
 8003ff0:	d018      	beq.n	8004024 <HAL_TIM_ConfigClockSource+0xb0>
 8003ff2:	d900      	bls.n	8003ff6 <HAL_TIM_ConfigClockSource+0x82>
 8003ff4:	e07a      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x178>
 8003ff6:	2b60      	cmp	r3, #96	; 0x60
 8003ff8:	d04f      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x126>
 8003ffa:	d900      	bls.n	8003ffe <HAL_TIM_ConfigClockSource+0x8a>
 8003ffc:	e076      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x178>
 8003ffe:	2b50      	cmp	r3, #80	; 0x50
 8004000:	d03b      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x106>
 8004002:	d900      	bls.n	8004006 <HAL_TIM_ConfigClockSource+0x92>
 8004004:	e072      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x178>
 8004006:	2b40      	cmp	r3, #64	; 0x40
 8004008:	d057      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x146>
 800400a:	d900      	bls.n	800400e <HAL_TIM_ConfigClockSource+0x9a>
 800400c:	e06e      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x178>
 800400e:	2b30      	cmp	r3, #48	; 0x30
 8004010:	d063      	beq.n	80040da <HAL_TIM_ConfigClockSource+0x166>
 8004012:	d86b      	bhi.n	80040ec <HAL_TIM_ConfigClockSource+0x178>
 8004014:	2b20      	cmp	r3, #32
 8004016:	d060      	beq.n	80040da <HAL_TIM_ConfigClockSource+0x166>
 8004018:	d868      	bhi.n	80040ec <HAL_TIM_ConfigClockSource+0x178>
 800401a:	2b00      	cmp	r3, #0
 800401c:	d05d      	beq.n	80040da <HAL_TIM_ConfigClockSource+0x166>
 800401e:	2b10      	cmp	r3, #16
 8004020:	d05b      	beq.n	80040da <HAL_TIM_ConfigClockSource+0x166>
 8004022:	e063      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004034:	f000 fa62 	bl	80044fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2277      	movs	r2, #119	; 0x77
 8004044:	4313      	orrs	r3, r2
 8004046:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	609a      	str	r2, [r3, #8]
      break;
 8004050:	e052      	b.n	80040f8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004062:	f000 fa4b 	bl	80044fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2180      	movs	r1, #128	; 0x80
 8004072:	01c9      	lsls	r1, r1, #7
 8004074:	430a      	orrs	r2, r1
 8004076:	609a      	str	r2, [r3, #8]
      break;
 8004078:	e03e      	b.n	80040f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004086:	001a      	movs	r2, r3
 8004088:	f000 f9be 	bl	8004408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2150      	movs	r1, #80	; 0x50
 8004092:	0018      	movs	r0, r3
 8004094:	f000 fa18 	bl	80044c8 <TIM_ITRx_SetConfig>
      break;
 8004098:	e02e      	b.n	80040f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040a6:	001a      	movs	r2, r3
 80040a8:	f000 f9dc 	bl	8004464 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2160      	movs	r1, #96	; 0x60
 80040b2:	0018      	movs	r0, r3
 80040b4:	f000 fa08 	bl	80044c8 <TIM_ITRx_SetConfig>
      break;
 80040b8:	e01e      	b.n	80040f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040c6:	001a      	movs	r2, r3
 80040c8:	f000 f99e 	bl	8004408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2140      	movs	r1, #64	; 0x40
 80040d2:	0018      	movs	r0, r3
 80040d4:	f000 f9f8 	bl	80044c8 <TIM_ITRx_SetConfig>
      break;
 80040d8:	e00e      	b.n	80040f8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	0019      	movs	r1, r3
 80040e4:	0010      	movs	r0, r2
 80040e6:	f000 f9ef 	bl	80044c8 <TIM_ITRx_SetConfig>
      break;
 80040ea:	e005      	b.n	80040f8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80040ec:	230f      	movs	r3, #15
 80040ee:	18fb      	adds	r3, r7, r3
 80040f0:	2201      	movs	r2, #1
 80040f2:	701a      	strb	r2, [r3, #0]
      break;
 80040f4:	e000      	b.n	80040f8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80040f6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2239      	movs	r2, #57	; 0x39
 80040fc:	2101      	movs	r1, #1
 80040fe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2238      	movs	r2, #56	; 0x38
 8004104:	2100      	movs	r1, #0
 8004106:	5499      	strb	r1, [r3, r2]

  return status;
 8004108:	230f      	movs	r3, #15
 800410a:	18fb      	adds	r3, r7, r3
 800410c:	781b      	ldrb	r3, [r3, #0]
}
 800410e:	0018      	movs	r0, r3
 8004110:	46bd      	mov	sp, r7
 8004112:	b004      	add	sp, #16
 8004114:	bd80      	pop	{r7, pc}
 8004116:	46c0      	nop			; (mov r8, r8)
 8004118:	ffff00ff 	.word	0xffff00ff

0800411c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004124:	46c0      	nop			; (mov r8, r8)
 8004126:	46bd      	mov	sp, r7
 8004128:	b002      	add	sp, #8
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004134:	46c0      	nop			; (mov r8, r8)
 8004136:	46bd      	mov	sp, r7
 8004138:	b002      	add	sp, #8
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004144:	46c0      	nop			; (mov r8, r8)
 8004146:	46bd      	mov	sp, r7
 8004148:	b002      	add	sp, #8
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004154:	46c0      	nop			; (mov r8, r8)
 8004156:	46bd      	mov	sp, r7
 8004158:	b002      	add	sp, #8
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004164:	46c0      	nop			; (mov r8, r8)
 8004166:	46bd      	mov	sp, r7
 8004168:	b002      	add	sp, #8
 800416a:	bd80      	pop	{r7, pc}

0800416c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	2380      	movs	r3, #128	; 0x80
 8004180:	05db      	lsls	r3, r3, #23
 8004182:	429a      	cmp	r2, r3
 8004184:	d003      	beq.n	800418e <TIM_Base_SetConfig+0x22>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a1b      	ldr	r2, [pc, #108]	; (80041f8 <TIM_Base_SetConfig+0x8c>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d108      	bne.n	80041a0 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2270      	movs	r2, #112	; 0x70
 8004192:	4393      	bics	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	4313      	orrs	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	2380      	movs	r3, #128	; 0x80
 80041a4:	05db      	lsls	r3, r3, #23
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d003      	beq.n	80041b2 <TIM_Base_SetConfig+0x46>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a12      	ldr	r2, [pc, #72]	; (80041f8 <TIM_Base_SetConfig+0x8c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d108      	bne.n	80041c4 <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4a11      	ldr	r2, [pc, #68]	; (80041fc <TIM_Base_SetConfig+0x90>)
 80041b6:	4013      	ands	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2280      	movs	r2, #128	; 0x80
 80041c8:	4393      	bics	r3, r2
 80041ca:	001a      	movs	r2, r3
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	615a      	str	r2, [r3, #20]
}
 80041f0:	46c0      	nop			; (mov r8, r8)
 80041f2:	46bd      	mov	sp, r7
 80041f4:	b004      	add	sp, #16
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40010800 	.word	0x40010800
 80041fc:	fffffcff 	.word	0xfffffcff

08004200 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	2201      	movs	r2, #1
 8004210:	4393      	bics	r3, r2
 8004212:	001a      	movs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2270      	movs	r2, #112	; 0x70
 800422e:	4393      	bics	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2203      	movs	r2, #3
 8004236:	4393      	bics	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4313      	orrs	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2202      	movs	r2, #2
 8004248:	4393      	bics	r3, r2
 800424a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	4313      	orrs	r3, r2
 8004254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	621a      	str	r2, [r3, #32]
}
 8004270:	46c0      	nop			; (mov r8, r8)
 8004272:	46bd      	mov	sp, r7
 8004274:	b006      	add	sp, #24
 8004276:	bd80      	pop	{r7, pc}

08004278 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	2210      	movs	r2, #16
 8004288:	4393      	bics	r3, r2
 800428a:	001a      	movs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4a13      	ldr	r2, [pc, #76]	; (80042f4 <TIM_OC2_SetConfig+0x7c>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4a12      	ldr	r2, [pc, #72]	; (80042f8 <TIM_OC2_SetConfig+0x80>)
 80042ae:	4013      	ands	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	021b      	lsls	r3, r3, #8
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2220      	movs	r2, #32
 80042c2:	4393      	bics	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	621a      	str	r2, [r3, #32]
}
 80042ec:	46c0      	nop			; (mov r8, r8)
 80042ee:	46bd      	mov	sp, r7
 80042f0:	b006      	add	sp, #24
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	ffff8fff 	.word	0xffff8fff
 80042f8:	fffffcff 	.word	0xfffffcff

080042fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	4a1a      	ldr	r2, [pc, #104]	; (8004374 <TIM_OC3_SetConfig+0x78>)
 800430c:	401a      	ands	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2270      	movs	r2, #112	; 0x70
 8004328:	4393      	bics	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2203      	movs	r2, #3
 8004330:	4393      	bics	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	4a0d      	ldr	r2, [pc, #52]	; (8004378 <TIM_OC3_SetConfig+0x7c>)
 8004342:	4013      	ands	r3, r2
 8004344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	021b      	lsls	r3, r3, #8
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	4313      	orrs	r3, r2
 8004350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	621a      	str	r2, [r3, #32]
}
 800436c:	46c0      	nop			; (mov r8, r8)
 800436e:	46bd      	mov	sp, r7
 8004370:	b006      	add	sp, #24
 8004372:	bd80      	pop	{r7, pc}
 8004374:	fffffeff 	.word	0xfffffeff
 8004378:	fffffdff 	.word	0xfffffdff

0800437c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	4a1b      	ldr	r2, [pc, #108]	; (80043f8 <TIM_OC4_SetConfig+0x7c>)
 800438c:	401a      	ands	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4a15      	ldr	r2, [pc, #84]	; (80043fc <TIM_OC4_SetConfig+0x80>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4a14      	ldr	r2, [pc, #80]	; (8004400 <TIM_OC4_SetConfig+0x84>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	021b      	lsls	r3, r3, #8
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4313      	orrs	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	4a10      	ldr	r2, [pc, #64]	; (8004404 <TIM_OC4_SetConfig+0x88>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	031b      	lsls	r3, r3, #12
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	621a      	str	r2, [r3, #32]
}
 80043ee:	46c0      	nop			; (mov r8, r8)
 80043f0:	46bd      	mov	sp, r7
 80043f2:	b006      	add	sp, #24
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	46c0      	nop			; (mov r8, r8)
 80043f8:	ffffefff 	.word	0xffffefff
 80043fc:	ffff8fff 	.word	0xffff8fff
 8004400:	fffffcff 	.word	0xfffffcff
 8004404:	ffffdfff 	.word	0xffffdfff

08004408 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	2201      	movs	r2, #1
 8004420:	4393      	bics	r3, r2
 8004422:	001a      	movs	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	22f0      	movs	r2, #240	; 0xf0
 8004432:	4393      	bics	r3, r2
 8004434:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	220a      	movs	r2, #10
 8004444:	4393      	bics	r3, r2
 8004446:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	621a      	str	r2, [r3, #32]
}
 800445c:	46c0      	nop			; (mov r8, r8)
 800445e:	46bd      	mov	sp, r7
 8004460:	b006      	add	sp, #24
 8004462:	bd80      	pop	{r7, pc}

08004464 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	2210      	movs	r2, #16
 8004476:	4393      	bics	r3, r2
 8004478:	001a      	movs	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	4a0d      	ldr	r2, [pc, #52]	; (80044c4 <TIM_TI2_ConfigInputStage+0x60>)
 800448e:	4013      	ands	r3, r2
 8004490:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	031b      	lsls	r3, r3, #12
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	22a0      	movs	r2, #160	; 0xa0
 80044a0:	4393      	bics	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	621a      	str	r2, [r3, #32]
}
 80044ba:	46c0      	nop			; (mov r8, r8)
 80044bc:	46bd      	mov	sp, r7
 80044be:	b006      	add	sp, #24
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	ffff0fff 	.word	0xffff0fff

080044c8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2270      	movs	r2, #112	; 0x70
 80044dc:	4393      	bics	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	2207      	movs	r2, #7
 80044e8:	4313      	orrs	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	609a      	str	r2, [r3, #8]
}
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	46bd      	mov	sp, r7
 80044f6:	b004      	add	sp, #16
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	4a09      	ldr	r2, [pc, #36]	; (8004538 <TIM_ETR_SetConfig+0x3c>)
 8004514:	4013      	ands	r3, r2
 8004516:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	021a      	lsls	r2, r3, #8
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	431a      	orrs	r2, r3
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	4313      	orrs	r3, r2
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	609a      	str	r2, [r3, #8]
}
 8004530:	46c0      	nop			; (mov r8, r8)
 8004532:	46bd      	mov	sp, r7
 8004534:	b006      	add	sp, #24
 8004536:	bd80      	pop	{r7, pc}
 8004538:	ffff00ff 	.word	0xffff00ff

0800453c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2238      	movs	r2, #56	; 0x38
 800454a:	5c9b      	ldrb	r3, [r3, r2]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004550:	2302      	movs	r3, #2
 8004552:	e03d      	b.n	80045d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2238      	movs	r2, #56	; 0x38
 8004558:	2101      	movs	r1, #1
 800455a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2239      	movs	r2, #57	; 0x39
 8004560:	2102      	movs	r1, #2
 8004562:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2270      	movs	r2, #112	; 0x70
 8004578:	4393      	bics	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	2380      	movs	r3, #128	; 0x80
 8004594:	05db      	lsls	r3, r3, #23
 8004596:	429a      	cmp	r2, r3
 8004598:	d004      	beq.n	80045a4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a0e      	ldr	r2, [pc, #56]	; (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d10c      	bne.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2280      	movs	r2, #128	; 0x80
 80045a8:	4393      	bics	r3, r2
 80045aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2239      	movs	r2, #57	; 0x39
 80045c2:	2101      	movs	r1, #1
 80045c4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2238      	movs	r2, #56	; 0x38
 80045ca:	2100      	movs	r1, #0
 80045cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	0018      	movs	r0, r3
 80045d2:	46bd      	mov	sp, r7
 80045d4:	b004      	add	sp, #16
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40010800 	.word	0x40010800

080045dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e044      	b.n	8004678 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d107      	bne.n	8004606 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2278      	movs	r2, #120	; 0x78
 80045fa:	2100      	movs	r1, #0
 80045fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	0018      	movs	r0, r3
 8004602:	f7fd f9a1 	bl	8001948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2224      	movs	r2, #36	; 0x24
 800460a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2101      	movs	r1, #1
 8004618:	438a      	bics	r2, r1
 800461a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	0018      	movs	r0, r3
 8004620:	f000 f9b6 	bl	8004990 <UART_SetConfig>
 8004624:	0003      	movs	r3, r0
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e024      	b.n	8004678 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	0018      	movs	r0, r3
 800463a:	f000 fbf3 	bl	8004e24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	490d      	ldr	r1, [pc, #52]	; (8004680 <HAL_UART_Init+0xa4>)
 800464a:	400a      	ands	r2, r1
 800464c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	212a      	movs	r1, #42	; 0x2a
 800465a:	438a      	bics	r2, r1
 800465c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2101      	movs	r1, #1
 800466a:	430a      	orrs	r2, r1
 800466c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	0018      	movs	r0, r3
 8004672:	f000 fc8b 	bl	8004f8c <UART_CheckIdleState>
 8004676:	0003      	movs	r3, r0
}
 8004678:	0018      	movs	r0, r3
 800467a:	46bd      	mov	sp, r7
 800467c:	b002      	add	sp, #8
 800467e:	bd80      	pop	{r7, pc}
 8004680:	ffffb7ff 	.word	0xffffb7ff

08004684 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08a      	sub	sp, #40	; 0x28
 8004688:	af02      	add	r7, sp, #8
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	603b      	str	r3, [r7, #0]
 8004690:	1dbb      	adds	r3, r7, #6
 8004692:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004698:	2b20      	cmp	r3, #32
 800469a:	d000      	beq.n	800469e <HAL_UART_Transmit+0x1a>
 800469c:	e08c      	b.n	80047b8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <HAL_UART_Transmit+0x28>
 80046a4:	1dbb      	adds	r3, r7, #6
 80046a6:	881b      	ldrh	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e084      	b.n	80047ba <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	2380      	movs	r3, #128	; 0x80
 80046b6:	015b      	lsls	r3, r3, #5
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d109      	bne.n	80046d0 <HAL_UART_Transmit+0x4c>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d105      	bne.n	80046d0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2201      	movs	r2, #1
 80046c8:	4013      	ands	r3, r2
 80046ca:	d001      	beq.n	80046d0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e074      	b.n	80047ba <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2284      	movs	r2, #132	; 0x84
 80046d4:	2100      	movs	r1, #0
 80046d6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2221      	movs	r2, #33	; 0x21
 80046dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046de:	f7fd fb33 	bl	8001d48 <HAL_GetTick>
 80046e2:	0003      	movs	r3, r0
 80046e4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	1dba      	adds	r2, r7, #6
 80046ea:	2150      	movs	r1, #80	; 0x50
 80046ec:	8812      	ldrh	r2, [r2, #0]
 80046ee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	1dba      	adds	r2, r7, #6
 80046f4:	2152      	movs	r1, #82	; 0x52
 80046f6:	8812      	ldrh	r2, [r2, #0]
 80046f8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	2380      	movs	r3, #128	; 0x80
 8004700:	015b      	lsls	r3, r3, #5
 8004702:	429a      	cmp	r2, r3
 8004704:	d108      	bne.n	8004718 <HAL_UART_Transmit+0x94>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d104      	bne.n	8004718 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800470e:	2300      	movs	r3, #0
 8004710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	61bb      	str	r3, [r7, #24]
 8004716:	e003      	b.n	8004720 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800471c:	2300      	movs	r3, #0
 800471e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004720:	e02f      	b.n	8004782 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	0013      	movs	r3, r2
 800472c:	2200      	movs	r2, #0
 800472e:	2180      	movs	r1, #128	; 0x80
 8004730:	f000 fcd4 	bl	80050dc <UART_WaitOnFlagUntilTimeout>
 8004734:	1e03      	subs	r3, r0, #0
 8004736:	d004      	beq.n	8004742 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2220      	movs	r2, #32
 800473c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e03b      	b.n	80047ba <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10b      	bne.n	8004760 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	001a      	movs	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	05d2      	lsls	r2, r2, #23
 8004754:	0dd2      	lsrs	r2, r2, #23
 8004756:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	3302      	adds	r3, #2
 800475c:	61bb      	str	r3, [r7, #24]
 800475e:	e007      	b.n	8004770 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	781a      	ldrb	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	3301      	adds	r3, #1
 800476e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2252      	movs	r2, #82	; 0x52
 8004774:	5a9b      	ldrh	r3, [r3, r2]
 8004776:	b29b      	uxth	r3, r3
 8004778:	3b01      	subs	r3, #1
 800477a:	b299      	uxth	r1, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2252      	movs	r2, #82	; 0x52
 8004780:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2252      	movs	r2, #82	; 0x52
 8004786:	5a9b      	ldrh	r3, [r3, r2]
 8004788:	b29b      	uxth	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1c9      	bne.n	8004722 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	0013      	movs	r3, r2
 8004798:	2200      	movs	r2, #0
 800479a:	2140      	movs	r1, #64	; 0x40
 800479c:	f000 fc9e 	bl	80050dc <UART_WaitOnFlagUntilTimeout>
 80047a0:	1e03      	subs	r3, r0, #0
 80047a2:	d004      	beq.n	80047ae <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2220      	movs	r2, #32
 80047a8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e005      	b.n	80047ba <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2220      	movs	r2, #32
 80047b2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80047b4:	2300      	movs	r3, #0
 80047b6:	e000      	b.n	80047ba <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80047b8:	2302      	movs	r3, #2
  }
}
 80047ba:	0018      	movs	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	b008      	add	sp, #32
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08a      	sub	sp, #40	; 0x28
 80047c8:	af02      	add	r7, sp, #8
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	1dbb      	adds	r3, r7, #6
 80047d2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2280      	movs	r2, #128	; 0x80
 80047d8:	589b      	ldr	r3, [r3, r2]
 80047da:	2b20      	cmp	r3, #32
 80047dc:	d000      	beq.n	80047e0 <HAL_UART_Receive+0x1c>
 80047de:	e0d0      	b.n	8004982 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_UART_Receive+0x2a>
 80047e6:	1dbb      	adds	r3, r7, #6
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e0c8      	b.n	8004984 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	2380      	movs	r3, #128	; 0x80
 80047f8:	015b      	lsls	r3, r3, #5
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d109      	bne.n	8004812 <HAL_UART_Receive+0x4e>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d105      	bne.n	8004812 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2201      	movs	r2, #1
 800480a:	4013      	ands	r3, r2
 800480c:	d001      	beq.n	8004812 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e0b8      	b.n	8004984 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2284      	movs	r2, #132	; 0x84
 8004816:	2100      	movs	r1, #0
 8004818:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2280      	movs	r2, #128	; 0x80
 800481e:	2122      	movs	r1, #34	; 0x22
 8004820:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004828:	f7fd fa8e 	bl	8001d48 <HAL_GetTick>
 800482c:	0003      	movs	r3, r0
 800482e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	1dba      	adds	r2, r7, #6
 8004834:	2158      	movs	r1, #88	; 0x58
 8004836:	8812      	ldrh	r2, [r2, #0]
 8004838:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	1dba      	adds	r2, r7, #6
 800483e:	215a      	movs	r1, #90	; 0x5a
 8004840:	8812      	ldrh	r2, [r2, #0]
 8004842:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	2380      	movs	r3, #128	; 0x80
 800484a:	015b      	lsls	r3, r3, #5
 800484c:	429a      	cmp	r2, r3
 800484e:	d10d      	bne.n	800486c <HAL_UART_Receive+0xa8>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d104      	bne.n	8004862 <HAL_UART_Receive+0x9e>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	225c      	movs	r2, #92	; 0x5c
 800485c:	494b      	ldr	r1, [pc, #300]	; (800498c <HAL_UART_Receive+0x1c8>)
 800485e:	5299      	strh	r1, [r3, r2]
 8004860:	e02e      	b.n	80048c0 <HAL_UART_Receive+0xfc>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	225c      	movs	r2, #92	; 0x5c
 8004866:	21ff      	movs	r1, #255	; 0xff
 8004868:	5299      	strh	r1, [r3, r2]
 800486a:	e029      	b.n	80048c0 <HAL_UART_Receive+0xfc>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10d      	bne.n	8004890 <HAL_UART_Receive+0xcc>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d104      	bne.n	8004886 <HAL_UART_Receive+0xc2>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	225c      	movs	r2, #92	; 0x5c
 8004880:	21ff      	movs	r1, #255	; 0xff
 8004882:	5299      	strh	r1, [r3, r2]
 8004884:	e01c      	b.n	80048c0 <HAL_UART_Receive+0xfc>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	225c      	movs	r2, #92	; 0x5c
 800488a:	217f      	movs	r1, #127	; 0x7f
 800488c:	5299      	strh	r1, [r3, r2]
 800488e:	e017      	b.n	80048c0 <HAL_UART_Receive+0xfc>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	2380      	movs	r3, #128	; 0x80
 8004896:	055b      	lsls	r3, r3, #21
 8004898:	429a      	cmp	r2, r3
 800489a:	d10d      	bne.n	80048b8 <HAL_UART_Receive+0xf4>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d104      	bne.n	80048ae <HAL_UART_Receive+0xea>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	225c      	movs	r2, #92	; 0x5c
 80048a8:	217f      	movs	r1, #127	; 0x7f
 80048aa:	5299      	strh	r1, [r3, r2]
 80048ac:	e008      	b.n	80048c0 <HAL_UART_Receive+0xfc>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	225c      	movs	r2, #92	; 0x5c
 80048b2:	213f      	movs	r1, #63	; 0x3f
 80048b4:	5299      	strh	r1, [r3, r2]
 80048b6:	e003      	b.n	80048c0 <HAL_UART_Receive+0xfc>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	225c      	movs	r2, #92	; 0x5c
 80048bc:	2100      	movs	r1, #0
 80048be:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80048c0:	2312      	movs	r3, #18
 80048c2:	18fb      	adds	r3, r7, r3
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	215c      	movs	r1, #92	; 0x5c
 80048c8:	5a52      	ldrh	r2, [r2, r1]
 80048ca:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	2380      	movs	r3, #128	; 0x80
 80048d2:	015b      	lsls	r3, r3, #5
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d108      	bne.n	80048ea <HAL_UART_Receive+0x126>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d104      	bne.n	80048ea <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80048e0:	2300      	movs	r3, #0
 80048e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	61bb      	str	r3, [r7, #24]
 80048e8:	e003      	b.n	80048f2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80048f2:	e03a      	b.n	800496a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	0013      	movs	r3, r2
 80048fe:	2200      	movs	r2, #0
 8004900:	2120      	movs	r1, #32
 8004902:	f000 fbeb 	bl	80050dc <UART_WaitOnFlagUntilTimeout>
 8004906:	1e03      	subs	r3, r0, #0
 8004908:	d005      	beq.n	8004916 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2280      	movs	r2, #128	; 0x80
 800490e:	2120      	movs	r1, #32
 8004910:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e036      	b.n	8004984 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10e      	bne.n	800493a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	b29b      	uxth	r3, r3
 8004924:	2212      	movs	r2, #18
 8004926:	18ba      	adds	r2, r7, r2
 8004928:	8812      	ldrh	r2, [r2, #0]
 800492a:	4013      	ands	r3, r2
 800492c:	b29a      	uxth	r2, r3
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	3302      	adds	r3, #2
 8004936:	61bb      	str	r3, [r7, #24]
 8004938:	e00e      	b.n	8004958 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2212      	movs	r2, #18
 8004944:	18ba      	adds	r2, r7, r2
 8004946:	8812      	ldrh	r2, [r2, #0]
 8004948:	b2d2      	uxtb	r2, r2
 800494a:	4013      	ands	r3, r2
 800494c:	b2da      	uxtb	r2, r3
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	3301      	adds	r3, #1
 8004956:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	225a      	movs	r2, #90	; 0x5a
 800495c:	5a9b      	ldrh	r3, [r3, r2]
 800495e:	b29b      	uxth	r3, r3
 8004960:	3b01      	subs	r3, #1
 8004962:	b299      	uxth	r1, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	225a      	movs	r2, #90	; 0x5a
 8004968:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	225a      	movs	r2, #90	; 0x5a
 800496e:	5a9b      	ldrh	r3, [r3, r2]
 8004970:	b29b      	uxth	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1be      	bne.n	80048f4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2280      	movs	r2, #128	; 0x80
 800497a:	2120      	movs	r1, #32
 800497c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	e000      	b.n	8004984 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8004982:	2302      	movs	r3, #2
  }
}
 8004984:	0018      	movs	r0, r3
 8004986:	46bd      	mov	sp, r7
 8004988:	b008      	add	sp, #32
 800498a:	bd80      	pop	{r7, pc}
 800498c:	000001ff 	.word	0x000001ff

08004990 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004990:	b5b0      	push	{r4, r5, r7, lr}
 8004992:	b08e      	sub	sp, #56	; 0x38
 8004994:	af00      	add	r7, sp, #0
 8004996:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004998:	231a      	movs	r3, #26
 800499a:	2218      	movs	r2, #24
 800499c:	189b      	adds	r3, r3, r2
 800499e:	19db      	adds	r3, r3, r7
 80049a0:	2200      	movs	r2, #0
 80049a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	431a      	orrs	r2, r3
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	431a      	orrs	r2, r3
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4ab4      	ldr	r2, [pc, #720]	; (8004c94 <UART_SetConfig+0x304>)
 80049c4:	4013      	ands	r3, r2
 80049c6:	0019      	movs	r1, r3
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049ce:	430a      	orrs	r2, r1
 80049d0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	4aaf      	ldr	r2, [pc, #700]	; (8004c98 <UART_SetConfig+0x308>)
 80049da:	4013      	ands	r3, r2
 80049dc:	0019      	movs	r1, r3
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4aa9      	ldr	r2, [pc, #676]	; (8004c9c <UART_SetConfig+0x30c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d004      	beq.n	8004a04 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a00:	4313      	orrs	r3, r2
 8004a02:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	4aa5      	ldr	r2, [pc, #660]	; (8004ca0 <UART_SetConfig+0x310>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	0019      	movs	r1, r3
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a16:	430a      	orrs	r2, r1
 8004a18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4aa1      	ldr	r2, [pc, #644]	; (8004ca4 <UART_SetConfig+0x314>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d131      	bne.n	8004a88 <UART_SetConfig+0xf8>
 8004a24:	4ba0      	ldr	r3, [pc, #640]	; (8004ca8 <UART_SetConfig+0x318>)
 8004a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a28:	220c      	movs	r2, #12
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	2b0c      	cmp	r3, #12
 8004a2e:	d01d      	beq.n	8004a6c <UART_SetConfig+0xdc>
 8004a30:	d823      	bhi.n	8004a7a <UART_SetConfig+0xea>
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d00c      	beq.n	8004a50 <UART_SetConfig+0xc0>
 8004a36:	d820      	bhi.n	8004a7a <UART_SetConfig+0xea>
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <UART_SetConfig+0xb2>
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d00e      	beq.n	8004a5e <UART_SetConfig+0xce>
 8004a40:	e01b      	b.n	8004a7a <UART_SetConfig+0xea>
 8004a42:	231b      	movs	r3, #27
 8004a44:	2218      	movs	r2, #24
 8004a46:	189b      	adds	r3, r3, r2
 8004a48:	19db      	adds	r3, r3, r7
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	701a      	strb	r2, [r3, #0]
 8004a4e:	e065      	b.n	8004b1c <UART_SetConfig+0x18c>
 8004a50:	231b      	movs	r3, #27
 8004a52:	2218      	movs	r2, #24
 8004a54:	189b      	adds	r3, r3, r2
 8004a56:	19db      	adds	r3, r3, r7
 8004a58:	2202      	movs	r2, #2
 8004a5a:	701a      	strb	r2, [r3, #0]
 8004a5c:	e05e      	b.n	8004b1c <UART_SetConfig+0x18c>
 8004a5e:	231b      	movs	r3, #27
 8004a60:	2218      	movs	r2, #24
 8004a62:	189b      	adds	r3, r3, r2
 8004a64:	19db      	adds	r3, r3, r7
 8004a66:	2204      	movs	r2, #4
 8004a68:	701a      	strb	r2, [r3, #0]
 8004a6a:	e057      	b.n	8004b1c <UART_SetConfig+0x18c>
 8004a6c:	231b      	movs	r3, #27
 8004a6e:	2218      	movs	r2, #24
 8004a70:	189b      	adds	r3, r3, r2
 8004a72:	19db      	adds	r3, r3, r7
 8004a74:	2208      	movs	r2, #8
 8004a76:	701a      	strb	r2, [r3, #0]
 8004a78:	e050      	b.n	8004b1c <UART_SetConfig+0x18c>
 8004a7a:	231b      	movs	r3, #27
 8004a7c:	2218      	movs	r2, #24
 8004a7e:	189b      	adds	r3, r3, r2
 8004a80:	19db      	adds	r3, r3, r7
 8004a82:	2210      	movs	r2, #16
 8004a84:	701a      	strb	r2, [r3, #0]
 8004a86:	e049      	b.n	8004b1c <UART_SetConfig+0x18c>
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a83      	ldr	r2, [pc, #524]	; (8004c9c <UART_SetConfig+0x30c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d13e      	bne.n	8004b10 <UART_SetConfig+0x180>
 8004a92:	4b85      	ldr	r3, [pc, #532]	; (8004ca8 <UART_SetConfig+0x318>)
 8004a94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a96:	23c0      	movs	r3, #192	; 0xc0
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	22c0      	movs	r2, #192	; 0xc0
 8004a9e:	0112      	lsls	r2, r2, #4
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d027      	beq.n	8004af4 <UART_SetConfig+0x164>
 8004aa4:	22c0      	movs	r2, #192	; 0xc0
 8004aa6:	0112      	lsls	r2, r2, #4
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d82a      	bhi.n	8004b02 <UART_SetConfig+0x172>
 8004aac:	2280      	movs	r2, #128	; 0x80
 8004aae:	0112      	lsls	r2, r2, #4
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d011      	beq.n	8004ad8 <UART_SetConfig+0x148>
 8004ab4:	2280      	movs	r2, #128	; 0x80
 8004ab6:	0112      	lsls	r2, r2, #4
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d822      	bhi.n	8004b02 <UART_SetConfig+0x172>
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d004      	beq.n	8004aca <UART_SetConfig+0x13a>
 8004ac0:	2280      	movs	r2, #128	; 0x80
 8004ac2:	00d2      	lsls	r2, r2, #3
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d00e      	beq.n	8004ae6 <UART_SetConfig+0x156>
 8004ac8:	e01b      	b.n	8004b02 <UART_SetConfig+0x172>
 8004aca:	231b      	movs	r3, #27
 8004acc:	2218      	movs	r2, #24
 8004ace:	189b      	adds	r3, r3, r2
 8004ad0:	19db      	adds	r3, r3, r7
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	701a      	strb	r2, [r3, #0]
 8004ad6:	e021      	b.n	8004b1c <UART_SetConfig+0x18c>
 8004ad8:	231b      	movs	r3, #27
 8004ada:	2218      	movs	r2, #24
 8004adc:	189b      	adds	r3, r3, r2
 8004ade:	19db      	adds	r3, r3, r7
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	701a      	strb	r2, [r3, #0]
 8004ae4:	e01a      	b.n	8004b1c <UART_SetConfig+0x18c>
 8004ae6:	231b      	movs	r3, #27
 8004ae8:	2218      	movs	r2, #24
 8004aea:	189b      	adds	r3, r3, r2
 8004aec:	19db      	adds	r3, r3, r7
 8004aee:	2204      	movs	r2, #4
 8004af0:	701a      	strb	r2, [r3, #0]
 8004af2:	e013      	b.n	8004b1c <UART_SetConfig+0x18c>
 8004af4:	231b      	movs	r3, #27
 8004af6:	2218      	movs	r2, #24
 8004af8:	189b      	adds	r3, r3, r2
 8004afa:	19db      	adds	r3, r3, r7
 8004afc:	2208      	movs	r2, #8
 8004afe:	701a      	strb	r2, [r3, #0]
 8004b00:	e00c      	b.n	8004b1c <UART_SetConfig+0x18c>
 8004b02:	231b      	movs	r3, #27
 8004b04:	2218      	movs	r2, #24
 8004b06:	189b      	adds	r3, r3, r2
 8004b08:	19db      	adds	r3, r3, r7
 8004b0a:	2210      	movs	r2, #16
 8004b0c:	701a      	strb	r2, [r3, #0]
 8004b0e:	e005      	b.n	8004b1c <UART_SetConfig+0x18c>
 8004b10:	231b      	movs	r3, #27
 8004b12:	2218      	movs	r2, #24
 8004b14:	189b      	adds	r3, r3, r2
 8004b16:	19db      	adds	r3, r3, r7
 8004b18:	2210      	movs	r2, #16
 8004b1a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a5e      	ldr	r2, [pc, #376]	; (8004c9c <UART_SetConfig+0x30c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d000      	beq.n	8004b28 <UART_SetConfig+0x198>
 8004b26:	e084      	b.n	8004c32 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b28:	231b      	movs	r3, #27
 8004b2a:	2218      	movs	r2, #24
 8004b2c:	189b      	adds	r3, r3, r2
 8004b2e:	19db      	adds	r3, r3, r7
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d01d      	beq.n	8004b72 <UART_SetConfig+0x1e2>
 8004b36:	dc20      	bgt.n	8004b7a <UART_SetConfig+0x1ea>
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d015      	beq.n	8004b68 <UART_SetConfig+0x1d8>
 8004b3c:	dc1d      	bgt.n	8004b7a <UART_SetConfig+0x1ea>
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <UART_SetConfig+0x1b8>
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d005      	beq.n	8004b52 <UART_SetConfig+0x1c2>
 8004b46:	e018      	b.n	8004b7a <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b48:	f7fe fa88 	bl	800305c <HAL_RCC_GetPCLK1Freq>
 8004b4c:	0003      	movs	r3, r0
 8004b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b50:	e01c      	b.n	8004b8c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b52:	4b55      	ldr	r3, [pc, #340]	; (8004ca8 <UART_SetConfig+0x318>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2210      	movs	r2, #16
 8004b58:	4013      	ands	r3, r2
 8004b5a:	d002      	beq.n	8004b62 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004b5c:	4b53      	ldr	r3, [pc, #332]	; (8004cac <UART_SetConfig+0x31c>)
 8004b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b60:	e014      	b.n	8004b8c <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8004b62:	4b53      	ldr	r3, [pc, #332]	; (8004cb0 <UART_SetConfig+0x320>)
 8004b64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b66:	e011      	b.n	8004b8c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b68:	f7fe f9c8 	bl	8002efc <HAL_RCC_GetSysClockFreq>
 8004b6c:	0003      	movs	r3, r0
 8004b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b70:	e00c      	b.n	8004b8c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b72:	2380      	movs	r3, #128	; 0x80
 8004b74:	021b      	lsls	r3, r3, #8
 8004b76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b78:	e008      	b.n	8004b8c <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004b7e:	231a      	movs	r3, #26
 8004b80:	2218      	movs	r2, #24
 8004b82:	189b      	adds	r3, r3, r2
 8004b84:	19db      	adds	r3, r3, r7
 8004b86:	2201      	movs	r2, #1
 8004b88:	701a      	strb	r2, [r3, #0]
        break;
 8004b8a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d100      	bne.n	8004b94 <UART_SetConfig+0x204>
 8004b92:	e12f      	b.n	8004df4 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	0013      	movs	r3, r2
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	189b      	adds	r3, r3, r2
 8004b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d305      	bcc.n	8004bb0 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004baa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d906      	bls.n	8004bbe <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8004bb0:	231a      	movs	r3, #26
 8004bb2:	2218      	movs	r2, #24
 8004bb4:	189b      	adds	r3, r3, r2
 8004bb6:	19db      	adds	r3, r3, r7
 8004bb8:	2201      	movs	r2, #1
 8004bba:	701a      	strb	r2, [r3, #0]
 8004bbc:	e11a      	b.n	8004df4 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc0:	613b      	str	r3, [r7, #16]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	617b      	str	r3, [r7, #20]
 8004bc6:	6939      	ldr	r1, [r7, #16]
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	000b      	movs	r3, r1
 8004bcc:	0e1b      	lsrs	r3, r3, #24
 8004bce:	0010      	movs	r0, r2
 8004bd0:	0205      	lsls	r5, r0, #8
 8004bd2:	431d      	orrs	r5, r3
 8004bd4:	000b      	movs	r3, r1
 8004bd6:	021c      	lsls	r4, r3, #8
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	085b      	lsrs	r3, r3, #1
 8004bde:	60bb      	str	r3, [r7, #8]
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	68b8      	ldr	r0, [r7, #8]
 8004be6:	68f9      	ldr	r1, [r7, #12]
 8004be8:	1900      	adds	r0, r0, r4
 8004bea:	4169      	adcs	r1, r5
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	603b      	str	r3, [r7, #0]
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	607b      	str	r3, [r7, #4]
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f7fb fc0d 	bl	8000418 <__aeabi_uldivmod>
 8004bfe:	0002      	movs	r2, r0
 8004c00:	000b      	movs	r3, r1
 8004c02:	0013      	movs	r3, r2
 8004c04:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c08:	23c0      	movs	r3, #192	; 0xc0
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d309      	bcc.n	8004c24 <UART_SetConfig+0x294>
 8004c10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c12:	2380      	movs	r3, #128	; 0x80
 8004c14:	035b      	lsls	r3, r3, #13
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d204      	bcs.n	8004c24 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c20:	60da      	str	r2, [r3, #12]
 8004c22:	e0e7      	b.n	8004df4 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8004c24:	231a      	movs	r3, #26
 8004c26:	2218      	movs	r2, #24
 8004c28:	189b      	adds	r3, r3, r2
 8004c2a:	19db      	adds	r3, r3, r7
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	701a      	strb	r2, [r3, #0]
 8004c30:	e0e0      	b.n	8004df4 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	69da      	ldr	r2, [r3, #28]
 8004c36:	2380      	movs	r3, #128	; 0x80
 8004c38:	021b      	lsls	r3, r3, #8
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d000      	beq.n	8004c40 <UART_SetConfig+0x2b0>
 8004c3e:	e082      	b.n	8004d46 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8004c40:	231b      	movs	r3, #27
 8004c42:	2218      	movs	r2, #24
 8004c44:	189b      	adds	r3, r3, r2
 8004c46:	19db      	adds	r3, r3, r7
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	2b08      	cmp	r3, #8
 8004c4c:	d834      	bhi.n	8004cb8 <UART_SetConfig+0x328>
 8004c4e:	009a      	lsls	r2, r3, #2
 8004c50:	4b18      	ldr	r3, [pc, #96]	; (8004cb4 <UART_SetConfig+0x324>)
 8004c52:	18d3      	adds	r3, r2, r3
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c58:	f7fe fa00 	bl	800305c <HAL_RCC_GetPCLK1Freq>
 8004c5c:	0003      	movs	r3, r0
 8004c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c60:	e033      	b.n	8004cca <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c62:	f7fe fa11 	bl	8003088 <HAL_RCC_GetPCLK2Freq>
 8004c66:	0003      	movs	r3, r0
 8004c68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c6a:	e02e      	b.n	8004cca <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ca8 <UART_SetConfig+0x318>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2210      	movs	r2, #16
 8004c72:	4013      	ands	r3, r2
 8004c74:	d002      	beq.n	8004c7c <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004c76:	4b0d      	ldr	r3, [pc, #52]	; (8004cac <UART_SetConfig+0x31c>)
 8004c78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c7a:	e026      	b.n	8004cca <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8004c7c:	4b0c      	ldr	r3, [pc, #48]	; (8004cb0 <UART_SetConfig+0x320>)
 8004c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c80:	e023      	b.n	8004cca <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c82:	f7fe f93b 	bl	8002efc <HAL_RCC_GetSysClockFreq>
 8004c86:	0003      	movs	r3, r0
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c8a:	e01e      	b.n	8004cca <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c8c:	2380      	movs	r3, #128	; 0x80
 8004c8e:	021b      	lsls	r3, r3, #8
 8004c90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c92:	e01a      	b.n	8004cca <UART_SetConfig+0x33a>
 8004c94:	efff69f3 	.word	0xefff69f3
 8004c98:	ffffcfff 	.word	0xffffcfff
 8004c9c:	40004800 	.word	0x40004800
 8004ca0:	fffff4ff 	.word	0xfffff4ff
 8004ca4:	40004400 	.word	0x40004400
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	003d0900 	.word	0x003d0900
 8004cb0:	00f42400 	.word	0x00f42400
 8004cb4:	080067c0 	.word	0x080067c0
      default:
        pclk = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004cbc:	231a      	movs	r3, #26
 8004cbe:	2218      	movs	r2, #24
 8004cc0:	189b      	adds	r3, r3, r2
 8004cc2:	19db      	adds	r3, r3, r7
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	701a      	strb	r2, [r3, #0]
        break;
 8004cc8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d100      	bne.n	8004cd2 <UART_SetConfig+0x342>
 8004cd0:	e090      	b.n	8004df4 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd4:	005a      	lsls	r2, r3, #1
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	085b      	lsrs	r3, r3, #1
 8004cdc:	18d2      	adds	r2, r2, r3
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	0019      	movs	r1, r3
 8004ce4:	0010      	movs	r0, r2
 8004ce6:	f7fb fa21 	bl	800012c <__udivsi3>
 8004cea:	0003      	movs	r3, r0
 8004cec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	2b0f      	cmp	r3, #15
 8004cf2:	d921      	bls.n	8004d38 <UART_SetConfig+0x3a8>
 8004cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cf6:	2380      	movs	r3, #128	; 0x80
 8004cf8:	025b      	lsls	r3, r3, #9
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d21c      	bcs.n	8004d38 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	200e      	movs	r0, #14
 8004d04:	2418      	movs	r4, #24
 8004d06:	1903      	adds	r3, r0, r4
 8004d08:	19db      	adds	r3, r3, r7
 8004d0a:	210f      	movs	r1, #15
 8004d0c:	438a      	bics	r2, r1
 8004d0e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	085b      	lsrs	r3, r3, #1
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2207      	movs	r2, #7
 8004d18:	4013      	ands	r3, r2
 8004d1a:	b299      	uxth	r1, r3
 8004d1c:	1903      	adds	r3, r0, r4
 8004d1e:	19db      	adds	r3, r3, r7
 8004d20:	1902      	adds	r2, r0, r4
 8004d22:	19d2      	adds	r2, r2, r7
 8004d24:	8812      	ldrh	r2, [r2, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	1902      	adds	r2, r0, r4
 8004d30:	19d2      	adds	r2, r2, r7
 8004d32:	8812      	ldrh	r2, [r2, #0]
 8004d34:	60da      	str	r2, [r3, #12]
 8004d36:	e05d      	b.n	8004df4 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8004d38:	231a      	movs	r3, #26
 8004d3a:	2218      	movs	r2, #24
 8004d3c:	189b      	adds	r3, r3, r2
 8004d3e:	19db      	adds	r3, r3, r7
 8004d40:	2201      	movs	r2, #1
 8004d42:	701a      	strb	r2, [r3, #0]
 8004d44:	e056      	b.n	8004df4 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d46:	231b      	movs	r3, #27
 8004d48:	2218      	movs	r2, #24
 8004d4a:	189b      	adds	r3, r3, r2
 8004d4c:	19db      	adds	r3, r3, r7
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	d822      	bhi.n	8004d9a <UART_SetConfig+0x40a>
 8004d54:	009a      	lsls	r2, r3, #2
 8004d56:	4b2f      	ldr	r3, [pc, #188]	; (8004e14 <UART_SetConfig+0x484>)
 8004d58:	18d3      	adds	r3, r2, r3
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d5e:	f7fe f97d 	bl	800305c <HAL_RCC_GetPCLK1Freq>
 8004d62:	0003      	movs	r3, r0
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d66:	e021      	b.n	8004dac <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d68:	f7fe f98e 	bl	8003088 <HAL_RCC_GetPCLK2Freq>
 8004d6c:	0003      	movs	r3, r0
 8004d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d70:	e01c      	b.n	8004dac <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d72:	4b29      	ldr	r3, [pc, #164]	; (8004e18 <UART_SetConfig+0x488>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2210      	movs	r2, #16
 8004d78:	4013      	ands	r3, r2
 8004d7a:	d002      	beq.n	8004d82 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004d7c:	4b27      	ldr	r3, [pc, #156]	; (8004e1c <UART_SetConfig+0x48c>)
 8004d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d80:	e014      	b.n	8004dac <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8004d82:	4b27      	ldr	r3, [pc, #156]	; (8004e20 <UART_SetConfig+0x490>)
 8004d84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d86:	e011      	b.n	8004dac <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d88:	f7fe f8b8 	bl	8002efc <HAL_RCC_GetSysClockFreq>
 8004d8c:	0003      	movs	r3, r0
 8004d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d90:	e00c      	b.n	8004dac <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d92:	2380      	movs	r3, #128	; 0x80
 8004d94:	021b      	lsls	r3, r3, #8
 8004d96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d98:	e008      	b.n	8004dac <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004d9e:	231a      	movs	r3, #26
 8004da0:	2218      	movs	r2, #24
 8004da2:	189b      	adds	r3, r3, r2
 8004da4:	19db      	adds	r3, r3, r7
 8004da6:	2201      	movs	r2, #1
 8004da8:	701a      	strb	r2, [r3, #0]
        break;
 8004daa:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d020      	beq.n	8004df4 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	085a      	lsrs	r2, r3, #1
 8004db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dba:	18d2      	adds	r2, r2, r3
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	0019      	movs	r1, r3
 8004dc2:	0010      	movs	r0, r2
 8004dc4:	f7fb f9b2 	bl	800012c <__udivsi3>
 8004dc8:	0003      	movs	r3, r0
 8004dca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dce:	2b0f      	cmp	r3, #15
 8004dd0:	d90a      	bls.n	8004de8 <UART_SetConfig+0x458>
 8004dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dd4:	2380      	movs	r3, #128	; 0x80
 8004dd6:	025b      	lsls	r3, r3, #9
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d205      	bcs.n	8004de8 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	60da      	str	r2, [r3, #12]
 8004de6:	e005      	b.n	8004df4 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8004de8:	231a      	movs	r3, #26
 8004dea:	2218      	movs	r2, #24
 8004dec:	189b      	adds	r3, r3, r2
 8004dee:	19db      	adds	r3, r3, r7
 8004df0:	2201      	movs	r2, #1
 8004df2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	2200      	movs	r2, #0
 8004df8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004e00:	231a      	movs	r3, #26
 8004e02:	2218      	movs	r2, #24
 8004e04:	189b      	adds	r3, r3, r2
 8004e06:	19db      	adds	r3, r3, r7
 8004e08:	781b      	ldrb	r3, [r3, #0]
}
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	b00e      	add	sp, #56	; 0x38
 8004e10:	bdb0      	pop	{r4, r5, r7, pc}
 8004e12:	46c0      	nop			; (mov r8, r8)
 8004e14:	080067e4 	.word	0x080067e4
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	003d0900 	.word	0x003d0900
 8004e20:	00f42400 	.word	0x00f42400

08004e24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	2201      	movs	r2, #1
 8004e32:	4013      	ands	r3, r2
 8004e34:	d00b      	beq.n	8004e4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	4a4a      	ldr	r2, [pc, #296]	; (8004f68 <UART_AdvFeatureConfig+0x144>)
 8004e3e:	4013      	ands	r3, r2
 8004e40:	0019      	movs	r1, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	2202      	movs	r2, #2
 8004e54:	4013      	ands	r3, r2
 8004e56:	d00b      	beq.n	8004e70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	4a43      	ldr	r2, [pc, #268]	; (8004f6c <UART_AdvFeatureConfig+0x148>)
 8004e60:	4013      	ands	r3, r2
 8004e62:	0019      	movs	r1, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	2204      	movs	r2, #4
 8004e76:	4013      	ands	r3, r2
 8004e78:	d00b      	beq.n	8004e92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	4a3b      	ldr	r2, [pc, #236]	; (8004f70 <UART_AdvFeatureConfig+0x14c>)
 8004e82:	4013      	ands	r3, r2
 8004e84:	0019      	movs	r1, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	2208      	movs	r2, #8
 8004e98:	4013      	ands	r3, r2
 8004e9a:	d00b      	beq.n	8004eb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	4a34      	ldr	r2, [pc, #208]	; (8004f74 <UART_AdvFeatureConfig+0x150>)
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	0019      	movs	r1, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	2210      	movs	r2, #16
 8004eba:	4013      	ands	r3, r2
 8004ebc:	d00b      	beq.n	8004ed6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	4a2c      	ldr	r2, [pc, #176]	; (8004f78 <UART_AdvFeatureConfig+0x154>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	0019      	movs	r1, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	2220      	movs	r2, #32
 8004edc:	4013      	ands	r3, r2
 8004ede:	d00b      	beq.n	8004ef8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	4a25      	ldr	r2, [pc, #148]	; (8004f7c <UART_AdvFeatureConfig+0x158>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	0019      	movs	r1, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	2240      	movs	r2, #64	; 0x40
 8004efe:	4013      	ands	r3, r2
 8004f00:	d01d      	beq.n	8004f3e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	4a1d      	ldr	r2, [pc, #116]	; (8004f80 <UART_AdvFeatureConfig+0x15c>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	0019      	movs	r1, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f1e:	2380      	movs	r3, #128	; 0x80
 8004f20:	035b      	lsls	r3, r3, #13
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d10b      	bne.n	8004f3e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	4a15      	ldr	r2, [pc, #84]	; (8004f84 <UART_AdvFeatureConfig+0x160>)
 8004f2e:	4013      	ands	r3, r2
 8004f30:	0019      	movs	r1, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	2280      	movs	r2, #128	; 0x80
 8004f44:	4013      	ands	r3, r2
 8004f46:	d00b      	beq.n	8004f60 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	4a0e      	ldr	r2, [pc, #56]	; (8004f88 <UART_AdvFeatureConfig+0x164>)
 8004f50:	4013      	ands	r3, r2
 8004f52:	0019      	movs	r1, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	605a      	str	r2, [r3, #4]
  }
}
 8004f60:	46c0      	nop			; (mov r8, r8)
 8004f62:	46bd      	mov	sp, r7
 8004f64:	b002      	add	sp, #8
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	fffdffff 	.word	0xfffdffff
 8004f6c:	fffeffff 	.word	0xfffeffff
 8004f70:	fffbffff 	.word	0xfffbffff
 8004f74:	ffff7fff 	.word	0xffff7fff
 8004f78:	ffffefff 	.word	0xffffefff
 8004f7c:	ffffdfff 	.word	0xffffdfff
 8004f80:	ffefffff 	.word	0xffefffff
 8004f84:	ff9fffff 	.word	0xff9fffff
 8004f88:	fff7ffff 	.word	0xfff7ffff

08004f8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b092      	sub	sp, #72	; 0x48
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2284      	movs	r2, #132	; 0x84
 8004f98:	2100      	movs	r1, #0
 8004f9a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f9c:	f7fc fed4 	bl	8001d48 <HAL_GetTick>
 8004fa0:	0003      	movs	r3, r0
 8004fa2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2208      	movs	r2, #8
 8004fac:	4013      	ands	r3, r2
 8004fae:	2b08      	cmp	r3, #8
 8004fb0:	d12c      	bne.n	800500c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb4:	2280      	movs	r2, #128	; 0x80
 8004fb6:	0391      	lsls	r1, r2, #14
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	4a46      	ldr	r2, [pc, #280]	; (80050d4 <UART_CheckIdleState+0x148>)
 8004fbc:	9200      	str	r2, [sp, #0]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f000 f88c 	bl	80050dc <UART_WaitOnFlagUntilTimeout>
 8004fc4:	1e03      	subs	r3, r0, #0
 8004fc6:	d021      	beq.n	800500c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004fd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd8:	f383 8810 	msr	PRIMASK, r3
}
 8004fdc:	46c0      	nop			; (mov r8, r8)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2180      	movs	r1, #128	; 0x80
 8004fea:	438a      	bics	r2, r1
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff4:	f383 8810 	msr	PRIMASK, r3
}
 8004ff8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2278      	movs	r2, #120	; 0x78
 8005004:	2100      	movs	r1, #0
 8005006:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e05f      	b.n	80050cc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2204      	movs	r2, #4
 8005014:	4013      	ands	r3, r2
 8005016:	2b04      	cmp	r3, #4
 8005018:	d146      	bne.n	80050a8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800501a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800501c:	2280      	movs	r2, #128	; 0x80
 800501e:	03d1      	lsls	r1, r2, #15
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	4a2c      	ldr	r2, [pc, #176]	; (80050d4 <UART_CheckIdleState+0x148>)
 8005024:	9200      	str	r2, [sp, #0]
 8005026:	2200      	movs	r2, #0
 8005028:	f000 f858 	bl	80050dc <UART_WaitOnFlagUntilTimeout>
 800502c:	1e03      	subs	r3, r0, #0
 800502e:	d03b      	beq.n	80050a8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005030:	f3ef 8310 	mrs	r3, PRIMASK
 8005034:	60fb      	str	r3, [r7, #12]
  return(result);
 8005036:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005038:	637b      	str	r3, [r7, #52]	; 0x34
 800503a:	2301      	movs	r3, #1
 800503c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f383 8810 	msr	PRIMASK, r3
}
 8005044:	46c0      	nop			; (mov r8, r8)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4921      	ldr	r1, [pc, #132]	; (80050d8 <UART_CheckIdleState+0x14c>)
 8005052:	400a      	ands	r2, r1
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005058:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f383 8810 	msr	PRIMASK, r3
}
 8005060:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005062:	f3ef 8310 	mrs	r3, PRIMASK
 8005066:	61bb      	str	r3, [r7, #24]
  return(result);
 8005068:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800506a:	633b      	str	r3, [r7, #48]	; 0x30
 800506c:	2301      	movs	r3, #1
 800506e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	f383 8810 	msr	PRIMASK, r3
}
 8005076:	46c0      	nop			; (mov r8, r8)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2101      	movs	r1, #1
 8005084:	438a      	bics	r2, r1
 8005086:	609a      	str	r2, [r3, #8]
 8005088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	f383 8810 	msr	PRIMASK, r3
}
 8005092:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2280      	movs	r2, #128	; 0x80
 8005098:	2120      	movs	r1, #32
 800509a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2278      	movs	r2, #120	; 0x78
 80050a0:	2100      	movs	r1, #0
 80050a2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e011      	b.n	80050cc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2220      	movs	r2, #32
 80050ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2280      	movs	r2, #128	; 0x80
 80050b2:	2120      	movs	r1, #32
 80050b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2278      	movs	r2, #120	; 0x78
 80050c6:	2100      	movs	r1, #0
 80050c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	0018      	movs	r0, r3
 80050ce:	46bd      	mov	sp, r7
 80050d0:	b010      	add	sp, #64	; 0x40
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	01ffffff 	.word	0x01ffffff
 80050d8:	fffffedf 	.word	0xfffffedf

080050dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	603b      	str	r3, [r7, #0]
 80050e8:	1dfb      	adds	r3, r7, #7
 80050ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ec:	e04b      	b.n	8005186 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	3301      	adds	r3, #1
 80050f2:	d048      	beq.n	8005186 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050f4:	f7fc fe28 	bl	8001d48 <HAL_GetTick>
 80050f8:	0002      	movs	r2, r0
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	429a      	cmp	r2, r3
 8005102:	d302      	bcc.n	800510a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e04b      	b.n	80051a6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2204      	movs	r2, #4
 8005116:	4013      	ands	r3, r2
 8005118:	d035      	beq.n	8005186 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	2208      	movs	r2, #8
 8005122:	4013      	ands	r3, r2
 8005124:	2b08      	cmp	r3, #8
 8005126:	d111      	bne.n	800514c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2208      	movs	r2, #8
 800512e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	0018      	movs	r0, r3
 8005134:	f000 f83c 	bl	80051b0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2284      	movs	r2, #132	; 0x84
 800513c:	2108      	movs	r1, #8
 800513e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2278      	movs	r2, #120	; 0x78
 8005144:	2100      	movs	r1, #0
 8005146:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e02c      	b.n	80051a6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	69da      	ldr	r2, [r3, #28]
 8005152:	2380      	movs	r3, #128	; 0x80
 8005154:	011b      	lsls	r3, r3, #4
 8005156:	401a      	ands	r2, r3
 8005158:	2380      	movs	r3, #128	; 0x80
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	429a      	cmp	r2, r3
 800515e:	d112      	bne.n	8005186 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2280      	movs	r2, #128	; 0x80
 8005166:	0112      	lsls	r2, r2, #4
 8005168:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	0018      	movs	r0, r3
 800516e:	f000 f81f 	bl	80051b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2284      	movs	r2, #132	; 0x84
 8005176:	2120      	movs	r1, #32
 8005178:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2278      	movs	r2, #120	; 0x78
 800517e:	2100      	movs	r1, #0
 8005180:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e00f      	b.n	80051a6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	4013      	ands	r3, r2
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	425a      	negs	r2, r3
 8005196:	4153      	adcs	r3, r2
 8005198:	b2db      	uxtb	r3, r3
 800519a:	001a      	movs	r2, r3
 800519c:	1dfb      	adds	r3, r7, #7
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d0a4      	beq.n	80050ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	0018      	movs	r0, r3
 80051a8:	46bd      	mov	sp, r7
 80051aa:	b004      	add	sp, #16
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b08e      	sub	sp, #56	; 0x38
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051b8:	f3ef 8310 	mrs	r3, PRIMASK
 80051bc:	617b      	str	r3, [r7, #20]
  return(result);
 80051be:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051c0:	637b      	str	r3, [r7, #52]	; 0x34
 80051c2:	2301      	movs	r3, #1
 80051c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	f383 8810 	msr	PRIMASK, r3
}
 80051cc:	46c0      	nop			; (mov r8, r8)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4926      	ldr	r1, [pc, #152]	; (8005274 <UART_EndRxTransfer+0xc4>)
 80051da:	400a      	ands	r2, r1
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	f383 8810 	msr	PRIMASK, r3
}
 80051e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051ea:	f3ef 8310 	mrs	r3, PRIMASK
 80051ee:	623b      	str	r3, [r7, #32]
  return(result);
 80051f0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f2:	633b      	str	r3, [r7, #48]	; 0x30
 80051f4:	2301      	movs	r3, #1
 80051f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	f383 8810 	msr	PRIMASK, r3
}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2101      	movs	r1, #1
 800520c:	438a      	bics	r2, r1
 800520e:	609a      	str	r2, [r3, #8]
 8005210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005212:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005216:	f383 8810 	msr	PRIMASK, r3
}
 800521a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005220:	2b01      	cmp	r3, #1
 8005222:	d118      	bne.n	8005256 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005224:	f3ef 8310 	mrs	r3, PRIMASK
 8005228:	60bb      	str	r3, [r7, #8]
  return(result);
 800522a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800522c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800522e:	2301      	movs	r3, #1
 8005230:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f383 8810 	msr	PRIMASK, r3
}
 8005238:	46c0      	nop			; (mov r8, r8)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2110      	movs	r1, #16
 8005246:	438a      	bics	r2, r1
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f383 8810 	msr	PRIMASK, r3
}
 8005254:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2280      	movs	r2, #128	; 0x80
 800525a:	2120      	movs	r1, #32
 800525c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	669a      	str	r2, [r3, #104]	; 0x68
}
 800526a:	46c0      	nop			; (mov r8, r8)
 800526c:	46bd      	mov	sp, r7
 800526e:	b00e      	add	sp, #56	; 0x38
 8005270:	bd80      	pop	{r7, pc}
 8005272:	46c0      	nop			; (mov r8, r8)
 8005274:	fffffedf 	.word	0xfffffedf

08005278 <std>:
 8005278:	2300      	movs	r3, #0
 800527a:	b510      	push	{r4, lr}
 800527c:	0004      	movs	r4, r0
 800527e:	6003      	str	r3, [r0, #0]
 8005280:	6043      	str	r3, [r0, #4]
 8005282:	6083      	str	r3, [r0, #8]
 8005284:	8181      	strh	r1, [r0, #12]
 8005286:	6643      	str	r3, [r0, #100]	; 0x64
 8005288:	81c2      	strh	r2, [r0, #14]
 800528a:	6103      	str	r3, [r0, #16]
 800528c:	6143      	str	r3, [r0, #20]
 800528e:	6183      	str	r3, [r0, #24]
 8005290:	0019      	movs	r1, r3
 8005292:	2208      	movs	r2, #8
 8005294:	305c      	adds	r0, #92	; 0x5c
 8005296:	f000 fa2f 	bl	80056f8 <memset>
 800529a:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <std+0x50>)
 800529c:	6224      	str	r4, [r4, #32]
 800529e:	6263      	str	r3, [r4, #36]	; 0x24
 80052a0:	4b0a      	ldr	r3, [pc, #40]	; (80052cc <std+0x54>)
 80052a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80052a4:	4b0a      	ldr	r3, [pc, #40]	; (80052d0 <std+0x58>)
 80052a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052a8:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <std+0x5c>)
 80052aa:	6323      	str	r3, [r4, #48]	; 0x30
 80052ac:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <std+0x60>)
 80052ae:	429c      	cmp	r4, r3
 80052b0:	d005      	beq.n	80052be <std+0x46>
 80052b2:	4b0a      	ldr	r3, [pc, #40]	; (80052dc <std+0x64>)
 80052b4:	429c      	cmp	r4, r3
 80052b6:	d002      	beq.n	80052be <std+0x46>
 80052b8:	4b09      	ldr	r3, [pc, #36]	; (80052e0 <std+0x68>)
 80052ba:	429c      	cmp	r4, r3
 80052bc:	d103      	bne.n	80052c6 <std+0x4e>
 80052be:	0020      	movs	r0, r4
 80052c0:	3058      	adds	r0, #88	; 0x58
 80052c2:	f000 fa99 	bl	80057f8 <__retarget_lock_init_recursive>
 80052c6:	bd10      	pop	{r4, pc}
 80052c8:	08005511 	.word	0x08005511
 80052cc:	0800553d 	.word	0x0800553d
 80052d0:	08005575 	.word	0x08005575
 80052d4:	080055a1 	.word	0x080055a1
 80052d8:	2000032c 	.word	0x2000032c
 80052dc:	20000394 	.word	0x20000394
 80052e0:	200003fc 	.word	0x200003fc

080052e4 <stdio_exit_handler>:
 80052e4:	b510      	push	{r4, lr}
 80052e6:	4a03      	ldr	r2, [pc, #12]	; (80052f4 <stdio_exit_handler+0x10>)
 80052e8:	4903      	ldr	r1, [pc, #12]	; (80052f8 <stdio_exit_handler+0x14>)
 80052ea:	4804      	ldr	r0, [pc, #16]	; (80052fc <stdio_exit_handler+0x18>)
 80052ec:	f000 f86c 	bl	80053c8 <_fwalk_sglue>
 80052f0:	bd10      	pop	{r4, pc}
 80052f2:	46c0      	nop			; (mov r8, r8)
 80052f4:	20000124 	.word	0x20000124
 80052f8:	08006161 	.word	0x08006161
 80052fc:	20000130 	.word	0x20000130

08005300 <cleanup_stdio>:
 8005300:	6841      	ldr	r1, [r0, #4]
 8005302:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <cleanup_stdio+0x30>)
 8005304:	b510      	push	{r4, lr}
 8005306:	0004      	movs	r4, r0
 8005308:	4299      	cmp	r1, r3
 800530a:	d001      	beq.n	8005310 <cleanup_stdio+0x10>
 800530c:	f000 ff28 	bl	8006160 <_fflush_r>
 8005310:	68a1      	ldr	r1, [r4, #8]
 8005312:	4b08      	ldr	r3, [pc, #32]	; (8005334 <cleanup_stdio+0x34>)
 8005314:	4299      	cmp	r1, r3
 8005316:	d002      	beq.n	800531e <cleanup_stdio+0x1e>
 8005318:	0020      	movs	r0, r4
 800531a:	f000 ff21 	bl	8006160 <_fflush_r>
 800531e:	68e1      	ldr	r1, [r4, #12]
 8005320:	4b05      	ldr	r3, [pc, #20]	; (8005338 <cleanup_stdio+0x38>)
 8005322:	4299      	cmp	r1, r3
 8005324:	d002      	beq.n	800532c <cleanup_stdio+0x2c>
 8005326:	0020      	movs	r0, r4
 8005328:	f000 ff1a 	bl	8006160 <_fflush_r>
 800532c:	bd10      	pop	{r4, pc}
 800532e:	46c0      	nop			; (mov r8, r8)
 8005330:	2000032c 	.word	0x2000032c
 8005334:	20000394 	.word	0x20000394
 8005338:	200003fc 	.word	0x200003fc

0800533c <global_stdio_init.part.0>:
 800533c:	b510      	push	{r4, lr}
 800533e:	4b09      	ldr	r3, [pc, #36]	; (8005364 <global_stdio_init.part.0+0x28>)
 8005340:	4a09      	ldr	r2, [pc, #36]	; (8005368 <global_stdio_init.part.0+0x2c>)
 8005342:	2104      	movs	r1, #4
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	4809      	ldr	r0, [pc, #36]	; (800536c <global_stdio_init.part.0+0x30>)
 8005348:	2200      	movs	r2, #0
 800534a:	f7ff ff95 	bl	8005278 <std>
 800534e:	2201      	movs	r2, #1
 8005350:	2109      	movs	r1, #9
 8005352:	4807      	ldr	r0, [pc, #28]	; (8005370 <global_stdio_init.part.0+0x34>)
 8005354:	f7ff ff90 	bl	8005278 <std>
 8005358:	2202      	movs	r2, #2
 800535a:	2112      	movs	r1, #18
 800535c:	4805      	ldr	r0, [pc, #20]	; (8005374 <global_stdio_init.part.0+0x38>)
 800535e:	f7ff ff8b 	bl	8005278 <std>
 8005362:	bd10      	pop	{r4, pc}
 8005364:	20000464 	.word	0x20000464
 8005368:	080052e5 	.word	0x080052e5
 800536c:	2000032c 	.word	0x2000032c
 8005370:	20000394 	.word	0x20000394
 8005374:	200003fc 	.word	0x200003fc

08005378 <__sfp_lock_acquire>:
 8005378:	b510      	push	{r4, lr}
 800537a:	4802      	ldr	r0, [pc, #8]	; (8005384 <__sfp_lock_acquire+0xc>)
 800537c:	f000 fa3d 	bl	80057fa <__retarget_lock_acquire_recursive>
 8005380:	bd10      	pop	{r4, pc}
 8005382:	46c0      	nop			; (mov r8, r8)
 8005384:	2000046d 	.word	0x2000046d

08005388 <__sfp_lock_release>:
 8005388:	b510      	push	{r4, lr}
 800538a:	4802      	ldr	r0, [pc, #8]	; (8005394 <__sfp_lock_release+0xc>)
 800538c:	f000 fa36 	bl	80057fc <__retarget_lock_release_recursive>
 8005390:	bd10      	pop	{r4, pc}
 8005392:	46c0      	nop			; (mov r8, r8)
 8005394:	2000046d 	.word	0x2000046d

08005398 <__sinit>:
 8005398:	b510      	push	{r4, lr}
 800539a:	0004      	movs	r4, r0
 800539c:	f7ff ffec 	bl	8005378 <__sfp_lock_acquire>
 80053a0:	6a23      	ldr	r3, [r4, #32]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <__sinit+0x14>
 80053a6:	f7ff ffef 	bl	8005388 <__sfp_lock_release>
 80053aa:	bd10      	pop	{r4, pc}
 80053ac:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <__sinit+0x28>)
 80053ae:	6223      	str	r3, [r4, #32]
 80053b0:	4b04      	ldr	r3, [pc, #16]	; (80053c4 <__sinit+0x2c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1f6      	bne.n	80053a6 <__sinit+0xe>
 80053b8:	f7ff ffc0 	bl	800533c <global_stdio_init.part.0>
 80053bc:	e7f3      	b.n	80053a6 <__sinit+0xe>
 80053be:	46c0      	nop			; (mov r8, r8)
 80053c0:	08005301 	.word	0x08005301
 80053c4:	20000464 	.word	0x20000464

080053c8 <_fwalk_sglue>:
 80053c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053ca:	0014      	movs	r4, r2
 80053cc:	2600      	movs	r6, #0
 80053ce:	9000      	str	r0, [sp, #0]
 80053d0:	9101      	str	r1, [sp, #4]
 80053d2:	68a5      	ldr	r5, [r4, #8]
 80053d4:	6867      	ldr	r7, [r4, #4]
 80053d6:	3f01      	subs	r7, #1
 80053d8:	d504      	bpl.n	80053e4 <_fwalk_sglue+0x1c>
 80053da:	6824      	ldr	r4, [r4, #0]
 80053dc:	2c00      	cmp	r4, #0
 80053de:	d1f8      	bne.n	80053d2 <_fwalk_sglue+0xa>
 80053e0:	0030      	movs	r0, r6
 80053e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80053e4:	89ab      	ldrh	r3, [r5, #12]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d908      	bls.n	80053fc <_fwalk_sglue+0x34>
 80053ea:	220e      	movs	r2, #14
 80053ec:	5eab      	ldrsh	r3, [r5, r2]
 80053ee:	3301      	adds	r3, #1
 80053f0:	d004      	beq.n	80053fc <_fwalk_sglue+0x34>
 80053f2:	0029      	movs	r1, r5
 80053f4:	9800      	ldr	r0, [sp, #0]
 80053f6:	9b01      	ldr	r3, [sp, #4]
 80053f8:	4798      	blx	r3
 80053fa:	4306      	orrs	r6, r0
 80053fc:	3568      	adds	r5, #104	; 0x68
 80053fe:	e7ea      	b.n	80053d6 <_fwalk_sglue+0xe>

08005400 <_puts_r>:
 8005400:	6a03      	ldr	r3, [r0, #32]
 8005402:	b570      	push	{r4, r5, r6, lr}
 8005404:	0005      	movs	r5, r0
 8005406:	000e      	movs	r6, r1
 8005408:	6884      	ldr	r4, [r0, #8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <_puts_r+0x12>
 800540e:	f7ff ffc3 	bl	8005398 <__sinit>
 8005412:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005414:	07db      	lsls	r3, r3, #31
 8005416:	d405      	bmi.n	8005424 <_puts_r+0x24>
 8005418:	89a3      	ldrh	r3, [r4, #12]
 800541a:	059b      	lsls	r3, r3, #22
 800541c:	d402      	bmi.n	8005424 <_puts_r+0x24>
 800541e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005420:	f000 f9eb 	bl	80057fa <__retarget_lock_acquire_recursive>
 8005424:	89a3      	ldrh	r3, [r4, #12]
 8005426:	071b      	lsls	r3, r3, #28
 8005428:	d502      	bpl.n	8005430 <_puts_r+0x30>
 800542a:	6923      	ldr	r3, [r4, #16]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d11f      	bne.n	8005470 <_puts_r+0x70>
 8005430:	0021      	movs	r1, r4
 8005432:	0028      	movs	r0, r5
 8005434:	f000 f8fc 	bl	8005630 <__swsetup_r>
 8005438:	2800      	cmp	r0, #0
 800543a:	d019      	beq.n	8005470 <_puts_r+0x70>
 800543c:	2501      	movs	r5, #1
 800543e:	426d      	negs	r5, r5
 8005440:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005442:	07db      	lsls	r3, r3, #31
 8005444:	d405      	bmi.n	8005452 <_puts_r+0x52>
 8005446:	89a3      	ldrh	r3, [r4, #12]
 8005448:	059b      	lsls	r3, r3, #22
 800544a:	d402      	bmi.n	8005452 <_puts_r+0x52>
 800544c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800544e:	f000 f9d5 	bl	80057fc <__retarget_lock_release_recursive>
 8005452:	0028      	movs	r0, r5
 8005454:	bd70      	pop	{r4, r5, r6, pc}
 8005456:	3601      	adds	r6, #1
 8005458:	60a3      	str	r3, [r4, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	da04      	bge.n	8005468 <_puts_r+0x68>
 800545e:	69a2      	ldr	r2, [r4, #24]
 8005460:	429a      	cmp	r2, r3
 8005462:	dc16      	bgt.n	8005492 <_puts_r+0x92>
 8005464:	290a      	cmp	r1, #10
 8005466:	d014      	beq.n	8005492 <_puts_r+0x92>
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	6022      	str	r2, [r4, #0]
 800546e:	7019      	strb	r1, [r3, #0]
 8005470:	68a3      	ldr	r3, [r4, #8]
 8005472:	7831      	ldrb	r1, [r6, #0]
 8005474:	3b01      	subs	r3, #1
 8005476:	2900      	cmp	r1, #0
 8005478:	d1ed      	bne.n	8005456 <_puts_r+0x56>
 800547a:	60a3      	str	r3, [r4, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	da0f      	bge.n	80054a0 <_puts_r+0xa0>
 8005480:	0028      	movs	r0, r5
 8005482:	0022      	movs	r2, r4
 8005484:	310a      	adds	r1, #10
 8005486:	f000 f891 	bl	80055ac <__swbuf_r>
 800548a:	250a      	movs	r5, #10
 800548c:	3001      	adds	r0, #1
 800548e:	d1d7      	bne.n	8005440 <_puts_r+0x40>
 8005490:	e7d4      	b.n	800543c <_puts_r+0x3c>
 8005492:	0022      	movs	r2, r4
 8005494:	0028      	movs	r0, r5
 8005496:	f000 f889 	bl	80055ac <__swbuf_r>
 800549a:	3001      	adds	r0, #1
 800549c:	d1e8      	bne.n	8005470 <_puts_r+0x70>
 800549e:	e7cd      	b.n	800543c <_puts_r+0x3c>
 80054a0:	250a      	movs	r5, #10
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	6022      	str	r2, [r4, #0]
 80054a8:	701d      	strb	r5, [r3, #0]
 80054aa:	e7c9      	b.n	8005440 <_puts_r+0x40>

080054ac <puts>:
 80054ac:	b510      	push	{r4, lr}
 80054ae:	4b03      	ldr	r3, [pc, #12]	; (80054bc <puts+0x10>)
 80054b0:	0001      	movs	r1, r0
 80054b2:	6818      	ldr	r0, [r3, #0]
 80054b4:	f7ff ffa4 	bl	8005400 <_puts_r>
 80054b8:	bd10      	pop	{r4, pc}
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	2000017c 	.word	0x2000017c

080054c0 <siscanf>:
 80054c0:	b40e      	push	{r1, r2, r3}
 80054c2:	b530      	push	{r4, r5, lr}
 80054c4:	2381      	movs	r3, #129	; 0x81
 80054c6:	b09c      	sub	sp, #112	; 0x70
 80054c8:	466a      	mov	r2, sp
 80054ca:	ac1f      	add	r4, sp, #124	; 0x7c
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	cc20      	ldmia	r4!, {r5}
 80054d0:	8293      	strh	r3, [r2, #20]
 80054d2:	9002      	str	r0, [sp, #8]
 80054d4:	9006      	str	r0, [sp, #24]
 80054d6:	f7fa fe17 	bl	8000108 <strlen>
 80054da:	4b0b      	ldr	r3, [pc, #44]	; (8005508 <siscanf+0x48>)
 80054dc:	466a      	mov	r2, sp
 80054de:	930b      	str	r3, [sp, #44]	; 0x2c
 80054e0:	2300      	movs	r3, #0
 80054e2:	9003      	str	r0, [sp, #12]
 80054e4:	9007      	str	r0, [sp, #28]
 80054e6:	4809      	ldr	r0, [pc, #36]	; (800550c <siscanf+0x4c>)
 80054e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80054ea:	9314      	str	r3, [sp, #80]	; 0x50
 80054ec:	3b01      	subs	r3, #1
 80054ee:	82d3      	strh	r3, [r2, #22]
 80054f0:	a902      	add	r1, sp, #8
 80054f2:	0023      	movs	r3, r4
 80054f4:	002a      	movs	r2, r5
 80054f6:	6800      	ldr	r0, [r0, #0]
 80054f8:	9401      	str	r4, [sp, #4]
 80054fa:	f000 fadb 	bl	8005ab4 <__ssvfiscanf_r>
 80054fe:	b01c      	add	sp, #112	; 0x70
 8005500:	bc30      	pop	{r4, r5}
 8005502:	bc08      	pop	{r3}
 8005504:	b003      	add	sp, #12
 8005506:	4718      	bx	r3
 8005508:	08005539 	.word	0x08005539
 800550c:	2000017c 	.word	0x2000017c

08005510 <__sread>:
 8005510:	b570      	push	{r4, r5, r6, lr}
 8005512:	000c      	movs	r4, r1
 8005514:	250e      	movs	r5, #14
 8005516:	5f49      	ldrsh	r1, [r1, r5]
 8005518:	f000 f91c 	bl	8005754 <_read_r>
 800551c:	2800      	cmp	r0, #0
 800551e:	db03      	blt.n	8005528 <__sread+0x18>
 8005520:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005522:	181b      	adds	r3, r3, r0
 8005524:	6563      	str	r3, [r4, #84]	; 0x54
 8005526:	bd70      	pop	{r4, r5, r6, pc}
 8005528:	89a3      	ldrh	r3, [r4, #12]
 800552a:	4a02      	ldr	r2, [pc, #8]	; (8005534 <__sread+0x24>)
 800552c:	4013      	ands	r3, r2
 800552e:	81a3      	strh	r3, [r4, #12]
 8005530:	e7f9      	b.n	8005526 <__sread+0x16>
 8005532:	46c0      	nop			; (mov r8, r8)
 8005534:	ffffefff 	.word	0xffffefff

08005538 <__seofread>:
 8005538:	2000      	movs	r0, #0
 800553a:	4770      	bx	lr

0800553c <__swrite>:
 800553c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553e:	001f      	movs	r7, r3
 8005540:	898b      	ldrh	r3, [r1, #12]
 8005542:	0005      	movs	r5, r0
 8005544:	000c      	movs	r4, r1
 8005546:	0016      	movs	r6, r2
 8005548:	05db      	lsls	r3, r3, #23
 800554a:	d505      	bpl.n	8005558 <__swrite+0x1c>
 800554c:	230e      	movs	r3, #14
 800554e:	5ec9      	ldrsh	r1, [r1, r3]
 8005550:	2200      	movs	r2, #0
 8005552:	2302      	movs	r3, #2
 8005554:	f000 f8ea 	bl	800572c <_lseek_r>
 8005558:	89a3      	ldrh	r3, [r4, #12]
 800555a:	4a05      	ldr	r2, [pc, #20]	; (8005570 <__swrite+0x34>)
 800555c:	0028      	movs	r0, r5
 800555e:	4013      	ands	r3, r2
 8005560:	81a3      	strh	r3, [r4, #12]
 8005562:	0032      	movs	r2, r6
 8005564:	230e      	movs	r3, #14
 8005566:	5ee1      	ldrsh	r1, [r4, r3]
 8005568:	003b      	movs	r3, r7
 800556a:	f000 f907 	bl	800577c <_write_r>
 800556e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005570:	ffffefff 	.word	0xffffefff

08005574 <__sseek>:
 8005574:	b570      	push	{r4, r5, r6, lr}
 8005576:	000c      	movs	r4, r1
 8005578:	250e      	movs	r5, #14
 800557a:	5f49      	ldrsh	r1, [r1, r5]
 800557c:	f000 f8d6 	bl	800572c <_lseek_r>
 8005580:	89a3      	ldrh	r3, [r4, #12]
 8005582:	1c42      	adds	r2, r0, #1
 8005584:	d103      	bne.n	800558e <__sseek+0x1a>
 8005586:	4a05      	ldr	r2, [pc, #20]	; (800559c <__sseek+0x28>)
 8005588:	4013      	ands	r3, r2
 800558a:	81a3      	strh	r3, [r4, #12]
 800558c:	bd70      	pop	{r4, r5, r6, pc}
 800558e:	2280      	movs	r2, #128	; 0x80
 8005590:	0152      	lsls	r2, r2, #5
 8005592:	4313      	orrs	r3, r2
 8005594:	81a3      	strh	r3, [r4, #12]
 8005596:	6560      	str	r0, [r4, #84]	; 0x54
 8005598:	e7f8      	b.n	800558c <__sseek+0x18>
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	ffffefff 	.word	0xffffefff

080055a0 <__sclose>:
 80055a0:	b510      	push	{r4, lr}
 80055a2:	230e      	movs	r3, #14
 80055a4:	5ec9      	ldrsh	r1, [r1, r3]
 80055a6:	f000 f8af 	bl	8005708 <_close_r>
 80055aa:	bd10      	pop	{r4, pc}

080055ac <__swbuf_r>:
 80055ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ae:	0006      	movs	r6, r0
 80055b0:	000d      	movs	r5, r1
 80055b2:	0014      	movs	r4, r2
 80055b4:	2800      	cmp	r0, #0
 80055b6:	d004      	beq.n	80055c2 <__swbuf_r+0x16>
 80055b8:	6a03      	ldr	r3, [r0, #32]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <__swbuf_r+0x16>
 80055be:	f7ff feeb 	bl	8005398 <__sinit>
 80055c2:	69a3      	ldr	r3, [r4, #24]
 80055c4:	60a3      	str	r3, [r4, #8]
 80055c6:	89a3      	ldrh	r3, [r4, #12]
 80055c8:	071b      	lsls	r3, r3, #28
 80055ca:	d528      	bpl.n	800561e <__swbuf_r+0x72>
 80055cc:	6923      	ldr	r3, [r4, #16]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d025      	beq.n	800561e <__swbuf_r+0x72>
 80055d2:	6923      	ldr	r3, [r4, #16]
 80055d4:	6820      	ldr	r0, [r4, #0]
 80055d6:	b2ef      	uxtb	r7, r5
 80055d8:	1ac0      	subs	r0, r0, r3
 80055da:	6963      	ldr	r3, [r4, #20]
 80055dc:	b2ed      	uxtb	r5, r5
 80055de:	4283      	cmp	r3, r0
 80055e0:	dc05      	bgt.n	80055ee <__swbuf_r+0x42>
 80055e2:	0021      	movs	r1, r4
 80055e4:	0030      	movs	r0, r6
 80055e6:	f000 fdbb 	bl	8006160 <_fflush_r>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	d11d      	bne.n	800562a <__swbuf_r+0x7e>
 80055ee:	68a3      	ldr	r3, [r4, #8]
 80055f0:	3001      	adds	r0, #1
 80055f2:	3b01      	subs	r3, #1
 80055f4:	60a3      	str	r3, [r4, #8]
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	6022      	str	r2, [r4, #0]
 80055fc:	701f      	strb	r7, [r3, #0]
 80055fe:	6963      	ldr	r3, [r4, #20]
 8005600:	4283      	cmp	r3, r0
 8005602:	d004      	beq.n	800560e <__swbuf_r+0x62>
 8005604:	89a3      	ldrh	r3, [r4, #12]
 8005606:	07db      	lsls	r3, r3, #31
 8005608:	d507      	bpl.n	800561a <__swbuf_r+0x6e>
 800560a:	2d0a      	cmp	r5, #10
 800560c:	d105      	bne.n	800561a <__swbuf_r+0x6e>
 800560e:	0021      	movs	r1, r4
 8005610:	0030      	movs	r0, r6
 8005612:	f000 fda5 	bl	8006160 <_fflush_r>
 8005616:	2800      	cmp	r0, #0
 8005618:	d107      	bne.n	800562a <__swbuf_r+0x7e>
 800561a:	0028      	movs	r0, r5
 800561c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800561e:	0021      	movs	r1, r4
 8005620:	0030      	movs	r0, r6
 8005622:	f000 f805 	bl	8005630 <__swsetup_r>
 8005626:	2800      	cmp	r0, #0
 8005628:	d0d3      	beq.n	80055d2 <__swbuf_r+0x26>
 800562a:	2501      	movs	r5, #1
 800562c:	426d      	negs	r5, r5
 800562e:	e7f4      	b.n	800561a <__swbuf_r+0x6e>

08005630 <__swsetup_r>:
 8005630:	4b30      	ldr	r3, [pc, #192]	; (80056f4 <__swsetup_r+0xc4>)
 8005632:	b570      	push	{r4, r5, r6, lr}
 8005634:	0005      	movs	r5, r0
 8005636:	6818      	ldr	r0, [r3, #0]
 8005638:	000c      	movs	r4, r1
 800563a:	2800      	cmp	r0, #0
 800563c:	d004      	beq.n	8005648 <__swsetup_r+0x18>
 800563e:	6a03      	ldr	r3, [r0, #32]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <__swsetup_r+0x18>
 8005644:	f7ff fea8 	bl	8005398 <__sinit>
 8005648:	230c      	movs	r3, #12
 800564a:	5ee2      	ldrsh	r2, [r4, r3]
 800564c:	b293      	uxth	r3, r2
 800564e:	0711      	lsls	r1, r2, #28
 8005650:	d423      	bmi.n	800569a <__swsetup_r+0x6a>
 8005652:	06d9      	lsls	r1, r3, #27
 8005654:	d407      	bmi.n	8005666 <__swsetup_r+0x36>
 8005656:	2309      	movs	r3, #9
 8005658:	2001      	movs	r0, #1
 800565a:	602b      	str	r3, [r5, #0]
 800565c:	3337      	adds	r3, #55	; 0x37
 800565e:	4313      	orrs	r3, r2
 8005660:	81a3      	strh	r3, [r4, #12]
 8005662:	4240      	negs	r0, r0
 8005664:	bd70      	pop	{r4, r5, r6, pc}
 8005666:	075b      	lsls	r3, r3, #29
 8005668:	d513      	bpl.n	8005692 <__swsetup_r+0x62>
 800566a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800566c:	2900      	cmp	r1, #0
 800566e:	d008      	beq.n	8005682 <__swsetup_r+0x52>
 8005670:	0023      	movs	r3, r4
 8005672:	3344      	adds	r3, #68	; 0x44
 8005674:	4299      	cmp	r1, r3
 8005676:	d002      	beq.n	800567e <__swsetup_r+0x4e>
 8005678:	0028      	movs	r0, r5
 800567a:	f000 f8c1 	bl	8005800 <_free_r>
 800567e:	2300      	movs	r3, #0
 8005680:	6363      	str	r3, [r4, #52]	; 0x34
 8005682:	2224      	movs	r2, #36	; 0x24
 8005684:	89a3      	ldrh	r3, [r4, #12]
 8005686:	4393      	bics	r3, r2
 8005688:	81a3      	strh	r3, [r4, #12]
 800568a:	2300      	movs	r3, #0
 800568c:	6063      	str	r3, [r4, #4]
 800568e:	6923      	ldr	r3, [r4, #16]
 8005690:	6023      	str	r3, [r4, #0]
 8005692:	2308      	movs	r3, #8
 8005694:	89a2      	ldrh	r2, [r4, #12]
 8005696:	4313      	orrs	r3, r2
 8005698:	81a3      	strh	r3, [r4, #12]
 800569a:	6923      	ldr	r3, [r4, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10b      	bne.n	80056b8 <__swsetup_r+0x88>
 80056a0:	21a0      	movs	r1, #160	; 0xa0
 80056a2:	2280      	movs	r2, #128	; 0x80
 80056a4:	89a3      	ldrh	r3, [r4, #12]
 80056a6:	0089      	lsls	r1, r1, #2
 80056a8:	0092      	lsls	r2, r2, #2
 80056aa:	400b      	ands	r3, r1
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d003      	beq.n	80056b8 <__swsetup_r+0x88>
 80056b0:	0021      	movs	r1, r4
 80056b2:	0028      	movs	r0, r5
 80056b4:	f000 fda8 	bl	8006208 <__smakebuf_r>
 80056b8:	220c      	movs	r2, #12
 80056ba:	5ea3      	ldrsh	r3, [r4, r2]
 80056bc:	2001      	movs	r0, #1
 80056be:	001a      	movs	r2, r3
 80056c0:	b299      	uxth	r1, r3
 80056c2:	4002      	ands	r2, r0
 80056c4:	4203      	tst	r3, r0
 80056c6:	d00f      	beq.n	80056e8 <__swsetup_r+0xb8>
 80056c8:	2200      	movs	r2, #0
 80056ca:	60a2      	str	r2, [r4, #8]
 80056cc:	6962      	ldr	r2, [r4, #20]
 80056ce:	4252      	negs	r2, r2
 80056d0:	61a2      	str	r2, [r4, #24]
 80056d2:	2000      	movs	r0, #0
 80056d4:	6922      	ldr	r2, [r4, #16]
 80056d6:	4282      	cmp	r2, r0
 80056d8:	d1c4      	bne.n	8005664 <__swsetup_r+0x34>
 80056da:	0609      	lsls	r1, r1, #24
 80056dc:	d5c2      	bpl.n	8005664 <__swsetup_r+0x34>
 80056de:	2240      	movs	r2, #64	; 0x40
 80056e0:	4313      	orrs	r3, r2
 80056e2:	81a3      	strh	r3, [r4, #12]
 80056e4:	3801      	subs	r0, #1
 80056e6:	e7bd      	b.n	8005664 <__swsetup_r+0x34>
 80056e8:	0788      	lsls	r0, r1, #30
 80056ea:	d400      	bmi.n	80056ee <__swsetup_r+0xbe>
 80056ec:	6962      	ldr	r2, [r4, #20]
 80056ee:	60a2      	str	r2, [r4, #8]
 80056f0:	e7ef      	b.n	80056d2 <__swsetup_r+0xa2>
 80056f2:	46c0      	nop			; (mov r8, r8)
 80056f4:	2000017c 	.word	0x2000017c

080056f8 <memset>:
 80056f8:	0003      	movs	r3, r0
 80056fa:	1882      	adds	r2, r0, r2
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d100      	bne.n	8005702 <memset+0xa>
 8005700:	4770      	bx	lr
 8005702:	7019      	strb	r1, [r3, #0]
 8005704:	3301      	adds	r3, #1
 8005706:	e7f9      	b.n	80056fc <memset+0x4>

08005708 <_close_r>:
 8005708:	2300      	movs	r3, #0
 800570a:	b570      	push	{r4, r5, r6, lr}
 800570c:	4d06      	ldr	r5, [pc, #24]	; (8005728 <_close_r+0x20>)
 800570e:	0004      	movs	r4, r0
 8005710:	0008      	movs	r0, r1
 8005712:	602b      	str	r3, [r5, #0]
 8005714:	f7fc fa07 	bl	8001b26 <_close>
 8005718:	1c43      	adds	r3, r0, #1
 800571a:	d103      	bne.n	8005724 <_close_r+0x1c>
 800571c:	682b      	ldr	r3, [r5, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d000      	beq.n	8005724 <_close_r+0x1c>
 8005722:	6023      	str	r3, [r4, #0]
 8005724:	bd70      	pop	{r4, r5, r6, pc}
 8005726:	46c0      	nop			; (mov r8, r8)
 8005728:	20000468 	.word	0x20000468

0800572c <_lseek_r>:
 800572c:	b570      	push	{r4, r5, r6, lr}
 800572e:	0004      	movs	r4, r0
 8005730:	0008      	movs	r0, r1
 8005732:	0011      	movs	r1, r2
 8005734:	001a      	movs	r2, r3
 8005736:	2300      	movs	r3, #0
 8005738:	4d05      	ldr	r5, [pc, #20]	; (8005750 <_lseek_r+0x24>)
 800573a:	602b      	str	r3, [r5, #0]
 800573c:	f7fc fa14 	bl	8001b68 <_lseek>
 8005740:	1c43      	adds	r3, r0, #1
 8005742:	d103      	bne.n	800574c <_lseek_r+0x20>
 8005744:	682b      	ldr	r3, [r5, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d000      	beq.n	800574c <_lseek_r+0x20>
 800574a:	6023      	str	r3, [r4, #0]
 800574c:	bd70      	pop	{r4, r5, r6, pc}
 800574e:	46c0      	nop			; (mov r8, r8)
 8005750:	20000468 	.word	0x20000468

08005754 <_read_r>:
 8005754:	b570      	push	{r4, r5, r6, lr}
 8005756:	0004      	movs	r4, r0
 8005758:	0008      	movs	r0, r1
 800575a:	0011      	movs	r1, r2
 800575c:	001a      	movs	r2, r3
 800575e:	2300      	movs	r3, #0
 8005760:	4d05      	ldr	r5, [pc, #20]	; (8005778 <_read_r+0x24>)
 8005762:	602b      	str	r3, [r5, #0]
 8005764:	f7fc f9a6 	bl	8001ab4 <_read>
 8005768:	1c43      	adds	r3, r0, #1
 800576a:	d103      	bne.n	8005774 <_read_r+0x20>
 800576c:	682b      	ldr	r3, [r5, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d000      	beq.n	8005774 <_read_r+0x20>
 8005772:	6023      	str	r3, [r4, #0]
 8005774:	bd70      	pop	{r4, r5, r6, pc}
 8005776:	46c0      	nop			; (mov r8, r8)
 8005778:	20000468 	.word	0x20000468

0800577c <_write_r>:
 800577c:	b570      	push	{r4, r5, r6, lr}
 800577e:	0004      	movs	r4, r0
 8005780:	0008      	movs	r0, r1
 8005782:	0011      	movs	r1, r2
 8005784:	001a      	movs	r2, r3
 8005786:	2300      	movs	r3, #0
 8005788:	4d05      	ldr	r5, [pc, #20]	; (80057a0 <_write_r+0x24>)
 800578a:	602b      	str	r3, [r5, #0]
 800578c:	f7fc f9af 	bl	8001aee <_write>
 8005790:	1c43      	adds	r3, r0, #1
 8005792:	d103      	bne.n	800579c <_write_r+0x20>
 8005794:	682b      	ldr	r3, [r5, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d000      	beq.n	800579c <_write_r+0x20>
 800579a:	6023      	str	r3, [r4, #0]
 800579c:	bd70      	pop	{r4, r5, r6, pc}
 800579e:	46c0      	nop			; (mov r8, r8)
 80057a0:	20000468 	.word	0x20000468

080057a4 <__errno>:
 80057a4:	4b01      	ldr	r3, [pc, #4]	; (80057ac <__errno+0x8>)
 80057a6:	6818      	ldr	r0, [r3, #0]
 80057a8:	4770      	bx	lr
 80057aa:	46c0      	nop			; (mov r8, r8)
 80057ac:	2000017c 	.word	0x2000017c

080057b0 <__libc_init_array>:
 80057b0:	b570      	push	{r4, r5, r6, lr}
 80057b2:	2600      	movs	r6, #0
 80057b4:	4c0c      	ldr	r4, [pc, #48]	; (80057e8 <__libc_init_array+0x38>)
 80057b6:	4d0d      	ldr	r5, [pc, #52]	; (80057ec <__libc_init_array+0x3c>)
 80057b8:	1b64      	subs	r4, r4, r5
 80057ba:	10a4      	asrs	r4, r4, #2
 80057bc:	42a6      	cmp	r6, r4
 80057be:	d109      	bne.n	80057d4 <__libc_init_array+0x24>
 80057c0:	2600      	movs	r6, #0
 80057c2:	f000 ff6b 	bl	800669c <_init>
 80057c6:	4c0a      	ldr	r4, [pc, #40]	; (80057f0 <__libc_init_array+0x40>)
 80057c8:	4d0a      	ldr	r5, [pc, #40]	; (80057f4 <__libc_init_array+0x44>)
 80057ca:	1b64      	subs	r4, r4, r5
 80057cc:	10a4      	asrs	r4, r4, #2
 80057ce:	42a6      	cmp	r6, r4
 80057d0:	d105      	bne.n	80057de <__libc_init_array+0x2e>
 80057d2:	bd70      	pop	{r4, r5, r6, pc}
 80057d4:	00b3      	lsls	r3, r6, #2
 80057d6:	58eb      	ldr	r3, [r5, r3]
 80057d8:	4798      	blx	r3
 80057da:	3601      	adds	r6, #1
 80057dc:	e7ee      	b.n	80057bc <__libc_init_array+0xc>
 80057de:	00b3      	lsls	r3, r6, #2
 80057e0:	58eb      	ldr	r3, [r5, r3]
 80057e2:	4798      	blx	r3
 80057e4:	3601      	adds	r6, #1
 80057e6:	e7f2      	b.n	80057ce <__libc_init_array+0x1e>
 80057e8:	08006930 	.word	0x08006930
 80057ec:	08006930 	.word	0x08006930
 80057f0:	08006934 	.word	0x08006934
 80057f4:	08006930 	.word	0x08006930

080057f8 <__retarget_lock_init_recursive>:
 80057f8:	4770      	bx	lr

080057fa <__retarget_lock_acquire_recursive>:
 80057fa:	4770      	bx	lr

080057fc <__retarget_lock_release_recursive>:
 80057fc:	4770      	bx	lr
	...

08005800 <_free_r>:
 8005800:	b570      	push	{r4, r5, r6, lr}
 8005802:	0005      	movs	r5, r0
 8005804:	2900      	cmp	r1, #0
 8005806:	d010      	beq.n	800582a <_free_r+0x2a>
 8005808:	1f0c      	subs	r4, r1, #4
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	da00      	bge.n	8005812 <_free_r+0x12>
 8005810:	18e4      	adds	r4, r4, r3
 8005812:	0028      	movs	r0, r5
 8005814:	f000 f8e2 	bl	80059dc <__malloc_lock>
 8005818:	4a1d      	ldr	r2, [pc, #116]	; (8005890 <_free_r+0x90>)
 800581a:	6813      	ldr	r3, [r2, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d105      	bne.n	800582c <_free_r+0x2c>
 8005820:	6063      	str	r3, [r4, #4]
 8005822:	6014      	str	r4, [r2, #0]
 8005824:	0028      	movs	r0, r5
 8005826:	f000 f8e1 	bl	80059ec <__malloc_unlock>
 800582a:	bd70      	pop	{r4, r5, r6, pc}
 800582c:	42a3      	cmp	r3, r4
 800582e:	d908      	bls.n	8005842 <_free_r+0x42>
 8005830:	6820      	ldr	r0, [r4, #0]
 8005832:	1821      	adds	r1, r4, r0
 8005834:	428b      	cmp	r3, r1
 8005836:	d1f3      	bne.n	8005820 <_free_r+0x20>
 8005838:	6819      	ldr	r1, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	1809      	adds	r1, r1, r0
 800583e:	6021      	str	r1, [r4, #0]
 8005840:	e7ee      	b.n	8005820 <_free_r+0x20>
 8005842:	001a      	movs	r2, r3
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <_free_r+0x4e>
 800584a:	42a3      	cmp	r3, r4
 800584c:	d9f9      	bls.n	8005842 <_free_r+0x42>
 800584e:	6811      	ldr	r1, [r2, #0]
 8005850:	1850      	adds	r0, r2, r1
 8005852:	42a0      	cmp	r0, r4
 8005854:	d10b      	bne.n	800586e <_free_r+0x6e>
 8005856:	6820      	ldr	r0, [r4, #0]
 8005858:	1809      	adds	r1, r1, r0
 800585a:	1850      	adds	r0, r2, r1
 800585c:	6011      	str	r1, [r2, #0]
 800585e:	4283      	cmp	r3, r0
 8005860:	d1e0      	bne.n	8005824 <_free_r+0x24>
 8005862:	6818      	ldr	r0, [r3, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	1841      	adds	r1, r0, r1
 8005868:	6011      	str	r1, [r2, #0]
 800586a:	6053      	str	r3, [r2, #4]
 800586c:	e7da      	b.n	8005824 <_free_r+0x24>
 800586e:	42a0      	cmp	r0, r4
 8005870:	d902      	bls.n	8005878 <_free_r+0x78>
 8005872:	230c      	movs	r3, #12
 8005874:	602b      	str	r3, [r5, #0]
 8005876:	e7d5      	b.n	8005824 <_free_r+0x24>
 8005878:	6820      	ldr	r0, [r4, #0]
 800587a:	1821      	adds	r1, r4, r0
 800587c:	428b      	cmp	r3, r1
 800587e:	d103      	bne.n	8005888 <_free_r+0x88>
 8005880:	6819      	ldr	r1, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	1809      	adds	r1, r1, r0
 8005886:	6021      	str	r1, [r4, #0]
 8005888:	6063      	str	r3, [r4, #4]
 800588a:	6054      	str	r4, [r2, #4]
 800588c:	e7ca      	b.n	8005824 <_free_r+0x24>
 800588e:	46c0      	nop			; (mov r8, r8)
 8005890:	20000470 	.word	0x20000470

08005894 <sbrk_aligned>:
 8005894:	b570      	push	{r4, r5, r6, lr}
 8005896:	4e0f      	ldr	r6, [pc, #60]	; (80058d4 <sbrk_aligned+0x40>)
 8005898:	000d      	movs	r5, r1
 800589a:	6831      	ldr	r1, [r6, #0]
 800589c:	0004      	movs	r4, r0
 800589e:	2900      	cmp	r1, #0
 80058a0:	d102      	bne.n	80058a8 <sbrk_aligned+0x14>
 80058a2:	f000 fd8d 	bl	80063c0 <_sbrk_r>
 80058a6:	6030      	str	r0, [r6, #0]
 80058a8:	0029      	movs	r1, r5
 80058aa:	0020      	movs	r0, r4
 80058ac:	f000 fd88 	bl	80063c0 <_sbrk_r>
 80058b0:	1c43      	adds	r3, r0, #1
 80058b2:	d00a      	beq.n	80058ca <sbrk_aligned+0x36>
 80058b4:	2303      	movs	r3, #3
 80058b6:	1cc5      	adds	r5, r0, #3
 80058b8:	439d      	bics	r5, r3
 80058ba:	42a8      	cmp	r0, r5
 80058bc:	d007      	beq.n	80058ce <sbrk_aligned+0x3a>
 80058be:	1a29      	subs	r1, r5, r0
 80058c0:	0020      	movs	r0, r4
 80058c2:	f000 fd7d 	bl	80063c0 <_sbrk_r>
 80058c6:	3001      	adds	r0, #1
 80058c8:	d101      	bne.n	80058ce <sbrk_aligned+0x3a>
 80058ca:	2501      	movs	r5, #1
 80058cc:	426d      	negs	r5, r5
 80058ce:	0028      	movs	r0, r5
 80058d0:	bd70      	pop	{r4, r5, r6, pc}
 80058d2:	46c0      	nop			; (mov r8, r8)
 80058d4:	20000474 	.word	0x20000474

080058d8 <_malloc_r>:
 80058d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058da:	2203      	movs	r2, #3
 80058dc:	1ccb      	adds	r3, r1, #3
 80058de:	4393      	bics	r3, r2
 80058e0:	3308      	adds	r3, #8
 80058e2:	0006      	movs	r6, r0
 80058e4:	001f      	movs	r7, r3
 80058e6:	2b0c      	cmp	r3, #12
 80058e8:	d238      	bcs.n	800595c <_malloc_r+0x84>
 80058ea:	270c      	movs	r7, #12
 80058ec:	42b9      	cmp	r1, r7
 80058ee:	d837      	bhi.n	8005960 <_malloc_r+0x88>
 80058f0:	0030      	movs	r0, r6
 80058f2:	f000 f873 	bl	80059dc <__malloc_lock>
 80058f6:	4b38      	ldr	r3, [pc, #224]	; (80059d8 <_malloc_r+0x100>)
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	001c      	movs	r4, r3
 80058fe:	2c00      	cmp	r4, #0
 8005900:	d133      	bne.n	800596a <_malloc_r+0x92>
 8005902:	0039      	movs	r1, r7
 8005904:	0030      	movs	r0, r6
 8005906:	f7ff ffc5 	bl	8005894 <sbrk_aligned>
 800590a:	0004      	movs	r4, r0
 800590c:	1c43      	adds	r3, r0, #1
 800590e:	d15e      	bne.n	80059ce <_malloc_r+0xf6>
 8005910:	9b00      	ldr	r3, [sp, #0]
 8005912:	681c      	ldr	r4, [r3, #0]
 8005914:	0025      	movs	r5, r4
 8005916:	2d00      	cmp	r5, #0
 8005918:	d14e      	bne.n	80059b8 <_malloc_r+0xe0>
 800591a:	2c00      	cmp	r4, #0
 800591c:	d051      	beq.n	80059c2 <_malloc_r+0xea>
 800591e:	6823      	ldr	r3, [r4, #0]
 8005920:	0029      	movs	r1, r5
 8005922:	18e3      	adds	r3, r4, r3
 8005924:	0030      	movs	r0, r6
 8005926:	9301      	str	r3, [sp, #4]
 8005928:	f000 fd4a 	bl	80063c0 <_sbrk_r>
 800592c:	9b01      	ldr	r3, [sp, #4]
 800592e:	4283      	cmp	r3, r0
 8005930:	d147      	bne.n	80059c2 <_malloc_r+0xea>
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	0030      	movs	r0, r6
 8005936:	1aff      	subs	r7, r7, r3
 8005938:	0039      	movs	r1, r7
 800593a:	f7ff ffab 	bl	8005894 <sbrk_aligned>
 800593e:	3001      	adds	r0, #1
 8005940:	d03f      	beq.n	80059c2 <_malloc_r+0xea>
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	19db      	adds	r3, r3, r7
 8005946:	6023      	str	r3, [r4, #0]
 8005948:	9b00      	ldr	r3, [sp, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d040      	beq.n	80059d2 <_malloc_r+0xfa>
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	42a2      	cmp	r2, r4
 8005954:	d133      	bne.n	80059be <_malloc_r+0xe6>
 8005956:	2200      	movs	r2, #0
 8005958:	605a      	str	r2, [r3, #4]
 800595a:	e014      	b.n	8005986 <_malloc_r+0xae>
 800595c:	2b00      	cmp	r3, #0
 800595e:	dac5      	bge.n	80058ec <_malloc_r+0x14>
 8005960:	230c      	movs	r3, #12
 8005962:	2500      	movs	r5, #0
 8005964:	6033      	str	r3, [r6, #0]
 8005966:	0028      	movs	r0, r5
 8005968:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800596a:	6821      	ldr	r1, [r4, #0]
 800596c:	1bc9      	subs	r1, r1, r7
 800596e:	d420      	bmi.n	80059b2 <_malloc_r+0xda>
 8005970:	290b      	cmp	r1, #11
 8005972:	d918      	bls.n	80059a6 <_malloc_r+0xce>
 8005974:	19e2      	adds	r2, r4, r7
 8005976:	6027      	str	r7, [r4, #0]
 8005978:	42a3      	cmp	r3, r4
 800597a:	d112      	bne.n	80059a2 <_malloc_r+0xca>
 800597c:	9b00      	ldr	r3, [sp, #0]
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	6863      	ldr	r3, [r4, #4]
 8005982:	6011      	str	r1, [r2, #0]
 8005984:	6053      	str	r3, [r2, #4]
 8005986:	0030      	movs	r0, r6
 8005988:	0025      	movs	r5, r4
 800598a:	f000 f82f 	bl	80059ec <__malloc_unlock>
 800598e:	2207      	movs	r2, #7
 8005990:	350b      	adds	r5, #11
 8005992:	1d23      	adds	r3, r4, #4
 8005994:	4395      	bics	r5, r2
 8005996:	1aea      	subs	r2, r5, r3
 8005998:	429d      	cmp	r5, r3
 800599a:	d0e4      	beq.n	8005966 <_malloc_r+0x8e>
 800599c:	1b5b      	subs	r3, r3, r5
 800599e:	50a3      	str	r3, [r4, r2]
 80059a0:	e7e1      	b.n	8005966 <_malloc_r+0x8e>
 80059a2:	605a      	str	r2, [r3, #4]
 80059a4:	e7ec      	b.n	8005980 <_malloc_r+0xa8>
 80059a6:	6862      	ldr	r2, [r4, #4]
 80059a8:	42a3      	cmp	r3, r4
 80059aa:	d1d5      	bne.n	8005958 <_malloc_r+0x80>
 80059ac:	9b00      	ldr	r3, [sp, #0]
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	e7e9      	b.n	8005986 <_malloc_r+0xae>
 80059b2:	0023      	movs	r3, r4
 80059b4:	6864      	ldr	r4, [r4, #4]
 80059b6:	e7a2      	b.n	80058fe <_malloc_r+0x26>
 80059b8:	002c      	movs	r4, r5
 80059ba:	686d      	ldr	r5, [r5, #4]
 80059bc:	e7ab      	b.n	8005916 <_malloc_r+0x3e>
 80059be:	0013      	movs	r3, r2
 80059c0:	e7c4      	b.n	800594c <_malloc_r+0x74>
 80059c2:	230c      	movs	r3, #12
 80059c4:	0030      	movs	r0, r6
 80059c6:	6033      	str	r3, [r6, #0]
 80059c8:	f000 f810 	bl	80059ec <__malloc_unlock>
 80059cc:	e7cb      	b.n	8005966 <_malloc_r+0x8e>
 80059ce:	6027      	str	r7, [r4, #0]
 80059d0:	e7d9      	b.n	8005986 <_malloc_r+0xae>
 80059d2:	605b      	str	r3, [r3, #4]
 80059d4:	deff      	udf	#255	; 0xff
 80059d6:	46c0      	nop			; (mov r8, r8)
 80059d8:	20000470 	.word	0x20000470

080059dc <__malloc_lock>:
 80059dc:	b510      	push	{r4, lr}
 80059de:	4802      	ldr	r0, [pc, #8]	; (80059e8 <__malloc_lock+0xc>)
 80059e0:	f7ff ff0b 	bl	80057fa <__retarget_lock_acquire_recursive>
 80059e4:	bd10      	pop	{r4, pc}
 80059e6:	46c0      	nop			; (mov r8, r8)
 80059e8:	2000046c 	.word	0x2000046c

080059ec <__malloc_unlock>:
 80059ec:	b510      	push	{r4, lr}
 80059ee:	4802      	ldr	r0, [pc, #8]	; (80059f8 <__malloc_unlock+0xc>)
 80059f0:	f7ff ff04 	bl	80057fc <__retarget_lock_release_recursive>
 80059f4:	bd10      	pop	{r4, pc}
 80059f6:	46c0      	nop			; (mov r8, r8)
 80059f8:	2000046c 	.word	0x2000046c

080059fc <_sungetc_r>:
 80059fc:	b570      	push	{r4, r5, r6, lr}
 80059fe:	0014      	movs	r4, r2
 8005a00:	1c4b      	adds	r3, r1, #1
 8005a02:	d103      	bne.n	8005a0c <_sungetc_r+0x10>
 8005a04:	2501      	movs	r5, #1
 8005a06:	426d      	negs	r5, r5
 8005a08:	0028      	movs	r0, r5
 8005a0a:	bd70      	pop	{r4, r5, r6, pc}
 8005a0c:	8993      	ldrh	r3, [r2, #12]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	4393      	bics	r3, r2
 8005a12:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005a14:	81a3      	strh	r3, [r4, #12]
 8005a16:	b2ce      	uxtb	r6, r1
 8005a18:	6863      	ldr	r3, [r4, #4]
 8005a1a:	b2cd      	uxtb	r5, r1
 8005a1c:	2a00      	cmp	r2, #0
 8005a1e:	d010      	beq.n	8005a42 <_sungetc_r+0x46>
 8005a20:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005a22:	429a      	cmp	r2, r3
 8005a24:	dd07      	ble.n	8005a36 <_sungetc_r+0x3a>
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	6023      	str	r3, [r4, #0]
 8005a2c:	701e      	strb	r6, [r3, #0]
 8005a2e:	6863      	ldr	r3, [r4, #4]
 8005a30:	3301      	adds	r3, #1
 8005a32:	6063      	str	r3, [r4, #4]
 8005a34:	e7e8      	b.n	8005a08 <_sungetc_r+0xc>
 8005a36:	0021      	movs	r1, r4
 8005a38:	f000 fc60 	bl	80062fc <__submore>
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	d0f2      	beq.n	8005a26 <_sungetc_r+0x2a>
 8005a40:	e7e0      	b.n	8005a04 <_sungetc_r+0x8>
 8005a42:	6921      	ldr	r1, [r4, #16]
 8005a44:	6822      	ldr	r2, [r4, #0]
 8005a46:	2900      	cmp	r1, #0
 8005a48:	d007      	beq.n	8005a5a <_sungetc_r+0x5e>
 8005a4a:	4291      	cmp	r1, r2
 8005a4c:	d205      	bcs.n	8005a5a <_sungetc_r+0x5e>
 8005a4e:	1e51      	subs	r1, r2, #1
 8005a50:	7808      	ldrb	r0, [r1, #0]
 8005a52:	42a8      	cmp	r0, r5
 8005a54:	d101      	bne.n	8005a5a <_sungetc_r+0x5e>
 8005a56:	6021      	str	r1, [r4, #0]
 8005a58:	e7ea      	b.n	8005a30 <_sungetc_r+0x34>
 8005a5a:	6423      	str	r3, [r4, #64]	; 0x40
 8005a5c:	0023      	movs	r3, r4
 8005a5e:	3344      	adds	r3, #68	; 0x44
 8005a60:	6363      	str	r3, [r4, #52]	; 0x34
 8005a62:	2303      	movs	r3, #3
 8005a64:	63a3      	str	r3, [r4, #56]	; 0x38
 8005a66:	0023      	movs	r3, r4
 8005a68:	3346      	adds	r3, #70	; 0x46
 8005a6a:	63e2      	str	r2, [r4, #60]	; 0x3c
 8005a6c:	701e      	strb	r6, [r3, #0]
 8005a6e:	6023      	str	r3, [r4, #0]
 8005a70:	2301      	movs	r3, #1
 8005a72:	e7de      	b.n	8005a32 <_sungetc_r+0x36>

08005a74 <__ssrefill_r>:
 8005a74:	b510      	push	{r4, lr}
 8005a76:	000c      	movs	r4, r1
 8005a78:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005a7a:	2900      	cmp	r1, #0
 8005a7c:	d00e      	beq.n	8005a9c <__ssrefill_r+0x28>
 8005a7e:	0023      	movs	r3, r4
 8005a80:	3344      	adds	r3, #68	; 0x44
 8005a82:	4299      	cmp	r1, r3
 8005a84:	d001      	beq.n	8005a8a <__ssrefill_r+0x16>
 8005a86:	f7ff febb 	bl	8005800 <_free_r>
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a8e:	6360      	str	r0, [r4, #52]	; 0x34
 8005a90:	6063      	str	r3, [r4, #4]
 8005a92:	4283      	cmp	r3, r0
 8005a94:	d002      	beq.n	8005a9c <__ssrefill_r+0x28>
 8005a96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	bd10      	pop	{r4, pc}
 8005a9c:	6923      	ldr	r3, [r4, #16]
 8005a9e:	2001      	movs	r0, #1
 8005aa0:	6023      	str	r3, [r4, #0]
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	89a2      	ldrh	r2, [r4, #12]
 8005aa6:	6063      	str	r3, [r4, #4]
 8005aa8:	3320      	adds	r3, #32
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	81a3      	strh	r3, [r4, #12]
 8005aae:	4240      	negs	r0, r0
 8005ab0:	e7f3      	b.n	8005a9a <__ssrefill_r+0x26>
	...

08005ab4 <__ssvfiscanf_r>:
 8005ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ab6:	4cae      	ldr	r4, [pc, #696]	; (8005d70 <__ssvfiscanf_r+0x2bc>)
 8005ab8:	0006      	movs	r6, r0
 8005aba:	44a5      	add	sp, r4
 8005abc:	000c      	movs	r4, r1
 8005abe:	2100      	movs	r1, #0
 8005ac0:	20be      	movs	r0, #190	; 0xbe
 8005ac2:	9146      	str	r1, [sp, #280]	; 0x118
 8005ac4:	9147      	str	r1, [sp, #284]	; 0x11c
 8005ac6:	a903      	add	r1, sp, #12
 8005ac8:	9148      	str	r1, [sp, #288]	; 0x120
 8005aca:	49aa      	ldr	r1, [pc, #680]	; (8005d74 <__ssvfiscanf_r+0x2c0>)
 8005acc:	0040      	lsls	r0, r0, #1
 8005ace:	ad43      	add	r5, sp, #268	; 0x10c
 8005ad0:	5029      	str	r1, [r5, r0]
 8005ad2:	25c0      	movs	r5, #192	; 0xc0
 8005ad4:	49a8      	ldr	r1, [pc, #672]	; (8005d78 <__ssvfiscanf_r+0x2c4>)
 8005ad6:	006d      	lsls	r5, r5, #1
 8005ad8:	a843      	add	r0, sp, #268	; 0x10c
 8005ada:	5141      	str	r1, [r0, r5]
 8005adc:	9302      	str	r3, [sp, #8]
 8005ade:	7815      	ldrb	r5, [r2, #0]
 8005ae0:	2d00      	cmp	r5, #0
 8005ae2:	d100      	bne.n	8005ae6 <__ssvfiscanf_r+0x32>
 8005ae4:	e141      	b.n	8005d6a <__ssvfiscanf_r+0x2b6>
 8005ae6:	4ba5      	ldr	r3, [pc, #660]	; (8005d7c <__ssvfiscanf_r+0x2c8>)
 8005ae8:	2008      	movs	r0, #8
 8005aea:	5d59      	ldrb	r1, [r3, r5]
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	2308      	movs	r3, #8
 8005af0:	1c57      	adds	r7, r2, #1
 8005af2:	400b      	ands	r3, r1
 8005af4:	4201      	tst	r1, r0
 8005af6:	d01e      	beq.n	8005b36 <__ssvfiscanf_r+0x82>
 8005af8:	6863      	ldr	r3, [r4, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	dd11      	ble.n	8005b22 <__ssvfiscanf_r+0x6e>
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	9900      	ldr	r1, [sp, #0]
 8005b02:	781a      	ldrb	r2, [r3, #0]
 8005b04:	5c8a      	ldrb	r2, [r1, r2]
 8005b06:	2108      	movs	r1, #8
 8005b08:	420a      	tst	r2, r1
 8005b0a:	d101      	bne.n	8005b10 <__ssvfiscanf_r+0x5c>
 8005b0c:	003a      	movs	r2, r7
 8005b0e:	e7e6      	b.n	8005ade <__ssvfiscanf_r+0x2a>
 8005b10:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8005b12:	3301      	adds	r3, #1
 8005b14:	3201      	adds	r2, #1
 8005b16:	9247      	str	r2, [sp, #284]	; 0x11c
 8005b18:	6862      	ldr	r2, [r4, #4]
 8005b1a:	6023      	str	r3, [r4, #0]
 8005b1c:	3a01      	subs	r2, #1
 8005b1e:	6062      	str	r2, [r4, #4]
 8005b20:	e7ea      	b.n	8005af8 <__ssvfiscanf_r+0x44>
 8005b22:	22c0      	movs	r2, #192	; 0xc0
 8005b24:	ab43      	add	r3, sp, #268	; 0x10c
 8005b26:	0052      	lsls	r2, r2, #1
 8005b28:	0021      	movs	r1, r4
 8005b2a:	0030      	movs	r0, r6
 8005b2c:	589b      	ldr	r3, [r3, r2]
 8005b2e:	4798      	blx	r3
 8005b30:	2800      	cmp	r0, #0
 8005b32:	d0e4      	beq.n	8005afe <__ssvfiscanf_r+0x4a>
 8005b34:	e7ea      	b.n	8005b0c <__ssvfiscanf_r+0x58>
 8005b36:	2d25      	cmp	r5, #37	; 0x25
 8005b38:	d162      	bne.n	8005c00 <__ssvfiscanf_r+0x14c>
 8005b3a:	9345      	str	r3, [sp, #276]	; 0x114
 8005b3c:	9343      	str	r3, [sp, #268]	; 0x10c
 8005b3e:	7853      	ldrb	r3, [r2, #1]
 8005b40:	2b2a      	cmp	r3, #42	; 0x2a
 8005b42:	d102      	bne.n	8005b4a <__ssvfiscanf_r+0x96>
 8005b44:	3b1a      	subs	r3, #26
 8005b46:	9343      	str	r3, [sp, #268]	; 0x10c
 8005b48:	1c97      	adds	r7, r2, #2
 8005b4a:	003d      	movs	r5, r7
 8005b4c:	220a      	movs	r2, #10
 8005b4e:	7829      	ldrb	r1, [r5, #0]
 8005b50:	1c6b      	adds	r3, r5, #1
 8005b52:	9301      	str	r3, [sp, #4]
 8005b54:	000b      	movs	r3, r1
 8005b56:	3b30      	subs	r3, #48	; 0x30
 8005b58:	2b09      	cmp	r3, #9
 8005b5a:	d91e      	bls.n	8005b9a <__ssvfiscanf_r+0xe6>
 8005b5c:	4f88      	ldr	r7, [pc, #544]	; (8005d80 <__ssvfiscanf_r+0x2cc>)
 8005b5e:	2203      	movs	r2, #3
 8005b60:	0038      	movs	r0, r7
 8005b62:	f000 fc3f 	bl	80063e4 <memchr>
 8005b66:	2800      	cmp	r0, #0
 8005b68:	d006      	beq.n	8005b78 <__ssvfiscanf_r+0xc4>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	1bc0      	subs	r0, r0, r7
 8005b6e:	4083      	lsls	r3, r0
 8005b70:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005b72:	9d01      	ldr	r5, [sp, #4]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	9343      	str	r3, [sp, #268]	; 0x10c
 8005b78:	1c6f      	adds	r7, r5, #1
 8005b7a:	782d      	ldrb	r5, [r5, #0]
 8005b7c:	2d78      	cmp	r5, #120	; 0x78
 8005b7e:	d807      	bhi.n	8005b90 <__ssvfiscanf_r+0xdc>
 8005b80:	2d57      	cmp	r5, #87	; 0x57
 8005b82:	d811      	bhi.n	8005ba8 <__ssvfiscanf_r+0xf4>
 8005b84:	2d25      	cmp	r5, #37	; 0x25
 8005b86:	d03b      	beq.n	8005c00 <__ssvfiscanf_r+0x14c>
 8005b88:	d835      	bhi.n	8005bf6 <__ssvfiscanf_r+0x142>
 8005b8a:	2d00      	cmp	r5, #0
 8005b8c:	d100      	bne.n	8005b90 <__ssvfiscanf_r+0xdc>
 8005b8e:	e0e9      	b.n	8005d64 <__ssvfiscanf_r+0x2b0>
 8005b90:	2303      	movs	r3, #3
 8005b92:	9349      	str	r3, [sp, #292]	; 0x124
 8005b94:	3307      	adds	r3, #7
 8005b96:	9344      	str	r3, [sp, #272]	; 0x110
 8005b98:	e06d      	b.n	8005c76 <__ssvfiscanf_r+0x1c2>
 8005b9a:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005b9c:	9d01      	ldr	r5, [sp, #4]
 8005b9e:	4353      	muls	r3, r2
 8005ba0:	3b30      	subs	r3, #48	; 0x30
 8005ba2:	185b      	adds	r3, r3, r1
 8005ba4:	9345      	str	r3, [sp, #276]	; 0x114
 8005ba6:	e7d2      	b.n	8005b4e <__ssvfiscanf_r+0x9a>
 8005ba8:	0028      	movs	r0, r5
 8005baa:	3858      	subs	r0, #88	; 0x58
 8005bac:	2820      	cmp	r0, #32
 8005bae:	d8ef      	bhi.n	8005b90 <__ssvfiscanf_r+0xdc>
 8005bb0:	f7fa fab2 	bl	8000118 <__gnu_thumb1_case_shi>
 8005bb4:	ffee004d 	.word	0xffee004d
 8005bb8:	007fffee 	.word	0x007fffee
 8005bbc:	ffeeffee 	.word	0xffeeffee
 8005bc0:	ffeeffee 	.word	0xffeeffee
 8005bc4:	ffeeffee 	.word	0xffeeffee
 8005bc8:	008affee 	.word	0x008affee
 8005bcc:	0024007d 	.word	0x0024007d
 8005bd0:	00240024 	.word	0x00240024
 8005bd4:	0059ffee 	.word	0x0059ffee
 8005bd8:	ffeeffee 	.word	0xffeeffee
 8005bdc:	ffeeffee 	.word	0xffeeffee
 8005be0:	005d0092 	.word	0x005d0092
 8005be4:	ffee0049 	.word	0xffee0049
 8005be8:	0090ffee 	.word	0x0090ffee
 8005bec:	007dffee 	.word	0x007dffee
 8005bf0:	ffeeffee 	.word	0xffeeffee
 8005bf4:	004d      	.short	0x004d
 8005bf6:	3d45      	subs	r5, #69	; 0x45
 8005bf8:	2d02      	cmp	r5, #2
 8005bfa:	d8c9      	bhi.n	8005b90 <__ssvfiscanf_r+0xdc>
 8005bfc:	2305      	movs	r3, #5
 8005bfe:	e039      	b.n	8005c74 <__ssvfiscanf_r+0x1c0>
 8005c00:	6863      	ldr	r3, [r4, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	dd0d      	ble.n	8005c22 <__ssvfiscanf_r+0x16e>
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	781a      	ldrb	r2, [r3, #0]
 8005c0a:	42aa      	cmp	r2, r5
 8005c0c:	d000      	beq.n	8005c10 <__ssvfiscanf_r+0x15c>
 8005c0e:	e0ac      	b.n	8005d6a <__ssvfiscanf_r+0x2b6>
 8005c10:	3301      	adds	r3, #1
 8005c12:	6862      	ldr	r2, [r4, #4]
 8005c14:	6023      	str	r3, [r4, #0]
 8005c16:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005c18:	3a01      	subs	r2, #1
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	6062      	str	r2, [r4, #4]
 8005c1e:	9347      	str	r3, [sp, #284]	; 0x11c
 8005c20:	e774      	b.n	8005b0c <__ssvfiscanf_r+0x58>
 8005c22:	22c0      	movs	r2, #192	; 0xc0
 8005c24:	ab43      	add	r3, sp, #268	; 0x10c
 8005c26:	0052      	lsls	r2, r2, #1
 8005c28:	0021      	movs	r1, r4
 8005c2a:	0030      	movs	r0, r6
 8005c2c:	589b      	ldr	r3, [r3, r2]
 8005c2e:	4798      	blx	r3
 8005c30:	2800      	cmp	r0, #0
 8005c32:	d0e8      	beq.n	8005c06 <__ssvfiscanf_r+0x152>
 8005c34:	9846      	ldr	r0, [sp, #280]	; 0x118
 8005c36:	2800      	cmp	r0, #0
 8005c38:	d000      	beq.n	8005c3c <__ssvfiscanf_r+0x188>
 8005c3a:	e08f      	b.n	8005d5c <__ssvfiscanf_r+0x2a8>
 8005c3c:	3801      	subs	r0, #1
 8005c3e:	23a5      	movs	r3, #165	; 0xa5
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	449d      	add	sp, r3
 8005c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c46:	2320      	movs	r3, #32
 8005c48:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	9343      	str	r3, [sp, #268]	; 0x10c
 8005c4e:	2380      	movs	r3, #128	; 0x80
 8005c50:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4313      	orrs	r3, r2
 8005c56:	9343      	str	r3, [sp, #268]	; 0x10c
 8005c58:	2310      	movs	r3, #16
 8005c5a:	9344      	str	r3, [sp, #272]	; 0x110
 8005c5c:	236e      	movs	r3, #110	; 0x6e
 8005c5e:	42ab      	cmp	r3, r5
 8005c60:	419b      	sbcs	r3, r3
 8005c62:	425b      	negs	r3, r3
 8005c64:	e001      	b.n	8005c6a <__ssvfiscanf_r+0x1b6>
 8005c66:	2300      	movs	r3, #0
 8005c68:	9344      	str	r3, [sp, #272]	; 0x110
 8005c6a:	3303      	adds	r3, #3
 8005c6c:	e002      	b.n	8005c74 <__ssvfiscanf_r+0x1c0>
 8005c6e:	2308      	movs	r3, #8
 8005c70:	9344      	str	r3, [sp, #272]	; 0x110
 8005c72:	3b04      	subs	r3, #4
 8005c74:	9349      	str	r3, [sp, #292]	; 0x124
 8005c76:	6863      	ldr	r3, [r4, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	dd3c      	ble.n	8005cf6 <__ssvfiscanf_r+0x242>
 8005c7c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005c7e:	065b      	lsls	r3, r3, #25
 8005c80:	d406      	bmi.n	8005c90 <__ssvfiscanf_r+0x1dc>
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	9900      	ldr	r1, [sp, #0]
 8005c86:	781a      	ldrb	r2, [r3, #0]
 8005c88:	5c8a      	ldrb	r2, [r1, r2]
 8005c8a:	2108      	movs	r1, #8
 8005c8c:	420a      	tst	r2, r1
 8005c8e:	d13c      	bne.n	8005d0a <__ssvfiscanf_r+0x256>
 8005c90:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	dc4e      	bgt.n	8005d34 <__ssvfiscanf_r+0x280>
 8005c96:	0022      	movs	r2, r4
 8005c98:	0030      	movs	r0, r6
 8005c9a:	ab02      	add	r3, sp, #8
 8005c9c:	a943      	add	r1, sp, #268	; 0x10c
 8005c9e:	f000 f873 	bl	8005d88 <_scanf_chars>
 8005ca2:	2801      	cmp	r0, #1
 8005ca4:	d061      	beq.n	8005d6a <__ssvfiscanf_r+0x2b6>
 8005ca6:	2802      	cmp	r0, #2
 8005ca8:	d000      	beq.n	8005cac <__ssvfiscanf_r+0x1f8>
 8005caa:	e72f      	b.n	8005b0c <__ssvfiscanf_r+0x58>
 8005cac:	e7c2      	b.n	8005c34 <__ssvfiscanf_r+0x180>
 8005cae:	230a      	movs	r3, #10
 8005cb0:	e7d3      	b.n	8005c5a <__ssvfiscanf_r+0x1a6>
 8005cb2:	0039      	movs	r1, r7
 8005cb4:	a803      	add	r0, sp, #12
 8005cb6:	f000 fae5 	bl	8006284 <__sccl>
 8005cba:	2340      	movs	r3, #64	; 0x40
 8005cbc:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005cbe:	0007      	movs	r7, r0
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	9343      	str	r3, [sp, #268]	; 0x10c
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e7d5      	b.n	8005c74 <__ssvfiscanf_r+0x1c0>
 8005cc8:	2340      	movs	r3, #64	; 0x40
 8005cca:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	9343      	str	r3, [sp, #268]	; 0x10c
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	e7cf      	b.n	8005c74 <__ssvfiscanf_r+0x1c0>
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	e7cd      	b.n	8005c74 <__ssvfiscanf_r+0x1c0>
 8005cd8:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005cda:	06d3      	lsls	r3, r2, #27
 8005cdc:	d500      	bpl.n	8005ce0 <__ssvfiscanf_r+0x22c>
 8005cde:	e715      	b.n	8005b0c <__ssvfiscanf_r+0x58>
 8005ce0:	9b02      	ldr	r3, [sp, #8]
 8005ce2:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8005ce4:	1d18      	adds	r0, r3, #4
 8005ce6:	9002      	str	r0, [sp, #8]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	07d5      	lsls	r5, r2, #31
 8005cec:	d501      	bpl.n	8005cf2 <__ssvfiscanf_r+0x23e>
 8005cee:	8019      	strh	r1, [r3, #0]
 8005cf0:	e70c      	b.n	8005b0c <__ssvfiscanf_r+0x58>
 8005cf2:	6019      	str	r1, [r3, #0]
 8005cf4:	e70a      	b.n	8005b0c <__ssvfiscanf_r+0x58>
 8005cf6:	22c0      	movs	r2, #192	; 0xc0
 8005cf8:	ab43      	add	r3, sp, #268	; 0x10c
 8005cfa:	0052      	lsls	r2, r2, #1
 8005cfc:	0021      	movs	r1, r4
 8005cfe:	0030      	movs	r0, r6
 8005d00:	589b      	ldr	r3, [r3, r2]
 8005d02:	4798      	blx	r3
 8005d04:	2800      	cmp	r0, #0
 8005d06:	d0b9      	beq.n	8005c7c <__ssvfiscanf_r+0x1c8>
 8005d08:	e794      	b.n	8005c34 <__ssvfiscanf_r+0x180>
 8005d0a:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8005d0c:	3201      	adds	r2, #1
 8005d0e:	9247      	str	r2, [sp, #284]	; 0x11c
 8005d10:	6862      	ldr	r2, [r4, #4]
 8005d12:	3a01      	subs	r2, #1
 8005d14:	6062      	str	r2, [r4, #4]
 8005d16:	2a00      	cmp	r2, #0
 8005d18:	dd02      	ble.n	8005d20 <__ssvfiscanf_r+0x26c>
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	6023      	str	r3, [r4, #0]
 8005d1e:	e7b0      	b.n	8005c82 <__ssvfiscanf_r+0x1ce>
 8005d20:	22c0      	movs	r2, #192	; 0xc0
 8005d22:	ab43      	add	r3, sp, #268	; 0x10c
 8005d24:	0052      	lsls	r2, r2, #1
 8005d26:	0021      	movs	r1, r4
 8005d28:	0030      	movs	r0, r6
 8005d2a:	589b      	ldr	r3, [r3, r2]
 8005d2c:	4798      	blx	r3
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	d0a7      	beq.n	8005c82 <__ssvfiscanf_r+0x1ce>
 8005d32:	e77f      	b.n	8005c34 <__ssvfiscanf_r+0x180>
 8005d34:	2b04      	cmp	r3, #4
 8005d36:	dc06      	bgt.n	8005d46 <__ssvfiscanf_r+0x292>
 8005d38:	0022      	movs	r2, r4
 8005d3a:	0030      	movs	r0, r6
 8005d3c:	ab02      	add	r3, sp, #8
 8005d3e:	a943      	add	r1, sp, #268	; 0x10c
 8005d40:	f000 f880 	bl	8005e44 <_scanf_i>
 8005d44:	e7ad      	b.n	8005ca2 <__ssvfiscanf_r+0x1ee>
 8005d46:	4b0f      	ldr	r3, [pc, #60]	; (8005d84 <__ssvfiscanf_r+0x2d0>)
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d100      	bne.n	8005d4e <__ssvfiscanf_r+0x29a>
 8005d4c:	e6de      	b.n	8005b0c <__ssvfiscanf_r+0x58>
 8005d4e:	0022      	movs	r2, r4
 8005d50:	0030      	movs	r0, r6
 8005d52:	ab02      	add	r3, sp, #8
 8005d54:	a943      	add	r1, sp, #268	; 0x10c
 8005d56:	e000      	b.n	8005d5a <__ssvfiscanf_r+0x2a6>
 8005d58:	bf00      	nop
 8005d5a:	e7a2      	b.n	8005ca2 <__ssvfiscanf_r+0x1ee>
 8005d5c:	89a3      	ldrh	r3, [r4, #12]
 8005d5e:	065b      	lsls	r3, r3, #25
 8005d60:	d400      	bmi.n	8005d64 <__ssvfiscanf_r+0x2b0>
 8005d62:	e76c      	b.n	8005c3e <__ssvfiscanf_r+0x18a>
 8005d64:	2001      	movs	r0, #1
 8005d66:	4240      	negs	r0, r0
 8005d68:	e769      	b.n	8005c3e <__ssvfiscanf_r+0x18a>
 8005d6a:	9846      	ldr	r0, [sp, #280]	; 0x118
 8005d6c:	e767      	b.n	8005c3e <__ssvfiscanf_r+0x18a>
 8005d6e:	46c0      	nop			; (mov r8, r8)
 8005d70:	fffffd6c 	.word	0xfffffd6c
 8005d74:	080059fd 	.word	0x080059fd
 8005d78:	08005a75 	.word	0x08005a75
 8005d7c:	08006828 	.word	0x08006828
 8005d80:	08006808 	.word	0x08006808
 8005d84:	00000000 	.word	0x00000000

08005d88 <_scanf_chars>:
 8005d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d8a:	0015      	movs	r5, r2
 8005d8c:	688a      	ldr	r2, [r1, #8]
 8005d8e:	000c      	movs	r4, r1
 8005d90:	9001      	str	r0, [sp, #4]
 8005d92:	2a00      	cmp	r2, #0
 8005d94:	d105      	bne.n	8005da2 <_scanf_chars+0x1a>
 8005d96:	6989      	ldr	r1, [r1, #24]
 8005d98:	3201      	adds	r2, #1
 8005d9a:	2900      	cmp	r1, #0
 8005d9c:	d000      	beq.n	8005da0 <_scanf_chars+0x18>
 8005d9e:	3a02      	subs	r2, #2
 8005da0:	60a2      	str	r2, [r4, #8]
 8005da2:	6822      	ldr	r2, [r4, #0]
 8005da4:	06d2      	lsls	r2, r2, #27
 8005da6:	d403      	bmi.n	8005db0 <_scanf_chars+0x28>
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	1d11      	adds	r1, r2, #4
 8005dac:	6019      	str	r1, [r3, #0]
 8005dae:	6817      	ldr	r7, [r2, #0]
 8005db0:	2600      	movs	r6, #0
 8005db2:	69a0      	ldr	r0, [r4, #24]
 8005db4:	2800      	cmp	r0, #0
 8005db6:	d013      	beq.n	8005de0 <_scanf_chars+0x58>
 8005db8:	2801      	cmp	r0, #1
 8005dba:	d108      	bne.n	8005dce <_scanf_chars+0x46>
 8005dbc:	682b      	ldr	r3, [r5, #0]
 8005dbe:	6962      	ldr	r2, [r4, #20]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	5cd3      	ldrb	r3, [r2, r3]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10b      	bne.n	8005de0 <_scanf_chars+0x58>
 8005dc8:	2e00      	cmp	r6, #0
 8005dca:	d038      	beq.n	8005e3e <_scanf_chars+0xb6>
 8005dcc:	e026      	b.n	8005e1c <_scanf_chars+0x94>
 8005dce:	2802      	cmp	r0, #2
 8005dd0:	d124      	bne.n	8005e1c <_scanf_chars+0x94>
 8005dd2:	682b      	ldr	r3, [r5, #0]
 8005dd4:	4a1a      	ldr	r2, [pc, #104]	; (8005e40 <_scanf_chars+0xb8>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	5cd3      	ldrb	r3, [r2, r3]
 8005dda:	2208      	movs	r2, #8
 8005ddc:	4213      	tst	r3, r2
 8005dde:	d11d      	bne.n	8005e1c <_scanf_chars+0x94>
 8005de0:	2210      	movs	r2, #16
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	3601      	adds	r6, #1
 8005de6:	4213      	tst	r3, r2
 8005de8:	d103      	bne.n	8005df2 <_scanf_chars+0x6a>
 8005dea:	682b      	ldr	r3, [r5, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	703b      	strb	r3, [r7, #0]
 8005df0:	3701      	adds	r7, #1
 8005df2:	682a      	ldr	r2, [r5, #0]
 8005df4:	686b      	ldr	r3, [r5, #4]
 8005df6:	3201      	adds	r2, #1
 8005df8:	602a      	str	r2, [r5, #0]
 8005dfa:	68a2      	ldr	r2, [r4, #8]
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	3a01      	subs	r2, #1
 8005e00:	606b      	str	r3, [r5, #4]
 8005e02:	60a2      	str	r2, [r4, #8]
 8005e04:	2a00      	cmp	r2, #0
 8005e06:	d009      	beq.n	8005e1c <_scanf_chars+0x94>
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	dcd2      	bgt.n	8005db2 <_scanf_chars+0x2a>
 8005e0c:	23c0      	movs	r3, #192	; 0xc0
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	0029      	movs	r1, r5
 8005e12:	58e3      	ldr	r3, [r4, r3]
 8005e14:	9801      	ldr	r0, [sp, #4]
 8005e16:	4798      	blx	r3
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d0ca      	beq.n	8005db2 <_scanf_chars+0x2a>
 8005e1c:	6822      	ldr	r2, [r4, #0]
 8005e1e:	2310      	movs	r3, #16
 8005e20:	0011      	movs	r1, r2
 8005e22:	4019      	ands	r1, r3
 8005e24:	421a      	tst	r2, r3
 8005e26:	d106      	bne.n	8005e36 <_scanf_chars+0xae>
 8005e28:	68e3      	ldr	r3, [r4, #12]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	60e3      	str	r3, [r4, #12]
 8005e2e:	69a3      	ldr	r3, [r4, #24]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d000      	beq.n	8005e36 <_scanf_chars+0xae>
 8005e34:	7039      	strb	r1, [r7, #0]
 8005e36:	2000      	movs	r0, #0
 8005e38:	6923      	ldr	r3, [r4, #16]
 8005e3a:	199b      	adds	r3, r3, r6
 8005e3c:	6123      	str	r3, [r4, #16]
 8005e3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e40:	08006828 	.word	0x08006828

08005e44 <_scanf_i>:
 8005e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e46:	b08b      	sub	sp, #44	; 0x2c
 8005e48:	9301      	str	r3, [sp, #4]
 8005e4a:	4b7a      	ldr	r3, [pc, #488]	; (8006034 <_scanf_i+0x1f0>)
 8005e4c:	0016      	movs	r6, r2
 8005e4e:	9004      	str	r0, [sp, #16]
 8005e50:	aa07      	add	r2, sp, #28
 8005e52:	cba1      	ldmia	r3!, {r0, r5, r7}
 8005e54:	c2a1      	stmia	r2!, {r0, r5, r7}
 8005e56:	4a78      	ldr	r2, [pc, #480]	; (8006038 <_scanf_i+0x1f4>)
 8005e58:	698b      	ldr	r3, [r1, #24]
 8005e5a:	000c      	movs	r4, r1
 8005e5c:	9205      	str	r2, [sp, #20]
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	d001      	beq.n	8005e66 <_scanf_i+0x22>
 8005e62:	4b76      	ldr	r3, [pc, #472]	; (800603c <_scanf_i+0x1f8>)
 8005e64:	9305      	str	r3, [sp, #20]
 8005e66:	22ae      	movs	r2, #174	; 0xae
 8005e68:	2000      	movs	r0, #0
 8005e6a:	68a3      	ldr	r3, [r4, #8]
 8005e6c:	0052      	lsls	r2, r2, #1
 8005e6e:	1e59      	subs	r1, r3, #1
 8005e70:	9003      	str	r0, [sp, #12]
 8005e72:	4291      	cmp	r1, r2
 8005e74:	d905      	bls.n	8005e82 <_scanf_i+0x3e>
 8005e76:	3b5e      	subs	r3, #94	; 0x5e
 8005e78:	3bff      	subs	r3, #255	; 0xff
 8005e7a:	9303      	str	r3, [sp, #12]
 8005e7c:	235e      	movs	r3, #94	; 0x5e
 8005e7e:	33ff      	adds	r3, #255	; 0xff
 8005e80:	60a3      	str	r3, [r4, #8]
 8005e82:	0023      	movs	r3, r4
 8005e84:	331c      	adds	r3, #28
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	23d0      	movs	r3, #208	; 0xd0
 8005e8a:	2700      	movs	r7, #0
 8005e8c:	6822      	ldr	r2, [r4, #0]
 8005e8e:	011b      	lsls	r3, r3, #4
 8005e90:	4313      	orrs	r3, r2
 8005e92:	6023      	str	r3, [r4, #0]
 8005e94:	9b00      	ldr	r3, [sp, #0]
 8005e96:	9302      	str	r3, [sp, #8]
 8005e98:	6833      	ldr	r3, [r6, #0]
 8005e9a:	a807      	add	r0, sp, #28
 8005e9c:	7819      	ldrb	r1, [r3, #0]
 8005e9e:	00bb      	lsls	r3, r7, #2
 8005ea0:	2202      	movs	r2, #2
 8005ea2:	5818      	ldr	r0, [r3, r0]
 8005ea4:	f000 fa9e 	bl	80063e4 <memchr>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d02a      	beq.n	8005f02 <_scanf_i+0xbe>
 8005eac:	2f01      	cmp	r7, #1
 8005eae:	d161      	bne.n	8005f74 <_scanf_i+0x130>
 8005eb0:	6863      	ldr	r3, [r4, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d106      	bne.n	8005ec4 <_scanf_i+0x80>
 8005eb6:	3308      	adds	r3, #8
 8005eb8:	6822      	ldr	r2, [r4, #0]
 8005eba:	6063      	str	r3, [r4, #4]
 8005ebc:	33f9      	adds	r3, #249	; 0xf9
 8005ebe:	33ff      	adds	r3, #255	; 0xff
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	6023      	str	r3, [r4, #0]
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	4a5e      	ldr	r2, [pc, #376]	; (8006040 <_scanf_i+0x1fc>)
 8005ec8:	4013      	ands	r3, r2
 8005eca:	6023      	str	r3, [r4, #0]
 8005ecc:	68a3      	ldr	r3, [r4, #8]
 8005ece:	1e5a      	subs	r2, r3, #1
 8005ed0:	60a2      	str	r2, [r4, #8]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d015      	beq.n	8005f02 <_scanf_i+0xbe>
 8005ed6:	6833      	ldr	r3, [r6, #0]
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	6032      	str	r2, [r6, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	9a02      	ldr	r2, [sp, #8]
 8005ee0:	7013      	strb	r3, [r2, #0]
 8005ee2:	6873      	ldr	r3, [r6, #4]
 8005ee4:	1c55      	adds	r5, r2, #1
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	6073      	str	r3, [r6, #4]
 8005eea:	9502      	str	r5, [sp, #8]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	dc08      	bgt.n	8005f02 <_scanf_i+0xbe>
 8005ef0:	23c0      	movs	r3, #192	; 0xc0
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	0031      	movs	r1, r6
 8005ef6:	58e3      	ldr	r3, [r4, r3]
 8005ef8:	9804      	ldr	r0, [sp, #16]
 8005efa:	4798      	blx	r3
 8005efc:	2800      	cmp	r0, #0
 8005efe:	d000      	beq.n	8005f02 <_scanf_i+0xbe>
 8005f00:	e080      	b.n	8006004 <_scanf_i+0x1c0>
 8005f02:	3701      	adds	r7, #1
 8005f04:	2f03      	cmp	r7, #3
 8005f06:	d1c7      	bne.n	8005e98 <_scanf_i+0x54>
 8005f08:	6863      	ldr	r3, [r4, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <_scanf_i+0xce>
 8005f0e:	330a      	adds	r3, #10
 8005f10:	6063      	str	r3, [r4, #4]
 8005f12:	2110      	movs	r1, #16
 8005f14:	2700      	movs	r7, #0
 8005f16:	6863      	ldr	r3, [r4, #4]
 8005f18:	6960      	ldr	r0, [r4, #20]
 8005f1a:	1ac9      	subs	r1, r1, r3
 8005f1c:	4b49      	ldr	r3, [pc, #292]	; (8006044 <_scanf_i+0x200>)
 8005f1e:	18c9      	adds	r1, r1, r3
 8005f20:	f000 f9b0 	bl	8006284 <__sccl>
 8005f24:	9d02      	ldr	r5, [sp, #8]
 8005f26:	68a3      	ldr	r3, [r4, #8]
 8005f28:	6820      	ldr	r0, [r4, #0]
 8005f2a:	9302      	str	r3, [sp, #8]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d040      	beq.n	8005fb2 <_scanf_i+0x16e>
 8005f30:	6831      	ldr	r1, [r6, #0]
 8005f32:	6963      	ldr	r3, [r4, #20]
 8005f34:	780a      	ldrb	r2, [r1, #0]
 8005f36:	5c9b      	ldrb	r3, [r3, r2]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d03a      	beq.n	8005fb2 <_scanf_i+0x16e>
 8005f3c:	2a30      	cmp	r2, #48	; 0x30
 8005f3e:	d129      	bne.n	8005f94 <_scanf_i+0x150>
 8005f40:	2380      	movs	r3, #128	; 0x80
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	4218      	tst	r0, r3
 8005f46:	d025      	beq.n	8005f94 <_scanf_i+0x150>
 8005f48:	9b03      	ldr	r3, [sp, #12]
 8005f4a:	3701      	adds	r7, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d005      	beq.n	8005f5c <_scanf_i+0x118>
 8005f50:	001a      	movs	r2, r3
 8005f52:	9b02      	ldr	r3, [sp, #8]
 8005f54:	3a01      	subs	r2, #1
 8005f56:	3301      	adds	r3, #1
 8005f58:	9203      	str	r2, [sp, #12]
 8005f5a:	60a3      	str	r3, [r4, #8]
 8005f5c:	6873      	ldr	r3, [r6, #4]
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	6073      	str	r3, [r6, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	dd1d      	ble.n	8005fa2 <_scanf_i+0x15e>
 8005f66:	6833      	ldr	r3, [r6, #0]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	6033      	str	r3, [r6, #0]
 8005f6c:	68a3      	ldr	r3, [r4, #8]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	60a3      	str	r3, [r4, #8]
 8005f72:	e7d8      	b.n	8005f26 <_scanf_i+0xe2>
 8005f74:	2f02      	cmp	r7, #2
 8005f76:	d1a9      	bne.n	8005ecc <_scanf_i+0x88>
 8005f78:	21c0      	movs	r1, #192	; 0xc0
 8005f7a:	2380      	movs	r3, #128	; 0x80
 8005f7c:	6822      	ldr	r2, [r4, #0]
 8005f7e:	00c9      	lsls	r1, r1, #3
 8005f80:	4011      	ands	r1, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4299      	cmp	r1, r3
 8005f86:	d1bf      	bne.n	8005f08 <_scanf_i+0xc4>
 8005f88:	3bf1      	subs	r3, #241	; 0xf1
 8005f8a:	3bff      	subs	r3, #255	; 0xff
 8005f8c:	6063      	str	r3, [r4, #4]
 8005f8e:	33f0      	adds	r3, #240	; 0xf0
 8005f90:	4313      	orrs	r3, r2
 8005f92:	e79a      	b.n	8005eca <_scanf_i+0x86>
 8005f94:	4b2c      	ldr	r3, [pc, #176]	; (8006048 <_scanf_i+0x204>)
 8005f96:	4003      	ands	r3, r0
 8005f98:	6023      	str	r3, [r4, #0]
 8005f9a:	780b      	ldrb	r3, [r1, #0]
 8005f9c:	702b      	strb	r3, [r5, #0]
 8005f9e:	3501      	adds	r5, #1
 8005fa0:	e7dc      	b.n	8005f5c <_scanf_i+0x118>
 8005fa2:	23c0      	movs	r3, #192	; 0xc0
 8005fa4:	005b      	lsls	r3, r3, #1
 8005fa6:	0031      	movs	r1, r6
 8005fa8:	58e3      	ldr	r3, [r4, r3]
 8005faa:	9804      	ldr	r0, [sp, #16]
 8005fac:	4798      	blx	r3
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d0dc      	beq.n	8005f6c <_scanf_i+0x128>
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	05db      	lsls	r3, r3, #23
 8005fb6:	d50e      	bpl.n	8005fd6 <_scanf_i+0x192>
 8005fb8:	9b00      	ldr	r3, [sp, #0]
 8005fba:	429d      	cmp	r5, r3
 8005fbc:	d907      	bls.n	8005fce <_scanf_i+0x18a>
 8005fbe:	23be      	movs	r3, #190	; 0xbe
 8005fc0:	3d01      	subs	r5, #1
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	0032      	movs	r2, r6
 8005fc6:	7829      	ldrb	r1, [r5, #0]
 8005fc8:	58e3      	ldr	r3, [r4, r3]
 8005fca:	9804      	ldr	r0, [sp, #16]
 8005fcc:	4798      	blx	r3
 8005fce:	9b00      	ldr	r3, [sp, #0]
 8005fd0:	2001      	movs	r0, #1
 8005fd2:	429d      	cmp	r5, r3
 8005fd4:	d029      	beq.n	800602a <_scanf_i+0x1e6>
 8005fd6:	6821      	ldr	r1, [r4, #0]
 8005fd8:	2310      	movs	r3, #16
 8005fda:	000a      	movs	r2, r1
 8005fdc:	401a      	ands	r2, r3
 8005fde:	4219      	tst	r1, r3
 8005fe0:	d11c      	bne.n	800601c <_scanf_i+0x1d8>
 8005fe2:	702a      	strb	r2, [r5, #0]
 8005fe4:	6863      	ldr	r3, [r4, #4]
 8005fe6:	9900      	ldr	r1, [sp, #0]
 8005fe8:	9804      	ldr	r0, [sp, #16]
 8005fea:	9e05      	ldr	r6, [sp, #20]
 8005fec:	47b0      	blx	r6
 8005fee:	9b01      	ldr	r3, [sp, #4]
 8005ff0:	6822      	ldr	r2, [r4, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	0691      	lsls	r1, r2, #26
 8005ff6:	d507      	bpl.n	8006008 <_scanf_i+0x1c4>
 8005ff8:	9901      	ldr	r1, [sp, #4]
 8005ffa:	1d1a      	adds	r2, r3, #4
 8005ffc:	600a      	str	r2, [r1, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6018      	str	r0, [r3, #0]
 8006002:	e008      	b.n	8006016 <_scanf_i+0x1d2>
 8006004:	2700      	movs	r7, #0
 8006006:	e7d4      	b.n	8005fb2 <_scanf_i+0x16e>
 8006008:	1d19      	adds	r1, r3, #4
 800600a:	07d6      	lsls	r6, r2, #31
 800600c:	d50f      	bpl.n	800602e <_scanf_i+0x1ea>
 800600e:	9a01      	ldr	r2, [sp, #4]
 8006010:	6011      	str	r1, [r2, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	8018      	strh	r0, [r3, #0]
 8006016:	68e3      	ldr	r3, [r4, #12]
 8006018:	3301      	adds	r3, #1
 800601a:	60e3      	str	r3, [r4, #12]
 800601c:	2000      	movs	r0, #0
 800601e:	9b00      	ldr	r3, [sp, #0]
 8006020:	1aed      	subs	r5, r5, r3
 8006022:	6923      	ldr	r3, [r4, #16]
 8006024:	19ed      	adds	r5, r5, r7
 8006026:	195b      	adds	r3, r3, r5
 8006028:	6123      	str	r3, [r4, #16]
 800602a:	b00b      	add	sp, #44	; 0x2c
 800602c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800602e:	9a01      	ldr	r2, [sp, #4]
 8006030:	6011      	str	r1, [r2, #0]
 8006032:	e7e4      	b.n	8005ffe <_scanf_i+0x1ba>
 8006034:	0800677c 	.word	0x0800677c
 8006038:	08006579 	.word	0x08006579
 800603c:	08006685 	.word	0x08006685
 8006040:	fffffaff 	.word	0xfffffaff
 8006044:	0800680c 	.word	0x0800680c
 8006048:	fffff6ff 	.word	0xfffff6ff

0800604c <__sflush_r>:
 800604c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800604e:	898b      	ldrh	r3, [r1, #12]
 8006050:	0005      	movs	r5, r0
 8006052:	000c      	movs	r4, r1
 8006054:	071a      	lsls	r2, r3, #28
 8006056:	d45c      	bmi.n	8006112 <__sflush_r+0xc6>
 8006058:	684a      	ldr	r2, [r1, #4]
 800605a:	2a00      	cmp	r2, #0
 800605c:	dc04      	bgt.n	8006068 <__sflush_r+0x1c>
 800605e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006060:	2a00      	cmp	r2, #0
 8006062:	dc01      	bgt.n	8006068 <__sflush_r+0x1c>
 8006064:	2000      	movs	r0, #0
 8006066:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006068:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800606a:	2f00      	cmp	r7, #0
 800606c:	d0fa      	beq.n	8006064 <__sflush_r+0x18>
 800606e:	2200      	movs	r2, #0
 8006070:	2080      	movs	r0, #128	; 0x80
 8006072:	682e      	ldr	r6, [r5, #0]
 8006074:	602a      	str	r2, [r5, #0]
 8006076:	001a      	movs	r2, r3
 8006078:	0140      	lsls	r0, r0, #5
 800607a:	6a21      	ldr	r1, [r4, #32]
 800607c:	4002      	ands	r2, r0
 800607e:	4203      	tst	r3, r0
 8006080:	d034      	beq.n	80060ec <__sflush_r+0xa0>
 8006082:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006084:	89a3      	ldrh	r3, [r4, #12]
 8006086:	075b      	lsls	r3, r3, #29
 8006088:	d506      	bpl.n	8006098 <__sflush_r+0x4c>
 800608a:	6863      	ldr	r3, [r4, #4]
 800608c:	1ac0      	subs	r0, r0, r3
 800608e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <__sflush_r+0x4c>
 8006094:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006096:	1ac0      	subs	r0, r0, r3
 8006098:	0002      	movs	r2, r0
 800609a:	2300      	movs	r3, #0
 800609c:	0028      	movs	r0, r5
 800609e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80060a0:	6a21      	ldr	r1, [r4, #32]
 80060a2:	47b8      	blx	r7
 80060a4:	89a2      	ldrh	r2, [r4, #12]
 80060a6:	1c43      	adds	r3, r0, #1
 80060a8:	d106      	bne.n	80060b8 <__sflush_r+0x6c>
 80060aa:	6829      	ldr	r1, [r5, #0]
 80060ac:	291d      	cmp	r1, #29
 80060ae:	d82c      	bhi.n	800610a <__sflush_r+0xbe>
 80060b0:	4b2a      	ldr	r3, [pc, #168]	; (800615c <__sflush_r+0x110>)
 80060b2:	410b      	asrs	r3, r1
 80060b4:	07db      	lsls	r3, r3, #31
 80060b6:	d428      	bmi.n	800610a <__sflush_r+0xbe>
 80060b8:	2300      	movs	r3, #0
 80060ba:	6063      	str	r3, [r4, #4]
 80060bc:	6923      	ldr	r3, [r4, #16]
 80060be:	6023      	str	r3, [r4, #0]
 80060c0:	04d2      	lsls	r2, r2, #19
 80060c2:	d505      	bpl.n	80060d0 <__sflush_r+0x84>
 80060c4:	1c43      	adds	r3, r0, #1
 80060c6:	d102      	bne.n	80060ce <__sflush_r+0x82>
 80060c8:	682b      	ldr	r3, [r5, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d100      	bne.n	80060d0 <__sflush_r+0x84>
 80060ce:	6560      	str	r0, [r4, #84]	; 0x54
 80060d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060d2:	602e      	str	r6, [r5, #0]
 80060d4:	2900      	cmp	r1, #0
 80060d6:	d0c5      	beq.n	8006064 <__sflush_r+0x18>
 80060d8:	0023      	movs	r3, r4
 80060da:	3344      	adds	r3, #68	; 0x44
 80060dc:	4299      	cmp	r1, r3
 80060de:	d002      	beq.n	80060e6 <__sflush_r+0x9a>
 80060e0:	0028      	movs	r0, r5
 80060e2:	f7ff fb8d 	bl	8005800 <_free_r>
 80060e6:	2000      	movs	r0, #0
 80060e8:	6360      	str	r0, [r4, #52]	; 0x34
 80060ea:	e7bc      	b.n	8006066 <__sflush_r+0x1a>
 80060ec:	2301      	movs	r3, #1
 80060ee:	0028      	movs	r0, r5
 80060f0:	47b8      	blx	r7
 80060f2:	1c43      	adds	r3, r0, #1
 80060f4:	d1c6      	bne.n	8006084 <__sflush_r+0x38>
 80060f6:	682b      	ldr	r3, [r5, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0c3      	beq.n	8006084 <__sflush_r+0x38>
 80060fc:	2b1d      	cmp	r3, #29
 80060fe:	d001      	beq.n	8006104 <__sflush_r+0xb8>
 8006100:	2b16      	cmp	r3, #22
 8006102:	d101      	bne.n	8006108 <__sflush_r+0xbc>
 8006104:	602e      	str	r6, [r5, #0]
 8006106:	e7ad      	b.n	8006064 <__sflush_r+0x18>
 8006108:	89a2      	ldrh	r2, [r4, #12]
 800610a:	2340      	movs	r3, #64	; 0x40
 800610c:	4313      	orrs	r3, r2
 800610e:	81a3      	strh	r3, [r4, #12]
 8006110:	e7a9      	b.n	8006066 <__sflush_r+0x1a>
 8006112:	690e      	ldr	r6, [r1, #16]
 8006114:	2e00      	cmp	r6, #0
 8006116:	d0a5      	beq.n	8006064 <__sflush_r+0x18>
 8006118:	680f      	ldr	r7, [r1, #0]
 800611a:	600e      	str	r6, [r1, #0]
 800611c:	1bba      	subs	r2, r7, r6
 800611e:	9201      	str	r2, [sp, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	079b      	lsls	r3, r3, #30
 8006124:	d100      	bne.n	8006128 <__sflush_r+0xdc>
 8006126:	694a      	ldr	r2, [r1, #20]
 8006128:	60a2      	str	r2, [r4, #8]
 800612a:	9b01      	ldr	r3, [sp, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	dd99      	ble.n	8006064 <__sflush_r+0x18>
 8006130:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006132:	0032      	movs	r2, r6
 8006134:	001f      	movs	r7, r3
 8006136:	0028      	movs	r0, r5
 8006138:	9b01      	ldr	r3, [sp, #4]
 800613a:	6a21      	ldr	r1, [r4, #32]
 800613c:	47b8      	blx	r7
 800613e:	2800      	cmp	r0, #0
 8006140:	dc06      	bgt.n	8006150 <__sflush_r+0x104>
 8006142:	2340      	movs	r3, #64	; 0x40
 8006144:	2001      	movs	r0, #1
 8006146:	89a2      	ldrh	r2, [r4, #12]
 8006148:	4240      	negs	r0, r0
 800614a:	4313      	orrs	r3, r2
 800614c:	81a3      	strh	r3, [r4, #12]
 800614e:	e78a      	b.n	8006066 <__sflush_r+0x1a>
 8006150:	9b01      	ldr	r3, [sp, #4]
 8006152:	1836      	adds	r6, r6, r0
 8006154:	1a1b      	subs	r3, r3, r0
 8006156:	9301      	str	r3, [sp, #4]
 8006158:	e7e7      	b.n	800612a <__sflush_r+0xde>
 800615a:	46c0      	nop			; (mov r8, r8)
 800615c:	dfbffffe 	.word	0xdfbffffe

08006160 <_fflush_r>:
 8006160:	690b      	ldr	r3, [r1, #16]
 8006162:	b570      	push	{r4, r5, r6, lr}
 8006164:	0005      	movs	r5, r0
 8006166:	000c      	movs	r4, r1
 8006168:	2b00      	cmp	r3, #0
 800616a:	d102      	bne.n	8006172 <_fflush_r+0x12>
 800616c:	2500      	movs	r5, #0
 800616e:	0028      	movs	r0, r5
 8006170:	bd70      	pop	{r4, r5, r6, pc}
 8006172:	2800      	cmp	r0, #0
 8006174:	d004      	beq.n	8006180 <_fflush_r+0x20>
 8006176:	6a03      	ldr	r3, [r0, #32]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <_fflush_r+0x20>
 800617c:	f7ff f90c 	bl	8005398 <__sinit>
 8006180:	220c      	movs	r2, #12
 8006182:	5ea3      	ldrsh	r3, [r4, r2]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0f1      	beq.n	800616c <_fflush_r+0xc>
 8006188:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800618a:	07d2      	lsls	r2, r2, #31
 800618c:	d404      	bmi.n	8006198 <_fflush_r+0x38>
 800618e:	059b      	lsls	r3, r3, #22
 8006190:	d402      	bmi.n	8006198 <_fflush_r+0x38>
 8006192:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006194:	f7ff fb31 	bl	80057fa <__retarget_lock_acquire_recursive>
 8006198:	0028      	movs	r0, r5
 800619a:	0021      	movs	r1, r4
 800619c:	f7ff ff56 	bl	800604c <__sflush_r>
 80061a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061a2:	0005      	movs	r5, r0
 80061a4:	07db      	lsls	r3, r3, #31
 80061a6:	d4e2      	bmi.n	800616e <_fflush_r+0xe>
 80061a8:	89a3      	ldrh	r3, [r4, #12]
 80061aa:	059b      	lsls	r3, r3, #22
 80061ac:	d4df      	bmi.n	800616e <_fflush_r+0xe>
 80061ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061b0:	f7ff fb24 	bl	80057fc <__retarget_lock_release_recursive>
 80061b4:	e7db      	b.n	800616e <_fflush_r+0xe>
	...

080061b8 <__swhatbuf_r>:
 80061b8:	b570      	push	{r4, r5, r6, lr}
 80061ba:	000e      	movs	r6, r1
 80061bc:	001d      	movs	r5, r3
 80061be:	230e      	movs	r3, #14
 80061c0:	5ec9      	ldrsh	r1, [r1, r3]
 80061c2:	0014      	movs	r4, r2
 80061c4:	b096      	sub	sp, #88	; 0x58
 80061c6:	2900      	cmp	r1, #0
 80061c8:	da0c      	bge.n	80061e4 <__swhatbuf_r+0x2c>
 80061ca:	89b2      	ldrh	r2, [r6, #12]
 80061cc:	2380      	movs	r3, #128	; 0x80
 80061ce:	0011      	movs	r1, r2
 80061d0:	4019      	ands	r1, r3
 80061d2:	421a      	tst	r2, r3
 80061d4:	d013      	beq.n	80061fe <__swhatbuf_r+0x46>
 80061d6:	2100      	movs	r1, #0
 80061d8:	3b40      	subs	r3, #64	; 0x40
 80061da:	2000      	movs	r0, #0
 80061dc:	6029      	str	r1, [r5, #0]
 80061de:	6023      	str	r3, [r4, #0]
 80061e0:	b016      	add	sp, #88	; 0x58
 80061e2:	bd70      	pop	{r4, r5, r6, pc}
 80061e4:	466a      	mov	r2, sp
 80061e6:	f000 f8c7 	bl	8006378 <_fstat_r>
 80061ea:	2800      	cmp	r0, #0
 80061ec:	dbed      	blt.n	80061ca <__swhatbuf_r+0x12>
 80061ee:	23f0      	movs	r3, #240	; 0xf0
 80061f0:	9901      	ldr	r1, [sp, #4]
 80061f2:	021b      	lsls	r3, r3, #8
 80061f4:	4019      	ands	r1, r3
 80061f6:	4b03      	ldr	r3, [pc, #12]	; (8006204 <__swhatbuf_r+0x4c>)
 80061f8:	18c9      	adds	r1, r1, r3
 80061fa:	424b      	negs	r3, r1
 80061fc:	4159      	adcs	r1, r3
 80061fe:	2380      	movs	r3, #128	; 0x80
 8006200:	00db      	lsls	r3, r3, #3
 8006202:	e7ea      	b.n	80061da <__swhatbuf_r+0x22>
 8006204:	ffffe000 	.word	0xffffe000

08006208 <__smakebuf_r>:
 8006208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800620a:	2602      	movs	r6, #2
 800620c:	898b      	ldrh	r3, [r1, #12]
 800620e:	0005      	movs	r5, r0
 8006210:	000c      	movs	r4, r1
 8006212:	4233      	tst	r3, r6
 8006214:	d006      	beq.n	8006224 <__smakebuf_r+0x1c>
 8006216:	0023      	movs	r3, r4
 8006218:	3347      	adds	r3, #71	; 0x47
 800621a:	6023      	str	r3, [r4, #0]
 800621c:	6123      	str	r3, [r4, #16]
 800621e:	2301      	movs	r3, #1
 8006220:	6163      	str	r3, [r4, #20]
 8006222:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006224:	466a      	mov	r2, sp
 8006226:	ab01      	add	r3, sp, #4
 8006228:	f7ff ffc6 	bl	80061b8 <__swhatbuf_r>
 800622c:	9900      	ldr	r1, [sp, #0]
 800622e:	0007      	movs	r7, r0
 8006230:	0028      	movs	r0, r5
 8006232:	f7ff fb51 	bl	80058d8 <_malloc_r>
 8006236:	2800      	cmp	r0, #0
 8006238:	d108      	bne.n	800624c <__smakebuf_r+0x44>
 800623a:	220c      	movs	r2, #12
 800623c:	5ea3      	ldrsh	r3, [r4, r2]
 800623e:	059a      	lsls	r2, r3, #22
 8006240:	d4ef      	bmi.n	8006222 <__smakebuf_r+0x1a>
 8006242:	2203      	movs	r2, #3
 8006244:	4393      	bics	r3, r2
 8006246:	431e      	orrs	r6, r3
 8006248:	81a6      	strh	r6, [r4, #12]
 800624a:	e7e4      	b.n	8006216 <__smakebuf_r+0xe>
 800624c:	2380      	movs	r3, #128	; 0x80
 800624e:	89a2      	ldrh	r2, [r4, #12]
 8006250:	6020      	str	r0, [r4, #0]
 8006252:	4313      	orrs	r3, r2
 8006254:	81a3      	strh	r3, [r4, #12]
 8006256:	9b00      	ldr	r3, [sp, #0]
 8006258:	6120      	str	r0, [r4, #16]
 800625a:	6163      	str	r3, [r4, #20]
 800625c:	9b01      	ldr	r3, [sp, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00c      	beq.n	800627c <__smakebuf_r+0x74>
 8006262:	0028      	movs	r0, r5
 8006264:	230e      	movs	r3, #14
 8006266:	5ee1      	ldrsh	r1, [r4, r3]
 8006268:	f000 f898 	bl	800639c <_isatty_r>
 800626c:	2800      	cmp	r0, #0
 800626e:	d005      	beq.n	800627c <__smakebuf_r+0x74>
 8006270:	2303      	movs	r3, #3
 8006272:	89a2      	ldrh	r2, [r4, #12]
 8006274:	439a      	bics	r2, r3
 8006276:	3b02      	subs	r3, #2
 8006278:	4313      	orrs	r3, r2
 800627a:	81a3      	strh	r3, [r4, #12]
 800627c:	89a3      	ldrh	r3, [r4, #12]
 800627e:	433b      	orrs	r3, r7
 8006280:	81a3      	strh	r3, [r4, #12]
 8006282:	e7ce      	b.n	8006222 <__smakebuf_r+0x1a>

08006284 <__sccl>:
 8006284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006286:	780b      	ldrb	r3, [r1, #0]
 8006288:	0004      	movs	r4, r0
 800628a:	2b5e      	cmp	r3, #94	; 0x5e
 800628c:	d019      	beq.n	80062c2 <__sccl+0x3e>
 800628e:	2200      	movs	r2, #0
 8006290:	1c4d      	adds	r5, r1, #1
 8006292:	0021      	movs	r1, r4
 8006294:	1c60      	adds	r0, r4, #1
 8006296:	30ff      	adds	r0, #255	; 0xff
 8006298:	700a      	strb	r2, [r1, #0]
 800629a:	3101      	adds	r1, #1
 800629c:	4281      	cmp	r1, r0
 800629e:	d1fb      	bne.n	8006298 <__sccl+0x14>
 80062a0:	1e68      	subs	r0, r5, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00c      	beq.n	80062c0 <__sccl+0x3c>
 80062a6:	2101      	movs	r1, #1
 80062a8:	262d      	movs	r6, #45	; 0x2d
 80062aa:	404a      	eors	r2, r1
 80062ac:	0028      	movs	r0, r5
 80062ae:	54e2      	strb	r2, [r4, r3]
 80062b0:	7801      	ldrb	r1, [r0, #0]
 80062b2:	1c45      	adds	r5, r0, #1
 80062b4:	292d      	cmp	r1, #45	; 0x2d
 80062b6:	d00c      	beq.n	80062d2 <__sccl+0x4e>
 80062b8:	295d      	cmp	r1, #93	; 0x5d
 80062ba:	d01d      	beq.n	80062f8 <__sccl+0x74>
 80062bc:	2900      	cmp	r1, #0
 80062be:	d104      	bne.n	80062ca <__sccl+0x46>
 80062c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062c2:	2201      	movs	r2, #1
 80062c4:	784b      	ldrb	r3, [r1, #1]
 80062c6:	1c8d      	adds	r5, r1, #2
 80062c8:	e7e3      	b.n	8006292 <__sccl+0xe>
 80062ca:	000b      	movs	r3, r1
 80062cc:	e7ee      	b.n	80062ac <__sccl+0x28>
 80062ce:	0033      	movs	r3, r6
 80062d0:	e7ec      	b.n	80062ac <__sccl+0x28>
 80062d2:	7841      	ldrb	r1, [r0, #1]
 80062d4:	295d      	cmp	r1, #93	; 0x5d
 80062d6:	d0fa      	beq.n	80062ce <__sccl+0x4a>
 80062d8:	428b      	cmp	r3, r1
 80062da:	dcf8      	bgt.n	80062ce <__sccl+0x4a>
 80062dc:	001d      	movs	r5, r3
 80062de:	3002      	adds	r0, #2
 80062e0:	3501      	adds	r5, #1
 80062e2:	5562      	strb	r2, [r4, r5]
 80062e4:	42a9      	cmp	r1, r5
 80062e6:	dcfb      	bgt.n	80062e0 <__sccl+0x5c>
 80062e8:	2500      	movs	r5, #0
 80062ea:	1c5f      	adds	r7, r3, #1
 80062ec:	428b      	cmp	r3, r1
 80062ee:	da01      	bge.n	80062f4 <__sccl+0x70>
 80062f0:	1acd      	subs	r5, r1, r3
 80062f2:	3d01      	subs	r5, #1
 80062f4:	197b      	adds	r3, r7, r5
 80062f6:	e7db      	b.n	80062b0 <__sccl+0x2c>
 80062f8:	0028      	movs	r0, r5
 80062fa:	e7e1      	b.n	80062c0 <__sccl+0x3c>

080062fc <__submore>:
 80062fc:	000b      	movs	r3, r1
 80062fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006300:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8006302:	3344      	adds	r3, #68	; 0x44
 8006304:	000c      	movs	r4, r1
 8006306:	429d      	cmp	r5, r3
 8006308:	d11c      	bne.n	8006344 <__submore+0x48>
 800630a:	2680      	movs	r6, #128	; 0x80
 800630c:	00f6      	lsls	r6, r6, #3
 800630e:	0031      	movs	r1, r6
 8006310:	f7ff fae2 	bl	80058d8 <_malloc_r>
 8006314:	2800      	cmp	r0, #0
 8006316:	d102      	bne.n	800631e <__submore+0x22>
 8006318:	2001      	movs	r0, #1
 800631a:	4240      	negs	r0, r0
 800631c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800631e:	0023      	movs	r3, r4
 8006320:	6360      	str	r0, [r4, #52]	; 0x34
 8006322:	63a6      	str	r6, [r4, #56]	; 0x38
 8006324:	3346      	adds	r3, #70	; 0x46
 8006326:	781a      	ldrb	r2, [r3, #0]
 8006328:	4b10      	ldr	r3, [pc, #64]	; (800636c <__submore+0x70>)
 800632a:	54c2      	strb	r2, [r0, r3]
 800632c:	0023      	movs	r3, r4
 800632e:	3345      	adds	r3, #69	; 0x45
 8006330:	781a      	ldrb	r2, [r3, #0]
 8006332:	4b0f      	ldr	r3, [pc, #60]	; (8006370 <__submore+0x74>)
 8006334:	54c2      	strb	r2, [r0, r3]
 8006336:	782a      	ldrb	r2, [r5, #0]
 8006338:	4b0e      	ldr	r3, [pc, #56]	; (8006374 <__submore+0x78>)
 800633a:	54c2      	strb	r2, [r0, r3]
 800633c:	18c0      	adds	r0, r0, r3
 800633e:	6020      	str	r0, [r4, #0]
 8006340:	2000      	movs	r0, #0
 8006342:	e7eb      	b.n	800631c <__submore+0x20>
 8006344:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8006346:	0029      	movs	r1, r5
 8006348:	0073      	lsls	r3, r6, #1
 800634a:	001a      	movs	r2, r3
 800634c:	9301      	str	r3, [sp, #4]
 800634e:	f000 f85d 	bl	800640c <_realloc_r>
 8006352:	1e05      	subs	r5, r0, #0
 8006354:	d0e0      	beq.n	8006318 <__submore+0x1c>
 8006356:	1987      	adds	r7, r0, r6
 8006358:	0001      	movs	r1, r0
 800635a:	0032      	movs	r2, r6
 800635c:	0038      	movs	r0, r7
 800635e:	f000 f84c 	bl	80063fa <memcpy>
 8006362:	9b01      	ldr	r3, [sp, #4]
 8006364:	6027      	str	r7, [r4, #0]
 8006366:	6365      	str	r5, [r4, #52]	; 0x34
 8006368:	63a3      	str	r3, [r4, #56]	; 0x38
 800636a:	e7e9      	b.n	8006340 <__submore+0x44>
 800636c:	000003ff 	.word	0x000003ff
 8006370:	000003fe 	.word	0x000003fe
 8006374:	000003fd 	.word	0x000003fd

08006378 <_fstat_r>:
 8006378:	2300      	movs	r3, #0
 800637a:	b570      	push	{r4, r5, r6, lr}
 800637c:	4d06      	ldr	r5, [pc, #24]	; (8006398 <_fstat_r+0x20>)
 800637e:	0004      	movs	r4, r0
 8006380:	0008      	movs	r0, r1
 8006382:	0011      	movs	r1, r2
 8006384:	602b      	str	r3, [r5, #0]
 8006386:	f7fb fbd8 	bl	8001b3a <_fstat>
 800638a:	1c43      	adds	r3, r0, #1
 800638c:	d103      	bne.n	8006396 <_fstat_r+0x1e>
 800638e:	682b      	ldr	r3, [r5, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d000      	beq.n	8006396 <_fstat_r+0x1e>
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	bd70      	pop	{r4, r5, r6, pc}
 8006398:	20000468 	.word	0x20000468

0800639c <_isatty_r>:
 800639c:	2300      	movs	r3, #0
 800639e:	b570      	push	{r4, r5, r6, lr}
 80063a0:	4d06      	ldr	r5, [pc, #24]	; (80063bc <_isatty_r+0x20>)
 80063a2:	0004      	movs	r4, r0
 80063a4:	0008      	movs	r0, r1
 80063a6:	602b      	str	r3, [r5, #0]
 80063a8:	f7fb fbd5 	bl	8001b56 <_isatty>
 80063ac:	1c43      	adds	r3, r0, #1
 80063ae:	d103      	bne.n	80063b8 <_isatty_r+0x1c>
 80063b0:	682b      	ldr	r3, [r5, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d000      	beq.n	80063b8 <_isatty_r+0x1c>
 80063b6:	6023      	str	r3, [r4, #0]
 80063b8:	bd70      	pop	{r4, r5, r6, pc}
 80063ba:	46c0      	nop			; (mov r8, r8)
 80063bc:	20000468 	.word	0x20000468

080063c0 <_sbrk_r>:
 80063c0:	2300      	movs	r3, #0
 80063c2:	b570      	push	{r4, r5, r6, lr}
 80063c4:	4d06      	ldr	r5, [pc, #24]	; (80063e0 <_sbrk_r+0x20>)
 80063c6:	0004      	movs	r4, r0
 80063c8:	0008      	movs	r0, r1
 80063ca:	602b      	str	r3, [r5, #0]
 80063cc:	f7fb fbd8 	bl	8001b80 <_sbrk>
 80063d0:	1c43      	adds	r3, r0, #1
 80063d2:	d103      	bne.n	80063dc <_sbrk_r+0x1c>
 80063d4:	682b      	ldr	r3, [r5, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d000      	beq.n	80063dc <_sbrk_r+0x1c>
 80063da:	6023      	str	r3, [r4, #0]
 80063dc:	bd70      	pop	{r4, r5, r6, pc}
 80063de:	46c0      	nop			; (mov r8, r8)
 80063e0:	20000468 	.word	0x20000468

080063e4 <memchr>:
 80063e4:	b2c9      	uxtb	r1, r1
 80063e6:	1882      	adds	r2, r0, r2
 80063e8:	4290      	cmp	r0, r2
 80063ea:	d101      	bne.n	80063f0 <memchr+0xc>
 80063ec:	2000      	movs	r0, #0
 80063ee:	4770      	bx	lr
 80063f0:	7803      	ldrb	r3, [r0, #0]
 80063f2:	428b      	cmp	r3, r1
 80063f4:	d0fb      	beq.n	80063ee <memchr+0xa>
 80063f6:	3001      	adds	r0, #1
 80063f8:	e7f6      	b.n	80063e8 <memchr+0x4>

080063fa <memcpy>:
 80063fa:	2300      	movs	r3, #0
 80063fc:	b510      	push	{r4, lr}
 80063fe:	429a      	cmp	r2, r3
 8006400:	d100      	bne.n	8006404 <memcpy+0xa>
 8006402:	bd10      	pop	{r4, pc}
 8006404:	5ccc      	ldrb	r4, [r1, r3]
 8006406:	54c4      	strb	r4, [r0, r3]
 8006408:	3301      	adds	r3, #1
 800640a:	e7f8      	b.n	80063fe <memcpy+0x4>

0800640c <_realloc_r>:
 800640c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800640e:	0007      	movs	r7, r0
 8006410:	000e      	movs	r6, r1
 8006412:	0014      	movs	r4, r2
 8006414:	2900      	cmp	r1, #0
 8006416:	d105      	bne.n	8006424 <_realloc_r+0x18>
 8006418:	0011      	movs	r1, r2
 800641a:	f7ff fa5d 	bl	80058d8 <_malloc_r>
 800641e:	0005      	movs	r5, r0
 8006420:	0028      	movs	r0, r5
 8006422:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006424:	2a00      	cmp	r2, #0
 8006426:	d103      	bne.n	8006430 <_realloc_r+0x24>
 8006428:	f7ff f9ea 	bl	8005800 <_free_r>
 800642c:	0025      	movs	r5, r4
 800642e:	e7f7      	b.n	8006420 <_realloc_r+0x14>
 8006430:	f000 f92c 	bl	800668c <_malloc_usable_size_r>
 8006434:	9001      	str	r0, [sp, #4]
 8006436:	4284      	cmp	r4, r0
 8006438:	d803      	bhi.n	8006442 <_realloc_r+0x36>
 800643a:	0035      	movs	r5, r6
 800643c:	0843      	lsrs	r3, r0, #1
 800643e:	42a3      	cmp	r3, r4
 8006440:	d3ee      	bcc.n	8006420 <_realloc_r+0x14>
 8006442:	0021      	movs	r1, r4
 8006444:	0038      	movs	r0, r7
 8006446:	f7ff fa47 	bl	80058d8 <_malloc_r>
 800644a:	1e05      	subs	r5, r0, #0
 800644c:	d0e8      	beq.n	8006420 <_realloc_r+0x14>
 800644e:	9b01      	ldr	r3, [sp, #4]
 8006450:	0022      	movs	r2, r4
 8006452:	429c      	cmp	r4, r3
 8006454:	d900      	bls.n	8006458 <_realloc_r+0x4c>
 8006456:	001a      	movs	r2, r3
 8006458:	0031      	movs	r1, r6
 800645a:	0028      	movs	r0, r5
 800645c:	f7ff ffcd 	bl	80063fa <memcpy>
 8006460:	0031      	movs	r1, r6
 8006462:	0038      	movs	r0, r7
 8006464:	f7ff f9cc 	bl	8005800 <_free_r>
 8006468:	e7da      	b.n	8006420 <_realloc_r+0x14>
	...

0800646c <_strtol_l.constprop.0>:
 800646c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800646e:	b087      	sub	sp, #28
 8006470:	001e      	movs	r6, r3
 8006472:	9005      	str	r0, [sp, #20]
 8006474:	9101      	str	r1, [sp, #4]
 8006476:	9202      	str	r2, [sp, #8]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d048      	beq.n	800650e <_strtol_l.constprop.0+0xa2>
 800647c:	000b      	movs	r3, r1
 800647e:	2e24      	cmp	r6, #36	; 0x24
 8006480:	d845      	bhi.n	800650e <_strtol_l.constprop.0+0xa2>
 8006482:	4a3b      	ldr	r2, [pc, #236]	; (8006570 <_strtol_l.constprop.0+0x104>)
 8006484:	2108      	movs	r1, #8
 8006486:	4694      	mov	ip, r2
 8006488:	001a      	movs	r2, r3
 800648a:	4660      	mov	r0, ip
 800648c:	7814      	ldrb	r4, [r2, #0]
 800648e:	3301      	adds	r3, #1
 8006490:	5d00      	ldrb	r0, [r0, r4]
 8006492:	001d      	movs	r5, r3
 8006494:	0007      	movs	r7, r0
 8006496:	400f      	ands	r7, r1
 8006498:	4208      	tst	r0, r1
 800649a:	d1f5      	bne.n	8006488 <_strtol_l.constprop.0+0x1c>
 800649c:	2c2d      	cmp	r4, #45	; 0x2d
 800649e:	d13d      	bne.n	800651c <_strtol_l.constprop.0+0xb0>
 80064a0:	2701      	movs	r7, #1
 80064a2:	781c      	ldrb	r4, [r3, #0]
 80064a4:	1c95      	adds	r5, r2, #2
 80064a6:	2e00      	cmp	r6, #0
 80064a8:	d05e      	beq.n	8006568 <_strtol_l.constprop.0+0xfc>
 80064aa:	2e10      	cmp	r6, #16
 80064ac:	d109      	bne.n	80064c2 <_strtol_l.constprop.0+0x56>
 80064ae:	2c30      	cmp	r4, #48	; 0x30
 80064b0:	d107      	bne.n	80064c2 <_strtol_l.constprop.0+0x56>
 80064b2:	2220      	movs	r2, #32
 80064b4:	782b      	ldrb	r3, [r5, #0]
 80064b6:	4393      	bics	r3, r2
 80064b8:	2b58      	cmp	r3, #88	; 0x58
 80064ba:	d150      	bne.n	800655e <_strtol_l.constprop.0+0xf2>
 80064bc:	2610      	movs	r6, #16
 80064be:	786c      	ldrb	r4, [r5, #1]
 80064c0:	3502      	adds	r5, #2
 80064c2:	4b2c      	ldr	r3, [pc, #176]	; (8006574 <_strtol_l.constprop.0+0x108>)
 80064c4:	0031      	movs	r1, r6
 80064c6:	18fb      	adds	r3, r7, r3
 80064c8:	0018      	movs	r0, r3
 80064ca:	9303      	str	r3, [sp, #12]
 80064cc:	f7f9 feb4 	bl	8000238 <__aeabi_uidivmod>
 80064d0:	2200      	movs	r2, #0
 80064d2:	9104      	str	r1, [sp, #16]
 80064d4:	2101      	movs	r1, #1
 80064d6:	4684      	mov	ip, r0
 80064d8:	0010      	movs	r0, r2
 80064da:	4249      	negs	r1, r1
 80064dc:	0023      	movs	r3, r4
 80064de:	3b30      	subs	r3, #48	; 0x30
 80064e0:	2b09      	cmp	r3, #9
 80064e2:	d903      	bls.n	80064ec <_strtol_l.constprop.0+0x80>
 80064e4:	3b11      	subs	r3, #17
 80064e6:	2b19      	cmp	r3, #25
 80064e8:	d81d      	bhi.n	8006526 <_strtol_l.constprop.0+0xba>
 80064ea:	330a      	adds	r3, #10
 80064ec:	429e      	cmp	r6, r3
 80064ee:	dd1e      	ble.n	800652e <_strtol_l.constprop.0+0xc2>
 80064f0:	1c54      	adds	r4, r2, #1
 80064f2:	d009      	beq.n	8006508 <_strtol_l.constprop.0+0x9c>
 80064f4:	000a      	movs	r2, r1
 80064f6:	4584      	cmp	ip, r0
 80064f8:	d306      	bcc.n	8006508 <_strtol_l.constprop.0+0x9c>
 80064fa:	d102      	bne.n	8006502 <_strtol_l.constprop.0+0x96>
 80064fc:	9c04      	ldr	r4, [sp, #16]
 80064fe:	429c      	cmp	r4, r3
 8006500:	db02      	blt.n	8006508 <_strtol_l.constprop.0+0x9c>
 8006502:	2201      	movs	r2, #1
 8006504:	4370      	muls	r0, r6
 8006506:	1818      	adds	r0, r3, r0
 8006508:	782c      	ldrb	r4, [r5, #0]
 800650a:	3501      	adds	r5, #1
 800650c:	e7e6      	b.n	80064dc <_strtol_l.constprop.0+0x70>
 800650e:	f7ff f949 	bl	80057a4 <__errno>
 8006512:	2316      	movs	r3, #22
 8006514:	6003      	str	r3, [r0, #0]
 8006516:	2000      	movs	r0, #0
 8006518:	b007      	add	sp, #28
 800651a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800651c:	2c2b      	cmp	r4, #43	; 0x2b
 800651e:	d1c2      	bne.n	80064a6 <_strtol_l.constprop.0+0x3a>
 8006520:	781c      	ldrb	r4, [r3, #0]
 8006522:	1c95      	adds	r5, r2, #2
 8006524:	e7bf      	b.n	80064a6 <_strtol_l.constprop.0+0x3a>
 8006526:	0023      	movs	r3, r4
 8006528:	3b61      	subs	r3, #97	; 0x61
 800652a:	2b19      	cmp	r3, #25
 800652c:	d9dd      	bls.n	80064ea <_strtol_l.constprop.0+0x7e>
 800652e:	1c53      	adds	r3, r2, #1
 8006530:	d109      	bne.n	8006546 <_strtol_l.constprop.0+0xda>
 8006532:	2322      	movs	r3, #34	; 0x22
 8006534:	9a05      	ldr	r2, [sp, #20]
 8006536:	9803      	ldr	r0, [sp, #12]
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	9b02      	ldr	r3, [sp, #8]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d0eb      	beq.n	8006518 <_strtol_l.constprop.0+0xac>
 8006540:	1e6b      	subs	r3, r5, #1
 8006542:	9301      	str	r3, [sp, #4]
 8006544:	e007      	b.n	8006556 <_strtol_l.constprop.0+0xea>
 8006546:	2f00      	cmp	r7, #0
 8006548:	d000      	beq.n	800654c <_strtol_l.constprop.0+0xe0>
 800654a:	4240      	negs	r0, r0
 800654c:	9b02      	ldr	r3, [sp, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d0e2      	beq.n	8006518 <_strtol_l.constprop.0+0xac>
 8006552:	2a00      	cmp	r2, #0
 8006554:	d1f4      	bne.n	8006540 <_strtol_l.constprop.0+0xd4>
 8006556:	9b02      	ldr	r3, [sp, #8]
 8006558:	9a01      	ldr	r2, [sp, #4]
 800655a:	601a      	str	r2, [r3, #0]
 800655c:	e7dc      	b.n	8006518 <_strtol_l.constprop.0+0xac>
 800655e:	2430      	movs	r4, #48	; 0x30
 8006560:	2e00      	cmp	r6, #0
 8006562:	d1ae      	bne.n	80064c2 <_strtol_l.constprop.0+0x56>
 8006564:	3608      	adds	r6, #8
 8006566:	e7ac      	b.n	80064c2 <_strtol_l.constprop.0+0x56>
 8006568:	2c30      	cmp	r4, #48	; 0x30
 800656a:	d0a2      	beq.n	80064b2 <_strtol_l.constprop.0+0x46>
 800656c:	260a      	movs	r6, #10
 800656e:	e7a8      	b.n	80064c2 <_strtol_l.constprop.0+0x56>
 8006570:	08006828 	.word	0x08006828
 8006574:	7fffffff 	.word	0x7fffffff

08006578 <_strtol_r>:
 8006578:	b510      	push	{r4, lr}
 800657a:	f7ff ff77 	bl	800646c <_strtol_l.constprop.0>
 800657e:	bd10      	pop	{r4, pc}

08006580 <_strtoul_l.constprop.0>:
 8006580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006582:	b087      	sub	sp, #28
 8006584:	9202      	str	r2, [sp, #8]
 8006586:	4a3e      	ldr	r2, [pc, #248]	; (8006680 <_strtoul_l.constprop.0+0x100>)
 8006588:	001e      	movs	r6, r3
 800658a:	9101      	str	r1, [sp, #4]
 800658c:	000b      	movs	r3, r1
 800658e:	4694      	mov	ip, r2
 8006590:	2108      	movs	r1, #8
 8006592:	9005      	str	r0, [sp, #20]
 8006594:	001a      	movs	r2, r3
 8006596:	4660      	mov	r0, ip
 8006598:	7814      	ldrb	r4, [r2, #0]
 800659a:	3301      	adds	r3, #1
 800659c:	5d00      	ldrb	r0, [r0, r4]
 800659e:	001d      	movs	r5, r3
 80065a0:	0007      	movs	r7, r0
 80065a2:	400f      	ands	r7, r1
 80065a4:	4208      	tst	r0, r1
 80065a6:	d1f5      	bne.n	8006594 <_strtoul_l.constprop.0+0x14>
 80065a8:	2c2d      	cmp	r4, #45	; 0x2d
 80065aa:	d13d      	bne.n	8006628 <_strtoul_l.constprop.0+0xa8>
 80065ac:	2701      	movs	r7, #1
 80065ae:	781c      	ldrb	r4, [r3, #0]
 80065b0:	1c95      	adds	r5, r2, #2
 80065b2:	2e00      	cmp	r6, #0
 80065b4:	d05f      	beq.n	8006676 <_strtoul_l.constprop.0+0xf6>
 80065b6:	2e10      	cmp	r6, #16
 80065b8:	d109      	bne.n	80065ce <_strtoul_l.constprop.0+0x4e>
 80065ba:	2c30      	cmp	r4, #48	; 0x30
 80065bc:	d107      	bne.n	80065ce <_strtoul_l.constprop.0+0x4e>
 80065be:	2220      	movs	r2, #32
 80065c0:	782b      	ldrb	r3, [r5, #0]
 80065c2:	4393      	bics	r3, r2
 80065c4:	2b58      	cmp	r3, #88	; 0x58
 80065c6:	d151      	bne.n	800666c <_strtoul_l.constprop.0+0xec>
 80065c8:	2610      	movs	r6, #16
 80065ca:	786c      	ldrb	r4, [r5, #1]
 80065cc:	3502      	adds	r5, #2
 80065ce:	2001      	movs	r0, #1
 80065d0:	0031      	movs	r1, r6
 80065d2:	4240      	negs	r0, r0
 80065d4:	f7f9 fdaa 	bl	800012c <__udivsi3>
 80065d8:	9003      	str	r0, [sp, #12]
 80065da:	2001      	movs	r0, #1
 80065dc:	0031      	movs	r1, r6
 80065de:	4240      	negs	r0, r0
 80065e0:	f7f9 fe2a 	bl	8000238 <__aeabi_uidivmod>
 80065e4:	2300      	movs	r3, #0
 80065e6:	2201      	movs	r2, #1
 80065e8:	9104      	str	r1, [sp, #16]
 80065ea:	2101      	movs	r1, #1
 80065ec:	0018      	movs	r0, r3
 80065ee:	4694      	mov	ip, r2
 80065f0:	4249      	negs	r1, r1
 80065f2:	0022      	movs	r2, r4
 80065f4:	3a30      	subs	r2, #48	; 0x30
 80065f6:	2a09      	cmp	r2, #9
 80065f8:	d903      	bls.n	8006602 <_strtoul_l.constprop.0+0x82>
 80065fa:	3a11      	subs	r2, #17
 80065fc:	2a19      	cmp	r2, #25
 80065fe:	d818      	bhi.n	8006632 <_strtoul_l.constprop.0+0xb2>
 8006600:	320a      	adds	r2, #10
 8006602:	4296      	cmp	r6, r2
 8006604:	dd19      	ble.n	800663a <_strtoul_l.constprop.0+0xba>
 8006606:	1c5c      	adds	r4, r3, #1
 8006608:	d00b      	beq.n	8006622 <_strtoul_l.constprop.0+0xa2>
 800660a:	9c03      	ldr	r4, [sp, #12]
 800660c:	000b      	movs	r3, r1
 800660e:	4284      	cmp	r4, r0
 8006610:	d307      	bcc.n	8006622 <_strtoul_l.constprop.0+0xa2>
 8006612:	d103      	bne.n	800661c <_strtoul_l.constprop.0+0x9c>
 8006614:	9c04      	ldr	r4, [sp, #16]
 8006616:	000b      	movs	r3, r1
 8006618:	4294      	cmp	r4, r2
 800661a:	db02      	blt.n	8006622 <_strtoul_l.constprop.0+0xa2>
 800661c:	4663      	mov	r3, ip
 800661e:	4370      	muls	r0, r6
 8006620:	1810      	adds	r0, r2, r0
 8006622:	782c      	ldrb	r4, [r5, #0]
 8006624:	3501      	adds	r5, #1
 8006626:	e7e4      	b.n	80065f2 <_strtoul_l.constprop.0+0x72>
 8006628:	2c2b      	cmp	r4, #43	; 0x2b
 800662a:	d1c2      	bne.n	80065b2 <_strtoul_l.constprop.0+0x32>
 800662c:	781c      	ldrb	r4, [r3, #0]
 800662e:	1c95      	adds	r5, r2, #2
 8006630:	e7bf      	b.n	80065b2 <_strtoul_l.constprop.0+0x32>
 8006632:	0022      	movs	r2, r4
 8006634:	3a61      	subs	r2, #97	; 0x61
 8006636:	2a19      	cmp	r2, #25
 8006638:	d9e2      	bls.n	8006600 <_strtoul_l.constprop.0+0x80>
 800663a:	1c5a      	adds	r2, r3, #1
 800663c:	d108      	bne.n	8006650 <_strtoul_l.constprop.0+0xd0>
 800663e:	2222      	movs	r2, #34	; 0x22
 8006640:	9905      	ldr	r1, [sp, #20]
 8006642:	0018      	movs	r0, r3
 8006644:	600a      	str	r2, [r1, #0]
 8006646:	9a02      	ldr	r2, [sp, #8]
 8006648:	2a00      	cmp	r2, #0
 800664a:	d109      	bne.n	8006660 <_strtoul_l.constprop.0+0xe0>
 800664c:	b007      	add	sp, #28
 800664e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006650:	2f00      	cmp	r7, #0
 8006652:	d000      	beq.n	8006656 <_strtoul_l.constprop.0+0xd6>
 8006654:	4240      	negs	r0, r0
 8006656:	9a02      	ldr	r2, [sp, #8]
 8006658:	2a00      	cmp	r2, #0
 800665a:	d0f7      	beq.n	800664c <_strtoul_l.constprop.0+0xcc>
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <_strtoul_l.constprop.0+0xe4>
 8006660:	1e6b      	subs	r3, r5, #1
 8006662:	9301      	str	r3, [sp, #4]
 8006664:	9b02      	ldr	r3, [sp, #8]
 8006666:	9a01      	ldr	r2, [sp, #4]
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	e7ef      	b.n	800664c <_strtoul_l.constprop.0+0xcc>
 800666c:	2430      	movs	r4, #48	; 0x30
 800666e:	2e00      	cmp	r6, #0
 8006670:	d1ad      	bne.n	80065ce <_strtoul_l.constprop.0+0x4e>
 8006672:	3608      	adds	r6, #8
 8006674:	e7ab      	b.n	80065ce <_strtoul_l.constprop.0+0x4e>
 8006676:	2c30      	cmp	r4, #48	; 0x30
 8006678:	d0a1      	beq.n	80065be <_strtoul_l.constprop.0+0x3e>
 800667a:	260a      	movs	r6, #10
 800667c:	e7a7      	b.n	80065ce <_strtoul_l.constprop.0+0x4e>
 800667e:	46c0      	nop			; (mov r8, r8)
 8006680:	08006828 	.word	0x08006828

08006684 <_strtoul_r>:
 8006684:	b510      	push	{r4, lr}
 8006686:	f7ff ff7b 	bl	8006580 <_strtoul_l.constprop.0>
 800668a:	bd10      	pop	{r4, pc}

0800668c <_malloc_usable_size_r>:
 800668c:	1f0b      	subs	r3, r1, #4
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	1f18      	subs	r0, r3, #4
 8006692:	2b00      	cmp	r3, #0
 8006694:	da01      	bge.n	800669a <_malloc_usable_size_r+0xe>
 8006696:	580b      	ldr	r3, [r1, r0]
 8006698:	18c0      	adds	r0, r0, r3
 800669a:	4770      	bx	lr

0800669c <_init>:
 800669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669e:	46c0      	nop			; (mov r8, r8)
 80066a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066a2:	bc08      	pop	{r3}
 80066a4:	469e      	mov	lr, r3
 80066a6:	4770      	bx	lr

080066a8 <_fini>:
 80066a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066aa:	46c0      	nop			; (mov r8, r8)
 80066ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ae:	bc08      	pop	{r3}
 80066b0:	469e      	mov	lr, r3
 80066b2:	4770      	bx	lr
