
pi_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006750  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08006810  08006810  00016810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006954  08006954  00020128  2**0
                  CONTENTS
  4 .ARM          00000008  08006954  08006954  00016954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800695c  0800695c  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800695c  0800695c  0001695c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006960  08006960  00016960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  08006964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001108  20000128  08006a8c  00020128  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001230  08006a8c  00021230  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 13 .debug_info   000154cc  00000000  00000000  00020193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003398  00000000  00000000  0003565f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c0  00000000  00000000  000389f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001019  00000000  00000000  00039eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013ced  00000000  00000000  0003aed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019b44  00000000  00000000  0004ebbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00079bbf  00000000  00000000  00068702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b0c  00000000  00000000  000e22c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000e6dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000128 	.word	0x20000128
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080067f8 	.word	0x080067f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000012c 	.word	0x2000012c
 8000104:	080067f8 	.word	0x080067f8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 fd28 	bl	8000d30 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 fd23 	bl	8000d30 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__aeabi_fdiv>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	464f      	mov	r7, r9
 8000458:	4646      	mov	r6, r8
 800045a:	46d6      	mov	lr, sl
 800045c:	0245      	lsls	r5, r0, #9
 800045e:	b5c0      	push	{r6, r7, lr}
 8000460:	0047      	lsls	r7, r0, #1
 8000462:	1c0c      	adds	r4, r1, #0
 8000464:	0a6d      	lsrs	r5, r5, #9
 8000466:	0e3f      	lsrs	r7, r7, #24
 8000468:	0fc6      	lsrs	r6, r0, #31
 800046a:	2f00      	cmp	r7, #0
 800046c:	d100      	bne.n	8000470 <__aeabi_fdiv+0x1c>
 800046e:	e06f      	b.n	8000550 <__aeabi_fdiv+0xfc>
 8000470:	2fff      	cmp	r7, #255	; 0xff
 8000472:	d100      	bne.n	8000476 <__aeabi_fdiv+0x22>
 8000474:	e074      	b.n	8000560 <__aeabi_fdiv+0x10c>
 8000476:	2300      	movs	r3, #0
 8000478:	2280      	movs	r2, #128	; 0x80
 800047a:	4699      	mov	r9, r3
 800047c:	469a      	mov	sl, r3
 800047e:	00ed      	lsls	r5, r5, #3
 8000480:	04d2      	lsls	r2, r2, #19
 8000482:	4315      	orrs	r5, r2
 8000484:	3f7f      	subs	r7, #127	; 0x7f
 8000486:	0263      	lsls	r3, r4, #9
 8000488:	0a5b      	lsrs	r3, r3, #9
 800048a:	4698      	mov	r8, r3
 800048c:	0063      	lsls	r3, r4, #1
 800048e:	0e1b      	lsrs	r3, r3, #24
 8000490:	0fe4      	lsrs	r4, r4, #31
 8000492:	2b00      	cmp	r3, #0
 8000494:	d04d      	beq.n	8000532 <__aeabi_fdiv+0xde>
 8000496:	2bff      	cmp	r3, #255	; 0xff
 8000498:	d045      	beq.n	8000526 <__aeabi_fdiv+0xd2>
 800049a:	4642      	mov	r2, r8
 800049c:	2180      	movs	r1, #128	; 0x80
 800049e:	00d2      	lsls	r2, r2, #3
 80004a0:	04c9      	lsls	r1, r1, #19
 80004a2:	4311      	orrs	r1, r2
 80004a4:	4688      	mov	r8, r1
 80004a6:	2200      	movs	r2, #0
 80004a8:	3b7f      	subs	r3, #127	; 0x7f
 80004aa:	0031      	movs	r1, r6
 80004ac:	1aff      	subs	r7, r7, r3
 80004ae:	464b      	mov	r3, r9
 80004b0:	4061      	eors	r1, r4
 80004b2:	b2c9      	uxtb	r1, r1
 80004b4:	2b0f      	cmp	r3, #15
 80004b6:	d900      	bls.n	80004ba <__aeabi_fdiv+0x66>
 80004b8:	e0b8      	b.n	800062c <__aeabi_fdiv+0x1d8>
 80004ba:	4870      	ldr	r0, [pc, #448]	; (800067c <__aeabi_fdiv+0x228>)
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	58c3      	ldr	r3, [r0, r3]
 80004c0:	469f      	mov	pc, r3
 80004c2:	2300      	movs	r3, #0
 80004c4:	4698      	mov	r8, r3
 80004c6:	0026      	movs	r6, r4
 80004c8:	4645      	mov	r5, r8
 80004ca:	4692      	mov	sl, r2
 80004cc:	4653      	mov	r3, sl
 80004ce:	2b02      	cmp	r3, #2
 80004d0:	d100      	bne.n	80004d4 <__aeabi_fdiv+0x80>
 80004d2:	e08d      	b.n	80005f0 <__aeabi_fdiv+0x19c>
 80004d4:	2b03      	cmp	r3, #3
 80004d6:	d100      	bne.n	80004da <__aeabi_fdiv+0x86>
 80004d8:	e0a1      	b.n	800061e <__aeabi_fdiv+0x1ca>
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d018      	beq.n	8000510 <__aeabi_fdiv+0xbc>
 80004de:	003b      	movs	r3, r7
 80004e0:	337f      	adds	r3, #127	; 0x7f
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	dd6d      	ble.n	80005c2 <__aeabi_fdiv+0x16e>
 80004e6:	076a      	lsls	r2, r5, #29
 80004e8:	d004      	beq.n	80004f4 <__aeabi_fdiv+0xa0>
 80004ea:	220f      	movs	r2, #15
 80004ec:	402a      	ands	r2, r5
 80004ee:	2a04      	cmp	r2, #4
 80004f0:	d000      	beq.n	80004f4 <__aeabi_fdiv+0xa0>
 80004f2:	3504      	adds	r5, #4
 80004f4:	012a      	lsls	r2, r5, #4
 80004f6:	d503      	bpl.n	8000500 <__aeabi_fdiv+0xac>
 80004f8:	4b61      	ldr	r3, [pc, #388]	; (8000680 <__aeabi_fdiv+0x22c>)
 80004fa:	401d      	ands	r5, r3
 80004fc:	003b      	movs	r3, r7
 80004fe:	3380      	adds	r3, #128	; 0x80
 8000500:	2bfe      	cmp	r3, #254	; 0xfe
 8000502:	dd00      	ble.n	8000506 <__aeabi_fdiv+0xb2>
 8000504:	e074      	b.n	80005f0 <__aeabi_fdiv+0x19c>
 8000506:	01aa      	lsls	r2, r5, #6
 8000508:	0a52      	lsrs	r2, r2, #9
 800050a:	b2d8      	uxtb	r0, r3
 800050c:	e002      	b.n	8000514 <__aeabi_fdiv+0xc0>
 800050e:	000e      	movs	r6, r1
 8000510:	2000      	movs	r0, #0
 8000512:	2200      	movs	r2, #0
 8000514:	05c0      	lsls	r0, r0, #23
 8000516:	07f6      	lsls	r6, r6, #31
 8000518:	4310      	orrs	r0, r2
 800051a:	4330      	orrs	r0, r6
 800051c:	bce0      	pop	{r5, r6, r7}
 800051e:	46ba      	mov	sl, r7
 8000520:	46b1      	mov	r9, r6
 8000522:	46a8      	mov	r8, r5
 8000524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000526:	4643      	mov	r3, r8
 8000528:	2b00      	cmp	r3, #0
 800052a:	d13f      	bne.n	80005ac <__aeabi_fdiv+0x158>
 800052c:	2202      	movs	r2, #2
 800052e:	3fff      	subs	r7, #255	; 0xff
 8000530:	e003      	b.n	800053a <__aeabi_fdiv+0xe6>
 8000532:	4643      	mov	r3, r8
 8000534:	2b00      	cmp	r3, #0
 8000536:	d12d      	bne.n	8000594 <__aeabi_fdiv+0x140>
 8000538:	2201      	movs	r2, #1
 800053a:	0031      	movs	r1, r6
 800053c:	464b      	mov	r3, r9
 800053e:	4061      	eors	r1, r4
 8000540:	b2c9      	uxtb	r1, r1
 8000542:	4313      	orrs	r3, r2
 8000544:	2b0f      	cmp	r3, #15
 8000546:	d838      	bhi.n	80005ba <__aeabi_fdiv+0x166>
 8000548:	484e      	ldr	r0, [pc, #312]	; (8000684 <__aeabi_fdiv+0x230>)
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	58c3      	ldr	r3, [r0, r3]
 800054e:	469f      	mov	pc, r3
 8000550:	2d00      	cmp	r5, #0
 8000552:	d113      	bne.n	800057c <__aeabi_fdiv+0x128>
 8000554:	2304      	movs	r3, #4
 8000556:	4699      	mov	r9, r3
 8000558:	3b03      	subs	r3, #3
 800055a:	2700      	movs	r7, #0
 800055c:	469a      	mov	sl, r3
 800055e:	e792      	b.n	8000486 <__aeabi_fdiv+0x32>
 8000560:	2d00      	cmp	r5, #0
 8000562:	d105      	bne.n	8000570 <__aeabi_fdiv+0x11c>
 8000564:	2308      	movs	r3, #8
 8000566:	4699      	mov	r9, r3
 8000568:	3b06      	subs	r3, #6
 800056a:	27ff      	movs	r7, #255	; 0xff
 800056c:	469a      	mov	sl, r3
 800056e:	e78a      	b.n	8000486 <__aeabi_fdiv+0x32>
 8000570:	230c      	movs	r3, #12
 8000572:	4699      	mov	r9, r3
 8000574:	3b09      	subs	r3, #9
 8000576:	27ff      	movs	r7, #255	; 0xff
 8000578:	469a      	mov	sl, r3
 800057a:	e784      	b.n	8000486 <__aeabi_fdiv+0x32>
 800057c:	0028      	movs	r0, r5
 800057e:	f000 fbb9 	bl	8000cf4 <__clzsi2>
 8000582:	2776      	movs	r7, #118	; 0x76
 8000584:	1f43      	subs	r3, r0, #5
 8000586:	409d      	lsls	r5, r3
 8000588:	2300      	movs	r3, #0
 800058a:	427f      	negs	r7, r7
 800058c:	4699      	mov	r9, r3
 800058e:	469a      	mov	sl, r3
 8000590:	1a3f      	subs	r7, r7, r0
 8000592:	e778      	b.n	8000486 <__aeabi_fdiv+0x32>
 8000594:	4640      	mov	r0, r8
 8000596:	f000 fbad 	bl	8000cf4 <__clzsi2>
 800059a:	4642      	mov	r2, r8
 800059c:	1f43      	subs	r3, r0, #5
 800059e:	409a      	lsls	r2, r3
 80005a0:	2376      	movs	r3, #118	; 0x76
 80005a2:	425b      	negs	r3, r3
 80005a4:	4690      	mov	r8, r2
 80005a6:	1a1b      	subs	r3, r3, r0
 80005a8:	2200      	movs	r2, #0
 80005aa:	e77e      	b.n	80004aa <__aeabi_fdiv+0x56>
 80005ac:	2303      	movs	r3, #3
 80005ae:	464a      	mov	r2, r9
 80005b0:	431a      	orrs	r2, r3
 80005b2:	4691      	mov	r9, r2
 80005b4:	33fc      	adds	r3, #252	; 0xfc
 80005b6:	2203      	movs	r2, #3
 80005b8:	e777      	b.n	80004aa <__aeabi_fdiv+0x56>
 80005ba:	000e      	movs	r6, r1
 80005bc:	20ff      	movs	r0, #255	; 0xff
 80005be:	2200      	movs	r2, #0
 80005c0:	e7a8      	b.n	8000514 <__aeabi_fdiv+0xc0>
 80005c2:	2201      	movs	r2, #1
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	2b1b      	cmp	r3, #27
 80005c8:	dca2      	bgt.n	8000510 <__aeabi_fdiv+0xbc>
 80005ca:	379e      	adds	r7, #158	; 0x9e
 80005cc:	002a      	movs	r2, r5
 80005ce:	40bd      	lsls	r5, r7
 80005d0:	40da      	lsrs	r2, r3
 80005d2:	1e6b      	subs	r3, r5, #1
 80005d4:	419d      	sbcs	r5, r3
 80005d6:	4315      	orrs	r5, r2
 80005d8:	076a      	lsls	r2, r5, #29
 80005da:	d004      	beq.n	80005e6 <__aeabi_fdiv+0x192>
 80005dc:	220f      	movs	r2, #15
 80005de:	402a      	ands	r2, r5
 80005e0:	2a04      	cmp	r2, #4
 80005e2:	d000      	beq.n	80005e6 <__aeabi_fdiv+0x192>
 80005e4:	3504      	adds	r5, #4
 80005e6:	016a      	lsls	r2, r5, #5
 80005e8:	d544      	bpl.n	8000674 <__aeabi_fdiv+0x220>
 80005ea:	2001      	movs	r0, #1
 80005ec:	2200      	movs	r2, #0
 80005ee:	e791      	b.n	8000514 <__aeabi_fdiv+0xc0>
 80005f0:	20ff      	movs	r0, #255	; 0xff
 80005f2:	2200      	movs	r2, #0
 80005f4:	e78e      	b.n	8000514 <__aeabi_fdiv+0xc0>
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	2600      	movs	r6, #0
 80005fa:	20ff      	movs	r0, #255	; 0xff
 80005fc:	03d2      	lsls	r2, r2, #15
 80005fe:	e789      	b.n	8000514 <__aeabi_fdiv+0xc0>
 8000600:	2300      	movs	r3, #0
 8000602:	4698      	mov	r8, r3
 8000604:	2280      	movs	r2, #128	; 0x80
 8000606:	03d2      	lsls	r2, r2, #15
 8000608:	4215      	tst	r5, r2
 800060a:	d008      	beq.n	800061e <__aeabi_fdiv+0x1ca>
 800060c:	4643      	mov	r3, r8
 800060e:	4213      	tst	r3, r2
 8000610:	d105      	bne.n	800061e <__aeabi_fdiv+0x1ca>
 8000612:	431a      	orrs	r2, r3
 8000614:	0252      	lsls	r2, r2, #9
 8000616:	0026      	movs	r6, r4
 8000618:	20ff      	movs	r0, #255	; 0xff
 800061a:	0a52      	lsrs	r2, r2, #9
 800061c:	e77a      	b.n	8000514 <__aeabi_fdiv+0xc0>
 800061e:	2280      	movs	r2, #128	; 0x80
 8000620:	03d2      	lsls	r2, r2, #15
 8000622:	432a      	orrs	r2, r5
 8000624:	0252      	lsls	r2, r2, #9
 8000626:	20ff      	movs	r0, #255	; 0xff
 8000628:	0a52      	lsrs	r2, r2, #9
 800062a:	e773      	b.n	8000514 <__aeabi_fdiv+0xc0>
 800062c:	4642      	mov	r2, r8
 800062e:	016b      	lsls	r3, r5, #5
 8000630:	0155      	lsls	r5, r2, #5
 8000632:	42ab      	cmp	r3, r5
 8000634:	d21a      	bcs.n	800066c <__aeabi_fdiv+0x218>
 8000636:	201b      	movs	r0, #27
 8000638:	2200      	movs	r2, #0
 800063a:	3f01      	subs	r7, #1
 800063c:	2601      	movs	r6, #1
 800063e:	001c      	movs	r4, r3
 8000640:	0052      	lsls	r2, r2, #1
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	2c00      	cmp	r4, #0
 8000646:	db01      	blt.n	800064c <__aeabi_fdiv+0x1f8>
 8000648:	429d      	cmp	r5, r3
 800064a:	d801      	bhi.n	8000650 <__aeabi_fdiv+0x1fc>
 800064c:	1b5b      	subs	r3, r3, r5
 800064e:	4332      	orrs	r2, r6
 8000650:	3801      	subs	r0, #1
 8000652:	2800      	cmp	r0, #0
 8000654:	d1f3      	bne.n	800063e <__aeabi_fdiv+0x1ea>
 8000656:	1e58      	subs	r0, r3, #1
 8000658:	4183      	sbcs	r3, r0
 800065a:	4313      	orrs	r3, r2
 800065c:	001d      	movs	r5, r3
 800065e:	003b      	movs	r3, r7
 8000660:	337f      	adds	r3, #127	; 0x7f
 8000662:	000e      	movs	r6, r1
 8000664:	2b00      	cmp	r3, #0
 8000666:	dd00      	ble.n	800066a <__aeabi_fdiv+0x216>
 8000668:	e73d      	b.n	80004e6 <__aeabi_fdiv+0x92>
 800066a:	e7aa      	b.n	80005c2 <__aeabi_fdiv+0x16e>
 800066c:	201a      	movs	r0, #26
 800066e:	2201      	movs	r2, #1
 8000670:	1b5b      	subs	r3, r3, r5
 8000672:	e7e3      	b.n	800063c <__aeabi_fdiv+0x1e8>
 8000674:	01aa      	lsls	r2, r5, #6
 8000676:	2000      	movs	r0, #0
 8000678:	0a52      	lsrs	r2, r2, #9
 800067a:	e74b      	b.n	8000514 <__aeabi_fdiv+0xc0>
 800067c:	08006868 	.word	0x08006868
 8000680:	f7ffffff 	.word	0xf7ffffff
 8000684:	080068a8 	.word	0x080068a8

08000688 <__aeabi_fmul>:
 8000688:	0243      	lsls	r3, r0, #9
 800068a:	0a5b      	lsrs	r3, r3, #9
 800068c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800068e:	464f      	mov	r7, r9
 8000690:	4646      	mov	r6, r8
 8000692:	4699      	mov	r9, r3
 8000694:	46d6      	mov	lr, sl
 8000696:	0fc3      	lsrs	r3, r0, #31
 8000698:	0045      	lsls	r5, r0, #1
 800069a:	4698      	mov	r8, r3
 800069c:	b5c0      	push	{r6, r7, lr}
 800069e:	464b      	mov	r3, r9
 80006a0:	1c0f      	adds	r7, r1, #0
 80006a2:	0e2d      	lsrs	r5, r5, #24
 80006a4:	d100      	bne.n	80006a8 <__aeabi_fmul+0x20>
 80006a6:	e0cb      	b.n	8000840 <__aeabi_fmul+0x1b8>
 80006a8:	2dff      	cmp	r5, #255	; 0xff
 80006aa:	d100      	bne.n	80006ae <__aeabi_fmul+0x26>
 80006ac:	e0cf      	b.n	800084e <__aeabi_fmul+0x1c6>
 80006ae:	2280      	movs	r2, #128	; 0x80
 80006b0:	00db      	lsls	r3, r3, #3
 80006b2:	04d2      	lsls	r2, r2, #19
 80006b4:	431a      	orrs	r2, r3
 80006b6:	2300      	movs	r3, #0
 80006b8:	4691      	mov	r9, r2
 80006ba:	2600      	movs	r6, #0
 80006bc:	469a      	mov	sl, r3
 80006be:	3d7f      	subs	r5, #127	; 0x7f
 80006c0:	027c      	lsls	r4, r7, #9
 80006c2:	007b      	lsls	r3, r7, #1
 80006c4:	0a64      	lsrs	r4, r4, #9
 80006c6:	0e1b      	lsrs	r3, r3, #24
 80006c8:	0fff      	lsrs	r7, r7, #31
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d100      	bne.n	80006d0 <__aeabi_fmul+0x48>
 80006ce:	e0a9      	b.n	8000824 <__aeabi_fmul+0x19c>
 80006d0:	2bff      	cmp	r3, #255	; 0xff
 80006d2:	d011      	beq.n	80006f8 <__aeabi_fmul+0x70>
 80006d4:	2280      	movs	r2, #128	; 0x80
 80006d6:	00e4      	lsls	r4, r4, #3
 80006d8:	04d2      	lsls	r2, r2, #19
 80006da:	4314      	orrs	r4, r2
 80006dc:	4642      	mov	r2, r8
 80006de:	3b7f      	subs	r3, #127	; 0x7f
 80006e0:	195b      	adds	r3, r3, r5
 80006e2:	407a      	eors	r2, r7
 80006e4:	2000      	movs	r0, #0
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	1c5d      	adds	r5, r3, #1
 80006ea:	2e0a      	cmp	r6, #10
 80006ec:	dd13      	ble.n	8000716 <__aeabi_fmul+0x8e>
 80006ee:	003a      	movs	r2, r7
 80006f0:	2e0b      	cmp	r6, #11
 80006f2:	d047      	beq.n	8000784 <__aeabi_fmul+0xfc>
 80006f4:	4647      	mov	r7, r8
 80006f6:	e03f      	b.n	8000778 <__aeabi_fmul+0xf0>
 80006f8:	002b      	movs	r3, r5
 80006fa:	33ff      	adds	r3, #255	; 0xff
 80006fc:	2c00      	cmp	r4, #0
 80006fe:	d11e      	bne.n	800073e <__aeabi_fmul+0xb6>
 8000700:	2202      	movs	r2, #2
 8000702:	4316      	orrs	r6, r2
 8000704:	4642      	mov	r2, r8
 8000706:	3501      	adds	r5, #1
 8000708:	407a      	eors	r2, r7
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	35ff      	adds	r5, #255	; 0xff
 800070e:	2e0a      	cmp	r6, #10
 8000710:	dd00      	ble.n	8000714 <__aeabi_fmul+0x8c>
 8000712:	e0e4      	b.n	80008de <__aeabi_fmul+0x256>
 8000714:	2002      	movs	r0, #2
 8000716:	2e02      	cmp	r6, #2
 8000718:	dc1c      	bgt.n	8000754 <__aeabi_fmul+0xcc>
 800071a:	3e01      	subs	r6, #1
 800071c:	2e01      	cmp	r6, #1
 800071e:	d842      	bhi.n	80007a6 <__aeabi_fmul+0x11e>
 8000720:	2802      	cmp	r0, #2
 8000722:	d03d      	beq.n	80007a0 <__aeabi_fmul+0x118>
 8000724:	2801      	cmp	r0, #1
 8000726:	d166      	bne.n	80007f6 <__aeabi_fmul+0x16e>
 8000728:	2000      	movs	r0, #0
 800072a:	2100      	movs	r1, #0
 800072c:	05c0      	lsls	r0, r0, #23
 800072e:	4308      	orrs	r0, r1
 8000730:	07d2      	lsls	r2, r2, #31
 8000732:	4310      	orrs	r0, r2
 8000734:	bce0      	pop	{r5, r6, r7}
 8000736:	46ba      	mov	sl, r7
 8000738:	46b1      	mov	r9, r6
 800073a:	46a8      	mov	r8, r5
 800073c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800073e:	2203      	movs	r2, #3
 8000740:	4316      	orrs	r6, r2
 8000742:	4642      	mov	r2, r8
 8000744:	3501      	adds	r5, #1
 8000746:	407a      	eors	r2, r7
 8000748:	b2d2      	uxtb	r2, r2
 800074a:	35ff      	adds	r5, #255	; 0xff
 800074c:	2e0a      	cmp	r6, #10
 800074e:	dd00      	ble.n	8000752 <__aeabi_fmul+0xca>
 8000750:	e0e4      	b.n	800091c <__aeabi_fmul+0x294>
 8000752:	2003      	movs	r0, #3
 8000754:	2101      	movs	r1, #1
 8000756:	40b1      	lsls	r1, r6
 8000758:	26a6      	movs	r6, #166	; 0xa6
 800075a:	00f6      	lsls	r6, r6, #3
 800075c:	4231      	tst	r1, r6
 800075e:	d10a      	bne.n	8000776 <__aeabi_fmul+0xee>
 8000760:	2690      	movs	r6, #144	; 0x90
 8000762:	00b6      	lsls	r6, r6, #2
 8000764:	4231      	tst	r1, r6
 8000766:	d116      	bne.n	8000796 <__aeabi_fmul+0x10e>
 8000768:	3eb9      	subs	r6, #185	; 0xb9
 800076a:	3eff      	subs	r6, #255	; 0xff
 800076c:	420e      	tst	r6, r1
 800076e:	d01a      	beq.n	80007a6 <__aeabi_fmul+0x11e>
 8000770:	46a1      	mov	r9, r4
 8000772:	4682      	mov	sl, r0
 8000774:	e000      	b.n	8000778 <__aeabi_fmul+0xf0>
 8000776:	0017      	movs	r7, r2
 8000778:	4653      	mov	r3, sl
 800077a:	003a      	movs	r2, r7
 800077c:	2b02      	cmp	r3, #2
 800077e:	d00f      	beq.n	80007a0 <__aeabi_fmul+0x118>
 8000780:	464c      	mov	r4, r9
 8000782:	4650      	mov	r0, sl
 8000784:	2803      	cmp	r0, #3
 8000786:	d1cd      	bne.n	8000724 <__aeabi_fmul+0x9c>
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	03c9      	lsls	r1, r1, #15
 800078c:	4321      	orrs	r1, r4
 800078e:	0249      	lsls	r1, r1, #9
 8000790:	20ff      	movs	r0, #255	; 0xff
 8000792:	0a49      	lsrs	r1, r1, #9
 8000794:	e7ca      	b.n	800072c <__aeabi_fmul+0xa4>
 8000796:	2180      	movs	r1, #128	; 0x80
 8000798:	2200      	movs	r2, #0
 800079a:	20ff      	movs	r0, #255	; 0xff
 800079c:	03c9      	lsls	r1, r1, #15
 800079e:	e7c5      	b.n	800072c <__aeabi_fmul+0xa4>
 80007a0:	20ff      	movs	r0, #255	; 0xff
 80007a2:	2100      	movs	r1, #0
 80007a4:	e7c2      	b.n	800072c <__aeabi_fmul+0xa4>
 80007a6:	0c20      	lsrs	r0, r4, #16
 80007a8:	4649      	mov	r1, r9
 80007aa:	0424      	lsls	r4, r4, #16
 80007ac:	0c24      	lsrs	r4, r4, #16
 80007ae:	0027      	movs	r7, r4
 80007b0:	0c0e      	lsrs	r6, r1, #16
 80007b2:	0409      	lsls	r1, r1, #16
 80007b4:	0c09      	lsrs	r1, r1, #16
 80007b6:	4374      	muls	r4, r6
 80007b8:	434f      	muls	r7, r1
 80007ba:	4346      	muls	r6, r0
 80007bc:	4348      	muls	r0, r1
 80007be:	0c39      	lsrs	r1, r7, #16
 80007c0:	1900      	adds	r0, r0, r4
 80007c2:	1809      	adds	r1, r1, r0
 80007c4:	428c      	cmp	r4, r1
 80007c6:	d903      	bls.n	80007d0 <__aeabi_fmul+0x148>
 80007c8:	2080      	movs	r0, #128	; 0x80
 80007ca:	0240      	lsls	r0, r0, #9
 80007cc:	4684      	mov	ip, r0
 80007ce:	4466      	add	r6, ip
 80007d0:	043f      	lsls	r7, r7, #16
 80007d2:	0408      	lsls	r0, r1, #16
 80007d4:	0c3f      	lsrs	r7, r7, #16
 80007d6:	19c0      	adds	r0, r0, r7
 80007d8:	0184      	lsls	r4, r0, #6
 80007da:	1e67      	subs	r7, r4, #1
 80007dc:	41bc      	sbcs	r4, r7
 80007de:	0c09      	lsrs	r1, r1, #16
 80007e0:	0e80      	lsrs	r0, r0, #26
 80007e2:	1989      	adds	r1, r1, r6
 80007e4:	4304      	orrs	r4, r0
 80007e6:	0189      	lsls	r1, r1, #6
 80007e8:	430c      	orrs	r4, r1
 80007ea:	0109      	lsls	r1, r1, #4
 80007ec:	d571      	bpl.n	80008d2 <__aeabi_fmul+0x24a>
 80007ee:	2301      	movs	r3, #1
 80007f0:	0861      	lsrs	r1, r4, #1
 80007f2:	401c      	ands	r4, r3
 80007f4:	430c      	orrs	r4, r1
 80007f6:	002b      	movs	r3, r5
 80007f8:	337f      	adds	r3, #127	; 0x7f
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	dd51      	ble.n	80008a2 <__aeabi_fmul+0x21a>
 80007fe:	0761      	lsls	r1, r4, #29
 8000800:	d004      	beq.n	800080c <__aeabi_fmul+0x184>
 8000802:	210f      	movs	r1, #15
 8000804:	4021      	ands	r1, r4
 8000806:	2904      	cmp	r1, #4
 8000808:	d000      	beq.n	800080c <__aeabi_fmul+0x184>
 800080a:	3404      	adds	r4, #4
 800080c:	0121      	lsls	r1, r4, #4
 800080e:	d503      	bpl.n	8000818 <__aeabi_fmul+0x190>
 8000810:	4b43      	ldr	r3, [pc, #268]	; (8000920 <__aeabi_fmul+0x298>)
 8000812:	401c      	ands	r4, r3
 8000814:	002b      	movs	r3, r5
 8000816:	3380      	adds	r3, #128	; 0x80
 8000818:	2bfe      	cmp	r3, #254	; 0xfe
 800081a:	dcc1      	bgt.n	80007a0 <__aeabi_fmul+0x118>
 800081c:	01a1      	lsls	r1, r4, #6
 800081e:	0a49      	lsrs	r1, r1, #9
 8000820:	b2d8      	uxtb	r0, r3
 8000822:	e783      	b.n	800072c <__aeabi_fmul+0xa4>
 8000824:	2c00      	cmp	r4, #0
 8000826:	d12c      	bne.n	8000882 <__aeabi_fmul+0x1fa>
 8000828:	2301      	movs	r3, #1
 800082a:	4642      	mov	r2, r8
 800082c:	431e      	orrs	r6, r3
 800082e:	002b      	movs	r3, r5
 8000830:	407a      	eors	r2, r7
 8000832:	2001      	movs	r0, #1
 8000834:	b2d2      	uxtb	r2, r2
 8000836:	1c5d      	adds	r5, r3, #1
 8000838:	2e0a      	cmp	r6, #10
 800083a:	dd00      	ble.n	800083e <__aeabi_fmul+0x1b6>
 800083c:	e757      	b.n	80006ee <__aeabi_fmul+0x66>
 800083e:	e76a      	b.n	8000716 <__aeabi_fmul+0x8e>
 8000840:	2b00      	cmp	r3, #0
 8000842:	d110      	bne.n	8000866 <__aeabi_fmul+0x1de>
 8000844:	2301      	movs	r3, #1
 8000846:	2604      	movs	r6, #4
 8000848:	2500      	movs	r5, #0
 800084a:	469a      	mov	sl, r3
 800084c:	e738      	b.n	80006c0 <__aeabi_fmul+0x38>
 800084e:	2b00      	cmp	r3, #0
 8000850:	d104      	bne.n	800085c <__aeabi_fmul+0x1d4>
 8000852:	2302      	movs	r3, #2
 8000854:	2608      	movs	r6, #8
 8000856:	25ff      	movs	r5, #255	; 0xff
 8000858:	469a      	mov	sl, r3
 800085a:	e731      	b.n	80006c0 <__aeabi_fmul+0x38>
 800085c:	2303      	movs	r3, #3
 800085e:	260c      	movs	r6, #12
 8000860:	25ff      	movs	r5, #255	; 0xff
 8000862:	469a      	mov	sl, r3
 8000864:	e72c      	b.n	80006c0 <__aeabi_fmul+0x38>
 8000866:	4648      	mov	r0, r9
 8000868:	f000 fa44 	bl	8000cf4 <__clzsi2>
 800086c:	464a      	mov	r2, r9
 800086e:	1f43      	subs	r3, r0, #5
 8000870:	2576      	movs	r5, #118	; 0x76
 8000872:	409a      	lsls	r2, r3
 8000874:	2300      	movs	r3, #0
 8000876:	426d      	negs	r5, r5
 8000878:	4691      	mov	r9, r2
 800087a:	2600      	movs	r6, #0
 800087c:	469a      	mov	sl, r3
 800087e:	1a2d      	subs	r5, r5, r0
 8000880:	e71e      	b.n	80006c0 <__aeabi_fmul+0x38>
 8000882:	0020      	movs	r0, r4
 8000884:	f000 fa36 	bl	8000cf4 <__clzsi2>
 8000888:	4642      	mov	r2, r8
 800088a:	1f43      	subs	r3, r0, #5
 800088c:	409c      	lsls	r4, r3
 800088e:	1a2b      	subs	r3, r5, r0
 8000890:	3b76      	subs	r3, #118	; 0x76
 8000892:	407a      	eors	r2, r7
 8000894:	2000      	movs	r0, #0
 8000896:	b2d2      	uxtb	r2, r2
 8000898:	1c5d      	adds	r5, r3, #1
 800089a:	2e0a      	cmp	r6, #10
 800089c:	dd00      	ble.n	80008a0 <__aeabi_fmul+0x218>
 800089e:	e726      	b.n	80006ee <__aeabi_fmul+0x66>
 80008a0:	e739      	b.n	8000716 <__aeabi_fmul+0x8e>
 80008a2:	2101      	movs	r1, #1
 80008a4:	1acb      	subs	r3, r1, r3
 80008a6:	2b1b      	cmp	r3, #27
 80008a8:	dd00      	ble.n	80008ac <__aeabi_fmul+0x224>
 80008aa:	e73d      	b.n	8000728 <__aeabi_fmul+0xa0>
 80008ac:	359e      	adds	r5, #158	; 0x9e
 80008ae:	0021      	movs	r1, r4
 80008b0:	40ac      	lsls	r4, r5
 80008b2:	40d9      	lsrs	r1, r3
 80008b4:	1e63      	subs	r3, r4, #1
 80008b6:	419c      	sbcs	r4, r3
 80008b8:	4321      	orrs	r1, r4
 80008ba:	074b      	lsls	r3, r1, #29
 80008bc:	d004      	beq.n	80008c8 <__aeabi_fmul+0x240>
 80008be:	230f      	movs	r3, #15
 80008c0:	400b      	ands	r3, r1
 80008c2:	2b04      	cmp	r3, #4
 80008c4:	d000      	beq.n	80008c8 <__aeabi_fmul+0x240>
 80008c6:	3104      	adds	r1, #4
 80008c8:	014b      	lsls	r3, r1, #5
 80008ca:	d504      	bpl.n	80008d6 <__aeabi_fmul+0x24e>
 80008cc:	2001      	movs	r0, #1
 80008ce:	2100      	movs	r1, #0
 80008d0:	e72c      	b.n	800072c <__aeabi_fmul+0xa4>
 80008d2:	001d      	movs	r5, r3
 80008d4:	e78f      	b.n	80007f6 <__aeabi_fmul+0x16e>
 80008d6:	0189      	lsls	r1, r1, #6
 80008d8:	2000      	movs	r0, #0
 80008da:	0a49      	lsrs	r1, r1, #9
 80008dc:	e726      	b.n	800072c <__aeabi_fmul+0xa4>
 80008de:	2302      	movs	r3, #2
 80008e0:	2e0f      	cmp	r6, #15
 80008e2:	d10c      	bne.n	80008fe <__aeabi_fmul+0x276>
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	464b      	mov	r3, r9
 80008e8:	03c9      	lsls	r1, r1, #15
 80008ea:	420b      	tst	r3, r1
 80008ec:	d00d      	beq.n	800090a <__aeabi_fmul+0x282>
 80008ee:	420c      	tst	r4, r1
 80008f0:	d10b      	bne.n	800090a <__aeabi_fmul+0x282>
 80008f2:	4321      	orrs	r1, r4
 80008f4:	0249      	lsls	r1, r1, #9
 80008f6:	003a      	movs	r2, r7
 80008f8:	20ff      	movs	r0, #255	; 0xff
 80008fa:	0a49      	lsrs	r1, r1, #9
 80008fc:	e716      	b.n	800072c <__aeabi_fmul+0xa4>
 80008fe:	2e0b      	cmp	r6, #11
 8000900:	d000      	beq.n	8000904 <__aeabi_fmul+0x27c>
 8000902:	e6f7      	b.n	80006f4 <__aeabi_fmul+0x6c>
 8000904:	46a1      	mov	r9, r4
 8000906:	469a      	mov	sl, r3
 8000908:	e736      	b.n	8000778 <__aeabi_fmul+0xf0>
 800090a:	2180      	movs	r1, #128	; 0x80
 800090c:	464b      	mov	r3, r9
 800090e:	03c9      	lsls	r1, r1, #15
 8000910:	4319      	orrs	r1, r3
 8000912:	0249      	lsls	r1, r1, #9
 8000914:	4642      	mov	r2, r8
 8000916:	20ff      	movs	r0, #255	; 0xff
 8000918:	0a49      	lsrs	r1, r1, #9
 800091a:	e707      	b.n	800072c <__aeabi_fmul+0xa4>
 800091c:	2303      	movs	r3, #3
 800091e:	e7df      	b.n	80008e0 <__aeabi_fmul+0x258>
 8000920:	f7ffffff 	.word	0xf7ffffff

08000924 <__aeabi_fsub>:
 8000924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000926:	46c6      	mov	lr, r8
 8000928:	0243      	lsls	r3, r0, #9
 800092a:	0a5b      	lsrs	r3, r3, #9
 800092c:	0045      	lsls	r5, r0, #1
 800092e:	00da      	lsls	r2, r3, #3
 8000930:	0fc4      	lsrs	r4, r0, #31
 8000932:	0248      	lsls	r0, r1, #9
 8000934:	004f      	lsls	r7, r1, #1
 8000936:	4694      	mov	ip, r2
 8000938:	0a42      	lsrs	r2, r0, #9
 800093a:	001e      	movs	r6, r3
 800093c:	4690      	mov	r8, r2
 800093e:	b500      	push	{lr}
 8000940:	0e2d      	lsrs	r5, r5, #24
 8000942:	0e3f      	lsrs	r7, r7, #24
 8000944:	0fc9      	lsrs	r1, r1, #31
 8000946:	0980      	lsrs	r0, r0, #6
 8000948:	2fff      	cmp	r7, #255	; 0xff
 800094a:	d059      	beq.n	8000a00 <__aeabi_fsub+0xdc>
 800094c:	2201      	movs	r2, #1
 800094e:	4051      	eors	r1, r2
 8000950:	428c      	cmp	r4, r1
 8000952:	d039      	beq.n	80009c8 <__aeabi_fsub+0xa4>
 8000954:	1bea      	subs	r2, r5, r7
 8000956:	2a00      	cmp	r2, #0
 8000958:	dd58      	ble.n	8000a0c <__aeabi_fsub+0xe8>
 800095a:	2f00      	cmp	r7, #0
 800095c:	d068      	beq.n	8000a30 <__aeabi_fsub+0x10c>
 800095e:	2dff      	cmp	r5, #255	; 0xff
 8000960:	d100      	bne.n	8000964 <__aeabi_fsub+0x40>
 8000962:	e0d1      	b.n	8000b08 <__aeabi_fsub+0x1e4>
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	04db      	lsls	r3, r3, #19
 8000968:	4318      	orrs	r0, r3
 800096a:	2a1b      	cmp	r2, #27
 800096c:	dc00      	bgt.n	8000970 <__aeabi_fsub+0x4c>
 800096e:	e0e3      	b.n	8000b38 <__aeabi_fsub+0x214>
 8000970:	2301      	movs	r3, #1
 8000972:	4662      	mov	r2, ip
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	015a      	lsls	r2, r3, #5
 8000978:	d400      	bmi.n	800097c <__aeabi_fsub+0x58>
 800097a:	e0ac      	b.n	8000ad6 <__aeabi_fsub+0x1b2>
 800097c:	019b      	lsls	r3, r3, #6
 800097e:	099e      	lsrs	r6, r3, #6
 8000980:	0030      	movs	r0, r6
 8000982:	f000 f9b7 	bl	8000cf4 <__clzsi2>
 8000986:	0033      	movs	r3, r6
 8000988:	3805      	subs	r0, #5
 800098a:	4083      	lsls	r3, r0
 800098c:	4285      	cmp	r5, r0
 800098e:	dc00      	bgt.n	8000992 <__aeabi_fsub+0x6e>
 8000990:	e0c6      	b.n	8000b20 <__aeabi_fsub+0x1fc>
 8000992:	4ab2      	ldr	r2, [pc, #712]	; (8000c5c <__aeabi_fsub+0x338>)
 8000994:	1a2d      	subs	r5, r5, r0
 8000996:	4013      	ands	r3, r2
 8000998:	075a      	lsls	r2, r3, #29
 800099a:	d004      	beq.n	80009a6 <__aeabi_fsub+0x82>
 800099c:	220f      	movs	r2, #15
 800099e:	401a      	ands	r2, r3
 80009a0:	2a04      	cmp	r2, #4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_fsub+0x82>
 80009a4:	3304      	adds	r3, #4
 80009a6:	015a      	lsls	r2, r3, #5
 80009a8:	d400      	bmi.n	80009ac <__aeabi_fsub+0x88>
 80009aa:	e097      	b.n	8000adc <__aeabi_fsub+0x1b8>
 80009ac:	1c6a      	adds	r2, r5, #1
 80009ae:	2dfe      	cmp	r5, #254	; 0xfe
 80009b0:	d100      	bne.n	80009b4 <__aeabi_fsub+0x90>
 80009b2:	e084      	b.n	8000abe <__aeabi_fsub+0x19a>
 80009b4:	019b      	lsls	r3, r3, #6
 80009b6:	0a5e      	lsrs	r6, r3, #9
 80009b8:	b2d2      	uxtb	r2, r2
 80009ba:	05d0      	lsls	r0, r2, #23
 80009bc:	4330      	orrs	r0, r6
 80009be:	07e4      	lsls	r4, r4, #31
 80009c0:	4320      	orrs	r0, r4
 80009c2:	bc80      	pop	{r7}
 80009c4:	46b8      	mov	r8, r7
 80009c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009c8:	1bea      	subs	r2, r5, r7
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	dd41      	ble.n	8000a52 <__aeabi_fsub+0x12e>
 80009ce:	2f00      	cmp	r7, #0
 80009d0:	d06b      	beq.n	8000aaa <__aeabi_fsub+0x186>
 80009d2:	2dff      	cmp	r5, #255	; 0xff
 80009d4:	d100      	bne.n	80009d8 <__aeabi_fsub+0xb4>
 80009d6:	e097      	b.n	8000b08 <__aeabi_fsub+0x1e4>
 80009d8:	2380      	movs	r3, #128	; 0x80
 80009da:	04db      	lsls	r3, r3, #19
 80009dc:	4318      	orrs	r0, r3
 80009de:	2a1b      	cmp	r2, #27
 80009e0:	dc00      	bgt.n	80009e4 <__aeabi_fsub+0xc0>
 80009e2:	e0cc      	b.n	8000b7e <__aeabi_fsub+0x25a>
 80009e4:	2301      	movs	r3, #1
 80009e6:	4463      	add	r3, ip
 80009e8:	015a      	lsls	r2, r3, #5
 80009ea:	d574      	bpl.n	8000ad6 <__aeabi_fsub+0x1b2>
 80009ec:	3501      	adds	r5, #1
 80009ee:	2dff      	cmp	r5, #255	; 0xff
 80009f0:	d065      	beq.n	8000abe <__aeabi_fsub+0x19a>
 80009f2:	2201      	movs	r2, #1
 80009f4:	499a      	ldr	r1, [pc, #616]	; (8000c60 <__aeabi_fsub+0x33c>)
 80009f6:	401a      	ands	r2, r3
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	400b      	ands	r3, r1
 80009fc:	4313      	orrs	r3, r2
 80009fe:	e7cb      	b.n	8000998 <__aeabi_fsub+0x74>
 8000a00:	2800      	cmp	r0, #0
 8000a02:	d01f      	beq.n	8000a44 <__aeabi_fsub+0x120>
 8000a04:	428c      	cmp	r4, r1
 8000a06:	d022      	beq.n	8000a4e <__aeabi_fsub+0x12a>
 8000a08:	002a      	movs	r2, r5
 8000a0a:	3aff      	subs	r2, #255	; 0xff
 8000a0c:	2a00      	cmp	r2, #0
 8000a0e:	d035      	beq.n	8000a7c <__aeabi_fsub+0x158>
 8000a10:	1b7a      	subs	r2, r7, r5
 8000a12:	2d00      	cmp	r5, #0
 8000a14:	d000      	beq.n	8000a18 <__aeabi_fsub+0xf4>
 8000a16:	e099      	b.n	8000b4c <__aeabi_fsub+0x228>
 8000a18:	4663      	mov	r3, ip
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_fsub+0xfc>
 8000a1e:	e0dd      	b.n	8000bdc <__aeabi_fsub+0x2b8>
 8000a20:	1e53      	subs	r3, r2, #1
 8000a22:	2a01      	cmp	r2, #1
 8000a24:	d100      	bne.n	8000a28 <__aeabi_fsub+0x104>
 8000a26:	e105      	b.n	8000c34 <__aeabi_fsub+0x310>
 8000a28:	2aff      	cmp	r2, #255	; 0xff
 8000a2a:	d06b      	beq.n	8000b04 <__aeabi_fsub+0x1e0>
 8000a2c:	001a      	movs	r2, r3
 8000a2e:	e094      	b.n	8000b5a <__aeabi_fsub+0x236>
 8000a30:	2800      	cmp	r0, #0
 8000a32:	d073      	beq.n	8000b1c <__aeabi_fsub+0x1f8>
 8000a34:	1e51      	subs	r1, r2, #1
 8000a36:	2a01      	cmp	r2, #1
 8000a38:	d100      	bne.n	8000a3c <__aeabi_fsub+0x118>
 8000a3a:	e0df      	b.n	8000bfc <__aeabi_fsub+0x2d8>
 8000a3c:	2aff      	cmp	r2, #255	; 0xff
 8000a3e:	d063      	beq.n	8000b08 <__aeabi_fsub+0x1e4>
 8000a40:	000a      	movs	r2, r1
 8000a42:	e792      	b.n	800096a <__aeabi_fsub+0x46>
 8000a44:	2201      	movs	r2, #1
 8000a46:	4051      	eors	r1, r2
 8000a48:	42a1      	cmp	r1, r4
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_fsub+0x12a>
 8000a4c:	e782      	b.n	8000954 <__aeabi_fsub+0x30>
 8000a4e:	002a      	movs	r2, r5
 8000a50:	3aff      	subs	r2, #255	; 0xff
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	d036      	beq.n	8000ac4 <__aeabi_fsub+0x1a0>
 8000a56:	1b7a      	subs	r2, r7, r5
 8000a58:	2d00      	cmp	r5, #0
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_fsub+0x13a>
 8000a5c:	e0aa      	b.n	8000bb4 <__aeabi_fsub+0x290>
 8000a5e:	2fff      	cmp	r7, #255	; 0xff
 8000a60:	d100      	bne.n	8000a64 <__aeabi_fsub+0x140>
 8000a62:	e0da      	b.n	8000c1a <__aeabi_fsub+0x2f6>
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	4661      	mov	r1, ip
 8000a68:	04db      	lsls	r3, r3, #19
 8000a6a:	4319      	orrs	r1, r3
 8000a6c:	468c      	mov	ip, r1
 8000a6e:	2a1b      	cmp	r2, #27
 8000a70:	dc00      	bgt.n	8000a74 <__aeabi_fsub+0x150>
 8000a72:	e0d4      	b.n	8000c1e <__aeabi_fsub+0x2fa>
 8000a74:	2301      	movs	r3, #1
 8000a76:	003d      	movs	r5, r7
 8000a78:	181b      	adds	r3, r3, r0
 8000a7a:	e7b5      	b.n	80009e8 <__aeabi_fsub+0xc4>
 8000a7c:	27fe      	movs	r7, #254	; 0xfe
 8000a7e:	1c6a      	adds	r2, r5, #1
 8000a80:	4217      	tst	r7, r2
 8000a82:	d171      	bne.n	8000b68 <__aeabi_fsub+0x244>
 8000a84:	2d00      	cmp	r5, #0
 8000a86:	d000      	beq.n	8000a8a <__aeabi_fsub+0x166>
 8000a88:	e09e      	b.n	8000bc8 <__aeabi_fsub+0x2a4>
 8000a8a:	4663      	mov	r3, ip
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_fsub+0x16e>
 8000a90:	e0d5      	b.n	8000c3e <__aeabi_fsub+0x31a>
 8000a92:	2200      	movs	r2, #0
 8000a94:	2800      	cmp	r0, #0
 8000a96:	d100      	bne.n	8000a9a <__aeabi_fsub+0x176>
 8000a98:	e78f      	b.n	80009ba <__aeabi_fsub+0x96>
 8000a9a:	1a1b      	subs	r3, r3, r0
 8000a9c:	015e      	lsls	r6, r3, #5
 8000a9e:	d400      	bmi.n	8000aa2 <__aeabi_fsub+0x17e>
 8000aa0:	e0d6      	b.n	8000c50 <__aeabi_fsub+0x32c>
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	000c      	movs	r4, r1
 8000aa6:	1ac3      	subs	r3, r0, r3
 8000aa8:	e776      	b.n	8000998 <__aeabi_fsub+0x74>
 8000aaa:	2800      	cmp	r0, #0
 8000aac:	d036      	beq.n	8000b1c <__aeabi_fsub+0x1f8>
 8000aae:	1e51      	subs	r1, r2, #1
 8000ab0:	2a01      	cmp	r2, #1
 8000ab2:	d100      	bne.n	8000ab6 <__aeabi_fsub+0x192>
 8000ab4:	e09a      	b.n	8000bec <__aeabi_fsub+0x2c8>
 8000ab6:	2aff      	cmp	r2, #255	; 0xff
 8000ab8:	d026      	beq.n	8000b08 <__aeabi_fsub+0x1e4>
 8000aba:	000a      	movs	r2, r1
 8000abc:	e78f      	b.n	80009de <__aeabi_fsub+0xba>
 8000abe:	22ff      	movs	r2, #255	; 0xff
 8000ac0:	2600      	movs	r6, #0
 8000ac2:	e77a      	b.n	80009ba <__aeabi_fsub+0x96>
 8000ac4:	27fe      	movs	r7, #254	; 0xfe
 8000ac6:	1c6a      	adds	r2, r5, #1
 8000ac8:	4217      	tst	r7, r2
 8000aca:	d062      	beq.n	8000b92 <__aeabi_fsub+0x26e>
 8000acc:	2aff      	cmp	r2, #255	; 0xff
 8000ace:	d0f6      	beq.n	8000abe <__aeabi_fsub+0x19a>
 8000ad0:	0015      	movs	r5, r2
 8000ad2:	4460      	add	r0, ip
 8000ad4:	0843      	lsrs	r3, r0, #1
 8000ad6:	075a      	lsls	r2, r3, #29
 8000ad8:	d000      	beq.n	8000adc <__aeabi_fsub+0x1b8>
 8000ada:	e75f      	b.n	800099c <__aeabi_fsub+0x78>
 8000adc:	08db      	lsrs	r3, r3, #3
 8000ade:	2dff      	cmp	r5, #255	; 0xff
 8000ae0:	d012      	beq.n	8000b08 <__aeabi_fsub+0x1e4>
 8000ae2:	025b      	lsls	r3, r3, #9
 8000ae4:	0a5e      	lsrs	r6, r3, #9
 8000ae6:	b2ea      	uxtb	r2, r5
 8000ae8:	e767      	b.n	80009ba <__aeabi_fsub+0x96>
 8000aea:	4662      	mov	r2, ip
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	d100      	bne.n	8000af2 <__aeabi_fsub+0x1ce>
 8000af0:	e093      	b.n	8000c1a <__aeabi_fsub+0x2f6>
 8000af2:	2800      	cmp	r0, #0
 8000af4:	d008      	beq.n	8000b08 <__aeabi_fsub+0x1e4>
 8000af6:	2280      	movs	r2, #128	; 0x80
 8000af8:	03d2      	lsls	r2, r2, #15
 8000afa:	4213      	tst	r3, r2
 8000afc:	d004      	beq.n	8000b08 <__aeabi_fsub+0x1e4>
 8000afe:	4640      	mov	r0, r8
 8000b00:	4210      	tst	r0, r2
 8000b02:	d101      	bne.n	8000b08 <__aeabi_fsub+0x1e4>
 8000b04:	000c      	movs	r4, r1
 8000b06:	4643      	mov	r3, r8
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d0d8      	beq.n	8000abe <__aeabi_fsub+0x19a>
 8000b0c:	2680      	movs	r6, #128	; 0x80
 8000b0e:	03f6      	lsls	r6, r6, #15
 8000b10:	431e      	orrs	r6, r3
 8000b12:	0276      	lsls	r6, r6, #9
 8000b14:	22ff      	movs	r2, #255	; 0xff
 8000b16:	0a76      	lsrs	r6, r6, #9
 8000b18:	e74f      	b.n	80009ba <__aeabi_fsub+0x96>
 8000b1a:	4643      	mov	r3, r8
 8000b1c:	0015      	movs	r5, r2
 8000b1e:	e7de      	b.n	8000ade <__aeabi_fsub+0x1ba>
 8000b20:	2220      	movs	r2, #32
 8000b22:	1b40      	subs	r0, r0, r5
 8000b24:	3001      	adds	r0, #1
 8000b26:	1a12      	subs	r2, r2, r0
 8000b28:	0019      	movs	r1, r3
 8000b2a:	4093      	lsls	r3, r2
 8000b2c:	40c1      	lsrs	r1, r0
 8000b2e:	1e5a      	subs	r2, r3, #1
 8000b30:	4193      	sbcs	r3, r2
 8000b32:	2500      	movs	r5, #0
 8000b34:	430b      	orrs	r3, r1
 8000b36:	e72f      	b.n	8000998 <__aeabi_fsub+0x74>
 8000b38:	2320      	movs	r3, #32
 8000b3a:	1a9b      	subs	r3, r3, r2
 8000b3c:	0001      	movs	r1, r0
 8000b3e:	4098      	lsls	r0, r3
 8000b40:	0003      	movs	r3, r0
 8000b42:	40d1      	lsrs	r1, r2
 8000b44:	1e5a      	subs	r2, r3, #1
 8000b46:	4193      	sbcs	r3, r2
 8000b48:	430b      	orrs	r3, r1
 8000b4a:	e712      	b.n	8000972 <__aeabi_fsub+0x4e>
 8000b4c:	2fff      	cmp	r7, #255	; 0xff
 8000b4e:	d0d9      	beq.n	8000b04 <__aeabi_fsub+0x1e0>
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	4664      	mov	r4, ip
 8000b54:	04db      	lsls	r3, r3, #19
 8000b56:	431c      	orrs	r4, r3
 8000b58:	46a4      	mov	ip, r4
 8000b5a:	2a1b      	cmp	r2, #27
 8000b5c:	dd52      	ble.n	8000c04 <__aeabi_fsub+0x2e0>
 8000b5e:	2301      	movs	r3, #1
 8000b60:	000c      	movs	r4, r1
 8000b62:	003d      	movs	r5, r7
 8000b64:	1ac3      	subs	r3, r0, r3
 8000b66:	e706      	b.n	8000976 <__aeabi_fsub+0x52>
 8000b68:	4663      	mov	r3, ip
 8000b6a:	1a1e      	subs	r6, r3, r0
 8000b6c:	0173      	lsls	r3, r6, #5
 8000b6e:	d439      	bmi.n	8000be4 <__aeabi_fsub+0x2c0>
 8000b70:	2e00      	cmp	r6, #0
 8000b72:	d000      	beq.n	8000b76 <__aeabi_fsub+0x252>
 8000b74:	e704      	b.n	8000980 <__aeabi_fsub+0x5c>
 8000b76:	2400      	movs	r4, #0
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2600      	movs	r6, #0
 8000b7c:	e71d      	b.n	80009ba <__aeabi_fsub+0x96>
 8000b7e:	2320      	movs	r3, #32
 8000b80:	1a9b      	subs	r3, r3, r2
 8000b82:	0001      	movs	r1, r0
 8000b84:	4098      	lsls	r0, r3
 8000b86:	0003      	movs	r3, r0
 8000b88:	40d1      	lsrs	r1, r2
 8000b8a:	1e5a      	subs	r2, r3, #1
 8000b8c:	4193      	sbcs	r3, r2
 8000b8e:	430b      	orrs	r3, r1
 8000b90:	e729      	b.n	80009e6 <__aeabi_fsub+0xc2>
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	d1a9      	bne.n	8000aea <__aeabi_fsub+0x1c6>
 8000b96:	4663      	mov	r3, ip
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d056      	beq.n	8000c4a <__aeabi_fsub+0x326>
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_fsub+0x280>
 8000ba2:	e70a      	b.n	80009ba <__aeabi_fsub+0x96>
 8000ba4:	0003      	movs	r3, r0
 8000ba6:	4463      	add	r3, ip
 8000ba8:	015a      	lsls	r2, r3, #5
 8000baa:	d594      	bpl.n	8000ad6 <__aeabi_fsub+0x1b2>
 8000bac:	4a2b      	ldr	r2, [pc, #172]	; (8000c5c <__aeabi_fsub+0x338>)
 8000bae:	3501      	adds	r5, #1
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	e790      	b.n	8000ad6 <__aeabi_fsub+0x1b2>
 8000bb4:	4663      	mov	r3, ip
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0af      	beq.n	8000b1a <__aeabi_fsub+0x1f6>
 8000bba:	1e53      	subs	r3, r2, #1
 8000bbc:	2a01      	cmp	r2, #1
 8000bbe:	d015      	beq.n	8000bec <__aeabi_fsub+0x2c8>
 8000bc0:	2aff      	cmp	r2, #255	; 0xff
 8000bc2:	d02a      	beq.n	8000c1a <__aeabi_fsub+0x2f6>
 8000bc4:	001a      	movs	r2, r3
 8000bc6:	e752      	b.n	8000a6e <__aeabi_fsub+0x14a>
 8000bc8:	4662      	mov	r2, ip
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d191      	bne.n	8000af2 <__aeabi_fsub+0x1ce>
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	d198      	bne.n	8000b04 <__aeabi_fsub+0x1e0>
 8000bd2:	2680      	movs	r6, #128	; 0x80
 8000bd4:	2400      	movs	r4, #0
 8000bd6:	22ff      	movs	r2, #255	; 0xff
 8000bd8:	03f6      	lsls	r6, r6, #15
 8000bda:	e6ee      	b.n	80009ba <__aeabi_fsub+0x96>
 8000bdc:	000c      	movs	r4, r1
 8000bde:	4643      	mov	r3, r8
 8000be0:	0015      	movs	r5, r2
 8000be2:	e77c      	b.n	8000ade <__aeabi_fsub+0x1ba>
 8000be4:	4663      	mov	r3, ip
 8000be6:	000c      	movs	r4, r1
 8000be8:	1ac6      	subs	r6, r0, r3
 8000bea:	e6c9      	b.n	8000980 <__aeabi_fsub+0x5c>
 8000bec:	0003      	movs	r3, r0
 8000bee:	4463      	add	r3, ip
 8000bf0:	2501      	movs	r5, #1
 8000bf2:	015a      	lsls	r2, r3, #5
 8000bf4:	d400      	bmi.n	8000bf8 <__aeabi_fsub+0x2d4>
 8000bf6:	e76e      	b.n	8000ad6 <__aeabi_fsub+0x1b2>
 8000bf8:	2502      	movs	r5, #2
 8000bfa:	e6fa      	b.n	80009f2 <__aeabi_fsub+0xce>
 8000bfc:	4663      	mov	r3, ip
 8000bfe:	2501      	movs	r5, #1
 8000c00:	1a1b      	subs	r3, r3, r0
 8000c02:	e6b8      	b.n	8000976 <__aeabi_fsub+0x52>
 8000c04:	4664      	mov	r4, ip
 8000c06:	2320      	movs	r3, #32
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	1a9b      	subs	r3, r3, r2
 8000c0c:	4662      	mov	r2, ip
 8000c0e:	409a      	lsls	r2, r3
 8000c10:	0013      	movs	r3, r2
 8000c12:	1e5a      	subs	r2, r3, #1
 8000c14:	4193      	sbcs	r3, r2
 8000c16:	4323      	orrs	r3, r4
 8000c18:	e7a2      	b.n	8000b60 <__aeabi_fsub+0x23c>
 8000c1a:	4643      	mov	r3, r8
 8000c1c:	e774      	b.n	8000b08 <__aeabi_fsub+0x1e4>
 8000c1e:	4661      	mov	r1, ip
 8000c20:	2320      	movs	r3, #32
 8000c22:	40d1      	lsrs	r1, r2
 8000c24:	1a9b      	subs	r3, r3, r2
 8000c26:	4662      	mov	r2, ip
 8000c28:	409a      	lsls	r2, r3
 8000c2a:	0013      	movs	r3, r2
 8000c2c:	1e5a      	subs	r2, r3, #1
 8000c2e:	4193      	sbcs	r3, r2
 8000c30:	430b      	orrs	r3, r1
 8000c32:	e720      	b.n	8000a76 <__aeabi_fsub+0x152>
 8000c34:	4663      	mov	r3, ip
 8000c36:	000c      	movs	r4, r1
 8000c38:	2501      	movs	r5, #1
 8000c3a:	1ac3      	subs	r3, r0, r3
 8000c3c:	e69b      	b.n	8000976 <__aeabi_fsub+0x52>
 8000c3e:	2800      	cmp	r0, #0
 8000c40:	d099      	beq.n	8000b76 <__aeabi_fsub+0x252>
 8000c42:	000c      	movs	r4, r1
 8000c44:	4646      	mov	r6, r8
 8000c46:	2200      	movs	r2, #0
 8000c48:	e6b7      	b.n	80009ba <__aeabi_fsub+0x96>
 8000c4a:	4646      	mov	r6, r8
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	e6b4      	b.n	80009ba <__aeabi_fsub+0x96>
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d000      	beq.n	8000c56 <__aeabi_fsub+0x332>
 8000c54:	e73f      	b.n	8000ad6 <__aeabi_fsub+0x1b2>
 8000c56:	2400      	movs	r4, #0
 8000c58:	2600      	movs	r6, #0
 8000c5a:	e6ae      	b.n	80009ba <__aeabi_fsub+0x96>
 8000c5c:	fbffffff 	.word	0xfbffffff
 8000c60:	7dffffff 	.word	0x7dffffff

08000c64 <__aeabi_ui2f>:
 8000c64:	b570      	push	{r4, r5, r6, lr}
 8000c66:	1e04      	subs	r4, r0, #0
 8000c68:	d00e      	beq.n	8000c88 <__aeabi_ui2f+0x24>
 8000c6a:	f000 f843 	bl	8000cf4 <__clzsi2>
 8000c6e:	239e      	movs	r3, #158	; 0x9e
 8000c70:	0001      	movs	r1, r0
 8000c72:	1a1b      	subs	r3, r3, r0
 8000c74:	2b96      	cmp	r3, #150	; 0x96
 8000c76:	dc0c      	bgt.n	8000c92 <__aeabi_ui2f+0x2e>
 8000c78:	2808      	cmp	r0, #8
 8000c7a:	d02c      	beq.n	8000cd6 <__aeabi_ui2f+0x72>
 8000c7c:	3908      	subs	r1, #8
 8000c7e:	408c      	lsls	r4, r1
 8000c80:	0264      	lsls	r4, r4, #9
 8000c82:	0a64      	lsrs	r4, r4, #9
 8000c84:	b2d8      	uxtb	r0, r3
 8000c86:	e001      	b.n	8000c8c <__aeabi_ui2f+0x28>
 8000c88:	2000      	movs	r0, #0
 8000c8a:	2400      	movs	r4, #0
 8000c8c:	05c0      	lsls	r0, r0, #23
 8000c8e:	4320      	orrs	r0, r4
 8000c90:	bd70      	pop	{r4, r5, r6, pc}
 8000c92:	2b99      	cmp	r3, #153	; 0x99
 8000c94:	dd0a      	ble.n	8000cac <__aeabi_ui2f+0x48>
 8000c96:	0002      	movs	r2, r0
 8000c98:	0020      	movs	r0, r4
 8000c9a:	321b      	adds	r2, #27
 8000c9c:	4090      	lsls	r0, r2
 8000c9e:	0002      	movs	r2, r0
 8000ca0:	1e50      	subs	r0, r2, #1
 8000ca2:	4182      	sbcs	r2, r0
 8000ca4:	2005      	movs	r0, #5
 8000ca6:	1a40      	subs	r0, r0, r1
 8000ca8:	40c4      	lsrs	r4, r0
 8000caa:	4314      	orrs	r4, r2
 8000cac:	2905      	cmp	r1, #5
 8000cae:	dc16      	bgt.n	8000cde <__aeabi_ui2f+0x7a>
 8000cb0:	0022      	movs	r2, r4
 8000cb2:	480f      	ldr	r0, [pc, #60]	; (8000cf0 <__aeabi_ui2f+0x8c>)
 8000cb4:	4002      	ands	r2, r0
 8000cb6:	0765      	lsls	r5, r4, #29
 8000cb8:	d009      	beq.n	8000cce <__aeabi_ui2f+0x6a>
 8000cba:	250f      	movs	r5, #15
 8000cbc:	402c      	ands	r4, r5
 8000cbe:	2c04      	cmp	r4, #4
 8000cc0:	d005      	beq.n	8000cce <__aeabi_ui2f+0x6a>
 8000cc2:	3204      	adds	r2, #4
 8000cc4:	0154      	lsls	r4, r2, #5
 8000cc6:	d502      	bpl.n	8000cce <__aeabi_ui2f+0x6a>
 8000cc8:	239f      	movs	r3, #159	; 0x9f
 8000cca:	4002      	ands	r2, r0
 8000ccc:	1a5b      	subs	r3, r3, r1
 8000cce:	0192      	lsls	r2, r2, #6
 8000cd0:	0a54      	lsrs	r4, r2, #9
 8000cd2:	b2d8      	uxtb	r0, r3
 8000cd4:	e7da      	b.n	8000c8c <__aeabi_ui2f+0x28>
 8000cd6:	0264      	lsls	r4, r4, #9
 8000cd8:	2096      	movs	r0, #150	; 0x96
 8000cda:	0a64      	lsrs	r4, r4, #9
 8000cdc:	e7d6      	b.n	8000c8c <__aeabi_ui2f+0x28>
 8000cde:	1f4a      	subs	r2, r1, #5
 8000ce0:	4094      	lsls	r4, r2
 8000ce2:	0022      	movs	r2, r4
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <__aeabi_ui2f+0x8c>)
 8000ce6:	4002      	ands	r2, r0
 8000ce8:	0765      	lsls	r5, r4, #29
 8000cea:	d0f0      	beq.n	8000cce <__aeabi_ui2f+0x6a>
 8000cec:	e7e5      	b.n	8000cba <__aeabi_ui2f+0x56>
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	fbffffff 	.word	0xfbffffff

08000cf4 <__clzsi2>:
 8000cf4:	211c      	movs	r1, #28
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	041b      	lsls	r3, r3, #16
 8000cfa:	4298      	cmp	r0, r3
 8000cfc:	d301      	bcc.n	8000d02 <__clzsi2+0xe>
 8000cfe:	0c00      	lsrs	r0, r0, #16
 8000d00:	3910      	subs	r1, #16
 8000d02:	0a1b      	lsrs	r3, r3, #8
 8000d04:	4298      	cmp	r0, r3
 8000d06:	d301      	bcc.n	8000d0c <__clzsi2+0x18>
 8000d08:	0a00      	lsrs	r0, r0, #8
 8000d0a:	3908      	subs	r1, #8
 8000d0c:	091b      	lsrs	r3, r3, #4
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d301      	bcc.n	8000d16 <__clzsi2+0x22>
 8000d12:	0900      	lsrs	r0, r0, #4
 8000d14:	3904      	subs	r1, #4
 8000d16:	a202      	add	r2, pc, #8	; (adr r2, 8000d20 <__clzsi2+0x2c>)
 8000d18:	5c10      	ldrb	r0, [r2, r0]
 8000d1a:	1840      	adds	r0, r0, r1
 8000d1c:	4770      	bx	lr
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	02020304 	.word	0x02020304
 8000d24:	01010101 	.word	0x01010101
	...

08000d30 <__clzdi2>:
 8000d30:	b510      	push	{r4, lr}
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d103      	bne.n	8000d3e <__clzdi2+0xe>
 8000d36:	f7ff ffdd 	bl	8000cf4 <__clzsi2>
 8000d3a:	3020      	adds	r0, #32
 8000d3c:	e002      	b.n	8000d44 <__clzdi2+0x14>
 8000d3e:	0008      	movs	r0, r1
 8000d40:	f7ff ffd8 	bl	8000cf4 <__clzsi2>
 8000d44:	bd10      	pop	{r4, pc}
 8000d46:	46c0      	nop			; (mov r8, r8)

08000d48 <segment_write>:
		{ 1, 0, 0, 1, 0, 0, 0, 1 }, // Y (31)
		{ 1, 0, 1, 0, 0, 1, 0, 0 }, // Z (32)
		{ 1, 1, 1, 1, 1, 1, 1, 1 }, // BLANK (33)
		{ 1, 0, 0, 1, 1, 1, 0, 0 }}; // DEG (34)

void segment_write(seven_segment *seg){
 8000d48:	b5b0      	push	{r4, r5, r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(seg->enable_port, seg->enable_pin, 0);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6958      	ldr	r0, [r3, #20]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	8b1b      	ldrh	r3, [r3, #24]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	0019      	movs	r1, r3
 8000d5c:	f001 f97f 	bl	800205e <HAL_GPIO_WritePin>

	for (uint8_t i = 0; i < 8; i++) {
 8000d60:	230f      	movs	r3, #15
 8000d62:	18fb      	adds	r3, r7, r3
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
 8000d68:	e026      	b.n	8000db8 <segment_write+0x70>
		HAL_GPIO_WritePin(seg->a_port, seg->a_pin, segment_data[seg->data][i]);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68d8      	ldr	r0, [r3, #12]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	8a1c      	ldrh	r4, [r3, #16]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	001a      	movs	r2, r3
 8000d78:	250f      	movs	r5, #15
 8000d7a:	197b      	adds	r3, r7, r5
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	4917      	ldr	r1, [pc, #92]	; (8000ddc <segment_write+0x94>)
 8000d80:	00d2      	lsls	r2, r2, #3
 8000d82:	188a      	adds	r2, r1, r2
 8000d84:	5cd3      	ldrb	r3, [r2, r3]
 8000d86:	001a      	movs	r2, r3
 8000d88:	0021      	movs	r1, r4
 8000d8a:	f001 f968 	bl	800205e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(seg->clock_port, seg->clock_pin, 0);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6858      	ldr	r0, [r3, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	891b      	ldrh	r3, [r3, #8]
 8000d96:	2200      	movs	r2, #0
 8000d98:	0019      	movs	r1, r3
 8000d9a:	f001 f960 	bl	800205e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(seg->clock_port, seg->clock_pin, 1);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6858      	ldr	r0, [r3, #4]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	891b      	ldrh	r3, [r3, #8]
 8000da6:	2201      	movs	r2, #1
 8000da8:	0019      	movs	r1, r3
 8000daa:	f001 f958 	bl	800205e <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 8; i++) {
 8000dae:	197b      	adds	r3, r7, r5
 8000db0:	781a      	ldrb	r2, [r3, #0]
 8000db2:	197b      	adds	r3, r7, r5
 8000db4:	3201      	adds	r2, #1
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	230f      	movs	r3, #15
 8000dba:	18fb      	adds	r3, r7, r3
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b07      	cmp	r3, #7
 8000dc0:	d9d3      	bls.n	8000d6a <segment_write+0x22>
	}
	HAL_GPIO_WritePin(seg->enable_port, seg->enable_pin, 1);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6958      	ldr	r0, [r3, #20]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	8b1b      	ldrh	r3, [r3, #24]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	0019      	movs	r1, r3
 8000dce:	f001 f946 	bl	800205e <HAL_GPIO_WritePin>
}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b004      	add	sp, #16
 8000dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	20000000 	.word	0x20000000

08000de0 <button_thread>:
#include "button_thread.h"
#include "main.h"



void button_thread(void *pvParameters) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	/* Just to remove compiler warning. */
	(void) pvParameters;

	const TickType_t delay_100_ms = pdMS_TO_TICKS(100UL);
 8000de8:	2364      	movs	r3, #100	; 0x64
 8000dea:	60fb      	str	r3, [r7, #12]

	uint8_t button_value;

	while(1){
		if(HAL_GPIO_ReadPin(BTN_UP_GPIO_Port, BTN_UP_Pin)){
 8000dec:	4b26      	ldr	r3, [pc, #152]	; (8000e88 <button_thread+0xa8>)
 8000dee:	2101      	movs	r1, #1
 8000df0:	0018      	movs	r0, r3
 8000df2:	f001 f917 	bl	8002024 <HAL_GPIO_ReadPin>
 8000df6:	1e03      	subs	r3, r0, #0
 8000df8:	d00a      	beq.n	8000e10 <button_thread+0x30>
			button_value = BUTTON_UP;
 8000dfa:	210b      	movs	r1, #11
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
			xQueueSend(button_queue, (void *) &button_value, (TickType_t) 10);
 8000e02:	4b22      	ldr	r3, [pc, #136]	; (8000e8c <button_thread+0xac>)
 8000e04:	6818      	ldr	r0, [r3, #0]
 8000e06:	1879      	adds	r1, r7, r1
 8000e08:	2300      	movs	r3, #0
 8000e0a:	220a      	movs	r2, #10
 8000e0c:	f004 fa3f 	bl	800528e <xQueueGenericSend>
		}
		if(HAL_GPIO_ReadPin(BTN_DOWN_GPIO_Port, BTN_DOWN_Pin)){
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <button_thread+0xa8>)
 8000e12:	2102      	movs	r1, #2
 8000e14:	0018      	movs	r0, r3
 8000e16:	f001 f905 	bl	8002024 <HAL_GPIO_ReadPin>
 8000e1a:	1e03      	subs	r3, r0, #0
 8000e1c:	d00a      	beq.n	8000e34 <button_thread+0x54>
			button_value = BUTTON_DOWN;
 8000e1e:	210b      	movs	r1, #11
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2202      	movs	r2, #2
 8000e24:	701a      	strb	r2, [r3, #0]
			xQueueSend(button_queue, (void *) &button_value, (TickType_t) 10);
 8000e26:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <button_thread+0xac>)
 8000e28:	6818      	ldr	r0, [r3, #0]
 8000e2a:	1879      	adds	r1, r7, r1
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	220a      	movs	r2, #10
 8000e30:	f004 fa2d 	bl	800528e <xQueueGenericSend>
		}
		if(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port, BTN_LEFT_Pin)){
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <button_thread+0xa8>)
 8000e36:	2104      	movs	r1, #4
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f001 f8f3 	bl	8002024 <HAL_GPIO_ReadPin>
 8000e3e:	1e03      	subs	r3, r0, #0
 8000e40:	d00a      	beq.n	8000e58 <button_thread+0x78>
			button_value = BUTTON_LEFT;
 8000e42:	210b      	movs	r1, #11
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2203      	movs	r2, #3
 8000e48:	701a      	strb	r2, [r3, #0]
			xQueueSend(button_queue, (void *) &button_value, (TickType_t) 10);
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <button_thread+0xac>)
 8000e4c:	6818      	ldr	r0, [r3, #0]
 8000e4e:	1879      	adds	r1, r7, r1
 8000e50:	2300      	movs	r3, #0
 8000e52:	220a      	movs	r2, #10
 8000e54:	f004 fa1b 	bl	800528e <xQueueGenericSend>
		}
		if(HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port, BTN_RIGHT_Pin)){
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <button_thread+0xa8>)
 8000e5a:	2108      	movs	r1, #8
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f001 f8e1 	bl	8002024 <HAL_GPIO_ReadPin>
 8000e62:	1e03      	subs	r3, r0, #0
 8000e64:	d00a      	beq.n	8000e7c <button_thread+0x9c>
			button_value = BUTTON_RIGHT;
 8000e66:	210b      	movs	r1, #11
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	2204      	movs	r2, #4
 8000e6c:	701a      	strb	r2, [r3, #0]
			xQueueSend(button_queue, (void *) &button_value, (TickType_t) 10);
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <button_thread+0xac>)
 8000e70:	6818      	ldr	r0, [r3, #0]
 8000e72:	1879      	adds	r1, r7, r1
 8000e74:	2300      	movs	r3, #0
 8000e76:	220a      	movs	r2, #10
 8000e78:	f004 fa09 	bl	800528e <xQueueGenericSend>
		}
		vTaskDelay(delay_100_ms);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f004 fd20 	bl	80058c4 <vTaskDelay>
		if(HAL_GPIO_ReadPin(BTN_UP_GPIO_Port, BTN_UP_Pin)){
 8000e84:	e7b2      	b.n	8000dec <button_thread+0xc>
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	50000400 	.word	0x50000400
 8000e8c:	200004e4 	.word	0x200004e4

08000e90 <clock_thread>:
extern RTC_HandleTypeDef hrtc;
extern TIM_HandleTypeDef htim2;
extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart2;

void clock_thread(void *pvParameters) {
 8000e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e92:	b0dd      	sub	sp, #372	; 0x174
 8000e94:	af02      	add	r7, sp, #8
 8000e96:	6078      	str	r0, [r7, #4]
	/* Just to remove compiler warning. */
	(void) pvParameters;

	const TickType_t delay_1000_ms = pdMS_TO_TICKS(1000UL);
 8000e98:	23fa      	movs	r3, #250	; 0xfa
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	22b2      	movs	r2, #178	; 0xb2
 8000e9e:	0052      	lsls	r2, r2, #1
 8000ea0:	18ba      	adds	r2, r7, r2
 8000ea2:	6013      	str	r3, [r2, #0]
	const TickType_t delay_200_ms = pdMS_TO_TICKS(200UL);
 8000ea4:	23c8      	movs	r3, #200	; 0xc8
 8000ea6:	22b0      	movs	r2, #176	; 0xb0
 8000ea8:	0052      	lsls	r2, r2, #1
 8000eaa:	18ba      	adds	r2, r7, r2
 8000eac:	6013      	str	r3, [r2, #0]
	const TickType_t delay_100_ms = pdMS_TO_TICKS(100UL);
 8000eae:	2364      	movs	r3, #100	; 0x64
 8000eb0:	22ae      	movs	r2, #174	; 0xae
 8000eb2:	0052      	lsls	r2, r2, #1
 8000eb4:	18b9      	adds	r1, r7, r2
 8000eb6:	600b      	str	r3, [r1, #0]
	const TickType_t delay_10_ms = pdMS_TO_TICKS(10UL);
 8000eb8:	230a      	movs	r3, #10
 8000eba:	21ac      	movs	r1, #172	; 0xac
 8000ebc:	0049      	lsls	r1, r1, #1
 8000ebe:	1879      	adds	r1, r7, r1
 8000ec0:	600b      	str	r3, [r1, #0]

	uint8_t data[6] = {
 8000ec2:	259e      	movs	r5, #158	; 0x9e
 8000ec4:	006d      	lsls	r5, r5, #1
 8000ec6:	197b      	adds	r3, r7, r5
 8000ec8:	4ac8      	ldr	r2, [pc, #800]	; (80011ec <clock_thread+0x35c>)
 8000eca:	6811      	ldr	r1, [r2, #0]
 8000ecc:	6019      	str	r1, [r3, #0]
 8000ece:	8892      	ldrh	r2, [r2, #4]
 8000ed0:	809a      	strh	r2, [r3, #4]

	RTC_TimeTypeDef sTimeStamp;
	RTC_DateTypeDef sTimeStampDate;

	uint8_t bcd;
	uint8_t old_sec = 15;
 8000ed2:	2358      	movs	r3, #88	; 0x58
 8000ed4:	33ff      	adds	r3, #255	; 0xff
 8000ed6:	18fb      	adds	r3, r7, r3
 8000ed8:	220f      	movs	r2, #15
 8000eda:	701a      	strb	r2, [r3, #0]

	uint8_t sht_addr = 0x88;
 8000edc:	26ab      	movs	r6, #171	; 0xab
 8000ede:	0076      	lsls	r6, r6, #1
 8000ee0:	19bb      	adds	r3, r7, r6
 8000ee2:	2288      	movs	r2, #136	; 0x88
 8000ee4:	701a      	strb	r2, [r3, #0]

	uint8_t sht_tx[2] = { 0x20, 0x32 };
 8000ee6:	2090      	movs	r0, #144	; 0x90
 8000ee8:	0040      	lsls	r0, r0, #1
 8000eea:	183b      	adds	r3, r7, r0
 8000eec:	4ac0      	ldr	r2, [pc, #768]	; (80011f0 <clock_thread+0x360>)
 8000eee:	801a      	strh	r2, [r3, #0]
	uint8_t sht_rx[6];
	HAL_StatusTypeDef result;

	result = HAL_I2C_Master_Transmit(&hi2c1, sht_addr, sht_tx, 2, 10);
 8000ef0:	19bb      	adds	r3, r7, r6
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	b299      	uxth	r1, r3
 8000ef6:	2356      	movs	r3, #86	; 0x56
 8000ef8:	33ff      	adds	r3, #255	; 0xff
 8000efa:	18fc      	adds	r4, r7, r3
 8000efc:	183a      	adds	r2, r7, r0
 8000efe:	48bd      	ldr	r0, [pc, #756]	; (80011f4 <clock_thread+0x364>)
 8000f00:	230a      	movs	r3, #10
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2302      	movs	r3, #2
 8000f06:	f001 f95d 	bl	80021c4 <HAL_I2C_Master_Transmit>
 8000f0a:	0003      	movs	r3, r0
 8000f0c:	7023      	strb	r3, [r4, #0]
	vTaskDelay(delay_100_ms);
 8000f0e:	22ae      	movs	r2, #174	; 0xae
 8000f10:	0052      	lsls	r2, r2, #1
 8000f12:	18ba      	adds	r2, r7, r2
 8000f14:	6813      	ldr	r3, [r2, #0]
 8000f16:	0018      	movs	r0, r3
 8000f18:	f004 fcd4 	bl	80058c4 <vTaskDelay>
	result = HAL_I2C_Master_Receive(&hi2c1, sht_addr, sht_rx, 3, 10);
 8000f1c:	19bb      	adds	r3, r7, r6
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b299      	uxth	r1, r3
 8000f22:	2356      	movs	r3, #86	; 0x56
 8000f24:	33ff      	adds	r3, #255	; 0xff
 8000f26:	18fc      	adds	r4, r7, r3
 8000f28:	268c      	movs	r6, #140	; 0x8c
 8000f2a:	0076      	lsls	r6, r6, #1
 8000f2c:	19ba      	adds	r2, r7, r6
 8000f2e:	48b1      	ldr	r0, [pc, #708]	; (80011f4 <clock_thread+0x364>)
 8000f30:	230a      	movs	r3, #10
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	2303      	movs	r3, #3
 8000f36:	f001 fa4d 	bl	80023d4 <HAL_I2C_Master_Receive>
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	7023      	strb	r3, [r4, #0]

	uint8_t tx_data[100];

	uint16_t st = 0;
 8000f3e:	21a9      	movs	r1, #169	; 0xa9
 8000f40:	0049      	lsls	r1, r1, #1
 8000f42:	187b      	adds	r3, r7, r1
 8000f44:	2200      	movs	r2, #0
 8000f46:	801a      	strh	r2, [r3, #0]
	uint32_t temp_seg = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	22a6      	movs	r2, #166	; 0xa6
 8000f4c:	0052      	lsls	r2, r2, #1
 8000f4e:	18ba      	adds	r2, r7, r2
 8000f50:	6013      	str	r3, [r2, #0]
	st = sht_rx[0] << 8;
 8000f52:	19bb      	adds	r3, r7, r6
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	0008      	movs	r0, r1
 8000f5a:	187b      	adds	r3, r7, r1
 8000f5c:	0212      	lsls	r2, r2, #8
 8000f5e:	801a      	strh	r2, [r3, #0]
	st = st | sht_rx[1];
 8000f60:	19bb      	adds	r3, r7, r6
 8000f62:	785b      	ldrb	r3, [r3, #1]
 8000f64:	b299      	uxth	r1, r3
 8000f66:	183b      	adds	r3, r7, r0
 8000f68:	183a      	adds	r2, r7, r0
 8000f6a:	8812      	ldrh	r2, [r2, #0]
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	801a      	strh	r2, [r3, #0]

	float temperature = -45 + 175 * ((float) st / 65535);
 8000f70:	183b      	adds	r3, r7, r0
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	0018      	movs	r0, r3
 8000f76:	f7ff fe75 	bl	8000c64 <__aeabi_ui2f>
 8000f7a:	1c03      	adds	r3, r0, #0
 8000f7c:	499e      	ldr	r1, [pc, #632]	; (80011f8 <clock_thread+0x368>)
 8000f7e:	1c18      	adds	r0, r3, #0
 8000f80:	f7ff fa68 	bl	8000454 <__aeabi_fdiv>
 8000f84:	1c03      	adds	r3, r0, #0
 8000f86:	499d      	ldr	r1, [pc, #628]	; (80011fc <clock_thread+0x36c>)
 8000f88:	1c18      	adds	r0, r3, #0
 8000f8a:	f7ff fb7d 	bl	8000688 <__aeabi_fmul>
 8000f8e:	1c03      	adds	r3, r0, #0
 8000f90:	499b      	ldr	r1, [pc, #620]	; (8001200 <clock_thread+0x370>)
 8000f92:	1c18      	adds	r0, r3, #0
 8000f94:	f7ff fcc6 	bl	8000924 <__aeabi_fsub>
 8000f98:	1c03      	adds	r3, r0, #0
 8000f9a:	22a4      	movs	r2, #164	; 0xa4
 8000f9c:	0052      	lsls	r2, r2, #1
 8000f9e:	18ba      	adds	r2, r7, r2
 8000fa0:	6013      	str	r3, [r2, #0]
	uint8_t hour_ten_value = 0;
 8000fa2:	2348      	movs	r3, #72	; 0x48
 8000fa4:	33ff      	adds	r3, #255	; 0xff
 8000fa6:	18fb      	adds	r3, r7, r3
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
	uint8_t hour_one_value = 0;
 8000fac:	23a3      	movs	r3, #163	; 0xa3
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	18fb      	adds	r3, r7, r3
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
	uint8_t minute_ten_value = 0;
 8000fb6:	2346      	movs	r3, #70	; 0x46
 8000fb8:	33ff      	adds	r3, #255	; 0xff
 8000fba:	18fb      	adds	r3, r7, r3
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
	uint8_t minute_one_value = 0;
 8000fc0:	23a2      	movs	r3, #162	; 0xa2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
	uint8_t second_ten_value = 0;
 8000fca:	2344      	movs	r3, #68	; 0x44
 8000fcc:	33ff      	adds	r3, #255	; 0xff
 8000fce:	18fb      	adds	r3, r7, r3
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
	uint8_t second_one_value = 0;
 8000fd4:	23a1      	movs	r3, #161	; 0xa1
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	18fb      	adds	r3, r7, r3
 8000fda:	2200      	movs	r2, #0
 8000fdc:	701a      	strb	r2, [r3, #0]

	data[0] = SEG_A;
 8000fde:	0029      	movs	r1, r5
 8000fe0:	187b      	adds	r3, r7, r1
 8000fe2:	220a      	movs	r2, #10
 8000fe4:	701a      	strb	r2, [r3, #0]
	data[1] = SEG_A;
 8000fe6:	187b      	adds	r3, r7, r1
 8000fe8:	220a      	movs	r2, #10
 8000fea:	705a      	strb	r2, [r3, #1]
	data[2] = SEG_A;
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	220a      	movs	r2, #10
 8000ff0:	709a      	strb	r2, [r3, #2]
	data[3] = SEG_A;
 8000ff2:	187b      	adds	r3, r7, r1
 8000ff4:	220a      	movs	r2, #10
 8000ff6:	70da      	strb	r2, [r3, #3]
	data[4] = SEG_A;
 8000ff8:	187b      	adds	r3, r7, r1
 8000ffa:	220a      	movs	r2, #10
 8000ffc:	711a      	strb	r2, [r3, #4]
	data[5] = SEG_A;
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	220a      	movs	r2, #10
 8001002:	715a      	strb	r2, [r3, #5]
	seven_segment minute_ten;
	seven_segment minute_one;
	seven_segment second_ten;
	seven_segment second_one;

	hour_ten.a_port = A_HT_GPIO_Port;
 8001004:	2098      	movs	r0, #152	; 0x98
 8001006:	183b      	adds	r3, r7, r0
 8001008:	22a0      	movs	r2, #160	; 0xa0
 800100a:	05d2      	lsls	r2, r2, #23
 800100c:	60da      	str	r2, [r3, #12]
	hour_ten.a_pin = A_HT_Pin;
 800100e:	183b      	adds	r3, r7, r0
 8001010:	2202      	movs	r2, #2
 8001012:	821a      	strh	r2, [r3, #16]
	hour_ten.clock_port = CLK_A_HT_GPIO_Port;
 8001014:	183b      	adds	r3, r7, r0
 8001016:	22a0      	movs	r2, #160	; 0xa0
 8001018:	05d2      	lsls	r2, r2, #23
 800101a:	605a      	str	r2, [r3, #4]
	hour_ten.clock_pin = CLK_A_HT_Pin;
 800101c:	183b      	adds	r3, r7, r0
 800101e:	2204      	movs	r2, #4
 8001020:	811a      	strh	r2, [r3, #8]
	hour_ten.enable_port = EN_HT_GPIO_Port;
 8001022:	183b      	adds	r3, r7, r0
 8001024:	22a0      	movs	r2, #160	; 0xa0
 8001026:	05d2      	lsls	r2, r2, #23
 8001028:	615a      	str	r2, [r3, #20]
	hour_ten.enable_pin = EN_HT_Pin;
 800102a:	183b      	adds	r3, r7, r0
 800102c:	2208      	movs	r2, #8
 800102e:	831a      	strh	r2, [r3, #24]

	hour_one.a_port = A_HO_GPIO_Port;
 8001030:	247c      	movs	r4, #124	; 0x7c
 8001032:	193b      	adds	r3, r7, r4
 8001034:	22a0      	movs	r2, #160	; 0xa0
 8001036:	05d2      	lsls	r2, r2, #23
 8001038:	60da      	str	r2, [r3, #12]
	hour_one.a_pin = A_HO_Pin;
 800103a:	193b      	adds	r3, r7, r4
 800103c:	2210      	movs	r2, #16
 800103e:	821a      	strh	r2, [r3, #16]
	hour_one.clock_port = CLK_A_HO_GPIO_Port;
 8001040:	193b      	adds	r3, r7, r4
 8001042:	22a0      	movs	r2, #160	; 0xa0
 8001044:	05d2      	lsls	r2, r2, #23
 8001046:	605a      	str	r2, [r3, #4]
	hour_one.clock_pin = CLK_A_HO_Pin;
 8001048:	193b      	adds	r3, r7, r4
 800104a:	2220      	movs	r2, #32
 800104c:	811a      	strh	r2, [r3, #8]
	hour_one.enable_port = EN_HO_GPIO_Port;
 800104e:	193b      	adds	r3, r7, r4
 8001050:	4a6c      	ldr	r2, [pc, #432]	; (8001204 <clock_thread+0x374>)
 8001052:	615a      	str	r2, [r3, #20]
	hour_one.enable_pin = EN_HO_Pin;
 8001054:	193b      	adds	r3, r7, r4
 8001056:	2210      	movs	r2, #16
 8001058:	831a      	strh	r2, [r3, #24]

	minute_ten.a_port = A_MT_GPIO_Port;
 800105a:	4b6b      	ldr	r3, [pc, #428]	; (8001208 <clock_thread+0x378>)
 800105c:	21b4      	movs	r1, #180	; 0xb4
 800105e:	0049      	lsls	r1, r1, #1
 8001060:	185b      	adds	r3, r3, r1
 8001062:	19db      	adds	r3, r3, r7
 8001064:	22a0      	movs	r2, #160	; 0xa0
 8001066:	05d2      	lsls	r2, r2, #23
 8001068:	60da      	str	r2, [r3, #12]
	minute_ten.a_pin = A_MT_Pin;
 800106a:	4b67      	ldr	r3, [pc, #412]	; (8001208 <clock_thread+0x378>)
 800106c:	185b      	adds	r3, r3, r1
 800106e:	19db      	adds	r3, r3, r7
 8001070:	2240      	movs	r2, #64	; 0x40
 8001072:	821a      	strh	r2, [r3, #16]
	minute_ten.clock_port = CLK_A_MT_GPIO_Port;
 8001074:	4b64      	ldr	r3, [pc, #400]	; (8001208 <clock_thread+0x378>)
 8001076:	185b      	adds	r3, r3, r1
 8001078:	19db      	adds	r3, r3, r7
 800107a:	22a0      	movs	r2, #160	; 0xa0
 800107c:	05d2      	lsls	r2, r2, #23
 800107e:	605a      	str	r2, [r3, #4]
	minute_ten.clock_pin = CLK_A_MT_Pin;
 8001080:	4b61      	ldr	r3, [pc, #388]	; (8001208 <clock_thread+0x378>)
 8001082:	185b      	adds	r3, r3, r1
 8001084:	19db      	adds	r3, r3, r7
 8001086:	2280      	movs	r2, #128	; 0x80
 8001088:	811a      	strh	r2, [r3, #8]
	minute_ten.enable_port = EN_MT_GPIO_Port;
 800108a:	4b5f      	ldr	r3, [pc, #380]	; (8001208 <clock_thread+0x378>)
 800108c:	185b      	adds	r3, r3, r1
 800108e:	19db      	adds	r3, r3, r7
 8001090:	4a5c      	ldr	r2, [pc, #368]	; (8001204 <clock_thread+0x374>)
 8001092:	615a      	str	r2, [r3, #20]
	minute_ten.enable_pin = EN_MT_Pin;
 8001094:	4b5c      	ldr	r3, [pc, #368]	; (8001208 <clock_thread+0x378>)
 8001096:	185b      	adds	r3, r3, r1
 8001098:	19db      	adds	r3, r3, r7
 800109a:	2220      	movs	r2, #32
 800109c:	831a      	strh	r2, [r3, #24]

	minute_one.a_port = A_MO_GPIO_Port;
 800109e:	4b5b      	ldr	r3, [pc, #364]	; (800120c <clock_thread+0x37c>)
 80010a0:	185b      	adds	r3, r3, r1
 80010a2:	19db      	adds	r3, r3, r7
 80010a4:	22a0      	movs	r2, #160	; 0xa0
 80010a6:	05d2      	lsls	r2, r2, #23
 80010a8:	60da      	str	r2, [r3, #12]
	minute_one.a_pin = A_MO_Pin;
 80010aa:	4b58      	ldr	r3, [pc, #352]	; (800120c <clock_thread+0x37c>)
 80010ac:	185b      	adds	r3, r3, r1
 80010ae:	19db      	adds	r3, r3, r7
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	0052      	lsls	r2, r2, #1
 80010b4:	821a      	strh	r2, [r3, #16]
	minute_one.clock_port = CLK_A_MO_GPIO_Port;
 80010b6:	4b55      	ldr	r3, [pc, #340]	; (800120c <clock_thread+0x37c>)
 80010b8:	185b      	adds	r3, r3, r1
 80010ba:	19db      	adds	r3, r3, r7
 80010bc:	22a0      	movs	r2, #160	; 0xa0
 80010be:	05d2      	lsls	r2, r2, #23
 80010c0:	605a      	str	r2, [r3, #4]
	minute_one.clock_pin = CLK_A_MO_Pin;
 80010c2:	4b52      	ldr	r3, [pc, #328]	; (800120c <clock_thread+0x37c>)
 80010c4:	185b      	adds	r3, r3, r1
 80010c6:	19db      	adds	r3, r3, r7
 80010c8:	2280      	movs	r2, #128	; 0x80
 80010ca:	0092      	lsls	r2, r2, #2
 80010cc:	811a      	strh	r2, [r3, #8]
	minute_one.enable_port = EN_MO_GPIO_Port;
 80010ce:	4b4f      	ldr	r3, [pc, #316]	; (800120c <clock_thread+0x37c>)
 80010d0:	185b      	adds	r3, r3, r1
 80010d2:	19db      	adds	r3, r3, r7
 80010d4:	4a4b      	ldr	r2, [pc, #300]	; (8001204 <clock_thread+0x374>)
 80010d6:	615a      	str	r2, [r3, #20]
	minute_one.enable_pin = EN_MO_Pin;
 80010d8:	4b4c      	ldr	r3, [pc, #304]	; (800120c <clock_thread+0x37c>)
 80010da:	185b      	adds	r3, r3, r1
 80010dc:	19db      	adds	r3, r3, r7
 80010de:	2280      	movs	r2, #128	; 0x80
 80010e0:	0152      	lsls	r2, r2, #5
 80010e2:	831a      	strh	r2, [r3, #24]

	second_ten.a_port = A_ST_GPIO_Port;
 80010e4:	4b4a      	ldr	r3, [pc, #296]	; (8001210 <clock_thread+0x380>)
 80010e6:	185b      	adds	r3, r3, r1
 80010e8:	19db      	adds	r3, r3, r7
 80010ea:	22a0      	movs	r2, #160	; 0xa0
 80010ec:	05d2      	lsls	r2, r2, #23
 80010ee:	60da      	str	r2, [r3, #12]
	second_ten.a_pin = A_ST_Pin;
 80010f0:	4b47      	ldr	r3, [pc, #284]	; (8001210 <clock_thread+0x380>)
 80010f2:	185b      	adds	r3, r3, r1
 80010f4:	19db      	adds	r3, r3, r7
 80010f6:	2280      	movs	r2, #128	; 0x80
 80010f8:	00d2      	lsls	r2, r2, #3
 80010fa:	821a      	strh	r2, [r3, #16]
	second_ten.clock_port = CLK_A_ST_GPIO_Port;
 80010fc:	4b44      	ldr	r3, [pc, #272]	; (8001210 <clock_thread+0x380>)
 80010fe:	185b      	adds	r3, r3, r1
 8001100:	19db      	adds	r3, r3, r7
 8001102:	22a0      	movs	r2, #160	; 0xa0
 8001104:	05d2      	lsls	r2, r2, #23
 8001106:	605a      	str	r2, [r3, #4]
	second_ten.clock_pin = CLK_A_ST_Pin;
 8001108:	4b41      	ldr	r3, [pc, #260]	; (8001210 <clock_thread+0x380>)
 800110a:	185b      	adds	r3, r3, r1
 800110c:	19db      	adds	r3, r3, r7
 800110e:	2280      	movs	r2, #128	; 0x80
 8001110:	0112      	lsls	r2, r2, #4
 8001112:	811a      	strh	r2, [r3, #8]
	second_ten.enable_port = EN_ST_GPIO_Port;
 8001114:	4b3e      	ldr	r3, [pc, #248]	; (8001210 <clock_thread+0x380>)
 8001116:	185b      	adds	r3, r3, r1
 8001118:	19db      	adds	r3, r3, r7
 800111a:	4a3a      	ldr	r2, [pc, #232]	; (8001204 <clock_thread+0x374>)
 800111c:	615a      	str	r2, [r3, #20]
	second_ten.enable_pin = EN_ST_Pin;
 800111e:	4b3c      	ldr	r3, [pc, #240]	; (8001210 <clock_thread+0x380>)
 8001120:	185b      	adds	r3, r3, r1
 8001122:	19db      	adds	r3, r3, r7
 8001124:	2280      	movs	r2, #128	; 0x80
 8001126:	0192      	lsls	r2, r2, #6
 8001128:	831a      	strh	r2, [r3, #24]

	second_one.a_port = A_SO_GPIO_Port;
 800112a:	4b3a      	ldr	r3, [pc, #232]	; (8001214 <clock_thread+0x384>)
 800112c:	185b      	adds	r3, r3, r1
 800112e:	19db      	adds	r3, r3, r7
 8001130:	22a0      	movs	r2, #160	; 0xa0
 8001132:	05d2      	lsls	r2, r2, #23
 8001134:	60da      	str	r2, [r3, #12]
	second_one.a_pin = A_SO_Pin;
 8001136:	4b37      	ldr	r3, [pc, #220]	; (8001214 <clock_thread+0x384>)
 8001138:	185b      	adds	r3, r3, r1
 800113a:	19db      	adds	r3, r3, r7
 800113c:	2280      	movs	r2, #128	; 0x80
 800113e:	0152      	lsls	r2, r2, #5
 8001140:	821a      	strh	r2, [r3, #16]
	second_one.clock_port = CLK_A_SO_GPIO_Port;
 8001142:	4b34      	ldr	r3, [pc, #208]	; (8001214 <clock_thread+0x384>)
 8001144:	185b      	adds	r3, r3, r1
 8001146:	19db      	adds	r3, r3, r7
 8001148:	22a0      	movs	r2, #160	; 0xa0
 800114a:	05d2      	lsls	r2, r2, #23
 800114c:	605a      	str	r2, [r3, #4]
	second_one.clock_pin = CLK_A_SO_Pin;
 800114e:	4b31      	ldr	r3, [pc, #196]	; (8001214 <clock_thread+0x384>)
 8001150:	185b      	adds	r3, r3, r1
 8001152:	19db      	adds	r3, r3, r7
 8001154:	4a30      	ldr	r2, [pc, #192]	; (8001218 <clock_thread+0x388>)
 8001156:	811a      	strh	r2, [r3, #8]
	second_one.enable_port = EN_SO_GPIO_Port;
 8001158:	4b2e      	ldr	r3, [pc, #184]	; (8001214 <clock_thread+0x384>)
 800115a:	185b      	adds	r3, r3, r1
 800115c:	19db      	adds	r3, r3, r7
 800115e:	4a29      	ldr	r2, [pc, #164]	; (8001204 <clock_thread+0x374>)
 8001160:	615a      	str	r2, [r3, #20]
	second_one.enable_pin = EN_SO_Pin;
 8001162:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <clock_thread+0x384>)
 8001164:	185b      	adds	r3, r3, r1
 8001166:	19db      	adds	r3, r3, r7
 8001168:	2280      	movs	r2, #128	; 0x80
 800116a:	01d2      	lsls	r2, r2, #7
 800116c:	831a      	strh	r2, [r3, #24]

	hour_ten.data = 0;
 800116e:	183b      	adds	r3, r7, r0
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
	hour_one.data = 0;
 8001174:	193b      	adds	r3, r7, r4
 8001176:	2200      	movs	r2, #0
 8001178:	701a      	strb	r2, [r3, #0]
	minute_ten.data = 0;
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <clock_thread+0x378>)
 800117c:	185b      	adds	r3, r3, r1
 800117e:	19db      	adds	r3, r3, r7
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
	minute_one.data = 0;
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <clock_thread+0x37c>)
 8001186:	185b      	adds	r3, r3, r1
 8001188:	19db      	adds	r3, r3, r7
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
	second_ten.data = 0;
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <clock_thread+0x380>)
 8001190:	185b      	adds	r3, r3, r1
 8001192:	19db      	adds	r3, r3, r7
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
	second_one.data = 0;
 8001198:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <clock_thread+0x384>)
 800119a:	185b      	adds	r3, r3, r1
 800119c:	19db      	adds	r3, r3, r7
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]

	segment_write(&hour_ten);
 80011a2:	183b      	adds	r3, r7, r0
 80011a4:	0018      	movs	r0, r3
 80011a6:	f7ff fdcf 	bl	8000d48 <segment_write>
	segment_write(&hour_one);
 80011aa:	193b      	adds	r3, r7, r4
 80011ac:	0018      	movs	r0, r3
 80011ae:	f7ff fdcb 	bl	8000d48 <segment_write>
	segment_write(&minute_ten);
 80011b2:	2360      	movs	r3, #96	; 0x60
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	0018      	movs	r0, r3
 80011b8:	f7ff fdc6 	bl	8000d48 <segment_write>
	segment_write(&minute_one);
 80011bc:	2344      	movs	r3, #68	; 0x44
 80011be:	18fb      	adds	r3, r7, r3
 80011c0:	0018      	movs	r0, r3
 80011c2:	f7ff fdc1 	bl	8000d48 <segment_write>
	segment_write(&second_ten);
 80011c6:	2328      	movs	r3, #40	; 0x28
 80011c8:	18fb      	adds	r3, r7, r3
 80011ca:	0018      	movs	r0, r3
 80011cc:	f7ff fdbc 	bl	8000d48 <segment_write>
	segment_write(&second_one);
 80011d0:	230c      	movs	r3, #12
 80011d2:	18fb      	adds	r3, r7, r3
 80011d4:	0018      	movs	r0, r3
 80011d6:	f7ff fdb7 	bl	8000d48 <segment_write>

	while (1) {

		vTaskDelay(delay_1000_ms);
 80011da:	23b2      	movs	r3, #178	; 0xb2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	18fb      	adds	r3, r7, r3
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	0018      	movs	r0, r3
 80011e4:	f004 fb6e 	bl	80058c4 <vTaskDelay>
 80011e8:	e7f7      	b.n	80011da <clock_thread+0x34a>
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	08006810 	.word	0x08006810
 80011f0:	00003220 	.word	0x00003220
 80011f4:	20000398 	.word	0x20000398
 80011f8:	477fff00 	.word	0x477fff00
 80011fc:	432f0000 	.word	0x432f0000
 8001200:	42340000 	.word	0x42340000
 8001204:	50000400 	.word	0x50000400
 8001208:	fffffef8 	.word	0xfffffef8
 800120c:	fffffedc 	.word	0xfffffedc
 8001210:	fffffec0 	.word	0xfffffec0
 8001214:	fffffea4 	.word	0xfffffea4
 8001218:	ffff8000 	.word	0xffff8000

0800121c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4a06      	ldr	r2, [pc, #24]	; (8001244 <vApplicationGetIdleTaskMemory+0x28>)
 800122c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	4a05      	ldr	r2, [pc, #20]	; (8001248 <vApplicationGetIdleTaskMemory+0x2c>)
 8001232:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2280      	movs	r2, #128	; 0x80
 8001238:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	b004      	add	sp, #16
 8001240:	bd80      	pop	{r7, pc}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	20000144 	.word	0x20000144
 8001248:	20000198 	.word	0x20000198

0800124c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b08b      	sub	sp, #44	; 0x2c
 8001250:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8001252:	f000 fc55 	bl	8001b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001256:	f000 f88b 	bl	8001370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125a:	f000 fa2b 	bl	80016b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800125e:	f000 f90f 	bl	8001480 <MX_I2C1_Init>
  MX_RTC_Init();
 8001262:	f000 f94d 	bl	8001500 <MX_RTC_Init>
  MX_TIM2_Init();
 8001266:	f000 f975 	bl	8001554 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800126a:	f000 f9f3 	bl	8001654 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(EN_HO_GPIO_Port, EN_HO_Pin, 0);
 800126e:	4b36      	ldr	r3, [pc, #216]	; (8001348 <main+0xfc>)
 8001270:	2200      	movs	r2, #0
 8001272:	2110      	movs	r1, #16
 8001274:	0018      	movs	r0, r3
 8001276:	f000 fef2 	bl	800205e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_HT_GPIO_Port, EN_HT_Pin, 0);
 800127a:	23a0      	movs	r3, #160	; 0xa0
 800127c:	05db      	lsls	r3, r3, #23
 800127e:	2200      	movs	r2, #0
 8001280:	2108      	movs	r1, #8
 8001282:	0018      	movs	r0, r3
 8001284:	f000 feeb 	bl	800205e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_MO_GPIO_Port, EN_MO_Pin, 0);
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	015b      	lsls	r3, r3, #5
 800128c:	482e      	ldr	r0, [pc, #184]	; (8001348 <main+0xfc>)
 800128e:	2200      	movs	r2, #0
 8001290:	0019      	movs	r1, r3
 8001292:	f000 fee4 	bl	800205e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_MT_GPIO_Port, EN_MT_Pin, 0);
 8001296:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <main+0xfc>)
 8001298:	2200      	movs	r2, #0
 800129a:	2120      	movs	r1, #32
 800129c:	0018      	movs	r0, r3
 800129e:	f000 fede 	bl	800205e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_SO_GPIO_Port, EN_SO_Pin, 0);
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	01db      	lsls	r3, r3, #7
 80012a6:	4828      	ldr	r0, [pc, #160]	; (8001348 <main+0xfc>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	0019      	movs	r1, r3
 80012ac:	f000 fed7 	bl	800205e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_ST_GPIO_Port, EN_ST_Pin, 0);
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	019b      	lsls	r3, r3, #6
 80012b4:	4824      	ldr	r0, [pc, #144]	; (8001348 <main+0xfc>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	0019      	movs	r1, r3
 80012ba:	f000 fed0 	bl	800205e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(A_HT_GPIO_Port, A_HT_Pin, 1);
 80012be:	23a0      	movs	r3, #160	; 0xa0
 80012c0:	05db      	lsls	r3, r3, #23
 80012c2:	2201      	movs	r2, #1
 80012c4:	2102      	movs	r1, #2
 80012c6:	0018      	movs	r0, r3
 80012c8:	f000 fec9 	bl	800205e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLEAR_GPIO_Port, CLEAR_Pin, 1);
 80012cc:	23a0      	movs	r3, #160	; 0xa0
 80012ce:	05db      	lsls	r3, r3, #23
 80012d0:	2201      	movs	r2, #1
 80012d2:	2101      	movs	r1, #1
 80012d4:	0018      	movs	r0, r3
 80012d6:	f000 fec2 	bl	800205e <HAL_GPIO_WritePin>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	button_queue = xQueueCreate(16, sizeof(uint8_t));
 80012da:	2200      	movs	r2, #0
 80012dc:	2101      	movs	r1, #1
 80012de:	2010      	movs	r0, #16
 80012e0:	f003 ff7b 	bl	80051da <xQueueGenericCreate>
 80012e4:	0002      	movs	r2, r0
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <main+0x100>)
 80012e8:	601a      	str	r2, [r3, #0]
	if (button_queue == NULL) {
 80012ea:	4b18      	ldr	r3, [pc, #96]	; (800134c <main+0x100>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d100      	bne.n	80012f4 <main+0xa8>
		while (1)
 80012f2:	e7fe      	b.n	80012f2 <main+0xa6>
	}
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	4a16      	ldr	r2, [pc, #88]	; (8001350 <main+0x104>)
 80012f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80012fa:	c313      	stmia	r3!, {r0, r1, r4}
 80012fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80012fe:	c313      	stmia	r3!, {r0, r1, r4}
 8001300:	6812      	ldr	r2, [r2, #0]
 8001302:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2100      	movs	r1, #0
 8001308:	0018      	movs	r0, r3
 800130a:	f003 fe08 	bl	8004f1e <osThreadCreate>
 800130e:	0002      	movs	r2, r0
 8001310:	4b10      	ldr	r3, [pc, #64]	; (8001354 <main+0x108>)
 8001312:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	xTaskCreate(clock_thread, "clock_thread", configMINIMAL_STACK_SIZE, NULL, 2,
 8001314:	4910      	ldr	r1, [pc, #64]	; (8001358 <main+0x10c>)
 8001316:	4811      	ldr	r0, [pc, #68]	; (800135c <main+0x110>)
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <main+0x114>)
 800131a:	9301      	str	r3, [sp, #4]
 800131c:	2302      	movs	r3, #2
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2300      	movs	r3, #0
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	f004 f99c 	bl	8005660 <xTaskCreate>
			&clock_thread_handle);
	xTaskCreate(button_thread, "button_thread", configMINIMAL_STACK_SIZE, NULL,
 8001328:	490e      	ldr	r1, [pc, #56]	; (8001364 <main+0x118>)
 800132a:	480f      	ldr	r0, [pc, #60]	; (8001368 <main+0x11c>)
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <main+0x120>)
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	2301      	movs	r3, #1
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2300      	movs	r3, #0
 8001336:	2280      	movs	r2, #128	; 0x80
 8001338:	f004 f992 	bl	8005660 <xTaskCreate>
			1, &button_thread_handle);

	vTaskStartScheduler();
 800133c:	f004 fae8 	bl	8005910 <vTaskStartScheduler>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001340:	f003 fde5 	bl	8004f0e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001344:	e7fe      	b.n	8001344 <main+0xf8>
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	50000400 	.word	0x50000400
 800134c:	200004e4 	.word	0x200004e4
 8001350:	08006844 	.word	0x08006844
 8001354:	200004d8 	.word	0x200004d8
 8001358:	08006818 	.word	0x08006818
 800135c:	08000e91 	.word	0x08000e91
 8001360:	200004dc 	.word	0x200004dc
 8001364:	08006828 	.word	0x08006828
 8001368:	08000de1 	.word	0x08000de1
 800136c:	200004e0 	.word	0x200004e0

08001370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b099      	sub	sp, #100	; 0x64
 8001374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001376:	242c      	movs	r4, #44	; 0x2c
 8001378:	193b      	adds	r3, r7, r4
 800137a:	0018      	movs	r0, r3
 800137c:	2334      	movs	r3, #52	; 0x34
 800137e:	001a      	movs	r2, r3
 8001380:	2100      	movs	r1, #0
 8001382:	f005 fa03 	bl	800678c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001386:	2318      	movs	r3, #24
 8001388:	18fb      	adds	r3, r7, r3
 800138a:	0018      	movs	r0, r3
 800138c:	2314      	movs	r3, #20
 800138e:	001a      	movs	r2, r3
 8001390:	2100      	movs	r1, #0
 8001392:	f005 f9fb 	bl	800678c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001396:	003b      	movs	r3, r7
 8001398:	0018      	movs	r0, r3
 800139a:	2318      	movs	r3, #24
 800139c:	001a      	movs	r2, r3
 800139e:	2100      	movs	r1, #0
 80013a0:	f005 f9f4 	bl	800678c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a4:	4b33      	ldr	r3, [pc, #204]	; (8001474 <SystemClock_Config+0x104>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a33      	ldr	r2, [pc, #204]	; (8001478 <SystemClock_Config+0x108>)
 80013aa:	401a      	ands	r2, r3
 80013ac:	4b31      	ldr	r3, [pc, #196]	; (8001474 <SystemClock_Config+0x104>)
 80013ae:	2180      	movs	r1, #128	; 0x80
 80013b0:	0109      	lsls	r1, r1, #4
 80013b2:	430a      	orrs	r2, r1
 80013b4:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013b6:	f001 fc63 	bl	8002c80 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80013ba:	4b30      	ldr	r3, [pc, #192]	; (800147c <SystemClock_Config+0x10c>)
 80013bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013be:	4b2f      	ldr	r3, [pc, #188]	; (800147c <SystemClock_Config+0x10c>)
 80013c0:	492d      	ldr	r1, [pc, #180]	; (8001478 <SystemClock_Config+0x108>)
 80013c2:	400a      	ands	r2, r1
 80013c4:	651a      	str	r2, [r3, #80]	; 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80013c6:	193b      	adds	r3, r7, r4
 80013c8:	2206      	movs	r2, #6
 80013ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013cc:	193b      	adds	r3, r7, r4
 80013ce:	2280      	movs	r2, #128	; 0x80
 80013d0:	0052      	lsls	r2, r2, #1
 80013d2:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d4:	0021      	movs	r1, r4
 80013d6:	187b      	adds	r3, r7, r1
 80013d8:	2201      	movs	r2, #1
 80013da:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	2210      	movs	r2, #16
 80013e0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e2:	187b      	adds	r3, r7, r1
 80013e4:	2202      	movs	r2, #2
 80013e6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013e8:	187b      	adds	r3, r7, r1
 80013ea:	2200      	movs	r2, #0
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80013ee:	187b      	adds	r3, r7, r1
 80013f0:	2280      	movs	r2, #128	; 0x80
 80013f2:	02d2      	lsls	r2, r2, #11
 80013f4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80013f6:	187b      	adds	r3, r7, r1
 80013f8:	2280      	movs	r2, #128	; 0x80
 80013fa:	03d2      	lsls	r2, r2, #15
 80013fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fe:	187b      	adds	r3, r7, r1
 8001400:	0018      	movs	r0, r3
 8001402:	f001 fc4b 	bl	8002c9c <HAL_RCC_OscConfig>
 8001406:	1e03      	subs	r3, r0, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800140a:	f000 fa05 	bl	8001818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800140e:	2118      	movs	r1, #24
 8001410:	187b      	adds	r3, r7, r1
 8001412:	220f      	movs	r2, #15
 8001414:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001416:	187b      	adds	r3, r7, r1
 8001418:	2203      	movs	r2, #3
 800141a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141c:	187b      	adds	r3, r7, r1
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001422:	187b      	adds	r3, r7, r1
 8001424:	2200      	movs	r2, #0
 8001426:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001428:	187b      	adds	r3, r7, r1
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800142e:	187b      	adds	r3, r7, r1
 8001430:	2101      	movs	r1, #1
 8001432:	0018      	movs	r0, r3
 8001434:	f001 ffae 	bl	8003394 <HAL_RCC_ClockConfig>
 8001438:	1e03      	subs	r3, r0, #0
 800143a:	d001      	beq.n	8001440 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800143c:	f000 f9ec 	bl	8001818 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001440:	003b      	movs	r3, r7
 8001442:	222a      	movs	r2, #42	; 0x2a
 8001444:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001446:	003b      	movs	r3, r7
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800144c:	003b      	movs	r3, r7
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001452:	003b      	movs	r3, r7
 8001454:	2280      	movs	r2, #128	; 0x80
 8001456:	0252      	lsls	r2, r2, #9
 8001458:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800145a:	003b      	movs	r3, r7
 800145c:	0018      	movs	r0, r3
 800145e:	f002 f9bd 	bl	80037dc <HAL_RCCEx_PeriphCLKConfig>
 8001462:	1e03      	subs	r3, r0, #0
 8001464:	d001      	beq.n	800146a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001466:	f000 f9d7 	bl	8001818 <Error_Handler>
  }
}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	46bd      	mov	sp, r7
 800146e:	b019      	add	sp, #100	; 0x64
 8001470:	bd90      	pop	{r4, r7, pc}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	40007000 	.word	0x40007000
 8001478:	ffffe7ff 	.word	0xffffe7ff
 800147c:	40021000 	.word	0x40021000

08001480 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <MX_I2C1_Init+0x74>)
 8001486:	4a1c      	ldr	r2, [pc, #112]	; (80014f8 <MX_I2C1_Init+0x78>)
 8001488:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <MX_I2C1_Init+0x74>)
 800148c:	4a1b      	ldr	r2, [pc, #108]	; (80014fc <MX_I2C1_Init+0x7c>)
 800148e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001490:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_I2C1_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001496:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <MX_I2C1_Init+0x74>)
 8001498:	2201      	movs	r2, #1
 800149a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <MX_I2C1_Init+0x74>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014a2:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <MX_I2C1_Init+0x74>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <MX_I2C1_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_I2C1_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_I2C1_Init+0x74>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <MX_I2C1_Init+0x74>)
 80014bc:	0018      	movs	r0, r3
 80014be:	f000 fdeb 	bl	8002098 <HAL_I2C_Init>
 80014c2:	1e03      	subs	r3, r0, #0
 80014c4:	d001      	beq.n	80014ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014c6:	f000 f9a7 	bl	8001818 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <MX_I2C1_Init+0x74>)
 80014cc:	2100      	movs	r1, #0
 80014ce:	0018      	movs	r0, r3
 80014d0:	f001 fb3e 	bl	8002b50 <HAL_I2CEx_ConfigAnalogFilter>
 80014d4:	1e03      	subs	r3, r0, #0
 80014d6:	d001      	beq.n	80014dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014d8:	f000 f99e 	bl	8001818 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <MX_I2C1_Init+0x74>)
 80014de:	2100      	movs	r1, #0
 80014e0:	0018      	movs	r0, r3
 80014e2:	f001 fb81 	bl	8002be8 <HAL_I2CEx_ConfigDigitalFilter>
 80014e6:	1e03      	subs	r3, r0, #0
 80014e8:	d001      	beq.n	80014ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014ea:	f000 f995 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000398 	.word	0x20000398
 80014f8:	40005400 	.word	0x40005400
 80014fc:	00707cbb 	.word	0x00707cbb

08001500 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001504:	4b11      	ldr	r3, [pc, #68]	; (800154c <MX_RTC_Init+0x4c>)
 8001506:	4a12      	ldr	r2, [pc, #72]	; (8001550 <MX_RTC_Init+0x50>)
 8001508:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <MX_RTC_Init+0x4c>)
 800150c:	2200      	movs	r2, #0
 800150e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001510:	4b0e      	ldr	r3, [pc, #56]	; (800154c <MX_RTC_Init+0x4c>)
 8001512:	227f      	movs	r2, #127	; 0x7f
 8001514:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <MX_RTC_Init+0x4c>)
 8001518:	22ff      	movs	r2, #255	; 0xff
 800151a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <MX_RTC_Init+0x4c>)
 800151e:	2200      	movs	r2, #0
 8001520:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <MX_RTC_Init+0x4c>)
 8001524:	2200      	movs	r2, #0
 8001526:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <MX_RTC_Init+0x4c>)
 800152a:	2200      	movs	r2, #0
 800152c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800152e:	4b07      	ldr	r3, [pc, #28]	; (800154c <MX_RTC_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <MX_RTC_Init+0x4c>)
 8001536:	0018      	movs	r0, r3
 8001538:	f002 fa7c 	bl	8003a34 <HAL_RTC_Init>
 800153c:	1e03      	subs	r3, r0, #0
 800153e:	d001      	beq.n	8001544 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001540:	f000 f96a 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001544:	46c0      	nop			; (mov r8, r8)
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	200003ec 	.word	0x200003ec
 8001550:	40002800 	.word	0x40002800

08001554 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800155a:	2318      	movs	r3, #24
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	0018      	movs	r0, r3
 8001560:	2310      	movs	r3, #16
 8001562:	001a      	movs	r2, r3
 8001564:	2100      	movs	r1, #0
 8001566:	f005 f911 	bl	800678c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156a:	2310      	movs	r3, #16
 800156c:	18fb      	adds	r3, r7, r3
 800156e:	0018      	movs	r0, r3
 8001570:	2308      	movs	r3, #8
 8001572:	001a      	movs	r2, r3
 8001574:	2100      	movs	r1, #0
 8001576:	f005 f909 	bl	800678c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800157a:	003b      	movs	r3, r7
 800157c:	0018      	movs	r0, r3
 800157e:	2310      	movs	r3, #16
 8001580:	001a      	movs	r2, r3
 8001582:	2100      	movs	r1, #0
 8001584:	f005 f902 	bl	800678c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001588:	4b30      	ldr	r3, [pc, #192]	; (800164c <MX_TIM2_Init+0xf8>)
 800158a:	2280      	movs	r2, #128	; 0x80
 800158c:	05d2      	lsls	r2, r2, #23
 800158e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8001590:	4b2e      	ldr	r3, [pc, #184]	; (800164c <MX_TIM2_Init+0xf8>)
 8001592:	221f      	movs	r2, #31
 8001594:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001596:	4b2d      	ldr	r3, [pc, #180]	; (800164c <MX_TIM2_Init+0xf8>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800159c:	4b2b      	ldr	r3, [pc, #172]	; (800164c <MX_TIM2_Init+0xf8>)
 800159e:	4a2c      	ldr	r2, [pc, #176]	; (8001650 <MX_TIM2_Init+0xfc>)
 80015a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a2:	4b2a      	ldr	r3, [pc, #168]	; (800164c <MX_TIM2_Init+0xf8>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015a8:	4b28      	ldr	r3, [pc, #160]	; (800164c <MX_TIM2_Init+0xf8>)
 80015aa:	2280      	movs	r2, #128	; 0x80
 80015ac:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015ae:	4b27      	ldr	r3, [pc, #156]	; (800164c <MX_TIM2_Init+0xf8>)
 80015b0:	0018      	movs	r0, r3
 80015b2:	f002 fb71 	bl	8003c98 <HAL_TIM_Base_Init>
 80015b6:	1e03      	subs	r3, r0, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80015ba:	f000 f92d 	bl	8001818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015be:	2118      	movs	r1, #24
 80015c0:	187b      	adds	r3, r7, r1
 80015c2:	2280      	movs	r2, #128	; 0x80
 80015c4:	0152      	lsls	r2, r2, #5
 80015c6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015c8:	187a      	adds	r2, r7, r1
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <MX_TIM2_Init+0xf8>)
 80015cc:	0011      	movs	r1, r2
 80015ce:	0018      	movs	r0, r3
 80015d0:	f002 fcb0 	bl	8003f34 <HAL_TIM_ConfigClockSource>
 80015d4:	1e03      	subs	r3, r0, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80015d8:	f000 f91e 	bl	8001818 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <MX_TIM2_Init+0xf8>)
 80015de:	0018      	movs	r0, r3
 80015e0:	f002 fb9a 	bl	8003d18 <HAL_TIM_PWM_Init>
 80015e4:	1e03      	subs	r3, r0, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80015e8:	f000 f916 	bl	8001818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ec:	2110      	movs	r1, #16
 80015ee:	187b      	adds	r3, r7, r1
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f4:	187b      	adds	r3, r7, r1
 80015f6:	2200      	movs	r2, #0
 80015f8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015fa:	187a      	adds	r2, r7, r1
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <MX_TIM2_Init+0xf8>)
 80015fe:	0011      	movs	r1, r2
 8001600:	0018      	movs	r0, r3
 8001602:	f002 ff53 	bl	80044ac <HAL_TIMEx_MasterConfigSynchronization>
 8001606:	1e03      	subs	r3, r0, #0
 8001608:	d001      	beq.n	800160e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800160a:	f000 f905 	bl	8001818 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800160e:	003b      	movs	r3, r7
 8001610:	2260      	movs	r2, #96	; 0x60
 8001612:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 499;
 8001614:	003b      	movs	r3, r7
 8001616:	22f4      	movs	r2, #244	; 0xf4
 8001618:	32ff      	adds	r2, #255	; 0xff
 800161a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800161c:	003b      	movs	r3, r7
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001622:	003b      	movs	r3, r7
 8001624:	2200      	movs	r2, #0
 8001626:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001628:	0039      	movs	r1, r7
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <MX_TIM2_Init+0xf8>)
 800162c:	2208      	movs	r2, #8
 800162e:	0018      	movs	r0, r3
 8001630:	f002 fbba 	bl	8003da8 <HAL_TIM_PWM_ConfigChannel>
 8001634:	1e03      	subs	r3, r0, #0
 8001636:	d001      	beq.n	800163c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001638:	f000 f8ee 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <MX_TIM2_Init+0xf8>)
 800163e:	0018      	movs	r0, r3
 8001640:	f000 f980 	bl	8001944 <HAL_TIM_MspPostInit>

}
 8001644:	46c0      	nop			; (mov r8, r8)
 8001646:	46bd      	mov	sp, r7
 8001648:	b00a      	add	sp, #40	; 0x28
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000410 	.word	0x20000410
 8001650:	000003e7 	.word	0x000003e7

08001654 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <MX_USART2_UART_Init+0x58>)
 800165a:	4a15      	ldr	r2, [pc, #84]	; (80016b0 <MX_USART2_UART_Init+0x5c>)
 800165c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <MX_USART2_UART_Init+0x58>)
 8001660:	22e1      	movs	r2, #225	; 0xe1
 8001662:	0252      	lsls	r2, r2, #9
 8001664:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_USART2_UART_Init+0x58>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <MX_USART2_UART_Init+0x58>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_USART2_UART_Init+0x58>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_USART2_UART_Init+0x58>)
 800167a:	220c      	movs	r2, #12
 800167c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <MX_USART2_UART_Init+0x58>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_USART2_UART_Init+0x58>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <MX_USART2_UART_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_USART2_UART_Init+0x58>)
 8001692:	2200      	movs	r2, #0
 8001694:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001696:	4b05      	ldr	r3, [pc, #20]	; (80016ac <MX_USART2_UART_Init+0x58>)
 8001698:	0018      	movs	r0, r3
 800169a:	f002 ff57 	bl	800454c <HAL_UART_Init>
 800169e:	1e03      	subs	r3, r0, #0
 80016a0:	d001      	beq.n	80016a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016a2:	f000 f8b9 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000450 	.word	0x20000450
 80016b0:	40004400 	.word	0x40004400

080016b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b089      	sub	sp, #36	; 0x24
 80016b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ba:	240c      	movs	r4, #12
 80016bc:	193b      	adds	r3, r7, r4
 80016be:	0018      	movs	r0, r3
 80016c0:	2314      	movs	r3, #20
 80016c2:	001a      	movs	r2, r3
 80016c4:	2100      	movs	r1, #0
 80016c6:	f005 f861 	bl	800678c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ca:	4b49      	ldr	r3, [pc, #292]	; (80017f0 <MX_GPIO_Init+0x13c>)
 80016cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ce:	4b48      	ldr	r3, [pc, #288]	; (80017f0 <MX_GPIO_Init+0x13c>)
 80016d0:	2104      	movs	r1, #4
 80016d2:	430a      	orrs	r2, r1
 80016d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80016d6:	4b46      	ldr	r3, [pc, #280]	; (80017f0 <MX_GPIO_Init+0x13c>)
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016da:	2204      	movs	r2, #4
 80016dc:	4013      	ands	r3, r2
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	4b43      	ldr	r3, [pc, #268]	; (80017f0 <MX_GPIO_Init+0x13c>)
 80016e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e6:	4b42      	ldr	r3, [pc, #264]	; (80017f0 <MX_GPIO_Init+0x13c>)
 80016e8:	2101      	movs	r1, #1
 80016ea:	430a      	orrs	r2, r1
 80016ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80016ee:	4b40      	ldr	r3, [pc, #256]	; (80017f0 <MX_GPIO_Init+0x13c>)
 80016f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f2:	2201      	movs	r2, #1
 80016f4:	4013      	ands	r3, r2
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	4b3d      	ldr	r3, [pc, #244]	; (80017f0 <MX_GPIO_Init+0x13c>)
 80016fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016fe:	4b3c      	ldr	r3, [pc, #240]	; (80017f0 <MX_GPIO_Init+0x13c>)
 8001700:	2102      	movs	r1, #2
 8001702:	430a      	orrs	r2, r1
 8001704:	62da      	str	r2, [r3, #44]	; 0x2c
 8001706:	4b3a      	ldr	r3, [pc, #232]	; (80017f0 <MX_GPIO_Init+0x13c>)
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	2202      	movs	r2, #2
 800170c:	4013      	ands	r3, r2
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLEAR_Pin|A_HT_Pin|CLK_A_HT_Pin|EN_HT_Pin
 8001712:	4938      	ldr	r1, [pc, #224]	; (80017f4 <MX_GPIO_Init+0x140>)
 8001714:	23a0      	movs	r3, #160	; 0xa0
 8001716:	05db      	lsls	r3, r3, #23
 8001718:	2200      	movs	r2, #0
 800171a:	0018      	movs	r0, r3
 800171c:	f000 fc9f 	bl	800205e <HAL_GPIO_WritePin>
                          |A_HO_Pin|CLK_A_HO_Pin|A_MT_Pin|CLK_A_MT_Pin
                          |A_MO_Pin|CLK_A_MO_Pin|A_ST_Pin|CLK_A_ST_Pin
                          |A_SO_Pin|CLK_A_SO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|EN_MO_Pin|EN_ST_Pin|EN_SO_Pin
 8001720:	4935      	ldr	r1, [pc, #212]	; (80017f8 <MX_GPIO_Init+0x144>)
 8001722:	4b36      	ldr	r3, [pc, #216]	; (80017fc <MX_GPIO_Init+0x148>)
 8001724:	2200      	movs	r2, #0
 8001726:	0018      	movs	r0, r3
 8001728:	f000 fc99 	bl	800205e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CLEAR_Pin A_HT_Pin CLK_A_HT_Pin A_HO_Pin
                           CLK_A_HO_Pin A_MT_Pin CLK_A_MT_Pin A_MO_Pin
                           CLK_A_MO_Pin A_ST_Pin CLK_A_ST_Pin A_SO_Pin
                           CLK_A_SO_Pin */
  GPIO_InitStruct.Pin = CLEAR_Pin|A_HT_Pin|CLK_A_HT_Pin|A_HO_Pin
 800172c:	193b      	adds	r3, r7, r4
 800172e:	4a34      	ldr	r2, [pc, #208]	; (8001800 <MX_GPIO_Init+0x14c>)
 8001730:	601a      	str	r2, [r3, #0]
                          |CLK_A_HO_Pin|A_MT_Pin|CLK_A_MT_Pin|A_MO_Pin
                          |CLK_A_MO_Pin|A_ST_Pin|CLK_A_ST_Pin|A_SO_Pin
                          |CLK_A_SO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001732:	193b      	adds	r3, r7, r4
 8001734:	2201      	movs	r2, #1
 8001736:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	193b      	adds	r3, r7, r4
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800173e:	193b      	adds	r3, r7, r4
 8001740:	2202      	movs	r2, #2
 8001742:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	193a      	adds	r2, r7, r4
 8001746:	23a0      	movs	r3, #160	; 0xa0
 8001748:	05db      	lsls	r3, r3, #23
 800174a:	0011      	movs	r1, r2
 800174c:	0018      	movs	r0, r3
 800174e:	f000 fafb 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_HT_Pin */
  GPIO_InitStruct.Pin = EN_HT_Pin;
 8001752:	193b      	adds	r3, r7, r4
 8001754:	2208      	movs	r2, #8
 8001756:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001758:	193b      	adds	r3, r7, r4
 800175a:	2201      	movs	r2, #1
 800175c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	193b      	adds	r3, r7, r4
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001764:	193b      	adds	r3, r7, r4
 8001766:	2203      	movs	r2, #3
 8001768:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EN_HT_GPIO_Port, &GPIO_InitStruct);
 800176a:	193a      	adds	r2, r7, r4
 800176c:	23a0      	movs	r3, #160	; 0xa0
 800176e:	05db      	lsls	r3, r3, #23
 8001770:	0011      	movs	r1, r2
 8001772:	0018      	movs	r0, r3
 8001774:	f000 fae8 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_UP_Pin BTN_DOWN_Pin BTN_LEFT_Pin BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_DOWN_Pin|BTN_LEFT_Pin|BTN_RIGHT_Pin;
 8001778:	193b      	adds	r3, r7, r4
 800177a:	220f      	movs	r2, #15
 800177c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177e:	193b      	adds	r3, r7, r4
 8001780:	2200      	movs	r2, #0
 8001782:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	193b      	adds	r3, r7, r4
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178a:	193b      	adds	r3, r7, r4
 800178c:	4a1b      	ldr	r2, [pc, #108]	; (80017fc <MX_GPIO_Init+0x148>)
 800178e:	0019      	movs	r1, r3
 8001790:	0010      	movs	r0, r2
 8001792:	f000 fad9 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001796:	0021      	movs	r1, r4
 8001798:	187b      	adds	r3, r7, r1
 800179a:	2280      	movs	r2, #128	; 0x80
 800179c:	0112      	lsls	r2, r2, #4
 800179e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a0:	000c      	movs	r4, r1
 80017a2:	193b      	adds	r3, r7, r4
 80017a4:	2201      	movs	r2, #1
 80017a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	193b      	adds	r3, r7, r4
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	193b      	adds	r3, r7, r4
 80017b0:	2200      	movs	r2, #0
 80017b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b4:	193b      	adds	r3, r7, r4
 80017b6:	4a11      	ldr	r2, [pc, #68]	; (80017fc <MX_GPIO_Init+0x148>)
 80017b8:	0019      	movs	r1, r3
 80017ba:	0010      	movs	r0, r2
 80017bc:	f000 fac4 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_MO_Pin EN_ST_Pin EN_SO_Pin EN_HO_Pin
                           EN_MT_Pin */
  GPIO_InitStruct.Pin = EN_MO_Pin|EN_ST_Pin|EN_SO_Pin|EN_HO_Pin
 80017c0:	0021      	movs	r1, r4
 80017c2:	187b      	adds	r3, r7, r1
 80017c4:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <MX_GPIO_Init+0x150>)
 80017c6:	601a      	str	r2, [r3, #0]
                          |EN_MT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	2201      	movs	r2, #1
 80017cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	187b      	adds	r3, r7, r1
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d4:	187b      	adds	r3, r7, r1
 80017d6:	2202      	movs	r2, #2
 80017d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017da:	187b      	adds	r3, r7, r1
 80017dc:	4a07      	ldr	r2, [pc, #28]	; (80017fc <MX_GPIO_Init+0x148>)
 80017de:	0019      	movs	r1, r3
 80017e0:	0010      	movs	r0, r2
 80017e2:	f000 fab1 	bl	8001d48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b009      	add	sp, #36	; 0x24
 80017ec:	bd90      	pop	{r4, r7, pc}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	40021000 	.word	0x40021000
 80017f4:	00009fff 	.word	0x00009fff
 80017f8:	00007830 	.word	0x00007830
 80017fc:	50000400 	.word	0x50000400
 8001800:	00009ff7 	.word	0x00009ff7
 8001804:	00007030 	.word	0x00007030

08001808 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001810:	2001      	movs	r0, #1
 8001812:	f003 fbd1 	bl	8004fb8 <osDelay>
 8001816:	e7fb      	b.n	8001810 <StartDefaultTask+0x8>

08001818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800181c:	b672      	cpsid	i
}
 800181e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001820:	e7fe      	b.n	8001820 <Error_Handler+0x8>
	...

08001824 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_MspInit+0x34>)
 800182a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_MspInit+0x34>)
 800182e:	2101      	movs	r1, #1
 8001830:	430a      	orrs	r2, r1
 8001832:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <HAL_MspInit+0x34>)
 8001836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001838:	4b07      	ldr	r3, [pc, #28]	; (8001858 <HAL_MspInit+0x34>)
 800183a:	2180      	movs	r1, #128	; 0x80
 800183c:	0549      	lsls	r1, r1, #21
 800183e:	430a      	orrs	r2, r1
 8001840:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8001842:	2302      	movs	r3, #2
 8001844:	425b      	negs	r3, r3
 8001846:	2200      	movs	r2, #0
 8001848:	2103      	movs	r1, #3
 800184a:	0018      	movs	r0, r3
 800184c:	f000 fa5a 	bl	8001d04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001850:	46c0      	nop			; (mov r8, r8)
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	40021000 	.word	0x40021000

0800185c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	240c      	movs	r4, #12
 8001866:	193b      	adds	r3, r7, r4
 8001868:	0018      	movs	r0, r3
 800186a:	2314      	movs	r3, #20
 800186c:	001a      	movs	r2, r3
 800186e:	2100      	movs	r1, #0
 8001870:	f004 ff8c 	bl	800678c <memset>
  if(hi2c->Instance==I2C1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a18      	ldr	r2, [pc, #96]	; (80018dc <HAL_I2C_MspInit+0x80>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d129      	bne.n	80018d2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187e:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <HAL_I2C_MspInit+0x84>)
 8001880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001882:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <HAL_I2C_MspInit+0x84>)
 8001884:	2102      	movs	r1, #2
 8001886:	430a      	orrs	r2, r1
 8001888:	62da      	str	r2, [r3, #44]	; 0x2c
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HAL_I2C_MspInit+0x84>)
 800188c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188e:	2202      	movs	r2, #2
 8001890:	4013      	ands	r3, r2
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001896:	193b      	adds	r3, r7, r4
 8001898:	22c0      	movs	r2, #192	; 0xc0
 800189a:	0092      	lsls	r2, r2, #2
 800189c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800189e:	0021      	movs	r1, r4
 80018a0:	187b      	adds	r3, r7, r1
 80018a2:	2212      	movs	r2, #18
 80018a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	187b      	adds	r3, r7, r1
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	2203      	movs	r2, #3
 80018b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018b2:	187b      	adds	r3, r7, r1
 80018b4:	2204      	movs	r2, #4
 80018b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b8:	187b      	adds	r3, r7, r1
 80018ba:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <HAL_I2C_MspInit+0x88>)
 80018bc:	0019      	movs	r1, r3
 80018be:	0010      	movs	r0, r2
 80018c0:	f000 fa42 	bl	8001d48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_I2C_MspInit+0x84>)
 80018c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <HAL_I2C_MspInit+0x84>)
 80018ca:	2180      	movs	r1, #128	; 0x80
 80018cc:	0389      	lsls	r1, r1, #14
 80018ce:	430a      	orrs	r2, r1
 80018d0:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b009      	add	sp, #36	; 0x24
 80018d8:	bd90      	pop	{r4, r7, pc}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	40005400 	.word	0x40005400
 80018e0:	40021000 	.word	0x40021000
 80018e4:	50000400 	.word	0x50000400

080018e8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a06      	ldr	r2, [pc, #24]	; (8001910 <HAL_RTC_MspInit+0x28>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d106      	bne.n	8001908 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_RTC_MspInit+0x2c>)
 80018fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_RTC_MspInit+0x2c>)
 8001900:	2180      	movs	r1, #128	; 0x80
 8001902:	02c9      	lsls	r1, r1, #11
 8001904:	430a      	orrs	r2, r1
 8001906:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001908:	46c0      	nop			; (mov r8, r8)
 800190a:	46bd      	mov	sp, r7
 800190c:	b002      	add	sp, #8
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40002800 	.word	0x40002800
 8001914:	40021000 	.word	0x40021000

08001918 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	05db      	lsls	r3, r3, #23
 8001928:	429a      	cmp	r2, r3
 800192a:	d105      	bne.n	8001938 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <HAL_TIM_Base_MspInit+0x28>)
 800192e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <HAL_TIM_Base_MspInit+0x28>)
 8001932:	2101      	movs	r1, #1
 8001934:	430a      	orrs	r2, r1
 8001936:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001938:	46c0      	nop			; (mov r8, r8)
 800193a:	46bd      	mov	sp, r7
 800193c:	b002      	add	sp, #8
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40021000 	.word	0x40021000

08001944 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	240c      	movs	r4, #12
 800194e:	193b      	adds	r3, r7, r4
 8001950:	0018      	movs	r0, r3
 8001952:	2314      	movs	r3, #20
 8001954:	001a      	movs	r2, r3
 8001956:	2100      	movs	r1, #0
 8001958:	f004 ff18 	bl	800678c <memset>
  if(htim->Instance==TIM2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	05db      	lsls	r3, r3, #23
 8001964:	429a      	cmp	r2, r3
 8001966:	d122      	bne.n	80019ae <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <HAL_TIM_MspPostInit+0x74>)
 800196a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_TIM_MspPostInit+0x74>)
 800196e:	2102      	movs	r1, #2
 8001970:	430a      	orrs	r2, r1
 8001972:	62da      	str	r2, [r3, #44]	; 0x2c
 8001974:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <HAL_TIM_MspPostInit+0x74>)
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	2202      	movs	r2, #2
 800197a:	4013      	ands	r3, r2
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001980:	193b      	adds	r3, r7, r4
 8001982:	2280      	movs	r2, #128	; 0x80
 8001984:	00d2      	lsls	r2, r2, #3
 8001986:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	0021      	movs	r1, r4
 800198a:	187b      	adds	r3, r7, r1
 800198c:	2202      	movs	r2, #2
 800198e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	187b      	adds	r3, r7, r1
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	187b      	adds	r3, r7, r1
 8001998:	2200      	movs	r2, #0
 800199a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800199c:	187b      	adds	r3, r7, r1
 800199e:	2202      	movs	r2, #2
 80019a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a2:	187b      	adds	r3, r7, r1
 80019a4:	4a05      	ldr	r2, [pc, #20]	; (80019bc <HAL_TIM_MspPostInit+0x78>)
 80019a6:	0019      	movs	r1, r3
 80019a8:	0010      	movs	r0, r2
 80019aa:	f000 f9cd 	bl	8001d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b009      	add	sp, #36	; 0x24
 80019b4:	bd90      	pop	{r4, r7, pc}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	40021000 	.word	0x40021000
 80019bc:	50000400 	.word	0x50000400

080019c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b089      	sub	sp, #36	; 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	240c      	movs	r4, #12
 80019ca:	193b      	adds	r3, r7, r4
 80019cc:	0018      	movs	r0, r3
 80019ce:	2314      	movs	r3, #20
 80019d0:	001a      	movs	r2, r3
 80019d2:	2100      	movs	r1, #0
 80019d4:	f004 feda 	bl	800678c <memset>
  if(huart->Instance==USART2)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a17      	ldr	r2, [pc, #92]	; (8001a3c <HAL_UART_MspInit+0x7c>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d128      	bne.n	8001a34 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019e2:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <HAL_UART_MspInit+0x80>)
 80019e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019e6:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <HAL_UART_MspInit+0x80>)
 80019e8:	2180      	movs	r1, #128	; 0x80
 80019ea:	0289      	lsls	r1, r1, #10
 80019ec:	430a      	orrs	r2, r1
 80019ee:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <HAL_UART_MspInit+0x80>)
 80019f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_UART_MspInit+0x80>)
 80019f6:	2102      	movs	r1, #2
 80019f8:	430a      	orrs	r2, r1
 80019fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80019fc:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <HAL_UART_MspInit+0x80>)
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	2202      	movs	r2, #2
 8001a02:	4013      	ands	r3, r2
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB6     ------> USART2_TX
    PB7     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a08:	0021      	movs	r1, r4
 8001a0a:	187b      	adds	r3, r7, r1
 8001a0c:	22c0      	movs	r2, #192	; 0xc0
 8001a0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	187b      	adds	r3, r7, r1
 8001a12:	2202      	movs	r2, #2
 8001a14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	187b      	adds	r3, r7, r1
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1c:	187b      	adds	r3, r7, r1
 8001a1e:	2203      	movs	r2, #3
 8001a20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8001a22:	187b      	adds	r3, r7, r1
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a28:	187b      	adds	r3, r7, r1
 8001a2a:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <HAL_UART_MspInit+0x84>)
 8001a2c:	0019      	movs	r1, r3
 8001a2e:	0010      	movs	r0, r2
 8001a30:	f000 f98a 	bl	8001d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a34:	46c0      	nop			; (mov r8, r8)
 8001a36:	46bd      	mov	sp, r7
 8001a38:	b009      	add	sp, #36	; 0x24
 8001a3a:	bd90      	pop	{r4, r7, pc}
 8001a3c:	40004400 	.word	0x40004400
 8001a40:	40021000 	.word	0x40021000
 8001a44:	50000400 	.word	0x50000400

08001a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <NMI_Handler+0x4>

08001a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a52:	e7fe      	b.n	8001a52 <HardFault_Handler+0x4>

08001a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a58:	f000 f8a6 	bl	8001ba8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001a5c:	f004 faf0 	bl	8006040 <xTaskGetSchedulerState>
 8001a60:	0003      	movs	r3, r0
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d001      	beq.n	8001a6a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001a66:	f004 fcaf 	bl	80063c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a74:	46c0      	nop			; (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001a7c:	4813      	ldr	r0, [pc, #76]	; (8001acc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001a7e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a80:	f7ff fff6 	bl	8001a70 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001a84:	4812      	ldr	r0, [pc, #72]	; (8001ad0 <LoopForever+0x6>)
    LDR R1, [R0]
 8001a86:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001a88:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001a8a:	4a12      	ldr	r2, [pc, #72]	; (8001ad4 <LoopForever+0xa>)
    CMP R1, R2
 8001a8c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001a8e:	d105      	bne.n	8001a9c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001a90:	4811      	ldr	r0, [pc, #68]	; (8001ad8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001a92:	4912      	ldr	r1, [pc, #72]	; (8001adc <LoopForever+0x12>)
    STR R1, [R0]
 8001a94:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001a96:	4812      	ldr	r0, [pc, #72]	; (8001ae0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001a98:	4912      	ldr	r1, [pc, #72]	; (8001ae4 <LoopForever+0x1a>)
    STR R1, [R0]
 8001a9a:	6001      	str	r1, [r0, #0]

08001a9c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a9c:	4812      	ldr	r0, [pc, #72]	; (8001ae8 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001a9e:	4913      	ldr	r1, [pc, #76]	; (8001aec <LoopForever+0x22>)
  ldr r2, =_sidata
 8001aa0:	4a13      	ldr	r2, [pc, #76]	; (8001af0 <LoopForever+0x26>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa4:	e002      	b.n	8001aac <LoopCopyDataInit>

08001aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aaa:	3304      	adds	r3, #4

08001aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab0:	d3f9      	bcc.n	8001aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab2:	4a10      	ldr	r2, [pc, #64]	; (8001af4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001ab4:	4c10      	ldr	r4, [pc, #64]	; (8001af8 <LoopForever+0x2e>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab8:	e001      	b.n	8001abe <LoopFillZerobss>

08001aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001abc:	3204      	adds	r2, #4

08001abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac0:	d3fb      	bcc.n	8001aba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ac2:	f004 fe6b 	bl	800679c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ac6:	f7ff fbc1 	bl	800124c <main>

08001aca <LoopForever>:

LoopForever:
    b LoopForever
 8001aca:	e7fe      	b.n	8001aca <LoopForever>
   ldr   r0, =_estack
 8001acc:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8001ad0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001ad4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001ad8:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001adc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001ae0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001ae4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aec:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8001af0:	08006964 	.word	0x08006964
  ldr r2, =_sbss
 8001af4:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8001af8:	20001230 	.word	0x20001230

08001afc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001afc:	e7fe      	b.n	8001afc <ADC1_IRQHandler>
	...

08001b00 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b06:	1dfb      	adds	r3, r7, #7
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_Init+0x3c>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <HAL_Init+0x3c>)
 8001b12:	2140      	movs	r1, #64	; 0x40
 8001b14:	430a      	orrs	r2, r1
 8001b16:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b18:	2003      	movs	r0, #3
 8001b1a:	f000 f811 	bl	8001b40 <HAL_InitTick>
 8001b1e:	1e03      	subs	r3, r0, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001b22:	1dfb      	adds	r3, r7, #7
 8001b24:	2201      	movs	r2, #1
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	e001      	b.n	8001b2e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b2a:	f7ff fe7b 	bl	8001824 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b2e:	1dfb      	adds	r3, r7, #7
 8001b30:	781b      	ldrb	r3, [r3, #0]
}
 8001b32:	0018      	movs	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	b002      	add	sp, #8
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	40022000 	.word	0x40022000

08001b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b48:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <HAL_InitTick+0x5c>)
 8001b4a:	681c      	ldr	r4, [r3, #0]
 8001b4c:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <HAL_InitTick+0x60>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	0019      	movs	r1, r3
 8001b52:	23fa      	movs	r3, #250	; 0xfa
 8001b54:	0098      	lsls	r0, r3, #2
 8001b56:	f7fe fad7 	bl	8000108 <__udivsi3>
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	0019      	movs	r1, r3
 8001b5e:	0020      	movs	r0, r4
 8001b60:	f7fe fad2 	bl	8000108 <__udivsi3>
 8001b64:	0003      	movs	r3, r0
 8001b66:	0018      	movs	r0, r3
 8001b68:	f000 f8e1 	bl	8001d2e <HAL_SYSTICK_Config>
 8001b6c:	1e03      	subs	r3, r0, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e00f      	b.n	8001b94 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	d80b      	bhi.n	8001b92 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	425b      	negs	r3, r3
 8001b80:	2200      	movs	r2, #0
 8001b82:	0018      	movs	r0, r3
 8001b84:	f000 f8be 	bl	8001d04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_InitTick+0x64>)
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e000      	b.n	8001b94 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
}
 8001b94:	0018      	movs	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b003      	add	sp, #12
 8001b9a:	bd90      	pop	{r4, r7, pc}
 8001b9c:	20000118 	.word	0x20000118
 8001ba0:	20000120 	.word	0x20000120
 8001ba4:	2000011c 	.word	0x2000011c

08001ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <HAL_IncTick+0x1c>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	001a      	movs	r2, r3
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_IncTick+0x20>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	18d2      	adds	r2, r2, r3
 8001bb8:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <HAL_IncTick+0x20>)
 8001bba:	601a      	str	r2, [r3, #0]
}
 8001bbc:	46c0      	nop			; (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	20000120 	.word	0x20000120
 8001bc8:	200004e8 	.word	0x200004e8

08001bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd0:	4b02      	ldr	r3, [pc, #8]	; (8001bdc <HAL_GetTick+0x10>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	200004e8 	.word	0x200004e8

08001be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	0002      	movs	r2, r0
 8001be8:	6039      	str	r1, [r7, #0]
 8001bea:	1dfb      	adds	r3, r7, #7
 8001bec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bee:	1dfb      	adds	r3, r7, #7
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b7f      	cmp	r3, #127	; 0x7f
 8001bf4:	d828      	bhi.n	8001c48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bf6:	4a2f      	ldr	r2, [pc, #188]	; (8001cb4 <__NVIC_SetPriority+0xd4>)
 8001bf8:	1dfb      	adds	r3, r7, #7
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	b25b      	sxtb	r3, r3
 8001bfe:	089b      	lsrs	r3, r3, #2
 8001c00:	33c0      	adds	r3, #192	; 0xc0
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	589b      	ldr	r3, [r3, r2]
 8001c06:	1dfa      	adds	r2, r7, #7
 8001c08:	7812      	ldrb	r2, [r2, #0]
 8001c0a:	0011      	movs	r1, r2
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	400a      	ands	r2, r1
 8001c10:	00d2      	lsls	r2, r2, #3
 8001c12:	21ff      	movs	r1, #255	; 0xff
 8001c14:	4091      	lsls	r1, r2
 8001c16:	000a      	movs	r2, r1
 8001c18:	43d2      	mvns	r2, r2
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	019b      	lsls	r3, r3, #6
 8001c22:	22ff      	movs	r2, #255	; 0xff
 8001c24:	401a      	ands	r2, r3
 8001c26:	1dfb      	adds	r3, r7, #7
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	4003      	ands	r3, r0
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c34:	481f      	ldr	r0, [pc, #124]	; (8001cb4 <__NVIC_SetPriority+0xd4>)
 8001c36:	1dfb      	adds	r3, r7, #7
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	b25b      	sxtb	r3, r3
 8001c3c:	089b      	lsrs	r3, r3, #2
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	33c0      	adds	r3, #192	; 0xc0
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c46:	e031      	b.n	8001cac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c48:	4a1b      	ldr	r2, [pc, #108]	; (8001cb8 <__NVIC_SetPriority+0xd8>)
 8001c4a:	1dfb      	adds	r3, r7, #7
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	0019      	movs	r1, r3
 8001c50:	230f      	movs	r3, #15
 8001c52:	400b      	ands	r3, r1
 8001c54:	3b08      	subs	r3, #8
 8001c56:	089b      	lsrs	r3, r3, #2
 8001c58:	3306      	adds	r3, #6
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	18d3      	adds	r3, r2, r3
 8001c5e:	3304      	adds	r3, #4
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	1dfa      	adds	r2, r7, #7
 8001c64:	7812      	ldrb	r2, [r2, #0]
 8001c66:	0011      	movs	r1, r2
 8001c68:	2203      	movs	r2, #3
 8001c6a:	400a      	ands	r2, r1
 8001c6c:	00d2      	lsls	r2, r2, #3
 8001c6e:	21ff      	movs	r1, #255	; 0xff
 8001c70:	4091      	lsls	r1, r2
 8001c72:	000a      	movs	r2, r1
 8001c74:	43d2      	mvns	r2, r2
 8001c76:	401a      	ands	r2, r3
 8001c78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	019b      	lsls	r3, r3, #6
 8001c7e:	22ff      	movs	r2, #255	; 0xff
 8001c80:	401a      	ands	r2, r3
 8001c82:	1dfb      	adds	r3, r7, #7
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	0018      	movs	r0, r3
 8001c88:	2303      	movs	r3, #3
 8001c8a:	4003      	ands	r3, r0
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c90:	4809      	ldr	r0, [pc, #36]	; (8001cb8 <__NVIC_SetPriority+0xd8>)
 8001c92:	1dfb      	adds	r3, r7, #7
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	001c      	movs	r4, r3
 8001c98:	230f      	movs	r3, #15
 8001c9a:	4023      	ands	r3, r4
 8001c9c:	3b08      	subs	r3, #8
 8001c9e:	089b      	lsrs	r3, r3, #2
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	3306      	adds	r3, #6
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	18c3      	adds	r3, r0, r3
 8001ca8:	3304      	adds	r3, #4
 8001caa:	601a      	str	r2, [r3, #0]
}
 8001cac:	46c0      	nop			; (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b003      	add	sp, #12
 8001cb2:	bd90      	pop	{r4, r7, pc}
 8001cb4:	e000e100 	.word	0xe000e100
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	1e5a      	subs	r2, r3, #1
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	045b      	lsls	r3, r3, #17
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d301      	bcc.n	8001cd4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e010      	b.n	8001cf6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cd4:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <SysTick_Config+0x44>)
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	3a01      	subs	r2, #1
 8001cda:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cdc:	2301      	movs	r3, #1
 8001cde:	425b      	negs	r3, r3
 8001ce0:	2103      	movs	r1, #3
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f7ff ff7c 	bl	8001be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce8:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <SysTick_Config+0x44>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cee:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <SysTick_Config+0x44>)
 8001cf0:	2207      	movs	r2, #7
 8001cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	b002      	add	sp, #8
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	e000e010 	.word	0xe000e010

08001d04 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	210f      	movs	r1, #15
 8001d10:	187b      	adds	r3, r7, r1
 8001d12:	1c02      	adds	r2, r0, #0
 8001d14:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	187b      	adds	r3, r7, r1
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	b25b      	sxtb	r3, r3
 8001d1e:	0011      	movs	r1, r2
 8001d20:	0018      	movs	r0, r3
 8001d22:	f7ff ff5d 	bl	8001be0 <__NVIC_SetPriority>
}
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b004      	add	sp, #16
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f7ff ffbf 	bl	8001cbc <SysTick_Config>
 8001d3e:	0003      	movs	r3, r0
}
 8001d40:	0018      	movs	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b002      	add	sp, #8
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d5e:	e149      	b.n	8001ff4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2101      	movs	r1, #1
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4091      	lsls	r1, r2
 8001d6a:	000a      	movs	r2, r1
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d100      	bne.n	8001d78 <HAL_GPIO_Init+0x30>
 8001d76:	e13a      	b.n	8001fee <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d005      	beq.n	8001d90 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2203      	movs	r2, #3
 8001d8a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d130      	bne.n	8001df2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	0013      	movs	r3, r2
 8001da0:	43da      	mvns	r2, r3
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4013      	ands	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	409a      	lsls	r2, r3
 8001db2:	0013      	movs	r3, r2
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	0013      	movs	r3, r2
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	091b      	lsrs	r3, r3, #4
 8001ddc:	2201      	movs	r2, #1
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
 8001de4:	0013      	movs	r3, r2
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2203      	movs	r2, #3
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d017      	beq.n	8001e2e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	2203      	movs	r2, #3
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	0013      	movs	r3, r2
 8001e0e:	43da      	mvns	r2, r3
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	0013      	movs	r3, r2
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2203      	movs	r2, #3
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d123      	bne.n	8001e82 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	08da      	lsrs	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3208      	adds	r2, #8
 8001e42:	0092      	lsls	r2, r2, #2
 8001e44:	58d3      	ldr	r3, [r2, r3]
 8001e46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2207      	movs	r2, #7
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	220f      	movs	r2, #15
 8001e52:	409a      	lsls	r2, r3
 8001e54:	0013      	movs	r3, r2
 8001e56:	43da      	mvns	r2, r3
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	691a      	ldr	r2, [r3, #16]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2107      	movs	r1, #7
 8001e66:	400b      	ands	r3, r1
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	0013      	movs	r3, r2
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	08da      	lsrs	r2, r3, #3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3208      	adds	r2, #8
 8001e7c:	0092      	lsls	r2, r2, #2
 8001e7e:	6939      	ldr	r1, [r7, #16]
 8001e80:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	0013      	movs	r3, r2
 8001e92:	43da      	mvns	r2, r3
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	0013      	movs	r3, r2
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	23c0      	movs	r3, #192	; 0xc0
 8001ebc:	029b      	lsls	r3, r3, #10
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d100      	bne.n	8001ec4 <HAL_GPIO_Init+0x17c>
 8001ec2:	e094      	b.n	8001fee <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec4:	4b51      	ldr	r3, [pc, #324]	; (800200c <HAL_GPIO_Init+0x2c4>)
 8001ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ec8:	4b50      	ldr	r3, [pc, #320]	; (800200c <HAL_GPIO_Init+0x2c4>)
 8001eca:	2101      	movs	r1, #1
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ed0:	4a4f      	ldr	r2, [pc, #316]	; (8002010 <HAL_GPIO_Init+0x2c8>)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	089b      	lsrs	r3, r3, #2
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	589b      	ldr	r3, [r3, r2]
 8001edc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	220f      	movs	r2, #15
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	0013      	movs	r3, r2
 8001eec:	43da      	mvns	r2, r3
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	23a0      	movs	r3, #160	; 0xa0
 8001ef8:	05db      	lsls	r3, r3, #23
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d013      	beq.n	8001f26 <HAL_GPIO_Init+0x1de>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a44      	ldr	r2, [pc, #272]	; (8002014 <HAL_GPIO_Init+0x2cc>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d00d      	beq.n	8001f22 <HAL_GPIO_Init+0x1da>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a43      	ldr	r2, [pc, #268]	; (8002018 <HAL_GPIO_Init+0x2d0>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d007      	beq.n	8001f1e <HAL_GPIO_Init+0x1d6>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a42      	ldr	r2, [pc, #264]	; (800201c <HAL_GPIO_Init+0x2d4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d101      	bne.n	8001f1a <HAL_GPIO_Init+0x1d2>
 8001f16:	2305      	movs	r3, #5
 8001f18:	e006      	b.n	8001f28 <HAL_GPIO_Init+0x1e0>
 8001f1a:	2306      	movs	r3, #6
 8001f1c:	e004      	b.n	8001f28 <HAL_GPIO_Init+0x1e0>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e002      	b.n	8001f28 <HAL_GPIO_Init+0x1e0>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_GPIO_Init+0x1e0>
 8001f26:	2300      	movs	r3, #0
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	2103      	movs	r1, #3
 8001f2c:	400a      	ands	r2, r1
 8001f2e:	0092      	lsls	r2, r2, #2
 8001f30:	4093      	lsls	r3, r2
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f38:	4935      	ldr	r1, [pc, #212]	; (8002010 <HAL_GPIO_Init+0x2c8>)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	089b      	lsrs	r3, r3, #2
 8001f3e:	3302      	adds	r3, #2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f46:	4b36      	ldr	r3, [pc, #216]	; (8002020 <HAL_GPIO_Init+0x2d8>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4013      	ands	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	035b      	lsls	r3, r3, #13
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f6a:	4b2d      	ldr	r3, [pc, #180]	; (8002020 <HAL_GPIO_Init+0x2d8>)
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001f70:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <HAL_GPIO_Init+0x2d8>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	43da      	mvns	r2, r3
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	039b      	lsls	r3, r3, #14
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f94:	4b22      	ldr	r3, [pc, #136]	; (8002020 <HAL_GPIO_Init+0x2d8>)
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001f9a:	4b21      	ldr	r3, [pc, #132]	; (8002020 <HAL_GPIO_Init+0x2d8>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	029b      	lsls	r3, r3, #10
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001fbe:	4b18      	ldr	r3, [pc, #96]	; (8002020 <HAL_GPIO_Init+0x2d8>)
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc4:	4b16      	ldr	r3, [pc, #88]	; (8002020 <HAL_GPIO_Init+0x2d8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	43da      	mvns	r2, r3
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	025b      	lsls	r3, r3, #9
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fe8:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <HAL_GPIO_Init+0x2d8>)
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	40da      	lsrs	r2, r3
 8001ffc:	1e13      	subs	r3, r2, #0
 8001ffe:	d000      	beq.n	8002002 <HAL_GPIO_Init+0x2ba>
 8002000:	e6ae      	b.n	8001d60 <HAL_GPIO_Init+0x18>
  }
}
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	46c0      	nop			; (mov r8, r8)
 8002006:	46bd      	mov	sp, r7
 8002008:	b006      	add	sp, #24
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40021000 	.word	0x40021000
 8002010:	40010000 	.word	0x40010000
 8002014:	50000400 	.word	0x50000400
 8002018:	50000800 	.word	0x50000800
 800201c:	50001c00 	.word	0x50001c00
 8002020:	40010400 	.word	0x40010400

08002024 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	000a      	movs	r2, r1
 800202e:	1cbb      	adds	r3, r7, #2
 8002030:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	1cba      	adds	r2, r7, #2
 8002038:	8812      	ldrh	r2, [r2, #0]
 800203a:	4013      	ands	r3, r2
 800203c:	d004      	beq.n	8002048 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800203e:	230f      	movs	r3, #15
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
 8002046:	e003      	b.n	8002050 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002048:	230f      	movs	r3, #15
 800204a:	18fb      	adds	r3, r7, r3
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002050:	230f      	movs	r3, #15
 8002052:	18fb      	adds	r3, r7, r3
 8002054:	781b      	ldrb	r3, [r3, #0]
}
 8002056:	0018      	movs	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	b004      	add	sp, #16
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	0008      	movs	r0, r1
 8002068:	0011      	movs	r1, r2
 800206a:	1cbb      	adds	r3, r7, #2
 800206c:	1c02      	adds	r2, r0, #0
 800206e:	801a      	strh	r2, [r3, #0]
 8002070:	1c7b      	adds	r3, r7, #1
 8002072:	1c0a      	adds	r2, r1, #0
 8002074:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002076:	1c7b      	adds	r3, r7, #1
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d004      	beq.n	8002088 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800207e:	1cbb      	adds	r3, r7, #2
 8002080:	881a      	ldrh	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002086:	e003      	b.n	8002090 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002088:	1cbb      	adds	r3, r7, #2
 800208a:	881a      	ldrh	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002090:	46c0      	nop			; (mov r8, r8)
 8002092:	46bd      	mov	sp, r7
 8002094:	b002      	add	sp, #8
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e082      	b.n	80021b0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2241      	movs	r2, #65	; 0x41
 80020ae:	5c9b      	ldrb	r3, [r3, r2]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d107      	bne.n	80020c6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	2100      	movs	r1, #0
 80020bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	0018      	movs	r0, r3
 80020c2:	f7ff fbcb 	bl	800185c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2241      	movs	r2, #65	; 0x41
 80020ca:	2124      	movs	r1, #36	; 0x24
 80020cc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2101      	movs	r1, #1
 80020da:	438a      	bics	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4934      	ldr	r1, [pc, #208]	; (80021b8 <HAL_I2C_Init+0x120>)
 80020e8:	400a      	ands	r2, r1
 80020ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4931      	ldr	r1, [pc, #196]	; (80021bc <HAL_I2C_Init+0x124>)
 80020f8:	400a      	ands	r2, r1
 80020fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d108      	bne.n	8002116 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2180      	movs	r1, #128	; 0x80
 800210e:	0209      	lsls	r1, r1, #8
 8002110:	430a      	orrs	r2, r1
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	e007      	b.n	8002126 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2184      	movs	r1, #132	; 0x84
 8002120:	0209      	lsls	r1, r1, #8
 8002122:	430a      	orrs	r2, r1
 8002124:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d104      	bne.n	8002138 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2280      	movs	r2, #128	; 0x80
 8002134:	0112      	lsls	r2, r2, #4
 8002136:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	491f      	ldr	r1, [pc, #124]	; (80021c0 <HAL_I2C_Init+0x128>)
 8002144:	430a      	orrs	r2, r1
 8002146:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	491a      	ldr	r1, [pc, #104]	; (80021bc <HAL_I2C_Init+0x124>)
 8002154:	400a      	ands	r2, r1
 8002156:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	431a      	orrs	r2, r3
 8002162:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69d9      	ldr	r1, [r3, #28]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1a      	ldr	r2, [r3, #32]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2101      	movs	r1, #1
 800218e:	430a      	orrs	r2, r1
 8002190:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2241      	movs	r2, #65	; 0x41
 800219c:	2120      	movs	r1, #32
 800219e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2242      	movs	r2, #66	; 0x42
 80021aa:	2100      	movs	r1, #0
 80021ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	0018      	movs	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b002      	add	sp, #8
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	f0ffffff 	.word	0xf0ffffff
 80021bc:	ffff7fff 	.word	0xffff7fff
 80021c0:	02008000 	.word	0x02008000

080021c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80021c4:	b590      	push	{r4, r7, lr}
 80021c6:	b089      	sub	sp, #36	; 0x24
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	0008      	movs	r0, r1
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	0019      	movs	r1, r3
 80021d2:	230a      	movs	r3, #10
 80021d4:	18fb      	adds	r3, r7, r3
 80021d6:	1c02      	adds	r2, r0, #0
 80021d8:	801a      	strh	r2, [r3, #0]
 80021da:	2308      	movs	r3, #8
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	1c0a      	adds	r2, r1, #0
 80021e0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2241      	movs	r2, #65	; 0x41
 80021e6:	5c9b      	ldrb	r3, [r3, r2]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b20      	cmp	r3, #32
 80021ec:	d000      	beq.n	80021f0 <HAL_I2C_Master_Transmit+0x2c>
 80021ee:	e0e7      	b.n	80023c0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2240      	movs	r2, #64	; 0x40
 80021f4:	5c9b      	ldrb	r3, [r3, r2]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_I2C_Master_Transmit+0x3a>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e0e1      	b.n	80023c2 <HAL_I2C_Master_Transmit+0x1fe>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2240      	movs	r2, #64	; 0x40
 8002202:	2101      	movs	r1, #1
 8002204:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002206:	f7ff fce1 	bl	8001bcc <HAL_GetTick>
 800220a:	0003      	movs	r3, r0
 800220c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800220e:	2380      	movs	r3, #128	; 0x80
 8002210:	0219      	lsls	r1, r3, #8
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	2319      	movs	r3, #25
 800221a:	2201      	movs	r2, #1
 800221c:	f000 fa04 	bl	8002628 <I2C_WaitOnFlagUntilTimeout>
 8002220:	1e03      	subs	r3, r0, #0
 8002222:	d001      	beq.n	8002228 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0cc      	b.n	80023c2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2241      	movs	r2, #65	; 0x41
 800222c:	2121      	movs	r1, #33	; 0x21
 800222e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2242      	movs	r2, #66	; 0x42
 8002234:	2110      	movs	r1, #16
 8002236:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2208      	movs	r2, #8
 8002248:	18ba      	adds	r2, r7, r2
 800224a:	8812      	ldrh	r2, [r2, #0]
 800224c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002258:	b29b      	uxth	r3, r3
 800225a:	2bff      	cmp	r3, #255	; 0xff
 800225c:	d911      	bls.n	8002282 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	22ff      	movs	r2, #255	; 0xff
 8002262:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002268:	b2da      	uxtb	r2, r3
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	045c      	lsls	r4, r3, #17
 800226e:	230a      	movs	r3, #10
 8002270:	18fb      	adds	r3, r7, r3
 8002272:	8819      	ldrh	r1, [r3, #0]
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	4b55      	ldr	r3, [pc, #340]	; (80023cc <HAL_I2C_Master_Transmit+0x208>)
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	0023      	movs	r3, r4
 800227c:	f000 fc2e 	bl	8002adc <I2C_TransferConfig>
 8002280:	e075      	b.n	800236e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002286:	b29a      	uxth	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002290:	b2da      	uxtb	r2, r3
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	049c      	lsls	r4, r3, #18
 8002296:	230a      	movs	r3, #10
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	8819      	ldrh	r1, [r3, #0]
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	4b4b      	ldr	r3, [pc, #300]	; (80023cc <HAL_I2C_Master_Transmit+0x208>)
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	0023      	movs	r3, r4
 80022a4:	f000 fc1a 	bl	8002adc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80022a8:	e061      	b.n	800236e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	0018      	movs	r0, r3
 80022b2:	f000 fa07 	bl	80026c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80022b6:	1e03      	subs	r3, r0, #0
 80022b8:	d001      	beq.n	80022be <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e081      	b.n	80023c2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	781a      	ldrb	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d8:	b29b      	uxth	r3, r3
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e6:	3b01      	subs	r3, #1
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d03a      	beq.n	800236e <HAL_I2C_Master_Transmit+0x1aa>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d136      	bne.n	800236e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	0013      	movs	r3, r2
 800230a:	2200      	movs	r2, #0
 800230c:	2180      	movs	r1, #128	; 0x80
 800230e:	f000 f98b 	bl	8002628 <I2C_WaitOnFlagUntilTimeout>
 8002312:	1e03      	subs	r3, r0, #0
 8002314:	d001      	beq.n	800231a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e053      	b.n	80023c2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231e:	b29b      	uxth	r3, r3
 8002320:	2bff      	cmp	r3, #255	; 0xff
 8002322:	d911      	bls.n	8002348 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	22ff      	movs	r2, #255	; 0xff
 8002328:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232e:	b2da      	uxtb	r2, r3
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	045c      	lsls	r4, r3, #17
 8002334:	230a      	movs	r3, #10
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	8819      	ldrh	r1, [r3, #0]
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	2300      	movs	r3, #0
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	0023      	movs	r3, r4
 8002342:	f000 fbcb 	bl	8002adc <I2C_TransferConfig>
 8002346:	e012      	b.n	800236e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234c:	b29a      	uxth	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002356:	b2da      	uxtb	r2, r3
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	049c      	lsls	r4, r3, #18
 800235c:	230a      	movs	r3, #10
 800235e:	18fb      	adds	r3, r7, r3
 8002360:	8819      	ldrh	r1, [r3, #0]
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	2300      	movs	r3, #0
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	0023      	movs	r3, r4
 800236a:	f000 fbb7 	bl	8002adc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002372:	b29b      	uxth	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d198      	bne.n	80022aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	0018      	movs	r0, r3
 8002380:	f000 f9e6 	bl	8002750 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002384:	1e03      	subs	r3, r0, #0
 8002386:	d001      	beq.n	800238c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e01a      	b.n	80023c2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2220      	movs	r2, #32
 8002392:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	490c      	ldr	r1, [pc, #48]	; (80023d0 <HAL_I2C_Master_Transmit+0x20c>)
 80023a0:	400a      	ands	r2, r1
 80023a2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2241      	movs	r2, #65	; 0x41
 80023a8:	2120      	movs	r1, #32
 80023aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2242      	movs	r2, #66	; 0x42
 80023b0:	2100      	movs	r1, #0
 80023b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2240      	movs	r2, #64	; 0x40
 80023b8:	2100      	movs	r1, #0
 80023ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	e000      	b.n	80023c2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80023c0:	2302      	movs	r3, #2
  }
}
 80023c2:	0018      	movs	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b007      	add	sp, #28
 80023c8:	bd90      	pop	{r4, r7, pc}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	80002000 	.word	0x80002000
 80023d0:	fe00e800 	.word	0xfe00e800

080023d4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80023d4:	b590      	push	{r4, r7, lr}
 80023d6:	b089      	sub	sp, #36	; 0x24
 80023d8:	af02      	add	r7, sp, #8
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	0008      	movs	r0, r1
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	0019      	movs	r1, r3
 80023e2:	230a      	movs	r3, #10
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	1c02      	adds	r2, r0, #0
 80023e8:	801a      	strh	r2, [r3, #0]
 80023ea:	2308      	movs	r3, #8
 80023ec:	18fb      	adds	r3, r7, r3
 80023ee:	1c0a      	adds	r2, r1, #0
 80023f0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2241      	movs	r2, #65	; 0x41
 80023f6:	5c9b      	ldrb	r3, [r3, r2]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b20      	cmp	r3, #32
 80023fc:	d000      	beq.n	8002400 <HAL_I2C_Master_Receive+0x2c>
 80023fe:	e0e8      	b.n	80025d2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2240      	movs	r2, #64	; 0x40
 8002404:	5c9b      	ldrb	r3, [r3, r2]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <HAL_I2C_Master_Receive+0x3a>
 800240a:	2302      	movs	r3, #2
 800240c:	e0e2      	b.n	80025d4 <HAL_I2C_Master_Receive+0x200>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2240      	movs	r2, #64	; 0x40
 8002412:	2101      	movs	r1, #1
 8002414:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002416:	f7ff fbd9 	bl	8001bcc <HAL_GetTick>
 800241a:	0003      	movs	r3, r0
 800241c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	0219      	lsls	r1, r3, #8
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2319      	movs	r3, #25
 800242a:	2201      	movs	r2, #1
 800242c:	f000 f8fc 	bl	8002628 <I2C_WaitOnFlagUntilTimeout>
 8002430:	1e03      	subs	r3, r0, #0
 8002432:	d001      	beq.n	8002438 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0cd      	b.n	80025d4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2241      	movs	r2, #65	; 0x41
 800243c:	2122      	movs	r1, #34	; 0x22
 800243e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2242      	movs	r2, #66	; 0x42
 8002444:	2110      	movs	r1, #16
 8002446:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2208      	movs	r2, #8
 8002458:	18ba      	adds	r2, r7, r2
 800245a:	8812      	ldrh	r2, [r2, #0]
 800245c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002468:	b29b      	uxth	r3, r3
 800246a:	2bff      	cmp	r3, #255	; 0xff
 800246c:	d911      	bls.n	8002492 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	22ff      	movs	r2, #255	; 0xff
 8002472:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002478:	b2da      	uxtb	r2, r3
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	045c      	lsls	r4, r3, #17
 800247e:	230a      	movs	r3, #10
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	8819      	ldrh	r1, [r3, #0]
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	4b55      	ldr	r3, [pc, #340]	; (80025dc <HAL_I2C_Master_Receive+0x208>)
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	0023      	movs	r3, r4
 800248c:	f000 fb26 	bl	8002adc <I2C_TransferConfig>
 8002490:	e076      	b.n	8002580 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	049c      	lsls	r4, r3, #18
 80024a6:	230a      	movs	r3, #10
 80024a8:	18fb      	adds	r3, r7, r3
 80024aa:	8819      	ldrh	r1, [r3, #0]
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	4b4b      	ldr	r3, [pc, #300]	; (80025dc <HAL_I2C_Master_Receive+0x208>)
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	0023      	movs	r3, r4
 80024b4:	f000 fb12 	bl	8002adc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80024b8:	e062      	b.n	8002580 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	0018      	movs	r0, r3
 80024c2:	f000 f989 	bl	80027d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024c6:	1e03      	subs	r3, r0, #0
 80024c8:	d001      	beq.n	80024ce <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e082      	b.n	80025d4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002504:	b29b      	uxth	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d03a      	beq.n	8002580 <HAL_I2C_Master_Receive+0x1ac>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250e:	2b00      	cmp	r3, #0
 8002510:	d136      	bne.n	8002580 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	0013      	movs	r3, r2
 800251c:	2200      	movs	r2, #0
 800251e:	2180      	movs	r1, #128	; 0x80
 8002520:	f000 f882 	bl	8002628 <I2C_WaitOnFlagUntilTimeout>
 8002524:	1e03      	subs	r3, r0, #0
 8002526:	d001      	beq.n	800252c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e053      	b.n	80025d4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002530:	b29b      	uxth	r3, r3
 8002532:	2bff      	cmp	r3, #255	; 0xff
 8002534:	d911      	bls.n	800255a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	22ff      	movs	r2, #255	; 0xff
 800253a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002540:	b2da      	uxtb	r2, r3
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	045c      	lsls	r4, r3, #17
 8002546:	230a      	movs	r3, #10
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	8819      	ldrh	r1, [r3, #0]
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	2300      	movs	r3, #0
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	0023      	movs	r3, r4
 8002554:	f000 fac2 	bl	8002adc <I2C_TransferConfig>
 8002558:	e012      	b.n	8002580 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002568:	b2da      	uxtb	r2, r3
 800256a:	2380      	movs	r3, #128	; 0x80
 800256c:	049c      	lsls	r4, r3, #18
 800256e:	230a      	movs	r3, #10
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	8819      	ldrh	r1, [r3, #0]
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	2300      	movs	r3, #0
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	0023      	movs	r3, r4
 800257c:	f000 faae 	bl	8002adc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002584:	b29b      	uxth	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d197      	bne.n	80024ba <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	0018      	movs	r0, r3
 8002592:	f000 f8dd 	bl	8002750 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002596:	1e03      	subs	r3, r0, #0
 8002598:	d001      	beq.n	800259e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e01a      	b.n	80025d4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2220      	movs	r2, #32
 80025a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	490b      	ldr	r1, [pc, #44]	; (80025e0 <HAL_I2C_Master_Receive+0x20c>)
 80025b2:	400a      	ands	r2, r1
 80025b4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2241      	movs	r2, #65	; 0x41
 80025ba:	2120      	movs	r1, #32
 80025bc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2242      	movs	r2, #66	; 0x42
 80025c2:	2100      	movs	r1, #0
 80025c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2240      	movs	r2, #64	; 0x40
 80025ca:	2100      	movs	r1, #0
 80025cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e000      	b.n	80025d4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80025d2:	2302      	movs	r3, #2
  }
}
 80025d4:	0018      	movs	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b007      	add	sp, #28
 80025da:	bd90      	pop	{r4, r7, pc}
 80025dc:	80002400 	.word	0x80002400
 80025e0:	fe00e800 	.word	0xfe00e800

080025e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2202      	movs	r2, #2
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d103      	bne.n	8002602 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2200      	movs	r2, #0
 8002600:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	2201      	movs	r2, #1
 800260a:	4013      	ands	r3, r2
 800260c:	2b01      	cmp	r3, #1
 800260e:	d007      	beq.n	8002620 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699a      	ldr	r2, [r3, #24]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2101      	movs	r1, #1
 800261c:	430a      	orrs	r2, r1
 800261e:	619a      	str	r2, [r3, #24]
  }
}
 8002620:	46c0      	nop			; (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	b002      	add	sp, #8
 8002626:	bd80      	pop	{r7, pc}

08002628 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	1dfb      	adds	r3, r7, #7
 8002636:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002638:	e030      	b.n	800269c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	3301      	adds	r3, #1
 800263e:	d02d      	beq.n	800269c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002640:	f7ff fac4 	bl	8001bcc <HAL_GetTick>
 8002644:	0002      	movs	r2, r0
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d302      	bcc.n	8002656 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d122      	bne.n	800269c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	4013      	ands	r3, r2
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	425a      	negs	r2, r3
 8002666:	4153      	adcs	r3, r2
 8002668:	b2db      	uxtb	r3, r3
 800266a:	001a      	movs	r2, r3
 800266c:	1dfb      	adds	r3, r7, #7
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d113      	bne.n	800269c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002678:	2220      	movs	r2, #32
 800267a:	431a      	orrs	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2241      	movs	r2, #65	; 0x41
 8002684:	2120      	movs	r1, #32
 8002686:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2242      	movs	r2, #66	; 0x42
 800268c:	2100      	movs	r1, #0
 800268e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2240      	movs	r2, #64	; 0x40
 8002694:	2100      	movs	r1, #0
 8002696:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e00f      	b.n	80026bc <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	4013      	ands	r3, r2
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	425a      	negs	r2, r3
 80026ac:	4153      	adcs	r3, r2
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	001a      	movs	r2, r3
 80026b2:	1dfb      	adds	r3, r7, #7
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d0bf      	beq.n	800263a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	0018      	movs	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	b004      	add	sp, #16
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026d0:	e032      	b.n	8002738 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 f8ff 	bl	80028dc <I2C_IsErrorOccurred>
 80026de:	1e03      	subs	r3, r0, #0
 80026e0:	d001      	beq.n	80026e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e030      	b.n	8002748 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	3301      	adds	r3, #1
 80026ea:	d025      	beq.n	8002738 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ec:	f7ff fa6e 	bl	8001bcc <HAL_GetTick>
 80026f0:	0002      	movs	r2, r0
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d302      	bcc.n	8002702 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d11a      	bne.n	8002738 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	2202      	movs	r2, #2
 800270a:	4013      	ands	r3, r2
 800270c:	2b02      	cmp	r3, #2
 800270e:	d013      	beq.n	8002738 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002714:	2220      	movs	r2, #32
 8002716:	431a      	orrs	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2241      	movs	r2, #65	; 0x41
 8002720:	2120      	movs	r1, #32
 8002722:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2242      	movs	r2, #66	; 0x42
 8002728:	2100      	movs	r1, #0
 800272a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2240      	movs	r2, #64	; 0x40
 8002730:	2100      	movs	r1, #0
 8002732:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e007      	b.n	8002748 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2202      	movs	r2, #2
 8002740:	4013      	ands	r3, r2
 8002742:	2b02      	cmp	r3, #2
 8002744:	d1c5      	bne.n	80026d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	0018      	movs	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	b004      	add	sp, #16
 800274e:	bd80      	pop	{r7, pc}

08002750 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800275c:	e02f      	b.n	80027be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68b9      	ldr	r1, [r7, #8]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	0018      	movs	r0, r3
 8002766:	f000 f8b9 	bl	80028dc <I2C_IsErrorOccurred>
 800276a:	1e03      	subs	r3, r0, #0
 800276c:	d001      	beq.n	8002772 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e02d      	b.n	80027ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002772:	f7ff fa2b 	bl	8001bcc <HAL_GetTick>
 8002776:	0002      	movs	r2, r0
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	429a      	cmp	r2, r3
 8002780:	d302      	bcc.n	8002788 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d11a      	bne.n	80027be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2220      	movs	r2, #32
 8002790:	4013      	ands	r3, r2
 8002792:	2b20      	cmp	r3, #32
 8002794:	d013      	beq.n	80027be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	2220      	movs	r2, #32
 800279c:	431a      	orrs	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2241      	movs	r2, #65	; 0x41
 80027a6:	2120      	movs	r1, #32
 80027a8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2242      	movs	r2, #66	; 0x42
 80027ae:	2100      	movs	r1, #0
 80027b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2240      	movs	r2, #64	; 0x40
 80027b6:	2100      	movs	r1, #0
 80027b8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e007      	b.n	80027ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	2220      	movs	r2, #32
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b20      	cmp	r3, #32
 80027ca:	d1c8      	bne.n	800275e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	0018      	movs	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b004      	add	sp, #16
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027e4:	e06b      	b.n	80028be <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	0018      	movs	r0, r3
 80027ee:	f000 f875 	bl	80028dc <I2C_IsErrorOccurred>
 80027f2:	1e03      	subs	r3, r0, #0
 80027f4:	d001      	beq.n	80027fa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e069      	b.n	80028ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	2220      	movs	r2, #32
 8002802:	4013      	ands	r3, r2
 8002804:	2b20      	cmp	r3, #32
 8002806:	d138      	bne.n	800287a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	2204      	movs	r2, #4
 8002810:	4013      	ands	r3, r2
 8002812:	2b04      	cmp	r3, #4
 8002814:	d105      	bne.n	8002822 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	e055      	b.n	80028ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	2210      	movs	r2, #16
 800282a:	4013      	ands	r3, r2
 800282c:	2b10      	cmp	r3, #16
 800282e:	d107      	bne.n	8002840 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2210      	movs	r2, #16
 8002836:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2204      	movs	r2, #4
 800283c:	645a      	str	r2, [r3, #68]	; 0x44
 800283e:	e002      	b.n	8002846 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2220      	movs	r2, #32
 800284c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	491f      	ldr	r1, [pc, #124]	; (80028d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800285a:	400a      	ands	r2, r1
 800285c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2241      	movs	r2, #65	; 0x41
 8002862:	2120      	movs	r1, #32
 8002864:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2242      	movs	r2, #66	; 0x42
 800286a:	2100      	movs	r1, #0
 800286c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2240      	movs	r2, #64	; 0x40
 8002872:	2100      	movs	r1, #0
 8002874:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e029      	b.n	80028ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800287a:	f7ff f9a7 	bl	8001bcc <HAL_GetTick>
 800287e:	0002      	movs	r2, r0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	429a      	cmp	r2, r3
 8002888:	d302      	bcc.n	8002890 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d116      	bne.n	80028be <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	2204      	movs	r2, #4
 8002898:	4013      	ands	r3, r2
 800289a:	2b04      	cmp	r3, #4
 800289c:	d00f      	beq.n	80028be <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	2220      	movs	r2, #32
 80028a4:	431a      	orrs	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2241      	movs	r2, #65	; 0x41
 80028ae:	2120      	movs	r1, #32
 80028b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2240      	movs	r2, #64	; 0x40
 80028b6:	2100      	movs	r1, #0
 80028b8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e007      	b.n	80028ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2204      	movs	r2, #4
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d18c      	bne.n	80027e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	0018      	movs	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	b004      	add	sp, #16
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	fe00e800 	.word	0xfe00e800

080028dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b08b      	sub	sp, #44	; 0x2c
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028e8:	2327      	movs	r3, #39	; 0x27
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	2200      	movs	r2, #0
 80028ee:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	2210      	movs	r2, #16
 8002904:	4013      	ands	r3, r2
 8002906:	d100      	bne.n	800290a <I2C_IsErrorOccurred+0x2e>
 8002908:	e082      	b.n	8002a10 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2210      	movs	r2, #16
 8002910:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002912:	e060      	b.n	80029d6 <I2C_IsErrorOccurred+0xfa>
 8002914:	2427      	movs	r4, #39	; 0x27
 8002916:	193b      	adds	r3, r7, r4
 8002918:	193a      	adds	r2, r7, r4
 800291a:	7812      	ldrb	r2, [r2, #0]
 800291c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	3301      	adds	r3, #1
 8002922:	d058      	beq.n	80029d6 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002924:	f7ff f952 	bl	8001bcc <HAL_GetTick>
 8002928:	0002      	movs	r2, r0
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	429a      	cmp	r2, r3
 8002932:	d306      	bcc.n	8002942 <I2C_IsErrorOccurred+0x66>
 8002934:	193b      	adds	r3, r7, r4
 8002936:	193a      	adds	r2, r7, r4
 8002938:	7812      	ldrb	r2, [r2, #0]
 800293a:	701a      	strb	r2, [r3, #0]
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d149      	bne.n	80029d6 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	01db      	lsls	r3, r3, #7
 800294c:	4013      	ands	r3, r2
 800294e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002950:	2013      	movs	r0, #19
 8002952:	183b      	adds	r3, r7, r0
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	2142      	movs	r1, #66	; 0x42
 8002958:	5c52      	ldrb	r2, [r2, r1]
 800295a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699a      	ldr	r2, [r3, #24]
 8002962:	2380      	movs	r3, #128	; 0x80
 8002964:	021b      	lsls	r3, r3, #8
 8002966:	401a      	ands	r2, r3
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	021b      	lsls	r3, r3, #8
 800296c:	429a      	cmp	r2, r3
 800296e:	d126      	bne.n	80029be <I2C_IsErrorOccurred+0xe2>
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	2380      	movs	r3, #128	; 0x80
 8002974:	01db      	lsls	r3, r3, #7
 8002976:	429a      	cmp	r2, r3
 8002978:	d021      	beq.n	80029be <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800297a:	183b      	adds	r3, r7, r0
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b20      	cmp	r3, #32
 8002980:	d01d      	beq.n	80029be <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2180      	movs	r1, #128	; 0x80
 800298e:	01c9      	lsls	r1, r1, #7
 8002990:	430a      	orrs	r2, r1
 8002992:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002994:	f7ff f91a 	bl	8001bcc <HAL_GetTick>
 8002998:	0003      	movs	r3, r0
 800299a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800299c:	e00f      	b.n	80029be <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800299e:	f7ff f915 	bl	8001bcc <HAL_GetTick>
 80029a2:	0002      	movs	r2, r0
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b19      	cmp	r3, #25
 80029aa:	d908      	bls.n	80029be <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	2220      	movs	r2, #32
 80029b0:	4313      	orrs	r3, r2
 80029b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80029b4:	2327      	movs	r3, #39	; 0x27
 80029b6:	18fb      	adds	r3, r7, r3
 80029b8:	2201      	movs	r2, #1
 80029ba:	701a      	strb	r2, [r3, #0]

              break;
 80029bc:	e00b      	b.n	80029d6 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	2220      	movs	r2, #32
 80029c6:	4013      	ands	r3, r2
 80029c8:	2127      	movs	r1, #39	; 0x27
 80029ca:	187a      	adds	r2, r7, r1
 80029cc:	1879      	adds	r1, r7, r1
 80029ce:	7809      	ldrb	r1, [r1, #0]
 80029d0:	7011      	strb	r1, [r2, #0]
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	d1e3      	bne.n	800299e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	2220      	movs	r2, #32
 80029de:	4013      	ands	r3, r2
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	d004      	beq.n	80029ee <I2C_IsErrorOccurred+0x112>
 80029e4:	2327      	movs	r3, #39	; 0x27
 80029e6:	18fb      	adds	r3, r7, r3
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d092      	beq.n	8002914 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029ee:	2327      	movs	r3, #39	; 0x27
 80029f0:	18fb      	adds	r3, r7, r3
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d103      	bne.n	8002a00 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2220      	movs	r2, #32
 80029fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	2204      	movs	r2, #4
 8002a04:	4313      	orrs	r3, r2
 8002a06:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002a08:	2327      	movs	r3, #39	; 0x27
 8002a0a:	18fb      	adds	r3, r7, r3
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	2380      	movs	r3, #128	; 0x80
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d00c      	beq.n	8002a3c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	2201      	movs	r2, #1
 8002a26:	4313      	orrs	r3, r2
 8002a28:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2280      	movs	r2, #128	; 0x80
 8002a30:	0052      	lsls	r2, r2, #1
 8002a32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a34:	2327      	movs	r3, #39	; 0x27
 8002a36:	18fb      	adds	r3, r7, r3
 8002a38:	2201      	movs	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	2380      	movs	r3, #128	; 0x80
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4013      	ands	r3, r2
 8002a44:	d00c      	beq.n	8002a60 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	2208      	movs	r2, #8
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2280      	movs	r2, #128	; 0x80
 8002a54:	00d2      	lsls	r2, r2, #3
 8002a56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a58:	2327      	movs	r3, #39	; 0x27
 8002a5a:	18fb      	adds	r3, r7, r3
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	2380      	movs	r3, #128	; 0x80
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4013      	ands	r3, r2
 8002a68:	d00c      	beq.n	8002a84 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2280      	movs	r2, #128	; 0x80
 8002a78:	0092      	lsls	r2, r2, #2
 8002a7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a7c:	2327      	movs	r3, #39	; 0x27
 8002a7e:	18fb      	adds	r3, r7, r3
 8002a80:	2201      	movs	r2, #1
 8002a82:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002a84:	2327      	movs	r3, #39	; 0x27
 8002a86:	18fb      	adds	r3, r7, r3
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d01d      	beq.n	8002aca <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	0018      	movs	r0, r3
 8002a92:	f7ff fda7 	bl	80025e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	490d      	ldr	r1, [pc, #52]	; (8002ad8 <I2C_IsErrorOccurred+0x1fc>)
 8002aa2:	400a      	ands	r2, r1
 8002aa4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	431a      	orrs	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2241      	movs	r2, #65	; 0x41
 8002ab6:	2120      	movs	r1, #32
 8002ab8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2242      	movs	r2, #66	; 0x42
 8002abe:	2100      	movs	r1, #0
 8002ac0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2240      	movs	r2, #64	; 0x40
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002aca:	2327      	movs	r3, #39	; 0x27
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	781b      	ldrb	r3, [r3, #0]
}
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	b00b      	add	sp, #44	; 0x2c
 8002ad6:	bd90      	pop	{r4, r7, pc}
 8002ad8:	fe00e800 	.word	0xfe00e800

08002adc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002adc:	b590      	push	{r4, r7, lr}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	0008      	movs	r0, r1
 8002ae6:	0011      	movs	r1, r2
 8002ae8:	607b      	str	r3, [r7, #4]
 8002aea:	240a      	movs	r4, #10
 8002aec:	193b      	adds	r3, r7, r4
 8002aee:	1c02      	adds	r2, r0, #0
 8002af0:	801a      	strh	r2, [r3, #0]
 8002af2:	2009      	movs	r0, #9
 8002af4:	183b      	adds	r3, r7, r0
 8002af6:	1c0a      	adds	r2, r1, #0
 8002af8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002afa:	193b      	adds	r3, r7, r4
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	059b      	lsls	r3, r3, #22
 8002b00:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b02:	183b      	adds	r3, r7, r0
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	0419      	lsls	r1, r3, #16
 8002b08:	23ff      	movs	r3, #255	; 0xff
 8002b0a:	041b      	lsls	r3, r3, #16
 8002b0c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b0e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b16:	4313      	orrs	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	085b      	lsrs	r3, r3, #1
 8002b1c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b26:	0d51      	lsrs	r1, r2, #21
 8002b28:	2280      	movs	r2, #128	; 0x80
 8002b2a:	00d2      	lsls	r2, r2, #3
 8002b2c:	400a      	ands	r2, r1
 8002b2e:	4907      	ldr	r1, [pc, #28]	; (8002b4c <I2C_TransferConfig+0x70>)
 8002b30:	430a      	orrs	r2, r1
 8002b32:	43d2      	mvns	r2, r2
 8002b34:	401a      	ands	r2, r3
 8002b36:	0011      	movs	r1, r2
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b007      	add	sp, #28
 8002b48:	bd90      	pop	{r4, r7, pc}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	03ff63ff 	.word	0x03ff63ff

08002b50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2241      	movs	r2, #65	; 0x41
 8002b5e:	5c9b      	ldrb	r3, [r3, r2]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b20      	cmp	r3, #32
 8002b64:	d138      	bne.n	8002bd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2240      	movs	r2, #64	; 0x40
 8002b6a:	5c9b      	ldrb	r3, [r3, r2]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e032      	b.n	8002bda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2240      	movs	r2, #64	; 0x40
 8002b78:	2101      	movs	r1, #1
 8002b7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2241      	movs	r2, #65	; 0x41
 8002b80:	2124      	movs	r1, #36	; 0x24
 8002b82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2101      	movs	r1, #1
 8002b90:	438a      	bics	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4911      	ldr	r1, [pc, #68]	; (8002be4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002ba0:	400a      	ands	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6819      	ldr	r1, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2241      	movs	r2, #65	; 0x41
 8002bc8:	2120      	movs	r1, #32
 8002bca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2240      	movs	r2, #64	; 0x40
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e000      	b.n	8002bda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bd8:	2302      	movs	r3, #2
  }
}
 8002bda:	0018      	movs	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	b002      	add	sp, #8
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	ffffefff 	.word	0xffffefff

08002be8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2241      	movs	r2, #65	; 0x41
 8002bf6:	5c9b      	ldrb	r3, [r3, r2]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	d139      	bne.n	8002c72 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2240      	movs	r2, #64	; 0x40
 8002c02:	5c9b      	ldrb	r3, [r3, r2]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e033      	b.n	8002c74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2240      	movs	r2, #64	; 0x40
 8002c10:	2101      	movs	r1, #1
 8002c12:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2241      	movs	r2, #65	; 0x41
 8002c18:	2124      	movs	r1, #36	; 0x24
 8002c1a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2101      	movs	r1, #1
 8002c28:	438a      	bics	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4a11      	ldr	r2, [pc, #68]	; (8002c7c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	021b      	lsls	r3, r3, #8
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2101      	movs	r1, #1
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2241      	movs	r2, #65	; 0x41
 8002c62:	2120      	movs	r1, #32
 8002c64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2240      	movs	r2, #64	; 0x40
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e000      	b.n	8002c74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c72:	2302      	movs	r3, #2
  }
}
 8002c74:	0018      	movs	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b004      	add	sp, #16
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	fffff0ff 	.word	0xfffff0ff

08002c80 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c84:	4b04      	ldr	r3, [pc, #16]	; (8002c98 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4b03      	ldr	r3, [pc, #12]	; (8002c98 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002c8a:	2180      	movs	r1, #128	; 0x80
 8002c8c:	0049      	lsls	r1, r1, #1
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	601a      	str	r2, [r3, #0]
}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40007000 	.word	0x40007000

08002c9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c9c:	b5b0      	push	{r4, r5, r7, lr}
 8002c9e:	b08a      	sub	sp, #40	; 0x28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d102      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	f000 fb6c 	bl	8003388 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb0:	4bc8      	ldr	r3, [pc, #800]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	220c      	movs	r2, #12
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cba:	4bc6      	ldr	r3, [pc, #792]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	025b      	lsls	r3, r3, #9
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d100      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x36>
 8002cd0:	e07d      	b.n	8002dce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d007      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	2b0c      	cmp	r3, #12
 8002cdc:	d112      	bne.n	8002d04 <HAL_RCC_OscConfig+0x68>
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	2380      	movs	r3, #128	; 0x80
 8002ce2:	025b      	lsls	r3, r3, #9
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d10d      	bne.n	8002d04 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	4bba      	ldr	r3, [pc, #744]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	029b      	lsls	r3, r3, #10
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d100      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x5a>
 8002cf4:	e06a      	b.n	8002dcc <HAL_RCC_OscConfig+0x130>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d166      	bne.n	8002dcc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	f000 fb42 	bl	8003388 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	025b      	lsls	r3, r3, #9
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d107      	bne.n	8002d20 <HAL_RCC_OscConfig+0x84>
 8002d10:	4bb0      	ldr	r3, [pc, #704]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4baf      	ldr	r3, [pc, #700]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002d16:	2180      	movs	r1, #128	; 0x80
 8002d18:	0249      	lsls	r1, r1, #9
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	e027      	b.n	8002d70 <HAL_RCC_OscConfig+0xd4>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	23a0      	movs	r3, #160	; 0xa0
 8002d26:	02db      	lsls	r3, r3, #11
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d10e      	bne.n	8002d4a <HAL_RCC_OscConfig+0xae>
 8002d2c:	4ba9      	ldr	r3, [pc, #676]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	4ba8      	ldr	r3, [pc, #672]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002d32:	2180      	movs	r1, #128	; 0x80
 8002d34:	02c9      	lsls	r1, r1, #11
 8002d36:	430a      	orrs	r2, r1
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	4ba6      	ldr	r3, [pc, #664]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	4ba5      	ldr	r3, [pc, #660]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002d40:	2180      	movs	r1, #128	; 0x80
 8002d42:	0249      	lsls	r1, r1, #9
 8002d44:	430a      	orrs	r2, r1
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	e012      	b.n	8002d70 <HAL_RCC_OscConfig+0xd4>
 8002d4a:	4ba2      	ldr	r3, [pc, #648]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	4ba1      	ldr	r3, [pc, #644]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002d50:	49a1      	ldr	r1, [pc, #644]	; (8002fd8 <HAL_RCC_OscConfig+0x33c>)
 8002d52:	400a      	ands	r2, r1
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	4b9f      	ldr	r3, [pc, #636]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	2380      	movs	r3, #128	; 0x80
 8002d5c:	025b      	lsls	r3, r3, #9
 8002d5e:	4013      	ands	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4b9b      	ldr	r3, [pc, #620]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4b9a      	ldr	r3, [pc, #616]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002d6a:	499c      	ldr	r1, [pc, #624]	; (8002fdc <HAL_RCC_OscConfig+0x340>)
 8002d6c:	400a      	ands	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d014      	beq.n	8002da2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d78:	f7fe ff28 	bl	8001bcc <HAL_GetTick>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d82:	f7fe ff23 	bl	8001bcc <HAL_GetTick>
 8002d86:	0002      	movs	r2, r0
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b64      	cmp	r3, #100	; 0x64
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e2f9      	b.n	8003388 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d94:	4b8f      	ldr	r3, [pc, #572]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	029b      	lsls	r3, r3, #10
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d0f0      	beq.n	8002d82 <HAL_RCC_OscConfig+0xe6>
 8002da0:	e015      	b.n	8002dce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da2:	f7fe ff13 	bl	8001bcc <HAL_GetTick>
 8002da6:	0003      	movs	r3, r0
 8002da8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dac:	f7fe ff0e 	bl	8001bcc <HAL_GetTick>
 8002db0:	0002      	movs	r2, r0
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	; 0x64
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e2e4      	b.n	8003388 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dbe:	4b85      	ldr	r3, [pc, #532]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	2380      	movs	r3, #128	; 0x80
 8002dc4:	029b      	lsls	r3, r3, #10
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x110>
 8002dca:	e000      	b.n	8002dce <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dcc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d100      	bne.n	8002dda <HAL_RCC_OscConfig+0x13e>
 8002dd8:	e099      	b.n	8002f0e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	2220      	movs	r2, #32
 8002de4:	4013      	ands	r3, r2
 8002de6:	d009      	beq.n	8002dfc <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002de8:	4b7a      	ldr	r3, [pc, #488]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b79      	ldr	r3, [pc, #484]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002dee:	2120      	movs	r1, #32
 8002df0:	430a      	orrs	r2, r1
 8002df2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	2220      	movs	r2, #32
 8002df8:	4393      	bics	r3, r2
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d005      	beq.n	8002e0e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	2b0c      	cmp	r3, #12
 8002e06:	d13e      	bne.n	8002e86 <HAL_RCC_OscConfig+0x1ea>
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d13b      	bne.n	8002e86 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002e0e:	4b71      	ldr	r3, [pc, #452]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2204      	movs	r2, #4
 8002e14:	4013      	ands	r3, r2
 8002e16:	d004      	beq.n	8002e22 <HAL_RCC_OscConfig+0x186>
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e2b2      	b.n	8003388 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e22:	4b6c      	ldr	r3, [pc, #432]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	4a6e      	ldr	r2, [pc, #440]	; (8002fe0 <HAL_RCC_OscConfig+0x344>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	0019      	movs	r1, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	021a      	lsls	r2, r3, #8
 8002e32:	4b68      	ldr	r3, [pc, #416]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002e34:	430a      	orrs	r2, r1
 8002e36:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e38:	4b66      	ldr	r3, [pc, #408]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2209      	movs	r2, #9
 8002e3e:	4393      	bics	r3, r2
 8002e40:	0019      	movs	r1, r3
 8002e42:	4b64      	ldr	r3, [pc, #400]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e46:	430a      	orrs	r2, r1
 8002e48:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e4a:	f000 fbeb 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 8002e4e:	0001      	movs	r1, r0
 8002e50:	4b60      	ldr	r3, [pc, #384]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	220f      	movs	r2, #15
 8002e58:	4013      	ands	r3, r2
 8002e5a:	4a62      	ldr	r2, [pc, #392]	; (8002fe4 <HAL_RCC_OscConfig+0x348>)
 8002e5c:	5cd3      	ldrb	r3, [r2, r3]
 8002e5e:	000a      	movs	r2, r1
 8002e60:	40da      	lsrs	r2, r3
 8002e62:	4b61      	ldr	r3, [pc, #388]	; (8002fe8 <HAL_RCC_OscConfig+0x34c>)
 8002e64:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002e66:	4b61      	ldr	r3, [pc, #388]	; (8002fec <HAL_RCC_OscConfig+0x350>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2513      	movs	r5, #19
 8002e6c:	197c      	adds	r4, r7, r5
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f7fe fe66 	bl	8001b40 <HAL_InitTick>
 8002e74:	0003      	movs	r3, r0
 8002e76:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002e78:	197b      	adds	r3, r7, r5
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d046      	beq.n	8002f0e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002e80:	197b      	adds	r3, r7, r5
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	e280      	b.n	8003388 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d027      	beq.n	8002edc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e8c:	4b51      	ldr	r3, [pc, #324]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2209      	movs	r2, #9
 8002e92:	4393      	bics	r3, r2
 8002e94:	0019      	movs	r1, r3
 8002e96:	4b4f      	ldr	r3, [pc, #316]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9e:	f7fe fe95 	bl	8001bcc <HAL_GetTick>
 8002ea2:	0003      	movs	r3, r0
 8002ea4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea8:	f7fe fe90 	bl	8001bcc <HAL_GetTick>
 8002eac:	0002      	movs	r2, r0
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e266      	b.n	8003388 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eba:	4b46      	ldr	r3, [pc, #280]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2204      	movs	r2, #4
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	d0f1      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec4:	4b43      	ldr	r3, [pc, #268]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4a45      	ldr	r2, [pc, #276]	; (8002fe0 <HAL_RCC_OscConfig+0x344>)
 8002eca:	4013      	ands	r3, r2
 8002ecc:	0019      	movs	r1, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	4b3f      	ldr	r3, [pc, #252]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	e018      	b.n	8002f0e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002edc:	4b3d      	ldr	r3, [pc, #244]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4b3c      	ldr	r3, [pc, #240]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	438a      	bics	r2, r1
 8002ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee8:	f7fe fe70 	bl	8001bcc <HAL_GetTick>
 8002eec:	0003      	movs	r3, r0
 8002eee:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef2:	f7fe fe6b 	bl	8001bcc <HAL_GetTick>
 8002ef6:	0002      	movs	r2, r0
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e241      	b.n	8003388 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f04:	4b33      	ldr	r3, [pc, #204]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2204      	movs	r2, #4
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d1f1      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2210      	movs	r2, #16
 8002f14:	4013      	ands	r3, r2
 8002f16:	d100      	bne.n	8002f1a <HAL_RCC_OscConfig+0x27e>
 8002f18:	e0a1      	b.n	800305e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d140      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f20:	4b2c      	ldr	r3, [pc, #176]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d005      	beq.n	8002f38 <HAL_RCC_OscConfig+0x29c>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e227      	b.n	8003388 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f38:	4b26      	ldr	r3, [pc, #152]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	4a2c      	ldr	r2, [pc, #176]	; (8002ff0 <HAL_RCC_OscConfig+0x354>)
 8002f3e:	4013      	ands	r3, r2
 8002f40:	0019      	movs	r1, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1a      	ldr	r2, [r3, #32]
 8002f46:	4b23      	ldr	r3, [pc, #140]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f4c:	4b21      	ldr	r3, [pc, #132]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	0a19      	lsrs	r1, r3, #8
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	061a      	lsls	r2, r3, #24
 8002f5a:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	0b5b      	lsrs	r3, r3, #13
 8002f66:	3301      	adds	r3, #1
 8002f68:	2280      	movs	r2, #128	; 0x80
 8002f6a:	0212      	lsls	r2, r2, #8
 8002f6c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002f6e:	4b19      	ldr	r3, [pc, #100]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	091b      	lsrs	r3, r3, #4
 8002f74:	210f      	movs	r1, #15
 8002f76:	400b      	ands	r3, r1
 8002f78:	491a      	ldr	r1, [pc, #104]	; (8002fe4 <HAL_RCC_OscConfig+0x348>)
 8002f7a:	5ccb      	ldrb	r3, [r1, r3]
 8002f7c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f7e:	4b1a      	ldr	r3, [pc, #104]	; (8002fe8 <HAL_RCC_OscConfig+0x34c>)
 8002f80:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002f82:	4b1a      	ldr	r3, [pc, #104]	; (8002fec <HAL_RCC_OscConfig+0x350>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2513      	movs	r5, #19
 8002f88:	197c      	adds	r4, r7, r5
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f7fe fdd8 	bl	8001b40 <HAL_InitTick>
 8002f90:	0003      	movs	r3, r0
 8002f92:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002f94:	197b      	adds	r3, r7, r5
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d060      	beq.n	800305e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002f9c:	197b      	adds	r3, r7, r5
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	e1f2      	b.n	8003388 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d03f      	beq.n	800302a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002faa:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <HAL_RCC_OscConfig+0x338>)
 8002fb0:	2180      	movs	r1, #128	; 0x80
 8002fb2:	0049      	lsls	r1, r1, #1
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb8:	f7fe fe08 	bl	8001bcc <HAL_GetTick>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002fc0:	e018      	b.n	8002ff4 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fc2:	f7fe fe03 	bl	8001bcc <HAL_GetTick>
 8002fc6:	0002      	movs	r2, r0
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d911      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e1d9      	b.n	8003388 <HAL_RCC_OscConfig+0x6ec>
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	fffeffff 	.word	0xfffeffff
 8002fdc:	fffbffff 	.word	0xfffbffff
 8002fe0:	ffffe0ff 	.word	0xffffe0ff
 8002fe4:	080068e8 	.word	0x080068e8
 8002fe8:	20000118 	.word	0x20000118
 8002fec:	2000011c 	.word	0x2000011c
 8002ff0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ff4:	4bc9      	ldr	r3, [pc, #804]	; (800331c <HAL_RCC_OscConfig+0x680>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d0e0      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003000:	4bc6      	ldr	r3, [pc, #792]	; (800331c <HAL_RCC_OscConfig+0x680>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	4ac6      	ldr	r2, [pc, #792]	; (8003320 <HAL_RCC_OscConfig+0x684>)
 8003006:	4013      	ands	r3, r2
 8003008:	0019      	movs	r1, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1a      	ldr	r2, [r3, #32]
 800300e:	4bc3      	ldr	r3, [pc, #780]	; (800331c <HAL_RCC_OscConfig+0x680>)
 8003010:	430a      	orrs	r2, r1
 8003012:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003014:	4bc1      	ldr	r3, [pc, #772]	; (800331c <HAL_RCC_OscConfig+0x680>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	021b      	lsls	r3, r3, #8
 800301a:	0a19      	lsrs	r1, r3, #8
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	061a      	lsls	r2, r3, #24
 8003022:	4bbe      	ldr	r3, [pc, #760]	; (800331c <HAL_RCC_OscConfig+0x680>)
 8003024:	430a      	orrs	r2, r1
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	e019      	b.n	800305e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800302a:	4bbc      	ldr	r3, [pc, #752]	; (800331c <HAL_RCC_OscConfig+0x680>)
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	4bbb      	ldr	r3, [pc, #748]	; (800331c <HAL_RCC_OscConfig+0x680>)
 8003030:	49bc      	ldr	r1, [pc, #752]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 8003032:	400a      	ands	r2, r1
 8003034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003036:	f7fe fdc9 	bl	8001bcc <HAL_GetTick>
 800303a:	0003      	movs	r3, r0
 800303c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003040:	f7fe fdc4 	bl	8001bcc <HAL_GetTick>
 8003044:	0002      	movs	r2, r0
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e19a      	b.n	8003388 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003052:	4bb2      	ldr	r3, [pc, #712]	; (800331c <HAL_RCC_OscConfig+0x680>)
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	2380      	movs	r3, #128	; 0x80
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4013      	ands	r3, r2
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2208      	movs	r2, #8
 8003064:	4013      	ands	r3, r2
 8003066:	d036      	beq.n	80030d6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d019      	beq.n	80030a4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003070:	4baa      	ldr	r3, [pc, #680]	; (800331c <HAL_RCC_OscConfig+0x680>)
 8003072:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003074:	4ba9      	ldr	r3, [pc, #676]	; (800331c <HAL_RCC_OscConfig+0x680>)
 8003076:	2101      	movs	r1, #1
 8003078:	430a      	orrs	r2, r1
 800307a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307c:	f7fe fda6 	bl	8001bcc <HAL_GetTick>
 8003080:	0003      	movs	r3, r0
 8003082:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003086:	f7fe fda1 	bl	8001bcc <HAL_GetTick>
 800308a:	0002      	movs	r2, r0
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e177      	b.n	8003388 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003098:	4ba0      	ldr	r3, [pc, #640]	; (800331c <HAL_RCC_OscConfig+0x680>)
 800309a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800309c:	2202      	movs	r2, #2
 800309e:	4013      	ands	r3, r2
 80030a0:	d0f1      	beq.n	8003086 <HAL_RCC_OscConfig+0x3ea>
 80030a2:	e018      	b.n	80030d6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a4:	4b9d      	ldr	r3, [pc, #628]	; (800331c <HAL_RCC_OscConfig+0x680>)
 80030a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030a8:	4b9c      	ldr	r3, [pc, #624]	; (800331c <HAL_RCC_OscConfig+0x680>)
 80030aa:	2101      	movs	r1, #1
 80030ac:	438a      	bics	r2, r1
 80030ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b0:	f7fe fd8c 	bl	8001bcc <HAL_GetTick>
 80030b4:	0003      	movs	r3, r0
 80030b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ba:	f7fe fd87 	bl	8001bcc <HAL_GetTick>
 80030be:	0002      	movs	r2, r0
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e15d      	b.n	8003388 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030cc:	4b93      	ldr	r3, [pc, #588]	; (800331c <HAL_RCC_OscConfig+0x680>)
 80030ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d0:	2202      	movs	r2, #2
 80030d2:	4013      	ands	r3, r2
 80030d4:	d1f1      	bne.n	80030ba <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2204      	movs	r2, #4
 80030dc:	4013      	ands	r3, r2
 80030de:	d100      	bne.n	80030e2 <HAL_RCC_OscConfig+0x446>
 80030e0:	e0ae      	b.n	8003240 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e2:	2023      	movs	r0, #35	; 0x23
 80030e4:	183b      	adds	r3, r7, r0
 80030e6:	2200      	movs	r2, #0
 80030e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ea:	4b8c      	ldr	r3, [pc, #560]	; (800331c <HAL_RCC_OscConfig+0x680>)
 80030ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ee:	2380      	movs	r3, #128	; 0x80
 80030f0:	055b      	lsls	r3, r3, #21
 80030f2:	4013      	ands	r3, r2
 80030f4:	d109      	bne.n	800310a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f6:	4b89      	ldr	r3, [pc, #548]	; (800331c <HAL_RCC_OscConfig+0x680>)
 80030f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030fa:	4b88      	ldr	r3, [pc, #544]	; (800331c <HAL_RCC_OscConfig+0x680>)
 80030fc:	2180      	movs	r1, #128	; 0x80
 80030fe:	0549      	lsls	r1, r1, #21
 8003100:	430a      	orrs	r2, r1
 8003102:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003104:	183b      	adds	r3, r7, r0
 8003106:	2201      	movs	r2, #1
 8003108:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310a:	4b87      	ldr	r3, [pc, #540]	; (8003328 <HAL_RCC_OscConfig+0x68c>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4013      	ands	r3, r2
 8003114:	d11a      	bne.n	800314c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003116:	4b84      	ldr	r3, [pc, #528]	; (8003328 <HAL_RCC_OscConfig+0x68c>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	4b83      	ldr	r3, [pc, #524]	; (8003328 <HAL_RCC_OscConfig+0x68c>)
 800311c:	2180      	movs	r1, #128	; 0x80
 800311e:	0049      	lsls	r1, r1, #1
 8003120:	430a      	orrs	r2, r1
 8003122:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003124:	f7fe fd52 	bl	8001bcc <HAL_GetTick>
 8003128:	0003      	movs	r3, r0
 800312a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312e:	f7fe fd4d 	bl	8001bcc <HAL_GetTick>
 8003132:	0002      	movs	r2, r0
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b64      	cmp	r3, #100	; 0x64
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e123      	b.n	8003388 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003140:	4b79      	ldr	r3, [pc, #484]	; (8003328 <HAL_RCC_OscConfig+0x68c>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	2380      	movs	r3, #128	; 0x80
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	4013      	ands	r3, r2
 800314a:	d0f0      	beq.n	800312e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	2380      	movs	r3, #128	; 0x80
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	429a      	cmp	r2, r3
 8003156:	d107      	bne.n	8003168 <HAL_RCC_OscConfig+0x4cc>
 8003158:	4b70      	ldr	r3, [pc, #448]	; (800331c <HAL_RCC_OscConfig+0x680>)
 800315a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800315c:	4b6f      	ldr	r3, [pc, #444]	; (800331c <HAL_RCC_OscConfig+0x680>)
 800315e:	2180      	movs	r1, #128	; 0x80
 8003160:	0049      	lsls	r1, r1, #1
 8003162:	430a      	orrs	r2, r1
 8003164:	651a      	str	r2, [r3, #80]	; 0x50
 8003166:	e031      	b.n	80031cc <HAL_RCC_OscConfig+0x530>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10c      	bne.n	800318a <HAL_RCC_OscConfig+0x4ee>
 8003170:	4b6a      	ldr	r3, [pc, #424]	; (800331c <HAL_RCC_OscConfig+0x680>)
 8003172:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003174:	4b69      	ldr	r3, [pc, #420]	; (800331c <HAL_RCC_OscConfig+0x680>)
 8003176:	496b      	ldr	r1, [pc, #428]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 8003178:	400a      	ands	r2, r1
 800317a:	651a      	str	r2, [r3, #80]	; 0x50
 800317c:	4b67      	ldr	r3, [pc, #412]	; (800331c <HAL_RCC_OscConfig+0x680>)
 800317e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003180:	4b66      	ldr	r3, [pc, #408]	; (800331c <HAL_RCC_OscConfig+0x680>)
 8003182:	496a      	ldr	r1, [pc, #424]	; (800332c <HAL_RCC_OscConfig+0x690>)
 8003184:	400a      	ands	r2, r1
 8003186:	651a      	str	r2, [r3, #80]	; 0x50
 8003188:	e020      	b.n	80031cc <HAL_RCC_OscConfig+0x530>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	23a0      	movs	r3, #160	; 0xa0
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	429a      	cmp	r2, r3
 8003194:	d10e      	bne.n	80031b4 <HAL_RCC_OscConfig+0x518>
 8003196:	4b61      	ldr	r3, [pc, #388]	; (800331c <HAL_RCC_OscConfig+0x680>)
 8003198:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800319a:	4b60      	ldr	r3, [pc, #384]	; (800331c <HAL_RCC_OscConfig+0x680>)
 800319c:	2180      	movs	r1, #128	; 0x80
 800319e:	00c9      	lsls	r1, r1, #3
 80031a0:	430a      	orrs	r2, r1
 80031a2:	651a      	str	r2, [r3, #80]	; 0x50
 80031a4:	4b5d      	ldr	r3, [pc, #372]	; (800331c <HAL_RCC_OscConfig+0x680>)
 80031a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031a8:	4b5c      	ldr	r3, [pc, #368]	; (800331c <HAL_RCC_OscConfig+0x680>)
 80031aa:	2180      	movs	r1, #128	; 0x80
 80031ac:	0049      	lsls	r1, r1, #1
 80031ae:	430a      	orrs	r2, r1
 80031b0:	651a      	str	r2, [r3, #80]	; 0x50
 80031b2:	e00b      	b.n	80031cc <HAL_RCC_OscConfig+0x530>
 80031b4:	4b59      	ldr	r3, [pc, #356]	; (800331c <HAL_RCC_OscConfig+0x680>)
 80031b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031b8:	4b58      	ldr	r3, [pc, #352]	; (800331c <HAL_RCC_OscConfig+0x680>)
 80031ba:	495a      	ldr	r1, [pc, #360]	; (8003324 <HAL_RCC_OscConfig+0x688>)
 80031bc:	400a      	ands	r2, r1
 80031be:	651a      	str	r2, [r3, #80]	; 0x50
 80031c0:	4b56      	ldr	r3, [pc, #344]	; (800331c <HAL_RCC_OscConfig+0x680>)
 80031c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031c4:	4b55      	ldr	r3, [pc, #340]	; (800331c <HAL_RCC_OscConfig+0x680>)
 80031c6:	4959      	ldr	r1, [pc, #356]	; (800332c <HAL_RCC_OscConfig+0x690>)
 80031c8:	400a      	ands	r2, r1
 80031ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d015      	beq.n	8003200 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d4:	f7fe fcfa 	bl	8001bcc <HAL_GetTick>
 80031d8:	0003      	movs	r3, r0
 80031da:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031dc:	e009      	b.n	80031f2 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031de:	f7fe fcf5 	bl	8001bcc <HAL_GetTick>
 80031e2:	0002      	movs	r2, r0
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	4a51      	ldr	r2, [pc, #324]	; (8003330 <HAL_RCC_OscConfig+0x694>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e0ca      	b.n	8003388 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031f2:	4b4a      	ldr	r3, [pc, #296]	; (800331c <HAL_RCC_OscConfig+0x680>)
 80031f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031f6:	2380      	movs	r3, #128	; 0x80
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4013      	ands	r3, r2
 80031fc:	d0ef      	beq.n	80031de <HAL_RCC_OscConfig+0x542>
 80031fe:	e014      	b.n	800322a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003200:	f7fe fce4 	bl	8001bcc <HAL_GetTick>
 8003204:	0003      	movs	r3, r0
 8003206:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003208:	e009      	b.n	800321e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800320a:	f7fe fcdf 	bl	8001bcc <HAL_GetTick>
 800320e:	0002      	movs	r2, r0
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	4a46      	ldr	r2, [pc, #280]	; (8003330 <HAL_RCC_OscConfig+0x694>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e0b4      	b.n	8003388 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800321e:	4b3f      	ldr	r3, [pc, #252]	; (800331c <HAL_RCC_OscConfig+0x680>)
 8003220:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003222:	2380      	movs	r3, #128	; 0x80
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4013      	ands	r3, r2
 8003228:	d1ef      	bne.n	800320a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800322a:	2323      	movs	r3, #35	; 0x23
 800322c:	18fb      	adds	r3, r7, r3
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d105      	bne.n	8003240 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003234:	4b39      	ldr	r3, [pc, #228]	; (800331c <HAL_RCC_OscConfig+0x680>)
 8003236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003238:	4b38      	ldr	r3, [pc, #224]	; (800331c <HAL_RCC_OscConfig+0x680>)
 800323a:	493e      	ldr	r1, [pc, #248]	; (8003334 <HAL_RCC_OscConfig+0x698>)
 800323c:	400a      	ands	r2, r1
 800323e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	2b00      	cmp	r3, #0
 8003246:	d100      	bne.n	800324a <HAL_RCC_OscConfig+0x5ae>
 8003248:	e09d      	b.n	8003386 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	2b0c      	cmp	r3, #12
 800324e:	d100      	bne.n	8003252 <HAL_RCC_OscConfig+0x5b6>
 8003250:	e076      	b.n	8003340 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	2b02      	cmp	r3, #2
 8003258:	d145      	bne.n	80032e6 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325a:	4b30      	ldr	r3, [pc, #192]	; (800331c <HAL_RCC_OscConfig+0x680>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	4b2f      	ldr	r3, [pc, #188]	; (800331c <HAL_RCC_OscConfig+0x680>)
 8003260:	4935      	ldr	r1, [pc, #212]	; (8003338 <HAL_RCC_OscConfig+0x69c>)
 8003262:	400a      	ands	r2, r1
 8003264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003266:	f7fe fcb1 	bl	8001bcc <HAL_GetTick>
 800326a:	0003      	movs	r3, r0
 800326c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003270:	f7fe fcac 	bl	8001bcc <HAL_GetTick>
 8003274:	0002      	movs	r2, r0
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e082      	b.n	8003388 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003282:	4b26      	ldr	r3, [pc, #152]	; (800331c <HAL_RCC_OscConfig+0x680>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	2380      	movs	r3, #128	; 0x80
 8003288:	049b      	lsls	r3, r3, #18
 800328a:	4013      	ands	r3, r2
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800328e:	4b23      	ldr	r3, [pc, #140]	; (800331c <HAL_RCC_OscConfig+0x680>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	4a2a      	ldr	r2, [pc, #168]	; (800333c <HAL_RCC_OscConfig+0x6a0>)
 8003294:	4013      	ands	r3, r2
 8003296:	0019      	movs	r1, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	431a      	orrs	r2, r3
 80032a8:	4b1c      	ldr	r3, [pc, #112]	; (800331c <HAL_RCC_OscConfig+0x680>)
 80032aa:	430a      	orrs	r2, r1
 80032ac:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ae:	4b1b      	ldr	r3, [pc, #108]	; (800331c <HAL_RCC_OscConfig+0x680>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	4b1a      	ldr	r3, [pc, #104]	; (800331c <HAL_RCC_OscConfig+0x680>)
 80032b4:	2180      	movs	r1, #128	; 0x80
 80032b6:	0449      	lsls	r1, r1, #17
 80032b8:	430a      	orrs	r2, r1
 80032ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032bc:	f7fe fc86 	bl	8001bcc <HAL_GetTick>
 80032c0:	0003      	movs	r3, r0
 80032c2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c6:	f7fe fc81 	bl	8001bcc <HAL_GetTick>
 80032ca:	0002      	movs	r2, r0
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e057      	b.n	8003388 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80032d8:	4b10      	ldr	r3, [pc, #64]	; (800331c <HAL_RCC_OscConfig+0x680>)
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	2380      	movs	r3, #128	; 0x80
 80032de:	049b      	lsls	r3, r3, #18
 80032e0:	4013      	ands	r3, r2
 80032e2:	d0f0      	beq.n	80032c6 <HAL_RCC_OscConfig+0x62a>
 80032e4:	e04f      	b.n	8003386 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e6:	4b0d      	ldr	r3, [pc, #52]	; (800331c <HAL_RCC_OscConfig+0x680>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	4b0c      	ldr	r3, [pc, #48]	; (800331c <HAL_RCC_OscConfig+0x680>)
 80032ec:	4912      	ldr	r1, [pc, #72]	; (8003338 <HAL_RCC_OscConfig+0x69c>)
 80032ee:	400a      	ands	r2, r1
 80032f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f2:	f7fe fc6b 	bl	8001bcc <HAL_GetTick>
 80032f6:	0003      	movs	r3, r0
 80032f8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fc:	f7fe fc66 	bl	8001bcc <HAL_GetTick>
 8003300:	0002      	movs	r2, r0
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e03c      	b.n	8003388 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800330e:	4b03      	ldr	r3, [pc, #12]	; (800331c <HAL_RCC_OscConfig+0x680>)
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	2380      	movs	r3, #128	; 0x80
 8003314:	049b      	lsls	r3, r3, #18
 8003316:	4013      	ands	r3, r2
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x660>
 800331a:	e034      	b.n	8003386 <HAL_RCC_OscConfig+0x6ea>
 800331c:	40021000 	.word	0x40021000
 8003320:	ffff1fff 	.word	0xffff1fff
 8003324:	fffffeff 	.word	0xfffffeff
 8003328:	40007000 	.word	0x40007000
 800332c:	fffffbff 	.word	0xfffffbff
 8003330:	00001388 	.word	0x00001388
 8003334:	efffffff 	.word	0xefffffff
 8003338:	feffffff 	.word	0xfeffffff
 800333c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e01d      	b.n	8003388 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800334c:	4b10      	ldr	r3, [pc, #64]	; (8003390 <HAL_RCC_OscConfig+0x6f4>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	2380      	movs	r3, #128	; 0x80
 8003356:	025b      	lsls	r3, r3, #9
 8003358:	401a      	ands	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335e:	429a      	cmp	r2, r3
 8003360:	d10f      	bne.n	8003382 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	23f0      	movs	r3, #240	; 0xf0
 8003366:	039b      	lsls	r3, r3, #14
 8003368:	401a      	ands	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336e:	429a      	cmp	r2, r3
 8003370:	d107      	bne.n	8003382 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	23c0      	movs	r3, #192	; 0xc0
 8003376:	041b      	lsls	r3, r3, #16
 8003378:	401a      	ands	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800337e:	429a      	cmp	r2, r3
 8003380:	d001      	beq.n	8003386 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	0018      	movs	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	b00a      	add	sp, #40	; 0x28
 800338e:	bdb0      	pop	{r4, r5, r7, pc}
 8003390:	40021000 	.word	0x40021000

08003394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003394:	b5b0      	push	{r4, r5, r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e128      	b.n	80035fa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033a8:	4b96      	ldr	r3, [pc, #600]	; (8003604 <HAL_RCC_ClockConfig+0x270>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2201      	movs	r2, #1
 80033ae:	4013      	ands	r3, r2
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d91e      	bls.n	80033f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b6:	4b93      	ldr	r3, [pc, #588]	; (8003604 <HAL_RCC_ClockConfig+0x270>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2201      	movs	r2, #1
 80033bc:	4393      	bics	r3, r2
 80033be:	0019      	movs	r1, r3
 80033c0:	4b90      	ldr	r3, [pc, #576]	; (8003604 <HAL_RCC_ClockConfig+0x270>)
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033c8:	f7fe fc00 	bl	8001bcc <HAL_GetTick>
 80033cc:	0003      	movs	r3, r0
 80033ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d0:	e009      	b.n	80033e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d2:	f7fe fbfb 	bl	8001bcc <HAL_GetTick>
 80033d6:	0002      	movs	r2, r0
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	4a8a      	ldr	r2, [pc, #552]	; (8003608 <HAL_RCC_ClockConfig+0x274>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e109      	b.n	80035fa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e6:	4b87      	ldr	r3, [pc, #540]	; (8003604 <HAL_RCC_ClockConfig+0x270>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2201      	movs	r2, #1
 80033ec:	4013      	ands	r3, r2
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d1ee      	bne.n	80033d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2202      	movs	r2, #2
 80033fa:	4013      	ands	r3, r2
 80033fc:	d009      	beq.n	8003412 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033fe:	4b83      	ldr	r3, [pc, #524]	; (800360c <HAL_RCC_ClockConfig+0x278>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	22f0      	movs	r2, #240	; 0xf0
 8003404:	4393      	bics	r3, r2
 8003406:	0019      	movs	r1, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	4b7f      	ldr	r3, [pc, #508]	; (800360c <HAL_RCC_ClockConfig+0x278>)
 800340e:	430a      	orrs	r2, r1
 8003410:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2201      	movs	r2, #1
 8003418:	4013      	ands	r3, r2
 800341a:	d100      	bne.n	800341e <HAL_RCC_ClockConfig+0x8a>
 800341c:	e089      	b.n	8003532 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d107      	bne.n	8003436 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003426:	4b79      	ldr	r3, [pc, #484]	; (800360c <HAL_RCC_ClockConfig+0x278>)
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	2380      	movs	r3, #128	; 0x80
 800342c:	029b      	lsls	r3, r3, #10
 800342e:	4013      	ands	r3, r2
 8003430:	d120      	bne.n	8003474 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e0e1      	b.n	80035fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b03      	cmp	r3, #3
 800343c:	d107      	bne.n	800344e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800343e:	4b73      	ldr	r3, [pc, #460]	; (800360c <HAL_RCC_ClockConfig+0x278>)
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	2380      	movs	r3, #128	; 0x80
 8003444:	049b      	lsls	r3, r3, #18
 8003446:	4013      	ands	r3, r2
 8003448:	d114      	bne.n	8003474 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e0d5      	b.n	80035fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d106      	bne.n	8003464 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003456:	4b6d      	ldr	r3, [pc, #436]	; (800360c <HAL_RCC_ClockConfig+0x278>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2204      	movs	r2, #4
 800345c:	4013      	ands	r3, r2
 800345e:	d109      	bne.n	8003474 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0ca      	b.n	80035fa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003464:	4b69      	ldr	r3, [pc, #420]	; (800360c <HAL_RCC_ClockConfig+0x278>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	2380      	movs	r3, #128	; 0x80
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4013      	ands	r3, r2
 800346e:	d101      	bne.n	8003474 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e0c2      	b.n	80035fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003474:	4b65      	ldr	r3, [pc, #404]	; (800360c <HAL_RCC_ClockConfig+0x278>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	2203      	movs	r2, #3
 800347a:	4393      	bics	r3, r2
 800347c:	0019      	movs	r1, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	4b62      	ldr	r3, [pc, #392]	; (800360c <HAL_RCC_ClockConfig+0x278>)
 8003484:	430a      	orrs	r2, r1
 8003486:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003488:	f7fe fba0 	bl	8001bcc <HAL_GetTick>
 800348c:	0003      	movs	r3, r0
 800348e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d111      	bne.n	80034bc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003498:	e009      	b.n	80034ae <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800349a:	f7fe fb97 	bl	8001bcc <HAL_GetTick>
 800349e:	0002      	movs	r2, r0
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	4a58      	ldr	r2, [pc, #352]	; (8003608 <HAL_RCC_ClockConfig+0x274>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e0a5      	b.n	80035fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034ae:	4b57      	ldr	r3, [pc, #348]	; (800360c <HAL_RCC_ClockConfig+0x278>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	220c      	movs	r2, #12
 80034b4:	4013      	ands	r3, r2
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d1ef      	bne.n	800349a <HAL_RCC_ClockConfig+0x106>
 80034ba:	e03a      	b.n	8003532 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	d111      	bne.n	80034e8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034c4:	e009      	b.n	80034da <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c6:	f7fe fb81 	bl	8001bcc <HAL_GetTick>
 80034ca:	0002      	movs	r2, r0
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	4a4d      	ldr	r2, [pc, #308]	; (8003608 <HAL_RCC_ClockConfig+0x274>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e08f      	b.n	80035fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034da:	4b4c      	ldr	r3, [pc, #304]	; (800360c <HAL_RCC_ClockConfig+0x278>)
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	220c      	movs	r2, #12
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b0c      	cmp	r3, #12
 80034e4:	d1ef      	bne.n	80034c6 <HAL_RCC_ClockConfig+0x132>
 80034e6:	e024      	b.n	8003532 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d11b      	bne.n	8003528 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80034f0:	e009      	b.n	8003506 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f2:	f7fe fb6b 	bl	8001bcc <HAL_GetTick>
 80034f6:	0002      	movs	r2, r0
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	4a42      	ldr	r2, [pc, #264]	; (8003608 <HAL_RCC_ClockConfig+0x274>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e079      	b.n	80035fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003506:	4b41      	ldr	r3, [pc, #260]	; (800360c <HAL_RCC_ClockConfig+0x278>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	220c      	movs	r2, #12
 800350c:	4013      	ands	r3, r2
 800350e:	2b04      	cmp	r3, #4
 8003510:	d1ef      	bne.n	80034f2 <HAL_RCC_ClockConfig+0x15e>
 8003512:	e00e      	b.n	8003532 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003514:	f7fe fb5a 	bl	8001bcc <HAL_GetTick>
 8003518:	0002      	movs	r2, r0
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	4a3a      	ldr	r2, [pc, #232]	; (8003608 <HAL_RCC_ClockConfig+0x274>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e068      	b.n	80035fa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003528:	4b38      	ldr	r3, [pc, #224]	; (800360c <HAL_RCC_ClockConfig+0x278>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	220c      	movs	r2, #12
 800352e:	4013      	ands	r3, r2
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003532:	4b34      	ldr	r3, [pc, #208]	; (8003604 <HAL_RCC_ClockConfig+0x270>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2201      	movs	r2, #1
 8003538:	4013      	ands	r3, r2
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d21e      	bcs.n	800357e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003540:	4b30      	ldr	r3, [pc, #192]	; (8003604 <HAL_RCC_ClockConfig+0x270>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2201      	movs	r2, #1
 8003546:	4393      	bics	r3, r2
 8003548:	0019      	movs	r1, r3
 800354a:	4b2e      	ldr	r3, [pc, #184]	; (8003604 <HAL_RCC_ClockConfig+0x270>)
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003552:	f7fe fb3b 	bl	8001bcc <HAL_GetTick>
 8003556:	0003      	movs	r3, r0
 8003558:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800355a:	e009      	b.n	8003570 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800355c:	f7fe fb36 	bl	8001bcc <HAL_GetTick>
 8003560:	0002      	movs	r2, r0
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	4a28      	ldr	r2, [pc, #160]	; (8003608 <HAL_RCC_ClockConfig+0x274>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e044      	b.n	80035fa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003570:	4b24      	ldr	r3, [pc, #144]	; (8003604 <HAL_RCC_ClockConfig+0x270>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2201      	movs	r2, #1
 8003576:	4013      	ands	r3, r2
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d1ee      	bne.n	800355c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2204      	movs	r2, #4
 8003584:	4013      	ands	r3, r2
 8003586:	d009      	beq.n	800359c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003588:	4b20      	ldr	r3, [pc, #128]	; (800360c <HAL_RCC_ClockConfig+0x278>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4a20      	ldr	r2, [pc, #128]	; (8003610 <HAL_RCC_ClockConfig+0x27c>)
 800358e:	4013      	ands	r3, r2
 8003590:	0019      	movs	r1, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	4b1d      	ldr	r3, [pc, #116]	; (800360c <HAL_RCC_ClockConfig+0x278>)
 8003598:	430a      	orrs	r2, r1
 800359a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2208      	movs	r2, #8
 80035a2:	4013      	ands	r3, r2
 80035a4:	d00a      	beq.n	80035bc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035a6:	4b19      	ldr	r3, [pc, #100]	; (800360c <HAL_RCC_ClockConfig+0x278>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	4a1a      	ldr	r2, [pc, #104]	; (8003614 <HAL_RCC_ClockConfig+0x280>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	0019      	movs	r1, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	00da      	lsls	r2, r3, #3
 80035b6:	4b15      	ldr	r3, [pc, #84]	; (800360c <HAL_RCC_ClockConfig+0x278>)
 80035b8:	430a      	orrs	r2, r1
 80035ba:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035bc:	f000 f832 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 80035c0:	0001      	movs	r1, r0
 80035c2:	4b12      	ldr	r3, [pc, #72]	; (800360c <HAL_RCC_ClockConfig+0x278>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	091b      	lsrs	r3, r3, #4
 80035c8:	220f      	movs	r2, #15
 80035ca:	4013      	ands	r3, r2
 80035cc:	4a12      	ldr	r2, [pc, #72]	; (8003618 <HAL_RCC_ClockConfig+0x284>)
 80035ce:	5cd3      	ldrb	r3, [r2, r3]
 80035d0:	000a      	movs	r2, r1
 80035d2:	40da      	lsrs	r2, r3
 80035d4:	4b11      	ldr	r3, [pc, #68]	; (800361c <HAL_RCC_ClockConfig+0x288>)
 80035d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035d8:	4b11      	ldr	r3, [pc, #68]	; (8003620 <HAL_RCC_ClockConfig+0x28c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	250b      	movs	r5, #11
 80035de:	197c      	adds	r4, r7, r5
 80035e0:	0018      	movs	r0, r3
 80035e2:	f7fe faad 	bl	8001b40 <HAL_InitTick>
 80035e6:	0003      	movs	r3, r0
 80035e8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80035ea:	197b      	adds	r3, r7, r5
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80035f2:	197b      	adds	r3, r7, r5
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	e000      	b.n	80035fa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	0018      	movs	r0, r3
 80035fc:	46bd      	mov	sp, r7
 80035fe:	b004      	add	sp, #16
 8003600:	bdb0      	pop	{r4, r5, r7, pc}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	40022000 	.word	0x40022000
 8003608:	00001388 	.word	0x00001388
 800360c:	40021000 	.word	0x40021000
 8003610:	fffff8ff 	.word	0xfffff8ff
 8003614:	ffffc7ff 	.word	0xffffc7ff
 8003618:	080068e8 	.word	0x080068e8
 800361c:	20000118 	.word	0x20000118
 8003620:	2000011c 	.word	0x2000011c

08003624 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003624:	b5b0      	push	{r4, r5, r7, lr}
 8003626:	b08e      	sub	sp, #56	; 0x38
 8003628:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800362a:	4b4c      	ldr	r3, [pc, #304]	; (800375c <HAL_RCC_GetSysClockFreq+0x138>)
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003632:	230c      	movs	r3, #12
 8003634:	4013      	ands	r3, r2
 8003636:	2b0c      	cmp	r3, #12
 8003638:	d014      	beq.n	8003664 <HAL_RCC_GetSysClockFreq+0x40>
 800363a:	d900      	bls.n	800363e <HAL_RCC_GetSysClockFreq+0x1a>
 800363c:	e07b      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0x112>
 800363e:	2b04      	cmp	r3, #4
 8003640:	d002      	beq.n	8003648 <HAL_RCC_GetSysClockFreq+0x24>
 8003642:	2b08      	cmp	r3, #8
 8003644:	d00b      	beq.n	800365e <HAL_RCC_GetSysClockFreq+0x3a>
 8003646:	e076      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003648:	4b44      	ldr	r3, [pc, #272]	; (800375c <HAL_RCC_GetSysClockFreq+0x138>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2210      	movs	r2, #16
 800364e:	4013      	ands	r3, r2
 8003650:	d002      	beq.n	8003658 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003652:	4b43      	ldr	r3, [pc, #268]	; (8003760 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003654:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003656:	e07c      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003658:	4b42      	ldr	r3, [pc, #264]	; (8003764 <HAL_RCC_GetSysClockFreq+0x140>)
 800365a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800365c:	e079      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800365e:	4b42      	ldr	r3, [pc, #264]	; (8003768 <HAL_RCC_GetSysClockFreq+0x144>)
 8003660:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003662:	e076      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003666:	0c9a      	lsrs	r2, r3, #18
 8003668:	230f      	movs	r3, #15
 800366a:	401a      	ands	r2, r3
 800366c:	4b3f      	ldr	r3, [pc, #252]	; (800376c <HAL_RCC_GetSysClockFreq+0x148>)
 800366e:	5c9b      	ldrb	r3, [r3, r2]
 8003670:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003674:	0d9a      	lsrs	r2, r3, #22
 8003676:	2303      	movs	r3, #3
 8003678:	4013      	ands	r3, r2
 800367a:	3301      	adds	r3, #1
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800367e:	4b37      	ldr	r3, [pc, #220]	; (800375c <HAL_RCC_GetSysClockFreq+0x138>)
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	2380      	movs	r3, #128	; 0x80
 8003684:	025b      	lsls	r3, r3, #9
 8003686:	4013      	ands	r3, r2
 8003688:	d01a      	beq.n	80036c0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800368a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	2300      	movs	r3, #0
 8003690:	61fb      	str	r3, [r7, #28]
 8003692:	4a35      	ldr	r2, [pc, #212]	; (8003768 <HAL_RCC_GetSysClockFreq+0x144>)
 8003694:	2300      	movs	r3, #0
 8003696:	69b8      	ldr	r0, [r7, #24]
 8003698:	69f9      	ldr	r1, [r7, #28]
 800369a:	f7fc fde1 	bl	8000260 <__aeabi_lmul>
 800369e:	0002      	movs	r2, r0
 80036a0:	000b      	movs	r3, r1
 80036a2:	0010      	movs	r0, r2
 80036a4:	0019      	movs	r1, r3
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f7fc fdb5 	bl	8000220 <__aeabi_uldivmod>
 80036b6:	0002      	movs	r2, r0
 80036b8:	000b      	movs	r3, r1
 80036ba:	0013      	movs	r3, r2
 80036bc:	637b      	str	r3, [r7, #52]	; 0x34
 80036be:	e037      	b.n	8003730 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80036c0:	4b26      	ldr	r3, [pc, #152]	; (800375c <HAL_RCC_GetSysClockFreq+0x138>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2210      	movs	r2, #16
 80036c6:	4013      	ands	r3, r2
 80036c8:	d01a      	beq.n	8003700 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80036ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	4a23      	ldr	r2, [pc, #140]	; (8003760 <HAL_RCC_GetSysClockFreq+0x13c>)
 80036d4:	2300      	movs	r3, #0
 80036d6:	68b8      	ldr	r0, [r7, #8]
 80036d8:	68f9      	ldr	r1, [r7, #12]
 80036da:	f7fc fdc1 	bl	8000260 <__aeabi_lmul>
 80036de:	0002      	movs	r2, r0
 80036e0:	000b      	movs	r3, r1
 80036e2:	0010      	movs	r0, r2
 80036e4:	0019      	movs	r1, r3
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	603b      	str	r3, [r7, #0]
 80036ea:	2300      	movs	r3, #0
 80036ec:	607b      	str	r3, [r7, #4]
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f7fc fd95 	bl	8000220 <__aeabi_uldivmod>
 80036f6:	0002      	movs	r2, r0
 80036f8:	000b      	movs	r3, r1
 80036fa:	0013      	movs	r3, r2
 80036fc:	637b      	str	r3, [r7, #52]	; 0x34
 80036fe:	e017      	b.n	8003730 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003702:	0018      	movs	r0, r3
 8003704:	2300      	movs	r3, #0
 8003706:	0019      	movs	r1, r3
 8003708:	4a16      	ldr	r2, [pc, #88]	; (8003764 <HAL_RCC_GetSysClockFreq+0x140>)
 800370a:	2300      	movs	r3, #0
 800370c:	f7fc fda8 	bl	8000260 <__aeabi_lmul>
 8003710:	0002      	movs	r2, r0
 8003712:	000b      	movs	r3, r1
 8003714:	0010      	movs	r0, r2
 8003716:	0019      	movs	r1, r3
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	001c      	movs	r4, r3
 800371c:	2300      	movs	r3, #0
 800371e:	001d      	movs	r5, r3
 8003720:	0022      	movs	r2, r4
 8003722:	002b      	movs	r3, r5
 8003724:	f7fc fd7c 	bl	8000220 <__aeabi_uldivmod>
 8003728:	0002      	movs	r2, r0
 800372a:	000b      	movs	r3, r1
 800372c:	0013      	movs	r3, r2
 800372e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003732:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003734:	e00d      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003736:	4b09      	ldr	r3, [pc, #36]	; (800375c <HAL_RCC_GetSysClockFreq+0x138>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	0b5b      	lsrs	r3, r3, #13
 800373c:	2207      	movs	r2, #7
 800373e:	4013      	ands	r3, r2
 8003740:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	3301      	adds	r3, #1
 8003746:	2280      	movs	r2, #128	; 0x80
 8003748:	0212      	lsls	r2, r2, #8
 800374a:	409a      	lsls	r2, r3
 800374c:	0013      	movs	r3, r2
 800374e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003750:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003754:	0018      	movs	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	b00e      	add	sp, #56	; 0x38
 800375a:	bdb0      	pop	{r4, r5, r7, pc}
 800375c:	40021000 	.word	0x40021000
 8003760:	003d0900 	.word	0x003d0900
 8003764:	00f42400 	.word	0x00f42400
 8003768:	007a1200 	.word	0x007a1200
 800376c:	08006900 	.word	0x08006900

08003770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003774:	4b02      	ldr	r3, [pc, #8]	; (8003780 <HAL_RCC_GetHCLKFreq+0x10>)
 8003776:	681b      	ldr	r3, [r3, #0]
}
 8003778:	0018      	movs	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	20000118 	.word	0x20000118

08003784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003788:	f7ff fff2 	bl	8003770 <HAL_RCC_GetHCLKFreq>
 800378c:	0001      	movs	r1, r0
 800378e:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	0a1b      	lsrs	r3, r3, #8
 8003794:	2207      	movs	r2, #7
 8003796:	4013      	ands	r3, r2
 8003798:	4a04      	ldr	r2, [pc, #16]	; (80037ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800379a:	5cd3      	ldrb	r3, [r2, r3]
 800379c:	40d9      	lsrs	r1, r3
 800379e:	000b      	movs	r3, r1
}
 80037a0:	0018      	movs	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	40021000 	.word	0x40021000
 80037ac:	080068f8 	.word	0x080068f8

080037b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037b4:	f7ff ffdc 	bl	8003770 <HAL_RCC_GetHCLKFreq>
 80037b8:	0001      	movs	r1, r0
 80037ba:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	0adb      	lsrs	r3, r3, #11
 80037c0:	2207      	movs	r2, #7
 80037c2:	4013      	ands	r3, r2
 80037c4:	4a04      	ldr	r2, [pc, #16]	; (80037d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037c6:	5cd3      	ldrb	r3, [r2, r3]
 80037c8:	40d9      	lsrs	r1, r3
 80037ca:	000b      	movs	r3, r1
}
 80037cc:	0018      	movs	r0, r3
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	40021000 	.word	0x40021000
 80037d8:	080068f8 	.word	0x080068f8

080037dc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80037e4:	2017      	movs	r0, #23
 80037e6:	183b      	adds	r3, r7, r0
 80037e8:	2200      	movs	r2, #0
 80037ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2220      	movs	r2, #32
 80037f2:	4013      	ands	r3, r2
 80037f4:	d100      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80037f6:	e0c7      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037f8:	4b84      	ldr	r3, [pc, #528]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80037fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037fc:	2380      	movs	r3, #128	; 0x80
 80037fe:	055b      	lsls	r3, r3, #21
 8003800:	4013      	ands	r3, r2
 8003802:	d109      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003804:	4b81      	ldr	r3, [pc, #516]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003808:	4b80      	ldr	r3, [pc, #512]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800380a:	2180      	movs	r1, #128	; 0x80
 800380c:	0549      	lsls	r1, r1, #21
 800380e:	430a      	orrs	r2, r1
 8003810:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003812:	183b      	adds	r3, r7, r0
 8003814:	2201      	movs	r2, #1
 8003816:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003818:	4b7d      	ldr	r3, [pc, #500]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	2380      	movs	r3, #128	; 0x80
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	4013      	ands	r3, r2
 8003822:	d11a      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003824:	4b7a      	ldr	r3, [pc, #488]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	4b79      	ldr	r3, [pc, #484]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800382a:	2180      	movs	r1, #128	; 0x80
 800382c:	0049      	lsls	r1, r1, #1
 800382e:	430a      	orrs	r2, r1
 8003830:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003832:	f7fe f9cb 	bl	8001bcc <HAL_GetTick>
 8003836:	0003      	movs	r3, r0
 8003838:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383a:	e008      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800383c:	f7fe f9c6 	bl	8001bcc <HAL_GetTick>
 8003840:	0002      	movs	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b64      	cmp	r3, #100	; 0x64
 8003848:	d901      	bls.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e0d9      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384e:	4b70      	ldr	r3, [pc, #448]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	2380      	movs	r3, #128	; 0x80
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	4013      	ands	r3, r2
 8003858:	d0f0      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800385a:	4b6c      	ldr	r3, [pc, #432]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	23c0      	movs	r3, #192	; 0xc0
 8003860:	039b      	lsls	r3, r3, #14
 8003862:	4013      	ands	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	23c0      	movs	r3, #192	; 0xc0
 800386c:	039b      	lsls	r3, r3, #14
 800386e:	4013      	ands	r3, r2
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	429a      	cmp	r2, r3
 8003874:	d013      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	23c0      	movs	r3, #192	; 0xc0
 800387c:	029b      	lsls	r3, r3, #10
 800387e:	401a      	ands	r2, r3
 8003880:	23c0      	movs	r3, #192	; 0xc0
 8003882:	029b      	lsls	r3, r3, #10
 8003884:	429a      	cmp	r2, r3
 8003886:	d10a      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003888:	4b60      	ldr	r3, [pc, #384]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	2380      	movs	r3, #128	; 0x80
 800388e:	029b      	lsls	r3, r3, #10
 8003890:	401a      	ands	r2, r3
 8003892:	2380      	movs	r3, #128	; 0x80
 8003894:	029b      	lsls	r3, r3, #10
 8003896:	429a      	cmp	r2, r3
 8003898:	d101      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e0b1      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800389e:	4b5b      	ldr	r3, [pc, #364]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038a2:	23c0      	movs	r3, #192	; 0xc0
 80038a4:	029b      	lsls	r3, r3, #10
 80038a6:	4013      	ands	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d03b      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	23c0      	movs	r3, #192	; 0xc0
 80038b6:	029b      	lsls	r3, r3, #10
 80038b8:	4013      	ands	r3, r2
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d033      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2220      	movs	r2, #32
 80038c6:	4013      	ands	r3, r2
 80038c8:	d02e      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80038ca:	4b50      	ldr	r3, [pc, #320]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ce:	4a51      	ldr	r2, [pc, #324]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038d4:	4b4d      	ldr	r3, [pc, #308]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038d8:	4b4c      	ldr	r3, [pc, #304]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038da:	2180      	movs	r1, #128	; 0x80
 80038dc:	0309      	lsls	r1, r1, #12
 80038de:	430a      	orrs	r2, r1
 80038e0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038e2:	4b4a      	ldr	r3, [pc, #296]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038e6:	4b49      	ldr	r3, [pc, #292]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038e8:	494b      	ldr	r1, [pc, #300]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80038ea:	400a      	ands	r2, r1
 80038ec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80038ee:	4b47      	ldr	r3, [pc, #284]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	2380      	movs	r3, #128	; 0x80
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	4013      	ands	r3, r2
 80038fc:	d014      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fe:	f7fe f965 	bl	8001bcc <HAL_GetTick>
 8003902:	0003      	movs	r3, r0
 8003904:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003906:	e009      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003908:	f7fe f960 	bl	8001bcc <HAL_GetTick>
 800390c:	0002      	movs	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	4a42      	ldr	r2, [pc, #264]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d901      	bls.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e072      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800391c:	4b3b      	ldr	r3, [pc, #236]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800391e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003920:	2380      	movs	r3, #128	; 0x80
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4013      	ands	r3, r2
 8003926:	d0ef      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2220      	movs	r2, #32
 800392e:	4013      	ands	r3, r2
 8003930:	d01f      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	23c0      	movs	r3, #192	; 0xc0
 8003938:	029b      	lsls	r3, r3, #10
 800393a:	401a      	ands	r2, r3
 800393c:	23c0      	movs	r3, #192	; 0xc0
 800393e:	029b      	lsls	r3, r3, #10
 8003940:	429a      	cmp	r2, r3
 8003942:	d10c      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003944:	4b31      	ldr	r3, [pc, #196]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a35      	ldr	r2, [pc, #212]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800394a:	4013      	ands	r3, r2
 800394c:	0019      	movs	r1, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	23c0      	movs	r3, #192	; 0xc0
 8003954:	039b      	lsls	r3, r3, #14
 8003956:	401a      	ands	r2, r3
 8003958:	4b2c      	ldr	r3, [pc, #176]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800395a:	430a      	orrs	r2, r1
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	4b2b      	ldr	r3, [pc, #172]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003960:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	23c0      	movs	r3, #192	; 0xc0
 8003968:	029b      	lsls	r3, r3, #10
 800396a:	401a      	ands	r2, r3
 800396c:	4b27      	ldr	r3, [pc, #156]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800396e:	430a      	orrs	r2, r1
 8003970:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003972:	2317      	movs	r3, #23
 8003974:	18fb      	adds	r3, r7, r3
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d105      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800397c:	4b23      	ldr	r3, [pc, #140]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800397e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003980:	4b22      	ldr	r3, [pc, #136]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003982:	4928      	ldr	r1, [pc, #160]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003984:	400a      	ands	r2, r1
 8003986:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2202      	movs	r2, #2
 800398e:	4013      	ands	r3, r2
 8003990:	d009      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003992:	4b1e      	ldr	r3, [pc, #120]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003996:	220c      	movs	r2, #12
 8003998:	4393      	bics	r3, r2
 800399a:	0019      	movs	r1, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	4b1a      	ldr	r3, [pc, #104]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039a2:	430a      	orrs	r2, r1
 80039a4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2204      	movs	r2, #4
 80039ac:	4013      	ands	r3, r2
 80039ae:	d009      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039b0:	4b16      	ldr	r3, [pc, #88]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b4:	4a1c      	ldr	r2, [pc, #112]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	0019      	movs	r1, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	4b13      	ldr	r3, [pc, #76]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039c0:	430a      	orrs	r2, r1
 80039c2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2208      	movs	r2, #8
 80039ca:	4013      	ands	r3, r2
 80039cc:	d009      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ce:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d2:	4a16      	ldr	r2, [pc, #88]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	0019      	movs	r1, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039de:	430a      	orrs	r2, r1
 80039e0:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2280      	movs	r2, #128	; 0x80
 80039e8:	4013      	ands	r3, r2
 80039ea:	d009      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80039ec:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f0:	4a0f      	ldr	r2, [pc, #60]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039f2:	4013      	ands	r3, r2
 80039f4:	0019      	movs	r1, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695a      	ldr	r2, [r3, #20]
 80039fa:	4b04      	ldr	r3, [pc, #16]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039fc:	430a      	orrs	r2, r1
 80039fe:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	0018      	movs	r0, r3
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b006      	add	sp, #24
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	40007000 	.word	0x40007000
 8003a14:	fffcffff 	.word	0xfffcffff
 8003a18:	fff7ffff 	.word	0xfff7ffff
 8003a1c:	00001388 	.word	0x00001388
 8003a20:	ffcfffff 	.word	0xffcfffff
 8003a24:	efffffff 	.word	0xefffffff
 8003a28:	fffff3ff 	.word	0xfffff3ff
 8003a2c:	ffffcfff 	.word	0xffffcfff
 8003a30:	fff3ffff 	.word	0xfff3ffff

08003a34 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003a34:	b5b0      	push	{r4, r5, r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a3c:	230f      	movs	r3, #15
 8003a3e:	18fb      	adds	r3, r7, r3
 8003a40:	2201      	movs	r2, #1
 8003a42:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e088      	b.n	8003b60 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2221      	movs	r2, #33	; 0x21
 8003a52:	5c9b      	ldrb	r3, [r3, r2]
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d107      	bne.n	8003a6a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	2100      	movs	r1, #0
 8003a60:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	0018      	movs	r0, r3
 8003a66:	f7fd ff3f 	bl	80018e8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2221      	movs	r2, #33	; 0x21
 8003a6e:	2102      	movs	r1, #2
 8003a70:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	2210      	movs	r2, #16
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b10      	cmp	r3, #16
 8003a7e:	d05f      	beq.n	8003b40 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	22ca      	movs	r2, #202	; 0xca
 8003a86:	625a      	str	r2, [r3, #36]	; 0x24
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2253      	movs	r2, #83	; 0x53
 8003a8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003a90:	250f      	movs	r5, #15
 8003a92:	197c      	adds	r4, r7, r5
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	0018      	movs	r0, r3
 8003a98:	f000 f890 	bl	8003bbc <RTC_EnterInitMode>
 8003a9c:	0003      	movs	r3, r0
 8003a9e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8003aa0:	0028      	movs	r0, r5
 8003aa2:	183b      	adds	r3, r7, r0
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d12c      	bne.n	8003b04 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	492c      	ldr	r1, [pc, #176]	; (8003b68 <HAL_RTC_Init+0x134>)
 8003ab6:	400a      	ands	r2, r1
 8003ab8:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6899      	ldr	r1, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	68d2      	ldr	r2, [r2, #12]
 8003ae0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6919      	ldr	r1, [r3, #16]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	041a      	lsls	r2, r3, #16
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003af6:	183c      	adds	r4, r7, r0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	0018      	movs	r0, r3
 8003afc:	f000 f8a2 	bl	8003c44 <RTC_ExitInitMode>
 8003b00:	0003      	movs	r3, r0
 8003b02:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8003b04:	230f      	movs	r3, #15
 8003b06:	18fb      	adds	r3, r7, r3
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d113      	bne.n	8003b36 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2103      	movs	r1, #3
 8003b1a:	438a      	bics	r2, r1
 8003b1c:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	22ff      	movs	r2, #255	; 0xff
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24
 8003b3e:	e003      	b.n	8003b48 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003b40:	230f      	movs	r3, #15
 8003b42:	18fb      	adds	r3, r7, r3
 8003b44:	2200      	movs	r2, #0
 8003b46:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8003b48:	230f      	movs	r3, #15
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d103      	bne.n	8003b5a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2221      	movs	r2, #33	; 0x21
 8003b56:	2101      	movs	r1, #1
 8003b58:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003b5a:	230f      	movs	r3, #15
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	781b      	ldrb	r3, [r3, #0]
}
 8003b60:	0018      	movs	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b004      	add	sp, #16
 8003b66:	bdb0      	pop	{r4, r5, r7, pc}
 8003b68:	ff8fffbf 	.word	0xff8fffbf

08003b6c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a0e      	ldr	r2, [pc, #56]	; (8003bb8 <HAL_RTC_WaitForSynchro+0x4c>)
 8003b7e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b80:	f7fe f824 	bl	8001bcc <HAL_GetTick>
 8003b84:	0003      	movs	r3, r0
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b88:	e00a      	b.n	8003ba0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b8a:	f7fe f81f 	bl	8001bcc <HAL_GetTick>
 8003b8e:	0002      	movs	r2, r0
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	1ad2      	subs	r2, r2, r3
 8003b94:	23fa      	movs	r3, #250	; 0xfa
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e006      	b.n	8003bae <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d0ee      	beq.n	8003b8a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	0018      	movs	r0, r3
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	b004      	add	sp, #16
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	0001ff5f 	.word	0x0001ff5f

08003bbc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc8:	230f      	movs	r3, #15
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	2200      	movs	r2, #0
 8003bce:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	2240      	movs	r2, #64	; 0x40
 8003bd8:	4013      	ands	r3, r2
 8003bda:	d12c      	bne.n	8003c36 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2180      	movs	r1, #128	; 0x80
 8003be8:	430a      	orrs	r2, r1
 8003bea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bec:	f7fd ffee 	bl	8001bcc <HAL_GetTick>
 8003bf0:	0003      	movs	r3, r0
 8003bf2:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003bf4:	e014      	b.n	8003c20 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003bf6:	f7fd ffe9 	bl	8001bcc <HAL_GetTick>
 8003bfa:	0002      	movs	r2, r0
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	1ad2      	subs	r2, r2, r3
 8003c00:	200f      	movs	r0, #15
 8003c02:	183b      	adds	r3, r7, r0
 8003c04:	1839      	adds	r1, r7, r0
 8003c06:	7809      	ldrb	r1, [r1, #0]
 8003c08:	7019      	strb	r1, [r3, #0]
 8003c0a:	23fa      	movs	r3, #250	; 0xfa
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d906      	bls.n	8003c20 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2221      	movs	r2, #33	; 0x21
 8003c16:	2104      	movs	r1, #4
 8003c18:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8003c1a:	183b      	adds	r3, r7, r0
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	2240      	movs	r2, #64	; 0x40
 8003c28:	4013      	ands	r3, r2
 8003c2a:	d104      	bne.n	8003c36 <RTC_EnterInitMode+0x7a>
 8003c2c:	230f      	movs	r3, #15
 8003c2e:	18fb      	adds	r3, r7, r3
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d1df      	bne.n	8003bf6 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8003c36:	230f      	movs	r3, #15
 8003c38:	18fb      	adds	r3, r7, r3
 8003c3a:	781b      	ldrb	r3, [r3, #0]
}
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	b004      	add	sp, #16
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003c44:	b590      	push	{r4, r7, lr}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c4c:	240f      	movs	r4, #15
 8003c4e:	193b      	adds	r3, r7, r4
 8003c50:	2200      	movs	r2, #0
 8003c52:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2180      	movs	r1, #128	; 0x80
 8003c60:	438a      	bics	r2, r1
 8003c62:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d10c      	bne.n	8003c8a <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	0018      	movs	r0, r3
 8003c74:	f7ff ff7a 	bl	8003b6c <HAL_RTC_WaitForSynchro>
 8003c78:	1e03      	subs	r3, r0, #0
 8003c7a:	d006      	beq.n	8003c8a <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2221      	movs	r2, #33	; 0x21
 8003c80:	2104      	movs	r1, #4
 8003c82:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8003c84:	193b      	adds	r3, r7, r4
 8003c86:	2201      	movs	r2, #1
 8003c88:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003c8a:	230f      	movs	r3, #15
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	781b      	ldrb	r3, [r3, #0]
}
 8003c90:	0018      	movs	r0, r3
 8003c92:	46bd      	mov	sp, r7
 8003c94:	b005      	add	sp, #20
 8003c96:	bd90      	pop	{r4, r7, pc}

08003c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e032      	b.n	8003d10 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2239      	movs	r2, #57	; 0x39
 8003cae:	5c9b      	ldrb	r3, [r3, r2]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d107      	bne.n	8003cc6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2238      	movs	r2, #56	; 0x38
 8003cba:	2100      	movs	r1, #0
 8003cbc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	f7fd fe29 	bl	8001918 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2239      	movs	r2, #57	; 0x39
 8003cca:	2102      	movs	r1, #2
 8003ccc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	0019      	movs	r1, r3
 8003cd8:	0010      	movs	r0, r2
 8003cda:	f000 f9ff 	bl	80040dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	223e      	movs	r2, #62	; 0x3e
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	223a      	movs	r2, #58	; 0x3a
 8003cea:	2101      	movs	r1, #1
 8003cec:	5499      	strb	r1, [r3, r2]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	223b      	movs	r2, #59	; 0x3b
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	5499      	strb	r1, [r3, r2]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	223c      	movs	r2, #60	; 0x3c
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	5499      	strb	r1, [r3, r2]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	223d      	movs	r2, #61	; 0x3d
 8003d02:	2101      	movs	r1, #1
 8003d04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2239      	movs	r2, #57	; 0x39
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	0018      	movs	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	b002      	add	sp, #8
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e032      	b.n	8003d90 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2239      	movs	r2, #57	; 0x39
 8003d2e:	5c9b      	ldrb	r3, [r3, r2]
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d107      	bne.n	8003d46 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2238      	movs	r2, #56	; 0x38
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	0018      	movs	r0, r3
 8003d42:	f000 f829 	bl	8003d98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2239      	movs	r2, #57	; 0x39
 8003d4a:	2102      	movs	r1, #2
 8003d4c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3304      	adds	r3, #4
 8003d56:	0019      	movs	r1, r3
 8003d58:	0010      	movs	r0, r2
 8003d5a:	f000 f9bf 	bl	80040dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	223e      	movs	r2, #62	; 0x3e
 8003d62:	2101      	movs	r1, #1
 8003d64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	223a      	movs	r2, #58	; 0x3a
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	5499      	strb	r1, [r3, r2]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	223b      	movs	r2, #59	; 0x3b
 8003d72:	2101      	movs	r1, #1
 8003d74:	5499      	strb	r1, [r3, r2]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	223c      	movs	r2, #60	; 0x3c
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	5499      	strb	r1, [r3, r2]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	223d      	movs	r2, #61	; 0x3d
 8003d82:	2101      	movs	r1, #1
 8003d84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2239      	movs	r2, #57	; 0x39
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	0018      	movs	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b002      	add	sp, #8
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003da0:	46c0      	nop			; (mov r8, r8)
 8003da2:	46bd      	mov	sp, r7
 8003da4:	b002      	add	sp, #8
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003db4:	2317      	movs	r3, #23
 8003db6:	18fb      	adds	r3, r7, r3
 8003db8:	2200      	movs	r2, #0
 8003dba:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2238      	movs	r2, #56	; 0x38
 8003dc0:	5c9b      	ldrb	r3, [r3, r2]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_TIM_PWM_ConfigChannel+0x22>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e0ad      	b.n	8003f26 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2238      	movs	r2, #56	; 0x38
 8003dce:	2101      	movs	r1, #1
 8003dd0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b0c      	cmp	r3, #12
 8003dd6:	d100      	bne.n	8003dda <HAL_TIM_PWM_ConfigChannel+0x32>
 8003dd8:	e076      	b.n	8003ec8 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b0c      	cmp	r3, #12
 8003dde:	d900      	bls.n	8003de2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003de0:	e095      	b.n	8003f0e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d04e      	beq.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d900      	bls.n	8003df0 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003dee:	e08e      	b.n	8003f0e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_TIM_PWM_ConfigChannel+0x56>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d021      	beq.n	8003e40 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003dfc:	e087      	b.n	8003f0e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	0011      	movs	r1, r2
 8003e06:	0018      	movs	r0, r3
 8003e08:	f000 f9b2 	bl	8004170 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699a      	ldr	r2, [r3, #24]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2108      	movs	r1, #8
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699a      	ldr	r2, [r3, #24]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2104      	movs	r1, #4
 8003e28:	438a      	bics	r2, r1
 8003e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6999      	ldr	r1, [r3, #24]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	619a      	str	r2, [r3, #24]
      break;
 8003e3e:	e06b      	b.n	8003f18 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	0011      	movs	r1, r2
 8003e48:	0018      	movs	r0, r3
 8003e4a:	f000 f9cd 	bl	80041e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699a      	ldr	r2, [r3, #24]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2180      	movs	r1, #128	; 0x80
 8003e5a:	0109      	lsls	r1, r1, #4
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699a      	ldr	r2, [r3, #24]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4931      	ldr	r1, [pc, #196]	; (8003f30 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003e6c:	400a      	ands	r2, r1
 8003e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6999      	ldr	r1, [r3, #24]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	021a      	lsls	r2, r3, #8
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	619a      	str	r2, [r3, #24]
      break;
 8003e84:	e048      	b.n	8003f18 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	0011      	movs	r1, r2
 8003e8e:	0018      	movs	r0, r3
 8003e90:	f000 f9ec 	bl	800426c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	69da      	ldr	r2, [r3, #28]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2108      	movs	r1, #8
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	69da      	ldr	r2, [r3, #28]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2104      	movs	r1, #4
 8003eb0:	438a      	bics	r2, r1
 8003eb2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	69d9      	ldr	r1, [r3, #28]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	61da      	str	r2, [r3, #28]
      break;
 8003ec6:	e027      	b.n	8003f18 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	0011      	movs	r1, r2
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f000 fa0b 	bl	80042ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69da      	ldr	r2, [r3, #28]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2180      	movs	r1, #128	; 0x80
 8003ee2:	0109      	lsls	r1, r1, #4
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	69da      	ldr	r2, [r3, #28]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	490f      	ldr	r1, [pc, #60]	; (8003f30 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003ef4:	400a      	ands	r2, r1
 8003ef6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	69d9      	ldr	r1, [r3, #28]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	021a      	lsls	r2, r3, #8
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	61da      	str	r2, [r3, #28]
      break;
 8003f0c:	e004      	b.n	8003f18 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003f0e:	2317      	movs	r3, #23
 8003f10:	18fb      	adds	r3, r7, r3
 8003f12:	2201      	movs	r2, #1
 8003f14:	701a      	strb	r2, [r3, #0]
      break;
 8003f16:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2238      	movs	r2, #56	; 0x38
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	5499      	strb	r1, [r3, r2]

  return status;
 8003f20:	2317      	movs	r3, #23
 8003f22:	18fb      	adds	r3, r7, r3
 8003f24:	781b      	ldrb	r3, [r3, #0]
}
 8003f26:	0018      	movs	r0, r3
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	b006      	add	sp, #24
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	fffffbff 	.word	0xfffffbff

08003f34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f3e:	230f      	movs	r3, #15
 8003f40:	18fb      	adds	r3, r7, r3
 8003f42:	2200      	movs	r2, #0
 8003f44:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2238      	movs	r2, #56	; 0x38
 8003f4a:	5c9b      	ldrb	r3, [r3, r2]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_TIM_ConfigClockSource+0x20>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e0bc      	b.n	80040ce <HAL_TIM_ConfigClockSource+0x19a>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2238      	movs	r2, #56	; 0x38
 8003f58:	2101      	movs	r1, #1
 8003f5a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2239      	movs	r2, #57	; 0x39
 8003f60:	2102      	movs	r1, #2
 8003f62:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2277      	movs	r2, #119	; 0x77
 8003f70:	4393      	bics	r3, r2
 8003f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4a58      	ldr	r2, [pc, #352]	; (80040d8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003f78:	4013      	ands	r3, r2
 8003f7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2280      	movs	r2, #128	; 0x80
 8003f8a:	0192      	lsls	r2, r2, #6
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d040      	beq.n	8004012 <HAL_TIM_ConfigClockSource+0xde>
 8003f90:	2280      	movs	r2, #128	; 0x80
 8003f92:	0192      	lsls	r2, r2, #6
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d900      	bls.n	8003f9a <HAL_TIM_ConfigClockSource+0x66>
 8003f98:	e088      	b.n	80040ac <HAL_TIM_ConfigClockSource+0x178>
 8003f9a:	2280      	movs	r2, #128	; 0x80
 8003f9c:	0152      	lsls	r2, r2, #5
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d100      	bne.n	8003fa4 <HAL_TIM_ConfigClockSource+0x70>
 8003fa2:	e088      	b.n	80040b6 <HAL_TIM_ConfigClockSource+0x182>
 8003fa4:	2280      	movs	r2, #128	; 0x80
 8003fa6:	0152      	lsls	r2, r2, #5
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d900      	bls.n	8003fae <HAL_TIM_ConfigClockSource+0x7a>
 8003fac:	e07e      	b.n	80040ac <HAL_TIM_ConfigClockSource+0x178>
 8003fae:	2b70      	cmp	r3, #112	; 0x70
 8003fb0:	d018      	beq.n	8003fe4 <HAL_TIM_ConfigClockSource+0xb0>
 8003fb2:	d900      	bls.n	8003fb6 <HAL_TIM_ConfigClockSource+0x82>
 8003fb4:	e07a      	b.n	80040ac <HAL_TIM_ConfigClockSource+0x178>
 8003fb6:	2b60      	cmp	r3, #96	; 0x60
 8003fb8:	d04f      	beq.n	800405a <HAL_TIM_ConfigClockSource+0x126>
 8003fba:	d900      	bls.n	8003fbe <HAL_TIM_ConfigClockSource+0x8a>
 8003fbc:	e076      	b.n	80040ac <HAL_TIM_ConfigClockSource+0x178>
 8003fbe:	2b50      	cmp	r3, #80	; 0x50
 8003fc0:	d03b      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x106>
 8003fc2:	d900      	bls.n	8003fc6 <HAL_TIM_ConfigClockSource+0x92>
 8003fc4:	e072      	b.n	80040ac <HAL_TIM_ConfigClockSource+0x178>
 8003fc6:	2b40      	cmp	r3, #64	; 0x40
 8003fc8:	d057      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x146>
 8003fca:	d900      	bls.n	8003fce <HAL_TIM_ConfigClockSource+0x9a>
 8003fcc:	e06e      	b.n	80040ac <HAL_TIM_ConfigClockSource+0x178>
 8003fce:	2b30      	cmp	r3, #48	; 0x30
 8003fd0:	d063      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x166>
 8003fd2:	d86b      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x178>
 8003fd4:	2b20      	cmp	r3, #32
 8003fd6:	d060      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x166>
 8003fd8:	d868      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x178>
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d05d      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x166>
 8003fde:	2b10      	cmp	r3, #16
 8003fe0:	d05b      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x166>
 8003fe2:	e063      	b.n	80040ac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ff4:	f000 fa3a 	bl	800446c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2277      	movs	r2, #119	; 0x77
 8004004:	4313      	orrs	r3, r2
 8004006:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	609a      	str	r2, [r3, #8]
      break;
 8004010:	e052      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004022:	f000 fa23 	bl	800446c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2180      	movs	r1, #128	; 0x80
 8004032:	01c9      	lsls	r1, r1, #7
 8004034:	430a      	orrs	r2, r1
 8004036:	609a      	str	r2, [r3, #8]
      break;
 8004038:	e03e      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004046:	001a      	movs	r2, r3
 8004048:	f000 f996 	bl	8004378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2150      	movs	r1, #80	; 0x50
 8004052:	0018      	movs	r0, r3
 8004054:	f000 f9f0 	bl	8004438 <TIM_ITRx_SetConfig>
      break;
 8004058:	e02e      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004066:	001a      	movs	r2, r3
 8004068:	f000 f9b4 	bl	80043d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2160      	movs	r1, #96	; 0x60
 8004072:	0018      	movs	r0, r3
 8004074:	f000 f9e0 	bl	8004438 <TIM_ITRx_SetConfig>
      break;
 8004078:	e01e      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004086:	001a      	movs	r2, r3
 8004088:	f000 f976 	bl	8004378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2140      	movs	r1, #64	; 0x40
 8004092:	0018      	movs	r0, r3
 8004094:	f000 f9d0 	bl	8004438 <TIM_ITRx_SetConfig>
      break;
 8004098:	e00e      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	0019      	movs	r1, r3
 80040a4:	0010      	movs	r0, r2
 80040a6:	f000 f9c7 	bl	8004438 <TIM_ITRx_SetConfig>
      break;
 80040aa:	e005      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80040ac:	230f      	movs	r3, #15
 80040ae:	18fb      	adds	r3, r7, r3
 80040b0:	2201      	movs	r2, #1
 80040b2:	701a      	strb	r2, [r3, #0]
      break;
 80040b4:	e000      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80040b6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2239      	movs	r2, #57	; 0x39
 80040bc:	2101      	movs	r1, #1
 80040be:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2238      	movs	r2, #56	; 0x38
 80040c4:	2100      	movs	r1, #0
 80040c6:	5499      	strb	r1, [r3, r2]

  return status;
 80040c8:	230f      	movs	r3, #15
 80040ca:	18fb      	adds	r3, r7, r3
 80040cc:	781b      	ldrb	r3, [r3, #0]
}
 80040ce:	0018      	movs	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b004      	add	sp, #16
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	ffff00ff 	.word	0xffff00ff

080040dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	2380      	movs	r3, #128	; 0x80
 80040f0:	05db      	lsls	r3, r3, #23
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d003      	beq.n	80040fe <TIM_Base_SetConfig+0x22>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a1b      	ldr	r2, [pc, #108]	; (8004168 <TIM_Base_SetConfig+0x8c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d108      	bne.n	8004110 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2270      	movs	r2, #112	; 0x70
 8004102:	4393      	bics	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	4313      	orrs	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	2380      	movs	r3, #128	; 0x80
 8004114:	05db      	lsls	r3, r3, #23
 8004116:	429a      	cmp	r2, r3
 8004118:	d003      	beq.n	8004122 <TIM_Base_SetConfig+0x46>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a12      	ldr	r2, [pc, #72]	; (8004168 <TIM_Base_SetConfig+0x8c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d108      	bne.n	8004134 <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4a11      	ldr	r2, [pc, #68]	; (800416c <TIM_Base_SetConfig+0x90>)
 8004126:	4013      	ands	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2280      	movs	r2, #128	; 0x80
 8004138:	4393      	bics	r3, r2
 800413a:	001a      	movs	r2, r3
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	615a      	str	r2, [r3, #20]
}
 8004160:	46c0      	nop			; (mov r8, r8)
 8004162:	46bd      	mov	sp, r7
 8004164:	b004      	add	sp, #16
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40010800 	.word	0x40010800
 800416c:	fffffcff 	.word	0xfffffcff

08004170 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	2201      	movs	r2, #1
 8004180:	4393      	bics	r3, r2
 8004182:	001a      	movs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2270      	movs	r2, #112	; 0x70
 800419e:	4393      	bics	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2203      	movs	r2, #3
 80041a6:	4393      	bics	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	2202      	movs	r2, #2
 80041b8:	4393      	bics	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	621a      	str	r2, [r3, #32]
}
 80041e0:	46c0      	nop			; (mov r8, r8)
 80041e2:	46bd      	mov	sp, r7
 80041e4:	b006      	add	sp, #24
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	2210      	movs	r2, #16
 80041f8:	4393      	bics	r3, r2
 80041fa:	001a      	movs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4a13      	ldr	r2, [pc, #76]	; (8004264 <TIM_OC2_SetConfig+0x7c>)
 8004216:	4013      	ands	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4a12      	ldr	r2, [pc, #72]	; (8004268 <TIM_OC2_SetConfig+0x80>)
 800421e:	4013      	ands	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2220      	movs	r2, #32
 8004232:	4393      	bics	r3, r2
 8004234:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	4313      	orrs	r3, r2
 8004240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	621a      	str	r2, [r3, #32]
}
 800425c:	46c0      	nop			; (mov r8, r8)
 800425e:	46bd      	mov	sp, r7
 8004260:	b006      	add	sp, #24
 8004262:	bd80      	pop	{r7, pc}
 8004264:	ffff8fff 	.word	0xffff8fff
 8004268:	fffffcff 	.word	0xfffffcff

0800426c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	4a1a      	ldr	r2, [pc, #104]	; (80042e4 <TIM_OC3_SetConfig+0x78>)
 800427c:	401a      	ands	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2270      	movs	r2, #112	; 0x70
 8004298:	4393      	bics	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2203      	movs	r2, #3
 80042a0:	4393      	bics	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	4a0d      	ldr	r2, [pc, #52]	; (80042e8 <TIM_OC3_SetConfig+0x7c>)
 80042b2:	4013      	ands	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	021b      	lsls	r3, r3, #8
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	4313      	orrs	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	621a      	str	r2, [r3, #32]
}
 80042dc:	46c0      	nop			; (mov r8, r8)
 80042de:	46bd      	mov	sp, r7
 80042e0:	b006      	add	sp, #24
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	fffffeff 	.word	0xfffffeff
 80042e8:	fffffdff 	.word	0xfffffdff

080042ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	4a1b      	ldr	r2, [pc, #108]	; (8004368 <TIM_OC4_SetConfig+0x7c>)
 80042fc:	401a      	ands	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4a15      	ldr	r2, [pc, #84]	; (800436c <TIM_OC4_SetConfig+0x80>)
 8004318:	4013      	ands	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4a14      	ldr	r2, [pc, #80]	; (8004370 <TIM_OC4_SetConfig+0x84>)
 8004320:	4013      	ands	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	021b      	lsls	r3, r3, #8
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4313      	orrs	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	4a10      	ldr	r2, [pc, #64]	; (8004374 <TIM_OC4_SetConfig+0x88>)
 8004334:	4013      	ands	r3, r2
 8004336:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	031b      	lsls	r3, r3, #12
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	4313      	orrs	r3, r2
 8004342:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	621a      	str	r2, [r3, #32]
}
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	46bd      	mov	sp, r7
 8004362:	b006      	add	sp, #24
 8004364:	bd80      	pop	{r7, pc}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	ffffefff 	.word	0xffffefff
 800436c:	ffff8fff 	.word	0xffff8fff
 8004370:	fffffcff 	.word	0xfffffcff
 8004374:	ffffdfff 	.word	0xffffdfff

08004378 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	2201      	movs	r2, #1
 8004390:	4393      	bics	r3, r2
 8004392:	001a      	movs	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	22f0      	movs	r2, #240	; 0xf0
 80043a2:	4393      	bics	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	220a      	movs	r2, #10
 80043b4:	4393      	bics	r3, r2
 80043b6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	621a      	str	r2, [r3, #32]
}
 80043cc:	46c0      	nop			; (mov r8, r8)
 80043ce:	46bd      	mov	sp, r7
 80043d0:	b006      	add	sp, #24
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	2210      	movs	r2, #16
 80043e6:	4393      	bics	r3, r2
 80043e8:	001a      	movs	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	4a0d      	ldr	r2, [pc, #52]	; (8004434 <TIM_TI2_ConfigInputStage+0x60>)
 80043fe:	4013      	ands	r3, r2
 8004400:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	031b      	lsls	r3, r3, #12
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	22a0      	movs	r2, #160	; 0xa0
 8004410:	4393      	bics	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4313      	orrs	r3, r2
 800441c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	621a      	str	r2, [r3, #32]
}
 800442a:	46c0      	nop			; (mov r8, r8)
 800442c:	46bd      	mov	sp, r7
 800442e:	b006      	add	sp, #24
 8004430:	bd80      	pop	{r7, pc}
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	ffff0fff 	.word	0xffff0fff

08004438 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2270      	movs	r2, #112	; 0x70
 800444c:	4393      	bics	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4313      	orrs	r3, r2
 8004456:	2207      	movs	r2, #7
 8004458:	4313      	orrs	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	609a      	str	r2, [r3, #8]
}
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	46bd      	mov	sp, r7
 8004466:	b004      	add	sp, #16
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	4a09      	ldr	r2, [pc, #36]	; (80044a8 <TIM_ETR_SetConfig+0x3c>)
 8004484:	4013      	ands	r3, r2
 8004486:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	021a      	lsls	r2, r3, #8
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	431a      	orrs	r2, r3
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4313      	orrs	r3, r2
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	4313      	orrs	r3, r2
 8004498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	609a      	str	r2, [r3, #8]
}
 80044a0:	46c0      	nop			; (mov r8, r8)
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b006      	add	sp, #24
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	ffff00ff 	.word	0xffff00ff

080044ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2238      	movs	r2, #56	; 0x38
 80044ba:	5c9b      	ldrb	r3, [r3, r2]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d101      	bne.n	80044c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044c0:	2302      	movs	r3, #2
 80044c2:	e03d      	b.n	8004540 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2238      	movs	r2, #56	; 0x38
 80044c8:	2101      	movs	r1, #1
 80044ca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2239      	movs	r2, #57	; 0x39
 80044d0:	2102      	movs	r1, #2
 80044d2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2270      	movs	r2, #112	; 0x70
 80044e8:	4393      	bics	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	2380      	movs	r3, #128	; 0x80
 8004504:	05db      	lsls	r3, r3, #23
 8004506:	429a      	cmp	r2, r3
 8004508:	d004      	beq.n	8004514 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a0e      	ldr	r2, [pc, #56]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d10c      	bne.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2280      	movs	r2, #128	; 0x80
 8004518:	4393      	bics	r3, r2
 800451a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	4313      	orrs	r3, r2
 8004524:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2239      	movs	r2, #57	; 0x39
 8004532:	2101      	movs	r1, #1
 8004534:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2238      	movs	r2, #56	; 0x38
 800453a:	2100      	movs	r1, #0
 800453c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	0018      	movs	r0, r3
 8004542:	46bd      	mov	sp, r7
 8004544:	b004      	add	sp, #16
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40010800 	.word	0x40010800

0800454c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e044      	b.n	80045e8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004562:	2b00      	cmp	r3, #0
 8004564:	d107      	bne.n	8004576 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2278      	movs	r2, #120	; 0x78
 800456a:	2100      	movs	r1, #0
 800456c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	0018      	movs	r0, r3
 8004572:	f7fd fa25 	bl	80019c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2224      	movs	r2, #36	; 0x24
 800457a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2101      	movs	r1, #1
 8004588:	438a      	bics	r2, r1
 800458a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	0018      	movs	r0, r3
 8004590:	f000 f830 	bl	80045f4 <UART_SetConfig>
 8004594:	0003      	movs	r3, r0
 8004596:	2b01      	cmp	r3, #1
 8004598:	d101      	bne.n	800459e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e024      	b.n	80045e8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	0018      	movs	r0, r3
 80045aa:	f000 fa6d 	bl	8004a88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	490d      	ldr	r1, [pc, #52]	; (80045f0 <HAL_UART_Init+0xa4>)
 80045ba:	400a      	ands	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	212a      	movs	r1, #42	; 0x2a
 80045ca:	438a      	bics	r2, r1
 80045cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2101      	movs	r1, #1
 80045da:	430a      	orrs	r2, r1
 80045dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	0018      	movs	r0, r3
 80045e2:	f000 fb05 	bl	8004bf0 <UART_CheckIdleState>
 80045e6:	0003      	movs	r3, r0
}
 80045e8:	0018      	movs	r0, r3
 80045ea:	46bd      	mov	sp, r7
 80045ec:	b002      	add	sp, #8
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	ffffb7ff 	.word	0xffffb7ff

080045f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045f4:	b5b0      	push	{r4, r5, r7, lr}
 80045f6:	b08e      	sub	sp, #56	; 0x38
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045fc:	231a      	movs	r3, #26
 80045fe:	2218      	movs	r2, #24
 8004600:	189b      	adds	r3, r3, r2
 8004602:	19db      	adds	r3, r3, r7
 8004604:	2200      	movs	r2, #0
 8004606:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	431a      	orrs	r2, r3
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	431a      	orrs	r2, r3
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	4313      	orrs	r3, r2
 800461e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4ab4      	ldr	r2, [pc, #720]	; (80048f8 <UART_SetConfig+0x304>)
 8004628:	4013      	ands	r3, r2
 800462a:	0019      	movs	r1, r3
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004632:	430a      	orrs	r2, r1
 8004634:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	4aaf      	ldr	r2, [pc, #700]	; (80048fc <UART_SetConfig+0x308>)
 800463e:	4013      	ands	r3, r2
 8004640:	0019      	movs	r1, r3
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4aa9      	ldr	r2, [pc, #676]	; (8004900 <UART_SetConfig+0x30c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d004      	beq.n	8004668 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004664:	4313      	orrs	r3, r2
 8004666:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	4aa5      	ldr	r2, [pc, #660]	; (8004904 <UART_SetConfig+0x310>)
 8004670:	4013      	ands	r3, r2
 8004672:	0019      	movs	r1, r3
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800467a:	430a      	orrs	r2, r1
 800467c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4aa1      	ldr	r2, [pc, #644]	; (8004908 <UART_SetConfig+0x314>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d131      	bne.n	80046ec <UART_SetConfig+0xf8>
 8004688:	4ba0      	ldr	r3, [pc, #640]	; (800490c <UART_SetConfig+0x318>)
 800468a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468c:	220c      	movs	r2, #12
 800468e:	4013      	ands	r3, r2
 8004690:	2b0c      	cmp	r3, #12
 8004692:	d01d      	beq.n	80046d0 <UART_SetConfig+0xdc>
 8004694:	d823      	bhi.n	80046de <UART_SetConfig+0xea>
 8004696:	2b08      	cmp	r3, #8
 8004698:	d00c      	beq.n	80046b4 <UART_SetConfig+0xc0>
 800469a:	d820      	bhi.n	80046de <UART_SetConfig+0xea>
 800469c:	2b00      	cmp	r3, #0
 800469e:	d002      	beq.n	80046a6 <UART_SetConfig+0xb2>
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d00e      	beq.n	80046c2 <UART_SetConfig+0xce>
 80046a4:	e01b      	b.n	80046de <UART_SetConfig+0xea>
 80046a6:	231b      	movs	r3, #27
 80046a8:	2218      	movs	r2, #24
 80046aa:	189b      	adds	r3, r3, r2
 80046ac:	19db      	adds	r3, r3, r7
 80046ae:	2200      	movs	r2, #0
 80046b0:	701a      	strb	r2, [r3, #0]
 80046b2:	e065      	b.n	8004780 <UART_SetConfig+0x18c>
 80046b4:	231b      	movs	r3, #27
 80046b6:	2218      	movs	r2, #24
 80046b8:	189b      	adds	r3, r3, r2
 80046ba:	19db      	adds	r3, r3, r7
 80046bc:	2202      	movs	r2, #2
 80046be:	701a      	strb	r2, [r3, #0]
 80046c0:	e05e      	b.n	8004780 <UART_SetConfig+0x18c>
 80046c2:	231b      	movs	r3, #27
 80046c4:	2218      	movs	r2, #24
 80046c6:	189b      	adds	r3, r3, r2
 80046c8:	19db      	adds	r3, r3, r7
 80046ca:	2204      	movs	r2, #4
 80046cc:	701a      	strb	r2, [r3, #0]
 80046ce:	e057      	b.n	8004780 <UART_SetConfig+0x18c>
 80046d0:	231b      	movs	r3, #27
 80046d2:	2218      	movs	r2, #24
 80046d4:	189b      	adds	r3, r3, r2
 80046d6:	19db      	adds	r3, r3, r7
 80046d8:	2208      	movs	r2, #8
 80046da:	701a      	strb	r2, [r3, #0]
 80046dc:	e050      	b.n	8004780 <UART_SetConfig+0x18c>
 80046de:	231b      	movs	r3, #27
 80046e0:	2218      	movs	r2, #24
 80046e2:	189b      	adds	r3, r3, r2
 80046e4:	19db      	adds	r3, r3, r7
 80046e6:	2210      	movs	r2, #16
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	e049      	b.n	8004780 <UART_SetConfig+0x18c>
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a83      	ldr	r2, [pc, #524]	; (8004900 <UART_SetConfig+0x30c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d13e      	bne.n	8004774 <UART_SetConfig+0x180>
 80046f6:	4b85      	ldr	r3, [pc, #532]	; (800490c <UART_SetConfig+0x318>)
 80046f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046fa:	23c0      	movs	r3, #192	; 0xc0
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	4013      	ands	r3, r2
 8004700:	22c0      	movs	r2, #192	; 0xc0
 8004702:	0112      	lsls	r2, r2, #4
 8004704:	4293      	cmp	r3, r2
 8004706:	d027      	beq.n	8004758 <UART_SetConfig+0x164>
 8004708:	22c0      	movs	r2, #192	; 0xc0
 800470a:	0112      	lsls	r2, r2, #4
 800470c:	4293      	cmp	r3, r2
 800470e:	d82a      	bhi.n	8004766 <UART_SetConfig+0x172>
 8004710:	2280      	movs	r2, #128	; 0x80
 8004712:	0112      	lsls	r2, r2, #4
 8004714:	4293      	cmp	r3, r2
 8004716:	d011      	beq.n	800473c <UART_SetConfig+0x148>
 8004718:	2280      	movs	r2, #128	; 0x80
 800471a:	0112      	lsls	r2, r2, #4
 800471c:	4293      	cmp	r3, r2
 800471e:	d822      	bhi.n	8004766 <UART_SetConfig+0x172>
 8004720:	2b00      	cmp	r3, #0
 8004722:	d004      	beq.n	800472e <UART_SetConfig+0x13a>
 8004724:	2280      	movs	r2, #128	; 0x80
 8004726:	00d2      	lsls	r2, r2, #3
 8004728:	4293      	cmp	r3, r2
 800472a:	d00e      	beq.n	800474a <UART_SetConfig+0x156>
 800472c:	e01b      	b.n	8004766 <UART_SetConfig+0x172>
 800472e:	231b      	movs	r3, #27
 8004730:	2218      	movs	r2, #24
 8004732:	189b      	adds	r3, r3, r2
 8004734:	19db      	adds	r3, r3, r7
 8004736:	2200      	movs	r2, #0
 8004738:	701a      	strb	r2, [r3, #0]
 800473a:	e021      	b.n	8004780 <UART_SetConfig+0x18c>
 800473c:	231b      	movs	r3, #27
 800473e:	2218      	movs	r2, #24
 8004740:	189b      	adds	r3, r3, r2
 8004742:	19db      	adds	r3, r3, r7
 8004744:	2202      	movs	r2, #2
 8004746:	701a      	strb	r2, [r3, #0]
 8004748:	e01a      	b.n	8004780 <UART_SetConfig+0x18c>
 800474a:	231b      	movs	r3, #27
 800474c:	2218      	movs	r2, #24
 800474e:	189b      	adds	r3, r3, r2
 8004750:	19db      	adds	r3, r3, r7
 8004752:	2204      	movs	r2, #4
 8004754:	701a      	strb	r2, [r3, #0]
 8004756:	e013      	b.n	8004780 <UART_SetConfig+0x18c>
 8004758:	231b      	movs	r3, #27
 800475a:	2218      	movs	r2, #24
 800475c:	189b      	adds	r3, r3, r2
 800475e:	19db      	adds	r3, r3, r7
 8004760:	2208      	movs	r2, #8
 8004762:	701a      	strb	r2, [r3, #0]
 8004764:	e00c      	b.n	8004780 <UART_SetConfig+0x18c>
 8004766:	231b      	movs	r3, #27
 8004768:	2218      	movs	r2, #24
 800476a:	189b      	adds	r3, r3, r2
 800476c:	19db      	adds	r3, r3, r7
 800476e:	2210      	movs	r2, #16
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	e005      	b.n	8004780 <UART_SetConfig+0x18c>
 8004774:	231b      	movs	r3, #27
 8004776:	2218      	movs	r2, #24
 8004778:	189b      	adds	r3, r3, r2
 800477a:	19db      	adds	r3, r3, r7
 800477c:	2210      	movs	r2, #16
 800477e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a5e      	ldr	r2, [pc, #376]	; (8004900 <UART_SetConfig+0x30c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d000      	beq.n	800478c <UART_SetConfig+0x198>
 800478a:	e084      	b.n	8004896 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800478c:	231b      	movs	r3, #27
 800478e:	2218      	movs	r2, #24
 8004790:	189b      	adds	r3, r3, r2
 8004792:	19db      	adds	r3, r3, r7
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b08      	cmp	r3, #8
 8004798:	d01d      	beq.n	80047d6 <UART_SetConfig+0x1e2>
 800479a:	dc20      	bgt.n	80047de <UART_SetConfig+0x1ea>
 800479c:	2b04      	cmp	r3, #4
 800479e:	d015      	beq.n	80047cc <UART_SetConfig+0x1d8>
 80047a0:	dc1d      	bgt.n	80047de <UART_SetConfig+0x1ea>
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <UART_SetConfig+0x1b8>
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d005      	beq.n	80047b6 <UART_SetConfig+0x1c2>
 80047aa:	e018      	b.n	80047de <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047ac:	f7fe ffea 	bl	8003784 <HAL_RCC_GetPCLK1Freq>
 80047b0:	0003      	movs	r3, r0
 80047b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047b4:	e01c      	b.n	80047f0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047b6:	4b55      	ldr	r3, [pc, #340]	; (800490c <UART_SetConfig+0x318>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2210      	movs	r2, #16
 80047bc:	4013      	ands	r3, r2
 80047be:	d002      	beq.n	80047c6 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80047c0:	4b53      	ldr	r3, [pc, #332]	; (8004910 <UART_SetConfig+0x31c>)
 80047c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80047c4:	e014      	b.n	80047f0 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 80047c6:	4b53      	ldr	r3, [pc, #332]	; (8004914 <UART_SetConfig+0x320>)
 80047c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047ca:	e011      	b.n	80047f0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047cc:	f7fe ff2a 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 80047d0:	0003      	movs	r3, r0
 80047d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047d4:	e00c      	b.n	80047f0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047d6:	2380      	movs	r3, #128	; 0x80
 80047d8:	021b      	lsls	r3, r3, #8
 80047da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047dc:	e008      	b.n	80047f0 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80047e2:	231a      	movs	r3, #26
 80047e4:	2218      	movs	r2, #24
 80047e6:	189b      	adds	r3, r3, r2
 80047e8:	19db      	adds	r3, r3, r7
 80047ea:	2201      	movs	r2, #1
 80047ec:	701a      	strb	r2, [r3, #0]
        break;
 80047ee:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d100      	bne.n	80047f8 <UART_SetConfig+0x204>
 80047f6:	e12f      	b.n	8004a58 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	0013      	movs	r3, r2
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	189b      	adds	r3, r3, r2
 8004802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004804:	429a      	cmp	r2, r3
 8004806:	d305      	bcc.n	8004814 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800480e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004810:	429a      	cmp	r2, r3
 8004812:	d906      	bls.n	8004822 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8004814:	231a      	movs	r3, #26
 8004816:	2218      	movs	r2, #24
 8004818:	189b      	adds	r3, r3, r2
 800481a:	19db      	adds	r3, r3, r7
 800481c:	2201      	movs	r2, #1
 800481e:	701a      	strb	r2, [r3, #0]
 8004820:	e11a      	b.n	8004a58 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	2300      	movs	r3, #0
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	6939      	ldr	r1, [r7, #16]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	000b      	movs	r3, r1
 8004830:	0e1b      	lsrs	r3, r3, #24
 8004832:	0010      	movs	r0, r2
 8004834:	0205      	lsls	r5, r0, #8
 8004836:	431d      	orrs	r5, r3
 8004838:	000b      	movs	r3, r1
 800483a:	021c      	lsls	r4, r3, #8
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	085b      	lsrs	r3, r3, #1
 8004842:	60bb      	str	r3, [r7, #8]
 8004844:	2300      	movs	r3, #0
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	68b8      	ldr	r0, [r7, #8]
 800484a:	68f9      	ldr	r1, [r7, #12]
 800484c:	1900      	adds	r0, r0, r4
 800484e:	4169      	adcs	r1, r5
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	603b      	str	r3, [r7, #0]
 8004856:	2300      	movs	r3, #0
 8004858:	607b      	str	r3, [r7, #4]
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f7fb fcdf 	bl	8000220 <__aeabi_uldivmod>
 8004862:	0002      	movs	r2, r0
 8004864:	000b      	movs	r3, r1
 8004866:	0013      	movs	r3, r2
 8004868:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800486a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800486c:	23c0      	movs	r3, #192	; 0xc0
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	429a      	cmp	r2, r3
 8004872:	d309      	bcc.n	8004888 <UART_SetConfig+0x294>
 8004874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004876:	2380      	movs	r3, #128	; 0x80
 8004878:	035b      	lsls	r3, r3, #13
 800487a:	429a      	cmp	r2, r3
 800487c:	d204      	bcs.n	8004888 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004884:	60da      	str	r2, [r3, #12]
 8004886:	e0e7      	b.n	8004a58 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8004888:	231a      	movs	r3, #26
 800488a:	2218      	movs	r2, #24
 800488c:	189b      	adds	r3, r3, r2
 800488e:	19db      	adds	r3, r3, r7
 8004890:	2201      	movs	r2, #1
 8004892:	701a      	strb	r2, [r3, #0]
 8004894:	e0e0      	b.n	8004a58 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	69da      	ldr	r2, [r3, #28]
 800489a:	2380      	movs	r3, #128	; 0x80
 800489c:	021b      	lsls	r3, r3, #8
 800489e:	429a      	cmp	r2, r3
 80048a0:	d000      	beq.n	80048a4 <UART_SetConfig+0x2b0>
 80048a2:	e082      	b.n	80049aa <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 80048a4:	231b      	movs	r3, #27
 80048a6:	2218      	movs	r2, #24
 80048a8:	189b      	adds	r3, r3, r2
 80048aa:	19db      	adds	r3, r3, r7
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d834      	bhi.n	800491c <UART_SetConfig+0x328>
 80048b2:	009a      	lsls	r2, r3, #2
 80048b4:	4b18      	ldr	r3, [pc, #96]	; (8004918 <UART_SetConfig+0x324>)
 80048b6:	18d3      	adds	r3, r2, r3
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048bc:	f7fe ff62 	bl	8003784 <HAL_RCC_GetPCLK1Freq>
 80048c0:	0003      	movs	r3, r0
 80048c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048c4:	e033      	b.n	800492e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048c6:	f7fe ff73 	bl	80037b0 <HAL_RCC_GetPCLK2Freq>
 80048ca:	0003      	movs	r3, r0
 80048cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048ce:	e02e      	b.n	800492e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048d0:	4b0e      	ldr	r3, [pc, #56]	; (800490c <UART_SetConfig+0x318>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2210      	movs	r2, #16
 80048d6:	4013      	ands	r3, r2
 80048d8:	d002      	beq.n	80048e0 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80048da:	4b0d      	ldr	r3, [pc, #52]	; (8004910 <UART_SetConfig+0x31c>)
 80048dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80048de:	e026      	b.n	800492e <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80048e0:	4b0c      	ldr	r3, [pc, #48]	; (8004914 <UART_SetConfig+0x320>)
 80048e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048e4:	e023      	b.n	800492e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048e6:	f7fe fe9d 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 80048ea:	0003      	movs	r3, r0
 80048ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048ee:	e01e      	b.n	800492e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048f0:	2380      	movs	r3, #128	; 0x80
 80048f2:	021b      	lsls	r3, r3, #8
 80048f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048f6:	e01a      	b.n	800492e <UART_SetConfig+0x33a>
 80048f8:	efff69f3 	.word	0xefff69f3
 80048fc:	ffffcfff 	.word	0xffffcfff
 8004900:	40004800 	.word	0x40004800
 8004904:	fffff4ff 	.word	0xfffff4ff
 8004908:	40004400 	.word	0x40004400
 800490c:	40021000 	.word	0x40021000
 8004910:	003d0900 	.word	0x003d0900
 8004914:	00f42400 	.word	0x00f42400
 8004918:	0800690c 	.word	0x0800690c
      default:
        pclk = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004920:	231a      	movs	r3, #26
 8004922:	2218      	movs	r2, #24
 8004924:	189b      	adds	r3, r3, r2
 8004926:	19db      	adds	r3, r3, r7
 8004928:	2201      	movs	r2, #1
 800492a:	701a      	strb	r2, [r3, #0]
        break;
 800492c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800492e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004930:	2b00      	cmp	r3, #0
 8004932:	d100      	bne.n	8004936 <UART_SetConfig+0x342>
 8004934:	e090      	b.n	8004a58 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004938:	005a      	lsls	r2, r3, #1
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	085b      	lsrs	r3, r3, #1
 8004940:	18d2      	adds	r2, r2, r3
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	0019      	movs	r1, r3
 8004948:	0010      	movs	r0, r2
 800494a:	f7fb fbdd 	bl	8000108 <__udivsi3>
 800494e:	0003      	movs	r3, r0
 8004950:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004954:	2b0f      	cmp	r3, #15
 8004956:	d921      	bls.n	800499c <UART_SetConfig+0x3a8>
 8004958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800495a:	2380      	movs	r3, #128	; 0x80
 800495c:	025b      	lsls	r3, r3, #9
 800495e:	429a      	cmp	r2, r3
 8004960:	d21c      	bcs.n	800499c <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004964:	b29a      	uxth	r2, r3
 8004966:	200e      	movs	r0, #14
 8004968:	2418      	movs	r4, #24
 800496a:	1903      	adds	r3, r0, r4
 800496c:	19db      	adds	r3, r3, r7
 800496e:	210f      	movs	r1, #15
 8004970:	438a      	bics	r2, r1
 8004972:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004976:	085b      	lsrs	r3, r3, #1
 8004978:	b29b      	uxth	r3, r3
 800497a:	2207      	movs	r2, #7
 800497c:	4013      	ands	r3, r2
 800497e:	b299      	uxth	r1, r3
 8004980:	1903      	adds	r3, r0, r4
 8004982:	19db      	adds	r3, r3, r7
 8004984:	1902      	adds	r2, r0, r4
 8004986:	19d2      	adds	r2, r2, r7
 8004988:	8812      	ldrh	r2, [r2, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	1902      	adds	r2, r0, r4
 8004994:	19d2      	adds	r2, r2, r7
 8004996:	8812      	ldrh	r2, [r2, #0]
 8004998:	60da      	str	r2, [r3, #12]
 800499a:	e05d      	b.n	8004a58 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 800499c:	231a      	movs	r3, #26
 800499e:	2218      	movs	r2, #24
 80049a0:	189b      	adds	r3, r3, r2
 80049a2:	19db      	adds	r3, r3, r7
 80049a4:	2201      	movs	r2, #1
 80049a6:	701a      	strb	r2, [r3, #0]
 80049a8:	e056      	b.n	8004a58 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049aa:	231b      	movs	r3, #27
 80049ac:	2218      	movs	r2, #24
 80049ae:	189b      	adds	r3, r3, r2
 80049b0:	19db      	adds	r3, r3, r7
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d822      	bhi.n	80049fe <UART_SetConfig+0x40a>
 80049b8:	009a      	lsls	r2, r3, #2
 80049ba:	4b2f      	ldr	r3, [pc, #188]	; (8004a78 <UART_SetConfig+0x484>)
 80049bc:	18d3      	adds	r3, r2, r3
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c2:	f7fe fedf 	bl	8003784 <HAL_RCC_GetPCLK1Freq>
 80049c6:	0003      	movs	r3, r0
 80049c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049ca:	e021      	b.n	8004a10 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049cc:	f7fe fef0 	bl	80037b0 <HAL_RCC_GetPCLK2Freq>
 80049d0:	0003      	movs	r3, r0
 80049d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049d4:	e01c      	b.n	8004a10 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049d6:	4b29      	ldr	r3, [pc, #164]	; (8004a7c <UART_SetConfig+0x488>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2210      	movs	r2, #16
 80049dc:	4013      	ands	r3, r2
 80049de:	d002      	beq.n	80049e6 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80049e0:	4b27      	ldr	r3, [pc, #156]	; (8004a80 <UART_SetConfig+0x48c>)
 80049e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80049e4:	e014      	b.n	8004a10 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 80049e6:	4b27      	ldr	r3, [pc, #156]	; (8004a84 <UART_SetConfig+0x490>)
 80049e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049ea:	e011      	b.n	8004a10 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ec:	f7fe fe1a 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 80049f0:	0003      	movs	r3, r0
 80049f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049f4:	e00c      	b.n	8004a10 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049f6:	2380      	movs	r3, #128	; 0x80
 80049f8:	021b      	lsls	r3, r3, #8
 80049fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049fc:	e008      	b.n	8004a10 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004a02:	231a      	movs	r3, #26
 8004a04:	2218      	movs	r2, #24
 8004a06:	189b      	adds	r3, r3, r2
 8004a08:	19db      	adds	r3, r3, r7
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	701a      	strb	r2, [r3, #0]
        break;
 8004a0e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d020      	beq.n	8004a58 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	085a      	lsrs	r2, r3, #1
 8004a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1e:	18d2      	adds	r2, r2, r3
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	0019      	movs	r1, r3
 8004a26:	0010      	movs	r0, r2
 8004a28:	f7fb fb6e 	bl	8000108 <__udivsi3>
 8004a2c:	0003      	movs	r3, r0
 8004a2e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	2b0f      	cmp	r3, #15
 8004a34:	d90a      	bls.n	8004a4c <UART_SetConfig+0x458>
 8004a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a38:	2380      	movs	r3, #128	; 0x80
 8004a3a:	025b      	lsls	r3, r3, #9
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d205      	bcs.n	8004a4c <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	60da      	str	r2, [r3, #12]
 8004a4a:	e005      	b.n	8004a58 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8004a4c:	231a      	movs	r3, #26
 8004a4e:	2218      	movs	r2, #24
 8004a50:	189b      	adds	r3, r3, r2
 8004a52:	19db      	adds	r3, r3, r7
 8004a54:	2201      	movs	r2, #1
 8004a56:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	2200      	movs	r2, #0
 8004a62:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004a64:	231a      	movs	r3, #26
 8004a66:	2218      	movs	r2, #24
 8004a68:	189b      	adds	r3, r3, r2
 8004a6a:	19db      	adds	r3, r3, r7
 8004a6c:	781b      	ldrb	r3, [r3, #0]
}
 8004a6e:	0018      	movs	r0, r3
 8004a70:	46bd      	mov	sp, r7
 8004a72:	b00e      	add	sp, #56	; 0x38
 8004a74:	bdb0      	pop	{r4, r5, r7, pc}
 8004a76:	46c0      	nop			; (mov r8, r8)
 8004a78:	08006930 	.word	0x08006930
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	003d0900 	.word	0x003d0900
 8004a84:	00f42400 	.word	0x00f42400

08004a88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	2201      	movs	r2, #1
 8004a96:	4013      	ands	r3, r2
 8004a98:	d00b      	beq.n	8004ab2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	4a4a      	ldr	r2, [pc, #296]	; (8004bcc <UART_AdvFeatureConfig+0x144>)
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	0019      	movs	r1, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	4013      	ands	r3, r2
 8004aba:	d00b      	beq.n	8004ad4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	4a43      	ldr	r2, [pc, #268]	; (8004bd0 <UART_AdvFeatureConfig+0x148>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	0019      	movs	r1, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	2204      	movs	r2, #4
 8004ada:	4013      	ands	r3, r2
 8004adc:	d00b      	beq.n	8004af6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	4a3b      	ldr	r2, [pc, #236]	; (8004bd4 <UART_AdvFeatureConfig+0x14c>)
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	0019      	movs	r1, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	2208      	movs	r2, #8
 8004afc:	4013      	ands	r3, r2
 8004afe:	d00b      	beq.n	8004b18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	4a34      	ldr	r2, [pc, #208]	; (8004bd8 <UART_AdvFeatureConfig+0x150>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	0019      	movs	r1, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	2210      	movs	r2, #16
 8004b1e:	4013      	ands	r3, r2
 8004b20:	d00b      	beq.n	8004b3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	4a2c      	ldr	r2, [pc, #176]	; (8004bdc <UART_AdvFeatureConfig+0x154>)
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	0019      	movs	r1, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	2220      	movs	r2, #32
 8004b40:	4013      	ands	r3, r2
 8004b42:	d00b      	beq.n	8004b5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	4a25      	ldr	r2, [pc, #148]	; (8004be0 <UART_AdvFeatureConfig+0x158>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	0019      	movs	r1, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	2240      	movs	r2, #64	; 0x40
 8004b62:	4013      	ands	r3, r2
 8004b64:	d01d      	beq.n	8004ba2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	4a1d      	ldr	r2, [pc, #116]	; (8004be4 <UART_AdvFeatureConfig+0x15c>)
 8004b6e:	4013      	ands	r3, r2
 8004b70:	0019      	movs	r1, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b82:	2380      	movs	r3, #128	; 0x80
 8004b84:	035b      	lsls	r3, r3, #13
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d10b      	bne.n	8004ba2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	4a15      	ldr	r2, [pc, #84]	; (8004be8 <UART_AdvFeatureConfig+0x160>)
 8004b92:	4013      	ands	r3, r2
 8004b94:	0019      	movs	r1, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	2280      	movs	r2, #128	; 0x80
 8004ba8:	4013      	ands	r3, r2
 8004baa:	d00b      	beq.n	8004bc4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	4a0e      	ldr	r2, [pc, #56]	; (8004bec <UART_AdvFeatureConfig+0x164>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	0019      	movs	r1, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	605a      	str	r2, [r3, #4]
  }
}
 8004bc4:	46c0      	nop			; (mov r8, r8)
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	b002      	add	sp, #8
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	fffdffff 	.word	0xfffdffff
 8004bd0:	fffeffff 	.word	0xfffeffff
 8004bd4:	fffbffff 	.word	0xfffbffff
 8004bd8:	ffff7fff 	.word	0xffff7fff
 8004bdc:	ffffefff 	.word	0xffffefff
 8004be0:	ffffdfff 	.word	0xffffdfff
 8004be4:	ffefffff 	.word	0xffefffff
 8004be8:	ff9fffff 	.word	0xff9fffff
 8004bec:	fff7ffff 	.word	0xfff7ffff

08004bf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b092      	sub	sp, #72	; 0x48
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2284      	movs	r2, #132	; 0x84
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c00:	f7fc ffe4 	bl	8001bcc <HAL_GetTick>
 8004c04:	0003      	movs	r3, r0
 8004c06:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2208      	movs	r2, #8
 8004c10:	4013      	ands	r3, r2
 8004c12:	2b08      	cmp	r3, #8
 8004c14:	d12c      	bne.n	8004c70 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c18:	2280      	movs	r2, #128	; 0x80
 8004c1a:	0391      	lsls	r1, r2, #14
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	4a46      	ldr	r2, [pc, #280]	; (8004d38 <UART_CheckIdleState+0x148>)
 8004c20:	9200      	str	r2, [sp, #0]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f000 f88c 	bl	8004d40 <UART_WaitOnFlagUntilTimeout>
 8004c28:	1e03      	subs	r3, r0, #0
 8004c2a:	d021      	beq.n	8004c70 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c34:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c36:	2301      	movs	r3, #1
 8004c38:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3c:	f383 8810 	msr	PRIMASK, r3
}
 8004c40:	46c0      	nop			; (mov r8, r8)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2180      	movs	r1, #128	; 0x80
 8004c4e:	438a      	bics	r2, r1
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c58:	f383 8810 	msr	PRIMASK, r3
}
 8004c5c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2220      	movs	r2, #32
 8004c62:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2278      	movs	r2, #120	; 0x78
 8004c68:	2100      	movs	r1, #0
 8004c6a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e05f      	b.n	8004d30 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2204      	movs	r2, #4
 8004c78:	4013      	ands	r3, r2
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	d146      	bne.n	8004d0c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c80:	2280      	movs	r2, #128	; 0x80
 8004c82:	03d1      	lsls	r1, r2, #15
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	4a2c      	ldr	r2, [pc, #176]	; (8004d38 <UART_CheckIdleState+0x148>)
 8004c88:	9200      	str	r2, [sp, #0]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f000 f858 	bl	8004d40 <UART_WaitOnFlagUntilTimeout>
 8004c90:	1e03      	subs	r3, r0, #0
 8004c92:	d03b      	beq.n	8004d0c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c94:	f3ef 8310 	mrs	r3, PRIMASK
 8004c98:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f383 8810 	msr	PRIMASK, r3
}
 8004ca8:	46c0      	nop			; (mov r8, r8)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4921      	ldr	r1, [pc, #132]	; (8004d3c <UART_CheckIdleState+0x14c>)
 8004cb6:	400a      	ands	r2, r1
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f383 8810 	msr	PRIMASK, r3
}
 8004cc4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8004cca:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ccc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cce:	633b      	str	r3, [r7, #48]	; 0x30
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	f383 8810 	msr	PRIMASK, r3
}
 8004cda:	46c0      	nop			; (mov r8, r8)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	438a      	bics	r2, r1
 8004cea:	609a      	str	r2, [r3, #8]
 8004cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	f383 8810 	msr	PRIMASK, r3
}
 8004cf6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2280      	movs	r2, #128	; 0x80
 8004cfc:	2120      	movs	r1, #32
 8004cfe:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2278      	movs	r2, #120	; 0x78
 8004d04:	2100      	movs	r1, #0
 8004d06:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e011      	b.n	8004d30 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2280      	movs	r2, #128	; 0x80
 8004d16:	2120      	movs	r1, #32
 8004d18:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2278      	movs	r2, #120	; 0x78
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	0018      	movs	r0, r3
 8004d32:	46bd      	mov	sp, r7
 8004d34:	b010      	add	sp, #64	; 0x40
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	01ffffff 	.word	0x01ffffff
 8004d3c:	fffffedf 	.word	0xfffffedf

08004d40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	603b      	str	r3, [r7, #0]
 8004d4c:	1dfb      	adds	r3, r7, #7
 8004d4e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d50:	e04b      	b.n	8004dea <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	3301      	adds	r3, #1
 8004d56:	d048      	beq.n	8004dea <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d58:	f7fc ff38 	bl	8001bcc <HAL_GetTick>
 8004d5c:	0002      	movs	r2, r0
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d302      	bcc.n	8004d6e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e04b      	b.n	8004e0a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2204      	movs	r2, #4
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	d035      	beq.n	8004dea <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	2208      	movs	r2, #8
 8004d86:	4013      	ands	r3, r2
 8004d88:	2b08      	cmp	r3, #8
 8004d8a:	d111      	bne.n	8004db0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2208      	movs	r2, #8
 8004d92:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	0018      	movs	r0, r3
 8004d98:	f000 f83c 	bl	8004e14 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2284      	movs	r2, #132	; 0x84
 8004da0:	2108      	movs	r1, #8
 8004da2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2278      	movs	r2, #120	; 0x78
 8004da8:	2100      	movs	r1, #0
 8004daa:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e02c      	b.n	8004e0a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	69da      	ldr	r2, [r3, #28]
 8004db6:	2380      	movs	r3, #128	; 0x80
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	401a      	ands	r2, r3
 8004dbc:	2380      	movs	r3, #128	; 0x80
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d112      	bne.n	8004dea <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2280      	movs	r2, #128	; 0x80
 8004dca:	0112      	lsls	r2, r2, #4
 8004dcc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	f000 f81f 	bl	8004e14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2284      	movs	r2, #132	; 0x84
 8004dda:	2120      	movs	r1, #32
 8004ddc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2278      	movs	r2, #120	; 0x78
 8004de2:	2100      	movs	r1, #0
 8004de4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e00f      	b.n	8004e0a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	4013      	ands	r3, r2
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	425a      	negs	r2, r3
 8004dfa:	4153      	adcs	r3, r2
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	001a      	movs	r2, r3
 8004e00:	1dfb      	adds	r3, r7, #7
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d0a4      	beq.n	8004d52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	b004      	add	sp, #16
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08e      	sub	sp, #56	; 0x38
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e20:	617b      	str	r3, [r7, #20]
  return(result);
 8004e22:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e24:	637b      	str	r3, [r7, #52]	; 0x34
 8004e26:	2301      	movs	r3, #1
 8004e28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	f383 8810 	msr	PRIMASK, r3
}
 8004e30:	46c0      	nop			; (mov r8, r8)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4926      	ldr	r1, [pc, #152]	; (8004ed8 <UART_EndRxTransfer+0xc4>)
 8004e3e:	400a      	ands	r2, r1
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	f383 8810 	msr	PRIMASK, r3
}
 8004e4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e52:	623b      	str	r3, [r7, #32]
  return(result);
 8004e54:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e56:	633b      	str	r3, [r7, #48]	; 0x30
 8004e58:	2301      	movs	r3, #1
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	f383 8810 	msr	PRIMASK, r3
}
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689a      	ldr	r2, [r3, #8]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2101      	movs	r1, #1
 8004e70:	438a      	bics	r2, r1
 8004e72:	609a      	str	r2, [r3, #8]
 8004e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e76:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7a:	f383 8810 	msr	PRIMASK, r3
}
 8004e7e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d118      	bne.n	8004eba <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e88:	f3ef 8310 	mrs	r3, PRIMASK
 8004e8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e8e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e92:	2301      	movs	r3, #1
 8004e94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f383 8810 	msr	PRIMASK, r3
}
 8004e9c:	46c0      	nop			; (mov r8, r8)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2110      	movs	r1, #16
 8004eaa:	438a      	bics	r2, r1
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f383 8810 	msr	PRIMASK, r3
}
 8004eb8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2280      	movs	r2, #128	; 0x80
 8004ebe:	2120      	movs	r1, #32
 8004ec0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	b00e      	add	sp, #56	; 0x38
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	46c0      	nop			; (mov r8, r8)
 8004ed8:	fffffedf 	.word	0xfffffedf

08004edc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	0002      	movs	r2, r0
 8004ee4:	1dbb      	adds	r3, r7, #6
 8004ee6:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004eec:	1dbb      	adds	r3, r7, #6
 8004eee:	2200      	movs	r2, #0
 8004ef0:	5e9b      	ldrsh	r3, [r3, r2]
 8004ef2:	2b84      	cmp	r3, #132	; 0x84
 8004ef4:	d006      	beq.n	8004f04 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8004ef6:	1dbb      	adds	r3, r7, #6
 8004ef8:	2200      	movs	r2, #0
 8004efa:	5e9a      	ldrsh	r2, [r3, r2]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	18d3      	adds	r3, r2, r3
 8004f00:	3303      	adds	r3, #3
 8004f02:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f04:	68fb      	ldr	r3, [r7, #12]
}
 8004f06:	0018      	movs	r0, r3
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	b004      	add	sp, #16
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f12:	f000 fcfd 	bl	8005910 <vTaskStartScheduler>
  
  return osOK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	0018      	movs	r0, r3
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f20:	b089      	sub	sp, #36	; 0x24
 8004f22:	af04      	add	r7, sp, #16
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d020      	beq.n	8004f72 <osThreadCreate+0x54>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d01c      	beq.n	8004f72 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685c      	ldr	r4, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691e      	ldr	r6, [r3, #16]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2208      	movs	r2, #8
 8004f48:	5e9b      	ldrsh	r3, [r3, r2]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	f7ff ffc6 	bl	8004edc <makeFreeRtosPriority>
              thread_def->buffer, thread_def->controlblock);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	695a      	ldr	r2, [r3, #20]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f58:	6839      	ldr	r1, [r7, #0]
 8004f5a:	9302      	str	r3, [sp, #8]
 8004f5c:	9201      	str	r2, [sp, #4]
 8004f5e:	9000      	str	r0, [sp, #0]
 8004f60:	000b      	movs	r3, r1
 8004f62:	0032      	movs	r2, r6
 8004f64:	0029      	movs	r1, r5
 8004f66:	0020      	movs	r0, r4
 8004f68:	f000 fb36 	bl	80055d8 <xTaskCreateStatic>
 8004f6c:	0003      	movs	r3, r0
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	e01d      	b.n	8004fae <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685c      	ldr	r4, [r3, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f7e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2208      	movs	r2, #8
 8004f84:	5e9b      	ldrsh	r3, [r3, r2]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f86:	0018      	movs	r0, r3
 8004f88:	f7ff ffa8 	bl	8004edc <makeFreeRtosPriority>
 8004f8c:	0001      	movs	r1, r0
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	230c      	movs	r3, #12
 8004f92:	18fb      	adds	r3, r7, r3
 8004f94:	9301      	str	r3, [sp, #4]
 8004f96:	9100      	str	r1, [sp, #0]
 8004f98:	0013      	movs	r3, r2
 8004f9a:	0032      	movs	r2, r6
 8004f9c:	0029      	movs	r1, r5
 8004f9e:	0020      	movs	r0, r4
 8004fa0:	f000 fb5e 	bl	8005660 <xTaskCreate>
 8004fa4:	0003      	movs	r3, r0
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d001      	beq.n	8004fae <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	e000      	b.n	8004fb0 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004fae:	68fb      	ldr	r3, [r7, #12]
}
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	b005      	add	sp, #20
 8004fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fb8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d001      	beq.n	8004fce <osDelay+0x16>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	e000      	b.n	8004fd0 <osDelay+0x18>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	f000 fc77 	bl	80058c4 <vTaskDelay>
  
  return osOK;
 8004fd6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004fd8:	0018      	movs	r0, r3
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	b004      	add	sp, #16
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3308      	adds	r3, #8
 8004fec:	001a      	movs	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	4252      	negs	r2, r2
 8004ff8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3308      	adds	r3, #8
 8004ffe:	001a      	movs	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3308      	adds	r3, #8
 8005008:	001a      	movs	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005014:	46c0      	nop			; (mov r8, r8)
 8005016:	46bd      	mov	sp, r7
 8005018:	b002      	add	sp, #8
 800501a:	bd80      	pop	{r7, pc}

0800501c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800502a:	46c0      	nop			; (mov r8, r8)
 800502c:	46bd      	mov	sp, r7
 800502e:	b002      	add	sp, #8
 8005030:	bd80      	pop	{r7, pc}

08005032 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b084      	sub	sp, #16
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	601a      	str	r2, [r3, #0]
}
 800506e:	46c0      	nop			; (mov r8, r8)
 8005070:	46bd      	mov	sp, r7
 8005072:	b004      	add	sp, #16
 8005074:	bd80      	pop	{r7, pc}

08005076 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b084      	sub	sp, #16
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	3301      	adds	r3, #1
 800508a:	d103      	bne.n	8005094 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	e00c      	b.n	80050ae <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3308      	adds	r3, #8
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	e002      	b.n	80050a2 <vListInsert+0x2c>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d2f6      	bcs.n	800509c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	601a      	str	r2, [r3, #0]
}
 80050da:	46c0      	nop			; (mov r8, r8)
 80050dc:	46bd      	mov	sp, r7
 80050de:	b004      	add	sp, #16
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b084      	sub	sp, #16
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6892      	ldr	r2, [r2, #8]
 80050f8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	6852      	ldr	r2, [r2, #4]
 8005102:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	429a      	cmp	r2, r3
 800510c:	d103      	bne.n	8005116 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689a      	ldr	r2, [r3, #8]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	1e5a      	subs	r2, r3, #1
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
}
 800512a:	0018      	movs	r0, r3
 800512c:	46bd      	mov	sp, r7
 800512e:	b004      	add	sp, #16
 8005130:	bd80      	pop	{r7, pc}

08005132 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <xQueueGenericReset+0x18>
 8005146:	b672      	cpsid	i
 8005148:	e7fe      	b.n	8005148 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800514a:	f001 f8e1 	bl	8006310 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	434b      	muls	r3, r1
 800515c:	18d2      	adds	r2, r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005178:	1e59      	subs	r1, r3, #1
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	434b      	muls	r3, r1
 8005180:	18d2      	adds	r2, r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2244      	movs	r2, #68	; 0x44
 800518a:	21ff      	movs	r1, #255	; 0xff
 800518c:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2245      	movs	r2, #69	; 0x45
 8005192:	21ff      	movs	r1, #255	; 0xff
 8005194:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10d      	bne.n	80051b8 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d013      	beq.n	80051cc <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	3310      	adds	r3, #16
 80051a8:	0018      	movs	r0, r3
 80051aa:	f000 fdb7 	bl	8005d1c <xTaskRemoveFromEventList>
 80051ae:	1e03      	subs	r3, r0, #0
 80051b0:	d00c      	beq.n	80051cc <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051b2:	f001 f89d 	bl	80062f0 <vPortYield>
 80051b6:	e009      	b.n	80051cc <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	3310      	adds	r3, #16
 80051bc:	0018      	movs	r0, r3
 80051be:	f7ff ff0f 	bl	8004fe0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3324      	adds	r3, #36	; 0x24
 80051c6:	0018      	movs	r0, r3
 80051c8:	f7ff ff0a 	bl	8004fe0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051cc:	f001 f8b2 	bl	8006334 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051d0:	2301      	movs	r3, #1
}
 80051d2:	0018      	movs	r0, r3
 80051d4:	46bd      	mov	sp, r7
 80051d6:	b004      	add	sp, #16
 80051d8:	bd80      	pop	{r7, pc}

080051da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80051da:	b590      	push	{r4, r7, lr}
 80051dc:	b08b      	sub	sp, #44	; 0x2c
 80051de:	af02      	add	r7, sp, #8
 80051e0:	60f8      	str	r0, [r7, #12]
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	1dfb      	adds	r3, r7, #7
 80051e6:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <xQueueGenericCreate+0x18>
 80051ee:	b672      	cpsid	i
 80051f0:	e7fe      	b.n	80051f0 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d102      	bne.n	80051fe <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80051f8:	2300      	movs	r3, #0
 80051fa:	61fb      	str	r3, [r7, #28]
 80051fc:	e003      	b.n	8005206 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	4353      	muls	r3, r2
 8005204:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	3348      	adds	r3, #72	; 0x48
 800520a:	0018      	movs	r0, r3
 800520c:	f001 f918 	bl	8006440 <pvPortMalloc>
 8005210:	0003      	movs	r3, r0
 8005212:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d012      	beq.n	8005240 <xQueueGenericCreate+0x66>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	3348      	adds	r3, #72	; 0x48
 8005222:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	2246      	movs	r2, #70	; 0x46
 8005228:	2100      	movs	r1, #0
 800522a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800522c:	1dfb      	adds	r3, r7, #7
 800522e:	781c      	ldrb	r4, [r3, #0]
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	68b9      	ldr	r1, [r7, #8]
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	0023      	movs	r3, r4
 800523c:	f000 f805 	bl	800524a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005240:	69bb      	ldr	r3, [r7, #24]
	}
 8005242:	0018      	movs	r0, r3
 8005244:	46bd      	mov	sp, r7
 8005246:	b009      	add	sp, #36	; 0x24
 8005248:	bd90      	pop	{r4, r7, pc}

0800524a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b084      	sub	sp, #16
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	607a      	str	r2, [r7, #4]
 8005256:	001a      	movs	r2, r3
 8005258:	1cfb      	adds	r3, r7, #3
 800525a:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d103      	bne.n	800526a <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	e002      	b.n	8005270 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	2101      	movs	r1, #1
 8005280:	0018      	movs	r0, r3
 8005282:	f7ff ff56 	bl	8005132 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005286:	46c0      	nop			; (mov r8, r8)
 8005288:	46bd      	mov	sp, r7
 800528a:	b004      	add	sp, #16
 800528c:	bd80      	pop	{r7, pc}

0800528e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b08a      	sub	sp, #40	; 0x28
 8005292:	af00      	add	r7, sp, #0
 8005294:	60f8      	str	r0, [r7, #12]
 8005296:	60b9      	str	r1, [r7, #8]
 8005298:	607a      	str	r2, [r7, #4]
 800529a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800529c:	2300      	movs	r3, #0
 800529e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <xQueueGenericSend+0x20>
 80052aa:	b672      	cpsid	i
 80052ac:	e7fe      	b.n	80052ac <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d103      	bne.n	80052bc <xQueueGenericSend+0x2e>
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <xQueueGenericSend+0x32>
 80052bc:	2301      	movs	r3, #1
 80052be:	e000      	b.n	80052c2 <xQueueGenericSend+0x34>
 80052c0:	2300      	movs	r3, #0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <xQueueGenericSend+0x3c>
 80052c6:	b672      	cpsid	i
 80052c8:	e7fe      	b.n	80052c8 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d103      	bne.n	80052d8 <xQueueGenericSend+0x4a>
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d101      	bne.n	80052dc <xQueueGenericSend+0x4e>
 80052d8:	2301      	movs	r3, #1
 80052da:	e000      	b.n	80052de <xQueueGenericSend+0x50>
 80052dc:	2300      	movs	r3, #0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <xQueueGenericSend+0x58>
 80052e2:	b672      	cpsid	i
 80052e4:	e7fe      	b.n	80052e4 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052e6:	f000 feab 	bl	8006040 <xTaskGetSchedulerState>
 80052ea:	1e03      	subs	r3, r0, #0
 80052ec:	d102      	bne.n	80052f4 <xQueueGenericSend+0x66>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <xQueueGenericSend+0x6a>
 80052f4:	2301      	movs	r3, #1
 80052f6:	e000      	b.n	80052fa <xQueueGenericSend+0x6c>
 80052f8:	2300      	movs	r3, #0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <xQueueGenericSend+0x74>
 80052fe:	b672      	cpsid	i
 8005300:	e7fe      	b.n	8005300 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005302:	f001 f805 	bl	8006310 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530e:	429a      	cmp	r2, r3
 8005310:	d302      	bcc.n	8005318 <xQueueGenericSend+0x8a>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b02      	cmp	r3, #2
 8005316:	d11e      	bne.n	8005356 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	68b9      	ldr	r1, [r7, #8]
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	0018      	movs	r0, r3
 8005320:	f000 f879 	bl	8005416 <prvCopyDataToQueue>
 8005324:	0003      	movs	r3, r0
 8005326:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	2b00      	cmp	r3, #0
 800532e:	d009      	beq.n	8005344 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	3324      	adds	r3, #36	; 0x24
 8005334:	0018      	movs	r0, r3
 8005336:	f000 fcf1 	bl	8005d1c <xTaskRemoveFromEventList>
 800533a:	1e03      	subs	r3, r0, #0
 800533c:	d007      	beq.n	800534e <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800533e:	f000 ffd7 	bl	80062f0 <vPortYield>
 8005342:	e004      	b.n	800534e <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800534a:	f000 ffd1 	bl	80062f0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800534e:	f000 fff1 	bl	8006334 <vPortExitCritical>
				return pdPASS;
 8005352:	2301      	movs	r3, #1
 8005354:	e05b      	b.n	800540e <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d103      	bne.n	8005364 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800535c:	f000 ffea 	bl	8006334 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005360:	2300      	movs	r3, #0
 8005362:	e054      	b.n	800540e <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	2b00      	cmp	r3, #0
 8005368:	d106      	bne.n	8005378 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800536a:	2314      	movs	r3, #20
 800536c:	18fb      	adds	r3, r7, r3
 800536e:	0018      	movs	r0, r3
 8005370:	f000 fd30 	bl	8005dd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005374:	2301      	movs	r3, #1
 8005376:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005378:	f000 ffdc 	bl	8006334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800537c:	f000 fb16 	bl	80059ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005380:	f000 ffc6 	bl	8006310 <vPortEnterCritical>
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	2244      	movs	r2, #68	; 0x44
 8005388:	5c9b      	ldrb	r3, [r3, r2]
 800538a:	b25b      	sxtb	r3, r3
 800538c:	3301      	adds	r3, #1
 800538e:	d103      	bne.n	8005398 <xQueueGenericSend+0x10a>
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	2244      	movs	r2, #68	; 0x44
 8005394:	2100      	movs	r1, #0
 8005396:	5499      	strb	r1, [r3, r2]
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	2245      	movs	r2, #69	; 0x45
 800539c:	5c9b      	ldrb	r3, [r3, r2]
 800539e:	b25b      	sxtb	r3, r3
 80053a0:	3301      	adds	r3, #1
 80053a2:	d103      	bne.n	80053ac <xQueueGenericSend+0x11e>
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	2245      	movs	r2, #69	; 0x45
 80053a8:	2100      	movs	r1, #0
 80053aa:	5499      	strb	r1, [r3, r2]
 80053ac:	f000 ffc2 	bl	8006334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053b0:	1d3a      	adds	r2, r7, #4
 80053b2:	2314      	movs	r3, #20
 80053b4:	18fb      	adds	r3, r7, r3
 80053b6:	0011      	movs	r1, r2
 80053b8:	0018      	movs	r0, r3
 80053ba:	f000 fd1f 	bl	8005dfc <xTaskCheckForTimeOut>
 80053be:	1e03      	subs	r3, r0, #0
 80053c0:	d11e      	bne.n	8005400 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	0018      	movs	r0, r3
 80053c6:	f000 f8ef 	bl	80055a8 <prvIsQueueFull>
 80053ca:	1e03      	subs	r3, r0, #0
 80053cc:	d011      	beq.n	80053f2 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	3310      	adds	r3, #16
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	0011      	movs	r1, r2
 80053d6:	0018      	movs	r0, r3
 80053d8:	f000 fc82 	bl	8005ce0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	0018      	movs	r0, r3
 80053e0:	f000 f884 	bl	80054ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80053e4:	f000 faee 	bl	80059c4 <xTaskResumeAll>
 80053e8:	1e03      	subs	r3, r0, #0
 80053ea:	d18a      	bne.n	8005302 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80053ec:	f000 ff80 	bl	80062f0 <vPortYield>
 80053f0:	e787      	b.n	8005302 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	0018      	movs	r0, r3
 80053f6:	f000 f879 	bl	80054ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053fa:	f000 fae3 	bl	80059c4 <xTaskResumeAll>
 80053fe:	e780      	b.n	8005302 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	0018      	movs	r0, r3
 8005404:	f000 f872 	bl	80054ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005408:	f000 fadc 	bl	80059c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800540c:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800540e:	0018      	movs	r0, r3
 8005410:	46bd      	mov	sp, r7
 8005412:	b00a      	add	sp, #40	; 0x28
 8005414:	bd80      	pop	{r7, pc}

08005416 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b086      	sub	sp, #24
 800541a:	af00      	add	r7, sp, #0
 800541c:	60f8      	str	r0, [r7, #12]
 800541e:	60b9      	str	r1, [r7, #8]
 8005420:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005422:	2300      	movs	r3, #0
 8005424:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10e      	bne.n	8005452 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d14e      	bne.n	80054da <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	0018      	movs	r0, r3
 8005442:	f000 fe19 	bl	8006078 <xTaskPriorityDisinherit>
 8005446:	0003      	movs	r3, r0
 8005448:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	609a      	str	r2, [r3, #8]
 8005450:	e043      	b.n	80054da <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d119      	bne.n	800548c <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6858      	ldr	r0, [r3, #4]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	0019      	movs	r1, r3
 8005464:	f001 f9be 	bl	80067e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005470:	18d2      	adds	r2, r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	429a      	cmp	r2, r3
 8005480:	d32b      	bcc.n	80054da <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	605a      	str	r2, [r3, #4]
 800548a:	e026      	b.n	80054da <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	68d8      	ldr	r0, [r3, #12]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	0019      	movs	r1, r3
 8005498:	f001 f9a4 	bl	80067e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	68da      	ldr	r2, [r3, #12]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a4:	425b      	negs	r3, r3
 80054a6:	18d2      	adds	r2, r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d207      	bcs.n	80054c8 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	425b      	negs	r3, r3
 80054c2:	18d2      	adds	r2, r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d105      	bne.n	80054da <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80054e2:	697b      	ldr	r3, [r7, #20]
}
 80054e4:	0018      	movs	r0, r3
 80054e6:	46bd      	mov	sp, r7
 80054e8:	b006      	add	sp, #24
 80054ea:	bd80      	pop	{r7, pc}

080054ec <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80054f4:	f000 ff0c 	bl	8006310 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80054f8:	230f      	movs	r3, #15
 80054fa:	18fb      	adds	r3, r7, r3
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	2145      	movs	r1, #69	; 0x45
 8005500:	5c52      	ldrb	r2, [r2, r1]
 8005502:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005504:	e013      	b.n	800552e <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	2b00      	cmp	r3, #0
 800550c:	d016      	beq.n	800553c <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	3324      	adds	r3, #36	; 0x24
 8005512:	0018      	movs	r0, r3
 8005514:	f000 fc02 	bl	8005d1c <xTaskRemoveFromEventList>
 8005518:	1e03      	subs	r3, r0, #0
 800551a:	d001      	beq.n	8005520 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800551c:	f000 fcbe 	bl	8005e9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005520:	210f      	movs	r1, #15
 8005522:	187b      	adds	r3, r7, r1
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	3b01      	subs	r3, #1
 8005528:	b2da      	uxtb	r2, r3
 800552a:	187b      	adds	r3, r7, r1
 800552c:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800552e:	230f      	movs	r3, #15
 8005530:	18fb      	adds	r3, r7, r3
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	b25b      	sxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	dce5      	bgt.n	8005506 <prvUnlockQueue+0x1a>
 800553a:	e000      	b.n	800553e <prvUnlockQueue+0x52>
					break;
 800553c:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2245      	movs	r2, #69	; 0x45
 8005542:	21ff      	movs	r1, #255	; 0xff
 8005544:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005546:	f000 fef5 	bl	8006334 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800554a:	f000 fee1 	bl	8006310 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800554e:	230e      	movs	r3, #14
 8005550:	18fb      	adds	r3, r7, r3
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	2144      	movs	r1, #68	; 0x44
 8005556:	5c52      	ldrb	r2, [r2, r1]
 8005558:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800555a:	e013      	b.n	8005584 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d016      	beq.n	8005592 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3310      	adds	r3, #16
 8005568:	0018      	movs	r0, r3
 800556a:	f000 fbd7 	bl	8005d1c <xTaskRemoveFromEventList>
 800556e:	1e03      	subs	r3, r0, #0
 8005570:	d001      	beq.n	8005576 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8005572:	f000 fc93 	bl	8005e9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005576:	210e      	movs	r1, #14
 8005578:	187b      	adds	r3, r7, r1
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	3b01      	subs	r3, #1
 800557e:	b2da      	uxtb	r2, r3
 8005580:	187b      	adds	r3, r7, r1
 8005582:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005584:	230e      	movs	r3, #14
 8005586:	18fb      	adds	r3, r7, r3
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	b25b      	sxtb	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	dce5      	bgt.n	800555c <prvUnlockQueue+0x70>
 8005590:	e000      	b.n	8005594 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8005592:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2244      	movs	r2, #68	; 0x44
 8005598:	21ff      	movs	r1, #255	; 0xff
 800559a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800559c:	f000 feca 	bl	8006334 <vPortExitCritical>
}
 80055a0:	46c0      	nop			; (mov r8, r8)
 80055a2:	46bd      	mov	sp, r7
 80055a4:	b004      	add	sp, #16
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055b0:	f000 feae 	bl	8006310 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055bc:	429a      	cmp	r2, r3
 80055be:	d102      	bne.n	80055c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80055c0:	2301      	movs	r3, #1
 80055c2:	60fb      	str	r3, [r7, #12]
 80055c4:	e001      	b.n	80055ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80055c6:	2300      	movs	r3, #0
 80055c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055ca:	f000 feb3 	bl	8006334 <vPortExitCritical>

	return xReturn;
 80055ce:	68fb      	ldr	r3, [r7, #12]
}
 80055d0:	0018      	movs	r0, r3
 80055d2:	46bd      	mov	sp, r7
 80055d4:	b004      	add	sp, #16
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80055d8:	b590      	push	{r4, r7, lr}
 80055da:	b08d      	sub	sp, #52	; 0x34
 80055dc:	af04      	add	r7, sp, #16
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
 80055e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80055e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <xTaskCreateStatic+0x18>
 80055ec:	b672      	cpsid	i
 80055ee:	e7fe      	b.n	80055ee <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80055f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <xTaskCreateStatic+0x22>
 80055f6:	b672      	cpsid	i
 80055f8:	e7fe      	b.n	80055f8 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80055fa:	2354      	movs	r3, #84	; 0x54
 80055fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	2b54      	cmp	r3, #84	; 0x54
 8005602:	d001      	beq.n	8005608 <xTaskCreateStatic+0x30>
 8005604:	b672      	cpsid	i
 8005606:	e7fe      	b.n	8005606 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005608:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560c:	2b00      	cmp	r3, #0
 800560e:	d020      	beq.n	8005652 <xTaskCreateStatic+0x7a>
 8005610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005612:	2b00      	cmp	r3, #0
 8005614:	d01d      	beq.n	8005652 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005618:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800561e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	2251      	movs	r2, #81	; 0x51
 8005624:	2102      	movs	r1, #2
 8005626:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005628:	683c      	ldr	r4, [r7, #0]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	68b9      	ldr	r1, [r7, #8]
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	2300      	movs	r3, #0
 8005632:	9303      	str	r3, [sp, #12]
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	9302      	str	r3, [sp, #8]
 8005638:	2318      	movs	r3, #24
 800563a:	18fb      	adds	r3, r7, r3
 800563c:	9301      	str	r3, [sp, #4]
 800563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	0023      	movs	r3, r4
 8005644:	f000 f858 	bl	80056f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	0018      	movs	r0, r3
 800564c:	f000 f8d6 	bl	80057fc <prvAddNewTaskToReadyList>
 8005650:	e001      	b.n	8005656 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8005652:	2300      	movs	r3, #0
 8005654:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005656:	69bb      	ldr	r3, [r7, #24]
	}
 8005658:	0018      	movs	r0, r3
 800565a:	46bd      	mov	sp, r7
 800565c:	b009      	add	sp, #36	; 0x24
 800565e:	bd90      	pop	{r4, r7, pc}

08005660 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005660:	b590      	push	{r4, r7, lr}
 8005662:	b08d      	sub	sp, #52	; 0x34
 8005664:	af04      	add	r7, sp, #16
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	603b      	str	r3, [r7, #0]
 800566c:	1dbb      	adds	r3, r7, #6
 800566e:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005670:	1dbb      	adds	r3, r7, #6
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	0018      	movs	r0, r3
 8005678:	f000 fee2 	bl	8006440 <pvPortMalloc>
 800567c:	0003      	movs	r3, r0
 800567e:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d010      	beq.n	80056a8 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005686:	2054      	movs	r0, #84	; 0x54
 8005688:	f000 feda 	bl	8006440 <pvPortMalloc>
 800568c:	0003      	movs	r3, r0
 800568e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	631a      	str	r2, [r3, #48]	; 0x30
 800569c:	e006      	b.n	80056ac <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	0018      	movs	r0, r3
 80056a2:	f000 ff73 	bl	800658c <vPortFree>
 80056a6:	e001      	b.n	80056ac <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80056a8:	2300      	movs	r3, #0
 80056aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d01a      	beq.n	80056e8 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	2251      	movs	r2, #81	; 0x51
 80056b6:	2100      	movs	r1, #0
 80056b8:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80056ba:	1dbb      	adds	r3, r7, #6
 80056bc:	881a      	ldrh	r2, [r3, #0]
 80056be:	683c      	ldr	r4, [r7, #0]
 80056c0:	68b9      	ldr	r1, [r7, #8]
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	2300      	movs	r3, #0
 80056c6:	9303      	str	r3, [sp, #12]
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	9302      	str	r3, [sp, #8]
 80056cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ce:	9301      	str	r3, [sp, #4]
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	0023      	movs	r3, r4
 80056d6:	f000 f80f 	bl	80056f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	0018      	movs	r0, r3
 80056de:	f000 f88d 	bl	80057fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80056e2:	2301      	movs	r3, #1
 80056e4:	61bb      	str	r3, [r7, #24]
 80056e6:	e002      	b.n	80056ee <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80056e8:	2301      	movs	r3, #1
 80056ea:	425b      	negs	r3, r3
 80056ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80056ee:	69bb      	ldr	r3, [r7, #24]
	}
 80056f0:	0018      	movs	r0, r3
 80056f2:	46bd      	mov	sp, r7
 80056f4:	b009      	add	sp, #36	; 0x24
 80056f6:	bd90      	pop	{r4, r7, pc}

080056f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	493a      	ldr	r1, [pc, #232]	; (80057f8 <prvInitialiseNewTask+0x100>)
 800570e:	468c      	mov	ip, r1
 8005710:	4463      	add	r3, ip
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	18d3      	adds	r3, r2, r3
 8005716:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	2207      	movs	r2, #7
 800571c:	4393      	bics	r3, r2
 800571e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	2207      	movs	r2, #7
 8005724:	4013      	ands	r3, r2
 8005726:	d001      	beq.n	800572c <prvInitialiseNewTask+0x34>
 8005728:	b672      	cpsid	i
 800572a:	e7fe      	b.n	800572a <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d020      	beq.n	8005774 <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005732:	2300      	movs	r3, #0
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	e013      	b.n	8005760 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	18d3      	adds	r3, r2, r3
 800573e:	7818      	ldrb	r0, [r3, #0]
 8005740:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005742:	2134      	movs	r1, #52	; 0x34
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	18d3      	adds	r3, r2, r3
 8005748:	185b      	adds	r3, r3, r1
 800574a:	1c02      	adds	r2, r0, #0
 800574c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	18d3      	adds	r3, r2, r3
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d006      	beq.n	8005768 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	3301      	adds	r3, #1
 800575e:	617b      	str	r3, [r7, #20]
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	2b0f      	cmp	r3, #15
 8005764:	d9e8      	bls.n	8005738 <prvInitialiseNewTask+0x40>
 8005766:	e000      	b.n	800576a <prvInitialiseNewTask+0x72>
			{
				break;
 8005768:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800576a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576c:	2243      	movs	r2, #67	; 0x43
 800576e:	2100      	movs	r1, #0
 8005770:	5499      	strb	r1, [r3, r2]
 8005772:	e003      	b.n	800577c <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005776:	2234      	movs	r2, #52	; 0x34
 8005778:	2100      	movs	r1, #0
 800577a:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	2b06      	cmp	r3, #6
 8005780:	d901      	bls.n	8005786 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005782:	2306      	movs	r3, #6
 8005784:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005788:	6a3a      	ldr	r2, [r7, #32]
 800578a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	6a3a      	ldr	r2, [r7, #32]
 8005790:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005794:	2200      	movs	r2, #0
 8005796:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	3304      	adds	r3, #4
 800579c:	0018      	movs	r0, r3
 800579e:	f7ff fc3d 	bl	800501c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80057a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a4:	3318      	adds	r3, #24
 80057a6:	0018      	movs	r0, r3
 80057a8:	f7ff fc38 	bl	800501c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80057ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	2207      	movs	r2, #7
 80057b6:	1ad2      	subs	r2, r2, r3
 80057b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80057bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057c0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80057c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c4:	2200      	movs	r2, #0
 80057c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80057c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ca:	2250      	movs	r2, #80	; 0x50
 80057cc:	2100      	movs	r1, #0
 80057ce:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	68f9      	ldr	r1, [r7, #12]
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	0018      	movs	r0, r3
 80057d8:	f000 fcfe 	bl	80061d8 <pxPortInitialiseStack>
 80057dc:	0002      	movs	r2, r0
 80057de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057ee:	46c0      	nop			; (mov r8, r8)
 80057f0:	46bd      	mov	sp, r7
 80057f2:	b006      	add	sp, #24
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	46c0      	nop			; (mov r8, r8)
 80057f8:	3fffffff 	.word	0x3fffffff

080057fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005804:	f000 fd84 	bl	8006310 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005808:	4b28      	ldr	r3, [pc, #160]	; (80058ac <prvAddNewTaskToReadyList+0xb0>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	4b27      	ldr	r3, [pc, #156]	; (80058ac <prvAddNewTaskToReadyList+0xb0>)
 8005810:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005812:	4b27      	ldr	r3, [pc, #156]	; (80058b0 <prvAddNewTaskToReadyList+0xb4>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d109      	bne.n	800582e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800581a:	4b25      	ldr	r3, [pc, #148]	; (80058b0 <prvAddNewTaskToReadyList+0xb4>)
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005820:	4b22      	ldr	r3, [pc, #136]	; (80058ac <prvAddNewTaskToReadyList+0xb0>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d110      	bne.n	800584a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005828:	f000 fb52 	bl	8005ed0 <prvInitialiseTaskLists>
 800582c:	e00d      	b.n	800584a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800582e:	4b21      	ldr	r3, [pc, #132]	; (80058b4 <prvAddNewTaskToReadyList+0xb8>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d109      	bne.n	800584a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005836:	4b1e      	ldr	r3, [pc, #120]	; (80058b0 <prvAddNewTaskToReadyList+0xb4>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	429a      	cmp	r2, r3
 8005842:	d802      	bhi.n	800584a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005844:	4b1a      	ldr	r3, [pc, #104]	; (80058b0 <prvAddNewTaskToReadyList+0xb4>)
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800584a:	4b1b      	ldr	r3, [pc, #108]	; (80058b8 <prvAddNewTaskToReadyList+0xbc>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	4b19      	ldr	r3, [pc, #100]	; (80058b8 <prvAddNewTaskToReadyList+0xbc>)
 8005852:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005858:	4b18      	ldr	r3, [pc, #96]	; (80058bc <prvAddNewTaskToReadyList+0xc0>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	429a      	cmp	r2, r3
 800585e:	d903      	bls.n	8005868 <prvAddNewTaskToReadyList+0x6c>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005864:	4b15      	ldr	r3, [pc, #84]	; (80058bc <prvAddNewTaskToReadyList+0xc0>)
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586c:	0013      	movs	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	189b      	adds	r3, r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4a12      	ldr	r2, [pc, #72]	; (80058c0 <prvAddNewTaskToReadyList+0xc4>)
 8005876:	189a      	adds	r2, r3, r2
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	3304      	adds	r3, #4
 800587c:	0019      	movs	r1, r3
 800587e:	0010      	movs	r0, r2
 8005880:	f7ff fbd7 	bl	8005032 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005884:	f000 fd56 	bl	8006334 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005888:	4b0a      	ldr	r3, [pc, #40]	; (80058b4 <prvAddNewTaskToReadyList+0xb8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d008      	beq.n	80058a2 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005890:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <prvAddNewTaskToReadyList+0xb4>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589a:	429a      	cmp	r2, r3
 800589c:	d201      	bcs.n	80058a2 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800589e:	f000 fd27 	bl	80062f0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058a2:	46c0      	nop			; (mov r8, r8)
 80058a4:	46bd      	mov	sp, r7
 80058a6:	b002      	add	sp, #8
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	46c0      	nop			; (mov r8, r8)
 80058ac:	200005ec 	.word	0x200005ec
 80058b0:	200004ec 	.word	0x200004ec
 80058b4:	200005f8 	.word	0x200005f8
 80058b8:	20000608 	.word	0x20000608
 80058bc:	200005f4 	.word	0x200005f4
 80058c0:	200004f0 	.word	0x200004f0

080058c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80058cc:	2300      	movs	r3, #0
 80058ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d010      	beq.n	80058f8 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80058d6:	4b0d      	ldr	r3, [pc, #52]	; (800590c <vTaskDelay+0x48>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <vTaskDelay+0x1e>
 80058de:	b672      	cpsid	i
 80058e0:	e7fe      	b.n	80058e0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80058e2:	f000 f863 	bl	80059ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2100      	movs	r1, #0
 80058ea:	0018      	movs	r0, r3
 80058ec:	f000 fc20 	bl	8006130 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80058f0:	f000 f868 	bl	80059c4 <xTaskResumeAll>
 80058f4:	0003      	movs	r3, r0
 80058f6:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80058fe:	f000 fcf7 	bl	80062f0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005902:	46c0      	nop			; (mov r8, r8)
 8005904:	46bd      	mov	sp, r7
 8005906:	b004      	add	sp, #16
 8005908:	bd80      	pop	{r7, pc}
 800590a:	46c0      	nop			; (mov r8, r8)
 800590c:	20000614 	.word	0x20000614

08005910 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005910:	b590      	push	{r4, r7, lr}
 8005912:	b089      	sub	sp, #36	; 0x24
 8005914:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005916:	2300      	movs	r3, #0
 8005918:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800591a:	2300      	movs	r3, #0
 800591c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800591e:	003a      	movs	r2, r7
 8005920:	1d39      	adds	r1, r7, #4
 8005922:	2308      	movs	r3, #8
 8005924:	18fb      	adds	r3, r7, r3
 8005926:	0018      	movs	r0, r3
 8005928:	f7fb fc78 	bl	800121c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800592c:	683c      	ldr	r4, [r7, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	4918      	ldr	r1, [pc, #96]	; (8005994 <vTaskStartScheduler+0x84>)
 8005934:	4818      	ldr	r0, [pc, #96]	; (8005998 <vTaskStartScheduler+0x88>)
 8005936:	9202      	str	r2, [sp, #8]
 8005938:	9301      	str	r3, [sp, #4]
 800593a:	2300      	movs	r3, #0
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	2300      	movs	r3, #0
 8005940:	0022      	movs	r2, r4
 8005942:	f7ff fe49 	bl	80055d8 <xTaskCreateStatic>
 8005946:	0002      	movs	r2, r0
 8005948:	4b14      	ldr	r3, [pc, #80]	; (800599c <vTaskStartScheduler+0x8c>)
 800594a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800594c:	4b13      	ldr	r3, [pc, #76]	; (800599c <vTaskStartScheduler+0x8c>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005954:	2301      	movs	r3, #1
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	e001      	b.n	800595e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d10d      	bne.n	8005980 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8005964:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005966:	4b0e      	ldr	r3, [pc, #56]	; (80059a0 <vTaskStartScheduler+0x90>)
 8005968:	2201      	movs	r2, #1
 800596a:	4252      	negs	r2, r2
 800596c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800596e:	4b0d      	ldr	r3, [pc, #52]	; (80059a4 <vTaskStartScheduler+0x94>)
 8005970:	2201      	movs	r2, #1
 8005972:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005974:	4b0c      	ldr	r3, [pc, #48]	; (80059a8 <vTaskStartScheduler+0x98>)
 8005976:	2200      	movs	r2, #0
 8005978:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800597a:	f000 fc95 	bl	80062a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800597e:	e004      	b.n	800598a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	3301      	adds	r3, #1
 8005984:	d101      	bne.n	800598a <vTaskStartScheduler+0x7a>
 8005986:	b672      	cpsid	i
 8005988:	e7fe      	b.n	8005988 <vTaskStartScheduler+0x78>
}
 800598a:	46c0      	nop			; (mov r8, r8)
 800598c:	46bd      	mov	sp, r7
 800598e:	b005      	add	sp, #20
 8005990:	bd90      	pop	{r4, r7, pc}
 8005992:	46c0      	nop			; (mov r8, r8)
 8005994:	08006860 	.word	0x08006860
 8005998:	08005eb1 	.word	0x08005eb1
 800599c:	20000610 	.word	0x20000610
 80059a0:	2000060c 	.word	0x2000060c
 80059a4:	200005f8 	.word	0x200005f8
 80059a8:	200005f0 	.word	0x200005f0

080059ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80059b0:	4b03      	ldr	r3, [pc, #12]	; (80059c0 <vTaskSuspendAll+0x14>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	4b02      	ldr	r3, [pc, #8]	; (80059c0 <vTaskSuspendAll+0x14>)
 80059b8:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 80059ba:	46c0      	nop			; (mov r8, r8)
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	20000614 	.word	0x20000614

080059c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80059ca:	2300      	movs	r3, #0
 80059cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80059ce:	2300      	movs	r3, #0
 80059d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80059d2:	4b3a      	ldr	r3, [pc, #232]	; (8005abc <xTaskResumeAll+0xf8>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <xTaskResumeAll+0x1a>
 80059da:	b672      	cpsid	i
 80059dc:	e7fe      	b.n	80059dc <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80059de:	f000 fc97 	bl	8006310 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80059e2:	4b36      	ldr	r3, [pc, #216]	; (8005abc <xTaskResumeAll+0xf8>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	1e5a      	subs	r2, r3, #1
 80059e8:	4b34      	ldr	r3, [pc, #208]	; (8005abc <xTaskResumeAll+0xf8>)
 80059ea:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059ec:	4b33      	ldr	r3, [pc, #204]	; (8005abc <xTaskResumeAll+0xf8>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d15b      	bne.n	8005aac <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059f4:	4b32      	ldr	r3, [pc, #200]	; (8005ac0 <xTaskResumeAll+0xfc>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d057      	beq.n	8005aac <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059fc:	e02f      	b.n	8005a5e <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059fe:	4b31      	ldr	r3, [pc, #196]	; (8005ac4 <xTaskResumeAll+0x100>)
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	3318      	adds	r3, #24
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	f7ff fb69 	bl	80050e2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	3304      	adds	r3, #4
 8005a14:	0018      	movs	r0, r3
 8005a16:	f7ff fb64 	bl	80050e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1e:	4b2a      	ldr	r3, [pc, #168]	; (8005ac8 <xTaskResumeAll+0x104>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d903      	bls.n	8005a2e <xTaskResumeAll+0x6a>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2a:	4b27      	ldr	r3, [pc, #156]	; (8005ac8 <xTaskResumeAll+0x104>)
 8005a2c:	601a      	str	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a32:	0013      	movs	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	189b      	adds	r3, r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4a24      	ldr	r2, [pc, #144]	; (8005acc <xTaskResumeAll+0x108>)
 8005a3c:	189a      	adds	r2, r3, r2
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	3304      	adds	r3, #4
 8005a42:	0019      	movs	r1, r3
 8005a44:	0010      	movs	r0, r2
 8005a46:	f7ff faf4 	bl	8005032 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4e:	4b20      	ldr	r3, [pc, #128]	; (8005ad0 <xTaskResumeAll+0x10c>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d302      	bcc.n	8005a5e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8005a58:	4b1e      	ldr	r3, [pc, #120]	; (8005ad4 <xTaskResumeAll+0x110>)
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a5e:	4b19      	ldr	r3, [pc, #100]	; (8005ac4 <xTaskResumeAll+0x100>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1cb      	bne.n	80059fe <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a6c:	f000 faca 	bl	8006004 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005a70:	4b19      	ldr	r3, [pc, #100]	; (8005ad8 <xTaskResumeAll+0x114>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00f      	beq.n	8005a9c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a7c:	f000 f82e 	bl	8005adc <xTaskIncrementTick>
 8005a80:	1e03      	subs	r3, r0, #0
 8005a82:	d002      	beq.n	8005a8a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8005a84:	4b13      	ldr	r3, [pc, #76]	; (8005ad4 <xTaskResumeAll+0x110>)
 8005a86:	2201      	movs	r2, #1
 8005a88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1f2      	bne.n	8005a7c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8005a96:	4b10      	ldr	r3, [pc, #64]	; (8005ad8 <xTaskResumeAll+0x114>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a9c:	4b0d      	ldr	r3, [pc, #52]	; (8005ad4 <xTaskResumeAll+0x110>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d003      	beq.n	8005aac <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005aa8:	f000 fc22 	bl	80062f0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005aac:	f000 fc42 	bl	8006334 <vPortExitCritical>

	return xAlreadyYielded;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
}
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	b004      	add	sp, #16
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	46c0      	nop			; (mov r8, r8)
 8005abc:	20000614 	.word	0x20000614
 8005ac0:	200005ec 	.word	0x200005ec
 8005ac4:	200005ac 	.word	0x200005ac
 8005ac8:	200005f4 	.word	0x200005f4
 8005acc:	200004f0 	.word	0x200004f0
 8005ad0:	200004ec 	.word	0x200004ec
 8005ad4:	20000600 	.word	0x20000600
 8005ad8:	200005fc 	.word	0x200005fc

08005adc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ae6:	4b4a      	ldr	r3, [pc, #296]	; (8005c10 <xTaskIncrementTick+0x134>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d000      	beq.n	8005af0 <xTaskIncrementTick+0x14>
 8005aee:	e07e      	b.n	8005bee <xTaskIncrementTick+0x112>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005af0:	4b48      	ldr	r3, [pc, #288]	; (8005c14 <xTaskIncrementTick+0x138>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3301      	adds	r3, #1
 8005af6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005af8:	4b46      	ldr	r3, [pc, #280]	; (8005c14 <xTaskIncrementTick+0x138>)
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d117      	bne.n	8005b34 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b04:	4b44      	ldr	r3, [pc, #272]	; (8005c18 <xTaskIncrementTick+0x13c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <xTaskIncrementTick+0x36>
 8005b0e:	b672      	cpsid	i
 8005b10:	e7fe      	b.n	8005b10 <xTaskIncrementTick+0x34>
 8005b12:	4b41      	ldr	r3, [pc, #260]	; (8005c18 <xTaskIncrementTick+0x13c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	4b40      	ldr	r3, [pc, #256]	; (8005c1c <xTaskIncrementTick+0x140>)
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	4b3e      	ldr	r3, [pc, #248]	; (8005c18 <xTaskIncrementTick+0x13c>)
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	4b3e      	ldr	r3, [pc, #248]	; (8005c1c <xTaskIncrementTick+0x140>)
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	4b3e      	ldr	r3, [pc, #248]	; (8005c20 <xTaskIncrementTick+0x144>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	4b3c      	ldr	r3, [pc, #240]	; (8005c20 <xTaskIncrementTick+0x144>)
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	f000 fa68 	bl	8006004 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b34:	4b3b      	ldr	r3, [pc, #236]	; (8005c24 <xTaskIncrementTick+0x148>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d349      	bcc.n	8005bd2 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b3e:	4b36      	ldr	r3, [pc, #216]	; (8005c18 <xTaskIncrementTick+0x13c>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d104      	bne.n	8005b52 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b48:	4b36      	ldr	r3, [pc, #216]	; (8005c24 <xTaskIncrementTick+0x148>)
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	4252      	negs	r2, r2
 8005b4e:	601a      	str	r2, [r3, #0]
					break;
 8005b50:	e03f      	b.n	8005bd2 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b52:	4b31      	ldr	r3, [pc, #196]	; (8005c18 <xTaskIncrementTick+0x13c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d203      	bcs.n	8005b72 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b6a:	4b2e      	ldr	r3, [pc, #184]	; (8005c24 <xTaskIncrementTick+0x148>)
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b70:	e02f      	b.n	8005bd2 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	3304      	adds	r3, #4
 8005b76:	0018      	movs	r0, r3
 8005b78:	f7ff fab3 	bl	80050e2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d004      	beq.n	8005b8e <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	3318      	adds	r3, #24
 8005b88:	0018      	movs	r0, r3
 8005b8a:	f7ff faaa 	bl	80050e2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b92:	4b25      	ldr	r3, [pc, #148]	; (8005c28 <xTaskIncrementTick+0x14c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d903      	bls.n	8005ba2 <xTaskIncrementTick+0xc6>
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9e:	4b22      	ldr	r3, [pc, #136]	; (8005c28 <xTaskIncrementTick+0x14c>)
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba6:	0013      	movs	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	189b      	adds	r3, r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4a1f      	ldr	r2, [pc, #124]	; (8005c2c <xTaskIncrementTick+0x150>)
 8005bb0:	189a      	adds	r2, r3, r2
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	0019      	movs	r1, r3
 8005bb8:	0010      	movs	r0, r2
 8005bba:	f7ff fa3a 	bl	8005032 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc2:	4b1b      	ldr	r3, [pc, #108]	; (8005c30 <xTaskIncrementTick+0x154>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d3b8      	bcc.n	8005b3e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bd0:	e7b5      	b.n	8005b3e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005bd2:	4b17      	ldr	r3, [pc, #92]	; (8005c30 <xTaskIncrementTick+0x154>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd8:	4914      	ldr	r1, [pc, #80]	; (8005c2c <xTaskIncrementTick+0x150>)
 8005bda:	0013      	movs	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	189b      	adds	r3, r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	585b      	ldr	r3, [r3, r1]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d907      	bls.n	8005bf8 <xTaskIncrementTick+0x11c>
			{
				xSwitchRequired = pdTRUE;
 8005be8:	2301      	movs	r3, #1
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	e004      	b.n	8005bf8 <xTaskIncrementTick+0x11c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005bee:	4b11      	ldr	r3, [pc, #68]	; (8005c34 <xTaskIncrementTick+0x158>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	4b0f      	ldr	r3, [pc, #60]	; (8005c34 <xTaskIncrementTick+0x158>)
 8005bf6:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005bf8:	4b0f      	ldr	r3, [pc, #60]	; (8005c38 <xTaskIncrementTick+0x15c>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d001      	beq.n	8005c04 <xTaskIncrementTick+0x128>
		{
			xSwitchRequired = pdTRUE;
 8005c00:	2301      	movs	r3, #1
 8005c02:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005c04:	697b      	ldr	r3, [r7, #20]
}
 8005c06:	0018      	movs	r0, r3
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	b006      	add	sp, #24
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	46c0      	nop			; (mov r8, r8)
 8005c10:	20000614 	.word	0x20000614
 8005c14:	200005f0 	.word	0x200005f0
 8005c18:	200005a4 	.word	0x200005a4
 8005c1c:	200005a8 	.word	0x200005a8
 8005c20:	20000604 	.word	0x20000604
 8005c24:	2000060c 	.word	0x2000060c
 8005c28:	200005f4 	.word	0x200005f4
 8005c2c:	200004f0 	.word	0x200004f0
 8005c30:	200004ec 	.word	0x200004ec
 8005c34:	200005fc 	.word	0x200005fc
 8005c38:	20000600 	.word	0x20000600

08005c3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c42:	4b22      	ldr	r3, [pc, #136]	; (8005ccc <vTaskSwitchContext+0x90>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c4a:	4b21      	ldr	r3, [pc, #132]	; (8005cd0 <vTaskSwitchContext+0x94>)
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c50:	e037      	b.n	8005cc2 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8005c52:	4b1f      	ldr	r3, [pc, #124]	; (8005cd0 <vTaskSwitchContext+0x94>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c58:	4b1e      	ldr	r3, [pc, #120]	; (8005cd4 <vTaskSwitchContext+0x98>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	607b      	str	r3, [r7, #4]
 8005c5e:	e007      	b.n	8005c70 <vTaskSwitchContext+0x34>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <vTaskSwitchContext+0x2e>
 8005c66:	b672      	cpsid	i
 8005c68:	e7fe      	b.n	8005c68 <vTaskSwitchContext+0x2c>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	607b      	str	r3, [r7, #4]
 8005c70:	4919      	ldr	r1, [pc, #100]	; (8005cd8 <vTaskSwitchContext+0x9c>)
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	0013      	movs	r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	189b      	adds	r3, r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	585b      	ldr	r3, [r3, r1]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0ee      	beq.n	8005c60 <vTaskSwitchContext+0x24>
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	0013      	movs	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	189b      	adds	r3, r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4a12      	ldr	r2, [pc, #72]	; (8005cd8 <vTaskSwitchContext+0x9c>)
 8005c8e:	189b      	adds	r3, r3, r2
 8005c90:	603b      	str	r3, [r7, #0]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	605a      	str	r2, [r3, #4]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	3308      	adds	r3, #8
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d104      	bne.n	8005cb2 <vTaskSwitchContext+0x76>
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	605a      	str	r2, [r3, #4]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	68da      	ldr	r2, [r3, #12]
 8005cb8:	4b08      	ldr	r3, [pc, #32]	; (8005cdc <vTaskSwitchContext+0xa0>)
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <vTaskSwitchContext+0x98>)
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	601a      	str	r2, [r3, #0]
}
 8005cc2:	46c0      	nop			; (mov r8, r8)
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	b002      	add	sp, #8
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	46c0      	nop			; (mov r8, r8)
 8005ccc:	20000614 	.word	0x20000614
 8005cd0:	20000600 	.word	0x20000600
 8005cd4:	200005f4 	.word	0x200005f4
 8005cd8:	200004f0 	.word	0x200004f0
 8005cdc:	200004ec 	.word	0x200004ec

08005ce0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <vTaskPlaceOnEventList+0x14>
 8005cf0:	b672      	cpsid	i
 8005cf2:	e7fe      	b.n	8005cf2 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cf4:	4b08      	ldr	r3, [pc, #32]	; (8005d18 <vTaskPlaceOnEventList+0x38>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3318      	adds	r3, #24
 8005cfa:	001a      	movs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	0011      	movs	r1, r2
 8005d00:	0018      	movs	r0, r3
 8005d02:	f7ff f9b8 	bl	8005076 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2101      	movs	r1, #1
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	f000 fa10 	bl	8006130 <prvAddCurrentTaskToDelayedList>
}
 8005d10:	46c0      	nop			; (mov r8, r8)
 8005d12:	46bd      	mov	sp, r7
 8005d14:	b002      	add	sp, #8
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	200004ec 	.word	0x200004ec

08005d1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <xTaskRemoveFromEventList+0x1a>
 8005d32:	b672      	cpsid	i
 8005d34:	e7fe      	b.n	8005d34 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	3318      	adds	r3, #24
 8005d3a:	0018      	movs	r0, r3
 8005d3c:	f7ff f9d1 	bl	80050e2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d40:	4b1e      	ldr	r3, [pc, #120]	; (8005dbc <xTaskRemoveFromEventList+0xa0>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d11d      	bne.n	8005d84 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	f7ff f9c8 	bl	80050e2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d56:	4b1a      	ldr	r3, [pc, #104]	; (8005dc0 <xTaskRemoveFromEventList+0xa4>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d903      	bls.n	8005d66 <xTaskRemoveFromEventList+0x4a>
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d62:	4b17      	ldr	r3, [pc, #92]	; (8005dc0 <xTaskRemoveFromEventList+0xa4>)
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d6a:	0013      	movs	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	189b      	adds	r3, r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4a14      	ldr	r2, [pc, #80]	; (8005dc4 <xTaskRemoveFromEventList+0xa8>)
 8005d74:	189a      	adds	r2, r3, r2
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	3304      	adds	r3, #4
 8005d7a:	0019      	movs	r1, r3
 8005d7c:	0010      	movs	r0, r2
 8005d7e:	f7ff f958 	bl	8005032 <vListInsertEnd>
 8005d82:	e007      	b.n	8005d94 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	3318      	adds	r3, #24
 8005d88:	001a      	movs	r2, r3
 8005d8a:	4b0f      	ldr	r3, [pc, #60]	; (8005dc8 <xTaskRemoveFromEventList+0xac>)
 8005d8c:	0011      	movs	r1, r2
 8005d8e:	0018      	movs	r0, r3
 8005d90:	f7ff f94f 	bl	8005032 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d98:	4b0c      	ldr	r3, [pc, #48]	; (8005dcc <xTaskRemoveFromEventList+0xb0>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d905      	bls.n	8005dae <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005da2:	2301      	movs	r3, #1
 8005da4:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005da6:	4b0a      	ldr	r3, [pc, #40]	; (8005dd0 <xTaskRemoveFromEventList+0xb4>)
 8005da8:	2201      	movs	r2, #1
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	e001      	b.n	8005db2 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8005db2:	68fb      	ldr	r3, [r7, #12]
}
 8005db4:	0018      	movs	r0, r3
 8005db6:	46bd      	mov	sp, r7
 8005db8:	b004      	add	sp, #16
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	20000614 	.word	0x20000614
 8005dc0:	200005f4 	.word	0x200005f4
 8005dc4:	200004f0 	.word	0x200004f0
 8005dc8:	200005ac 	.word	0x200005ac
 8005dcc:	200004ec 	.word	0x200004ec
 8005dd0:	20000600 	.word	0x20000600

08005dd4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ddc:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <vTaskInternalSetTimeOutState+0x20>)
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005de4:	4b04      	ldr	r3, [pc, #16]	; (8005df8 <vTaskInternalSetTimeOutState+0x24>)
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	605a      	str	r2, [r3, #4]
}
 8005dec:	46c0      	nop			; (mov r8, r8)
 8005dee:	46bd      	mov	sp, r7
 8005df0:	b002      	add	sp, #8
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	20000604 	.word	0x20000604
 8005df8:	200005f0 	.word	0x200005f0

08005dfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <xTaskCheckForTimeOut+0x14>
 8005e0c:	b672      	cpsid	i
 8005e0e:	e7fe      	b.n	8005e0e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <xTaskCheckForTimeOut+0x1e>
 8005e16:	b672      	cpsid	i
 8005e18:	e7fe      	b.n	8005e18 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8005e1a:	f000 fa79 	bl	8006310 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005e1e:	4b1d      	ldr	r3, [pc, #116]	; (8005e94 <xTaskCheckForTimeOut+0x98>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3301      	adds	r3, #1
 8005e34:	d102      	bne.n	8005e3c <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e36:	2300      	movs	r3, #0
 8005e38:	617b      	str	r3, [r7, #20]
 8005e3a:	e024      	b.n	8005e86 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	4b15      	ldr	r3, [pc, #84]	; (8005e98 <xTaskCheckForTimeOut+0x9c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d007      	beq.n	8005e58 <xTaskCheckForTimeOut+0x5c>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d302      	bcc.n	8005e58 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e52:	2301      	movs	r3, #1
 8005e54:	617b      	str	r3, [r7, #20]
 8005e56:	e016      	b.n	8005e86 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d20c      	bcs.n	8005e7c <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	1ad2      	subs	r2, r2, r3
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	0018      	movs	r0, r3
 8005e72:	f7ff ffaf 	bl	8005dd4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e76:	2300      	movs	r3, #0
 8005e78:	617b      	str	r3, [r7, #20]
 8005e7a:	e004      	b.n	8005e86 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e82:	2301      	movs	r3, #1
 8005e84:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8005e86:	f000 fa55 	bl	8006334 <vPortExitCritical>

	return xReturn;
 8005e8a:	697b      	ldr	r3, [r7, #20]
}
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	b006      	add	sp, #24
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	200005f0 	.word	0x200005f0
 8005e98:	20000604 	.word	0x20000604

08005e9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ea0:	4b02      	ldr	r3, [pc, #8]	; (8005eac <vTaskMissedYield+0x10>)
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]
}
 8005ea6:	46c0      	nop			; (mov r8, r8)
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	20000600 	.word	0x20000600

08005eb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005eb8:	f000 f84e 	bl	8005f58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ebc:	4b03      	ldr	r3, [pc, #12]	; (8005ecc <prvIdleTask+0x1c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d9f9      	bls.n	8005eb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ec4:	f000 fa14 	bl	80062f0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8005ec8:	e7f6      	b.n	8005eb8 <prvIdleTask+0x8>
 8005eca:	46c0      	nop			; (mov r8, r8)
 8005ecc:	200004f0 	.word	0x200004f0

08005ed0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	607b      	str	r3, [r7, #4]
 8005eda:	e00c      	b.n	8005ef6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	0013      	movs	r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	189b      	adds	r3, r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4a14      	ldr	r2, [pc, #80]	; (8005f38 <prvInitialiseTaskLists+0x68>)
 8005ee8:	189b      	adds	r3, r3, r2
 8005eea:	0018      	movs	r0, r3
 8005eec:	f7ff f878 	bl	8004fe0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	607b      	str	r3, [r7, #4]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b06      	cmp	r3, #6
 8005efa:	d9ef      	bls.n	8005edc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005efc:	4b0f      	ldr	r3, [pc, #60]	; (8005f3c <prvInitialiseTaskLists+0x6c>)
 8005efe:	0018      	movs	r0, r3
 8005f00:	f7ff f86e 	bl	8004fe0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f04:	4b0e      	ldr	r3, [pc, #56]	; (8005f40 <prvInitialiseTaskLists+0x70>)
 8005f06:	0018      	movs	r0, r3
 8005f08:	f7ff f86a 	bl	8004fe0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f0c:	4b0d      	ldr	r3, [pc, #52]	; (8005f44 <prvInitialiseTaskLists+0x74>)
 8005f0e:	0018      	movs	r0, r3
 8005f10:	f7ff f866 	bl	8004fe0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f14:	4b0c      	ldr	r3, [pc, #48]	; (8005f48 <prvInitialiseTaskLists+0x78>)
 8005f16:	0018      	movs	r0, r3
 8005f18:	f7ff f862 	bl	8004fe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f1c:	4b0b      	ldr	r3, [pc, #44]	; (8005f4c <prvInitialiseTaskLists+0x7c>)
 8005f1e:	0018      	movs	r0, r3
 8005f20:	f7ff f85e 	bl	8004fe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f24:	4b0a      	ldr	r3, [pc, #40]	; (8005f50 <prvInitialiseTaskLists+0x80>)
 8005f26:	4a05      	ldr	r2, [pc, #20]	; (8005f3c <prvInitialiseTaskLists+0x6c>)
 8005f28:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f2a:	4b0a      	ldr	r3, [pc, #40]	; (8005f54 <prvInitialiseTaskLists+0x84>)
 8005f2c:	4a04      	ldr	r2, [pc, #16]	; (8005f40 <prvInitialiseTaskLists+0x70>)
 8005f2e:	601a      	str	r2, [r3, #0]
}
 8005f30:	46c0      	nop			; (mov r8, r8)
 8005f32:	46bd      	mov	sp, r7
 8005f34:	b002      	add	sp, #8
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	200004f0 	.word	0x200004f0
 8005f3c:	2000057c 	.word	0x2000057c
 8005f40:	20000590 	.word	0x20000590
 8005f44:	200005ac 	.word	0x200005ac
 8005f48:	200005c0 	.word	0x200005c0
 8005f4c:	200005d8 	.word	0x200005d8
 8005f50:	200005a4 	.word	0x200005a4
 8005f54:	200005a8 	.word	0x200005a8

08005f58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f5e:	e01a      	b.n	8005f96 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8005f60:	f000 f9d6 	bl	8006310 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f64:	4b10      	ldr	r3, [pc, #64]	; (8005fa8 <prvCheckTasksWaitingTermination+0x50>)
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	3304      	adds	r3, #4
 8005f70:	0018      	movs	r0, r3
 8005f72:	f7ff f8b6 	bl	80050e2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f76:	4b0d      	ldr	r3, [pc, #52]	; (8005fac <prvCheckTasksWaitingTermination+0x54>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	1e5a      	subs	r2, r3, #1
 8005f7c:	4b0b      	ldr	r3, [pc, #44]	; (8005fac <prvCheckTasksWaitingTermination+0x54>)
 8005f7e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f80:	4b0b      	ldr	r3, [pc, #44]	; (8005fb0 <prvCheckTasksWaitingTermination+0x58>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	1e5a      	subs	r2, r3, #1
 8005f86:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <prvCheckTasksWaitingTermination+0x58>)
 8005f88:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8005f8a:	f000 f9d3 	bl	8006334 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	0018      	movs	r0, r3
 8005f92:	f000 f80f 	bl	8005fb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f96:	4b06      	ldr	r3, [pc, #24]	; (8005fb0 <prvCheckTasksWaitingTermination+0x58>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1e0      	bne.n	8005f60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f9e:	46c0      	nop			; (mov r8, r8)
 8005fa0:	46c0      	nop			; (mov r8, r8)
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	b002      	add	sp, #8
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	200005c0 	.word	0x200005c0
 8005fac:	200005ec 	.word	0x200005ec
 8005fb0:	200005d4 	.word	0x200005d4

08005fb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2251      	movs	r2, #81	; 0x51
 8005fc0:	5c9b      	ldrb	r3, [r3, r2]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d109      	bne.n	8005fda <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fca:	0018      	movs	r0, r3
 8005fcc:	f000 fade 	bl	800658c <vPortFree>
				vPortFree( pxTCB );
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	f000 fada 	bl	800658c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005fd8:	e010      	b.n	8005ffc <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2251      	movs	r2, #81	; 0x51
 8005fde:	5c9b      	ldrb	r3, [r3, r2]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d104      	bne.n	8005fee <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	0018      	movs	r0, r3
 8005fe8:	f000 fad0 	bl	800658c <vPortFree>
	}
 8005fec:	e006      	b.n	8005ffc <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2251      	movs	r2, #81	; 0x51
 8005ff2:	5c9b      	ldrb	r3, [r3, r2]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d001      	beq.n	8005ffc <prvDeleteTCB+0x48>
 8005ff8:	b672      	cpsid	i
 8005ffa:	e7fe      	b.n	8005ffa <prvDeleteTCB+0x46>
	}
 8005ffc:	46c0      	nop			; (mov r8, r8)
 8005ffe:	46bd      	mov	sp, r7
 8006000:	b002      	add	sp, #8
 8006002:	bd80      	pop	{r7, pc}

08006004 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800600a:	4b0b      	ldr	r3, [pc, #44]	; (8006038 <prvResetNextTaskUnblockTime+0x34>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d104      	bne.n	800601e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006014:	4b09      	ldr	r3, [pc, #36]	; (800603c <prvResetNextTaskUnblockTime+0x38>)
 8006016:	2201      	movs	r2, #1
 8006018:	4252      	negs	r2, r2
 800601a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800601c:	e008      	b.n	8006030 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800601e:	4b06      	ldr	r3, [pc, #24]	; (8006038 <prvResetNextTaskUnblockTime+0x34>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	4b03      	ldr	r3, [pc, #12]	; (800603c <prvResetNextTaskUnblockTime+0x38>)
 800602e:	601a      	str	r2, [r3, #0]
}
 8006030:	46c0      	nop			; (mov r8, r8)
 8006032:	46bd      	mov	sp, r7
 8006034:	b002      	add	sp, #8
 8006036:	bd80      	pop	{r7, pc}
 8006038:	200005a4 	.word	0x200005a4
 800603c:	2000060c 	.word	0x2000060c

08006040 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006046:	4b0a      	ldr	r3, [pc, #40]	; (8006070 <xTaskGetSchedulerState+0x30>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d102      	bne.n	8006054 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800604e:	2301      	movs	r3, #1
 8006050:	607b      	str	r3, [r7, #4]
 8006052:	e008      	b.n	8006066 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006054:	4b07      	ldr	r3, [pc, #28]	; (8006074 <xTaskGetSchedulerState+0x34>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d102      	bne.n	8006062 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800605c:	2302      	movs	r3, #2
 800605e:	607b      	str	r3, [r7, #4]
 8006060:	e001      	b.n	8006066 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006062:	2300      	movs	r3, #0
 8006064:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006066:	687b      	ldr	r3, [r7, #4]
	}
 8006068:	0018      	movs	r0, r3
 800606a:	46bd      	mov	sp, r7
 800606c:	b002      	add	sp, #8
 800606e:	bd80      	pop	{r7, pc}
 8006070:	200005f8 	.word	0x200005f8
 8006074:	20000614 	.word	0x20000614

08006078 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006084:	2300      	movs	r3, #0
 8006086:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d044      	beq.n	8006118 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800608e:	4b25      	ldr	r3, [pc, #148]	; (8006124 <xTaskPriorityDisinherit+0xac>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	429a      	cmp	r2, r3
 8006096:	d001      	beq.n	800609c <xTaskPriorityDisinherit+0x24>
 8006098:	b672      	cpsid	i
 800609a:	e7fe      	b.n	800609a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <xTaskPriorityDisinherit+0x30>
 80060a4:	b672      	cpsid	i
 80060a6:	e7fe      	b.n	80060a6 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ac:	1e5a      	subs	r2, r3, #1
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d02c      	beq.n	8006118 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d128      	bne.n	8006118 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	3304      	adds	r3, #4
 80060ca:	0018      	movs	r0, r3
 80060cc:	f7ff f809 	bl	80050e2 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060dc:	2207      	movs	r2, #7
 80060de:	1ad2      	subs	r2, r2, r3
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e8:	4b0f      	ldr	r3, [pc, #60]	; (8006128 <xTaskPriorityDisinherit+0xb0>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d903      	bls.n	80060f8 <xTaskPriorityDisinherit+0x80>
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f4:	4b0c      	ldr	r3, [pc, #48]	; (8006128 <xTaskPriorityDisinherit+0xb0>)
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060fc:	0013      	movs	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	189b      	adds	r3, r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4a09      	ldr	r2, [pc, #36]	; (800612c <xTaskPriorityDisinherit+0xb4>)
 8006106:	189a      	adds	r2, r3, r2
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	3304      	adds	r3, #4
 800610c:	0019      	movs	r1, r3
 800610e:	0010      	movs	r0, r2
 8006110:	f7fe ff8f 	bl	8005032 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006114:	2301      	movs	r3, #1
 8006116:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006118:	68fb      	ldr	r3, [r7, #12]
	}
 800611a:	0018      	movs	r0, r3
 800611c:	46bd      	mov	sp, r7
 800611e:	b004      	add	sp, #16
 8006120:	bd80      	pop	{r7, pc}
 8006122:	46c0      	nop			; (mov r8, r8)
 8006124:	200004ec 	.word	0x200004ec
 8006128:	200005f4 	.word	0x200005f4
 800612c:	200004f0 	.word	0x200004f0

08006130 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800613a:	4b21      	ldr	r3, [pc, #132]	; (80061c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006140:	4b20      	ldr	r3, [pc, #128]	; (80061c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3304      	adds	r3, #4
 8006146:	0018      	movs	r0, r3
 8006148:	f7fe ffcb 	bl	80050e2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	3301      	adds	r3, #1
 8006150:	d10b      	bne.n	800616a <prvAddCurrentTaskToDelayedList+0x3a>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d008      	beq.n	800616a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006158:	4b1a      	ldr	r3, [pc, #104]	; (80061c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	1d1a      	adds	r2, r3, #4
 800615e:	4b1a      	ldr	r3, [pc, #104]	; (80061c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006160:	0011      	movs	r1, r2
 8006162:	0018      	movs	r0, r3
 8006164:	f7fe ff65 	bl	8005032 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006168:	e026      	b.n	80061b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	18d3      	adds	r3, r2, r3
 8006170:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006172:	4b14      	ldr	r3, [pc, #80]	; (80061c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	429a      	cmp	r2, r3
 8006180:	d209      	bcs.n	8006196 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006182:	4b12      	ldr	r3, [pc, #72]	; (80061cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	4b0f      	ldr	r3, [pc, #60]	; (80061c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3304      	adds	r3, #4
 800618c:	0019      	movs	r1, r3
 800618e:	0010      	movs	r0, r2
 8006190:	f7fe ff71 	bl	8005076 <vListInsert>
}
 8006194:	e010      	b.n	80061b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006196:	4b0e      	ldr	r3, [pc, #56]	; (80061d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	4b0a      	ldr	r3, [pc, #40]	; (80061c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	3304      	adds	r3, #4
 80061a0:	0019      	movs	r1, r3
 80061a2:	0010      	movs	r0, r2
 80061a4:	f7fe ff67 	bl	8005076 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061a8:	4b0a      	ldr	r3, [pc, #40]	; (80061d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d202      	bcs.n	80061b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80061b2:	4b08      	ldr	r3, [pc, #32]	; (80061d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	601a      	str	r2, [r3, #0]
}
 80061b8:	46c0      	nop			; (mov r8, r8)
 80061ba:	46bd      	mov	sp, r7
 80061bc:	b004      	add	sp, #16
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	200005f0 	.word	0x200005f0
 80061c4:	200004ec 	.word	0x200004ec
 80061c8:	200005d8 	.word	0x200005d8
 80061cc:	200005a8 	.word	0x200005a8
 80061d0:	200005a4 	.word	0x200005a4
 80061d4:	2000060c 	.word	0x2000060c

080061d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	3b04      	subs	r3, #4
 80061e8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2280      	movs	r2, #128	; 0x80
 80061ee:	0452      	lsls	r2, r2, #17
 80061f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	3b04      	subs	r3, #4
 80061f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	3b04      	subs	r3, #4
 8006202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006204:	4a08      	ldr	r2, [pc, #32]	; (8006228 <pxPortInitialiseStack+0x50>)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	3b14      	subs	r3, #20
 800620e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	3b20      	subs	r3, #32
 800621a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800621c:	68fb      	ldr	r3, [r7, #12]
}
 800621e:	0018      	movs	r0, r3
 8006220:	46bd      	mov	sp, r7
 8006222:	b004      	add	sp, #16
 8006224:	bd80      	pop	{r7, pc}
 8006226:	46c0      	nop			; (mov r8, r8)
 8006228:	0800622d 	.word	0x0800622d

0800622c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006232:	2300      	movs	r3, #0
 8006234:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006236:	4b08      	ldr	r3, [pc, #32]	; (8006258 <prvTaskExitError+0x2c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	3301      	adds	r3, #1
 800623c:	d001      	beq.n	8006242 <prvTaskExitError+0x16>
 800623e:	b672      	cpsid	i
 8006240:	e7fe      	b.n	8006240 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8006242:	b672      	cpsid	i
	while( ulDummy == 0 )
 8006244:	46c0      	nop			; (mov r8, r8)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0fc      	beq.n	8006246 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800624c:	46c0      	nop			; (mov r8, r8)
 800624e:	46c0      	nop			; (mov r8, r8)
 8006250:	46bd      	mov	sp, r7
 8006252:	b002      	add	sp, #8
 8006254:	bd80      	pop	{r7, pc}
 8006256:	46c0      	nop			; (mov r8, r8)
 8006258:	20000124 	.word	0x20000124

0800625c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8006260:	46c0      	nop			; (mov r8, r8)
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
	...

08006270 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006270:	4a0b      	ldr	r2, [pc, #44]	; (80062a0 <pxCurrentTCBConst2>)
 8006272:	6813      	ldr	r3, [r2, #0]
 8006274:	6818      	ldr	r0, [r3, #0]
 8006276:	3020      	adds	r0, #32
 8006278:	f380 8809 	msr	PSP, r0
 800627c:	2002      	movs	r0, #2
 800627e:	f380 8814 	msr	CONTROL, r0
 8006282:	f3bf 8f6f 	isb	sy
 8006286:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8006288:	46ae      	mov	lr, r5
 800628a:	bc08      	pop	{r3}
 800628c:	bc04      	pop	{r2}
 800628e:	b662      	cpsie	i
 8006290:	4718      	bx	r3
 8006292:	46c0      	nop			; (mov r8, r8)
 8006294:	46c0      	nop			; (mov r8, r8)
 8006296:	46c0      	nop			; (mov r8, r8)
 8006298:	46c0      	nop			; (mov r8, r8)
 800629a:	46c0      	nop			; (mov r8, r8)
 800629c:	46c0      	nop			; (mov r8, r8)
 800629e:	46c0      	nop			; (mov r8, r8)

080062a0 <pxCurrentTCBConst2>:
 80062a0:	200004ec 	.word	0x200004ec
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80062a4:	46c0      	nop			; (mov r8, r8)
 80062a6:	46c0      	nop			; (mov r8, r8)

080062a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80062ac:	4b0e      	ldr	r3, [pc, #56]	; (80062e8 <xPortStartScheduler+0x40>)
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	4b0d      	ldr	r3, [pc, #52]	; (80062e8 <xPortStartScheduler+0x40>)
 80062b2:	21ff      	movs	r1, #255	; 0xff
 80062b4:	0409      	lsls	r1, r1, #16
 80062b6:	430a      	orrs	r2, r1
 80062b8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80062ba:	4b0b      	ldr	r3, [pc, #44]	; (80062e8 <xPortStartScheduler+0x40>)
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	4b0a      	ldr	r3, [pc, #40]	; (80062e8 <xPortStartScheduler+0x40>)
 80062c0:	21ff      	movs	r1, #255	; 0xff
 80062c2:	0609      	lsls	r1, r1, #24
 80062c4:	430a      	orrs	r2, r1
 80062c6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80062c8:	f000 f898 	bl	80063fc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062cc:	4b07      	ldr	r3, [pc, #28]	; (80062ec <xPortStartScheduler+0x44>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80062d2:	f7ff ffcd 	bl	8006270 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062d6:	f7ff fcb1 	bl	8005c3c <vTaskSwitchContext>
	prvTaskExitError();
 80062da:	f7ff ffa7 	bl	800622c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	0018      	movs	r0, r3
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	46c0      	nop			; (mov r8, r8)
 80062e8:	e000ed20 	.word	0xe000ed20
 80062ec:	20000124 	.word	0x20000124

080062f0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80062f4:	4b05      	ldr	r3, [pc, #20]	; (800630c <vPortYield+0x1c>)
 80062f6:	2280      	movs	r2, #128	; 0x80
 80062f8:	0552      	lsls	r2, r2, #21
 80062fa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80062fc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006300:	f3bf 8f6f 	isb	sy
}
 8006304:	46c0      	nop			; (mov r8, r8)
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	46c0      	nop			; (mov r8, r8)
 800630c:	e000ed04 	.word	0xe000ed04

08006310 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8006314:	b672      	cpsid	i
    uxCriticalNesting++;
 8006316:	4b06      	ldr	r3, [pc, #24]	; (8006330 <vPortEnterCritical+0x20>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	4b04      	ldr	r3, [pc, #16]	; (8006330 <vPortEnterCritical+0x20>)
 800631e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8006320:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006324:	f3bf 8f6f 	isb	sy
}
 8006328:	46c0      	nop			; (mov r8, r8)
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	46c0      	nop			; (mov r8, r8)
 8006330:	20000124 	.word	0x20000124

08006334 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006334:	b580      	push	{r7, lr}
 8006336:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006338:	4b09      	ldr	r3, [pc, #36]	; (8006360 <vPortExitCritical+0x2c>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <vPortExitCritical+0x10>
 8006340:	b672      	cpsid	i
 8006342:	e7fe      	b.n	8006342 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8006344:	4b06      	ldr	r3, [pc, #24]	; (8006360 <vPortExitCritical+0x2c>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	1e5a      	subs	r2, r3, #1
 800634a:	4b05      	ldr	r3, [pc, #20]	; (8006360 <vPortExitCritical+0x2c>)
 800634c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800634e:	4b04      	ldr	r3, [pc, #16]	; (8006360 <vPortExitCritical+0x2c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d100      	bne.n	8006358 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8006356:	b662      	cpsie	i
    }
}
 8006358:	46c0      	nop			; (mov r8, r8)
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	46c0      	nop			; (mov r8, r8)
 8006360:	20000124 	.word	0x20000124

08006364 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8006364:	f3ef 8010 	mrs	r0, PRIMASK
 8006368:	b672      	cpsid	i
 800636a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800636c:	46c0      	nop			; (mov r8, r8)
 800636e:	0018      	movs	r0, r3

08006370 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8006370:	f380 8810 	msr	PRIMASK, r0
 8006374:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8006376:	46c0      	nop			; (mov r8, r8)
	...

08006380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006380:	f3ef 8009 	mrs	r0, PSP
 8006384:	4b0e      	ldr	r3, [pc, #56]	; (80063c0 <pxCurrentTCBConst>)
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	3820      	subs	r0, #32
 800638a:	6010      	str	r0, [r2, #0]
 800638c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800638e:	4644      	mov	r4, r8
 8006390:	464d      	mov	r5, r9
 8006392:	4656      	mov	r6, sl
 8006394:	465f      	mov	r7, fp
 8006396:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006398:	b508      	push	{r3, lr}
 800639a:	b672      	cpsid	i
 800639c:	f7ff fc4e 	bl	8005c3c <vTaskSwitchContext>
 80063a0:	b662      	cpsie	i
 80063a2:	bc0c      	pop	{r2, r3}
 80063a4:	6811      	ldr	r1, [r2, #0]
 80063a6:	6808      	ldr	r0, [r1, #0]
 80063a8:	3010      	adds	r0, #16
 80063aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80063ac:	46a0      	mov	r8, r4
 80063ae:	46a9      	mov	r9, r5
 80063b0:	46b2      	mov	sl, r6
 80063b2:	46bb      	mov	fp, r7
 80063b4:	f380 8809 	msr	PSP, r0
 80063b8:	3820      	subs	r0, #32
 80063ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80063bc:	4718      	bx	r3
 80063be:	46c0      	nop			; (mov r8, r8)

080063c0 <pxCurrentTCBConst>:
 80063c0:	200004ec 	.word	0x200004ec
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80063c4:	46c0      	nop			; (mov r8, r8)
 80063c6:	46c0      	nop			; (mov r8, r8)

080063c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80063ce:	f7ff ffc9 	bl	8006364 <ulSetInterruptMaskFromISR>
 80063d2:	0003      	movs	r3, r0
 80063d4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80063d6:	f7ff fb81 	bl	8005adc <xTaskIncrementTick>
 80063da:	1e03      	subs	r3, r0, #0
 80063dc:	d003      	beq.n	80063e6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80063de:	4b06      	ldr	r3, [pc, #24]	; (80063f8 <xPortSysTickHandler+0x30>)
 80063e0:	2280      	movs	r2, #128	; 0x80
 80063e2:	0552      	lsls	r2, r2, #21
 80063e4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	0018      	movs	r0, r3
 80063ea:	f7ff ffc1 	bl	8006370 <vClearInterruptMaskFromISR>
}
 80063ee:	46c0      	nop			; (mov r8, r8)
 80063f0:	46bd      	mov	sp, r7
 80063f2:	b002      	add	sp, #8
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	46c0      	nop			; (mov r8, r8)
 80063f8:	e000ed04 	.word	0xe000ed04

080063fc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8006400:	4b0b      	ldr	r3, [pc, #44]	; (8006430 <prvSetupTimerInterrupt+0x34>)
 8006402:	2200      	movs	r2, #0
 8006404:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8006406:	4b0b      	ldr	r3, [pc, #44]	; (8006434 <prvSetupTimerInterrupt+0x38>)
 8006408:	2200      	movs	r2, #0
 800640a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800640c:	4b0a      	ldr	r3, [pc, #40]	; (8006438 <prvSetupTimerInterrupt+0x3c>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	22fa      	movs	r2, #250	; 0xfa
 8006412:	0091      	lsls	r1, r2, #2
 8006414:	0018      	movs	r0, r3
 8006416:	f7f9 fe77 	bl	8000108 <__udivsi3>
 800641a:	0003      	movs	r3, r0
 800641c:	001a      	movs	r2, r3
 800641e:	4b07      	ldr	r3, [pc, #28]	; (800643c <prvSetupTimerInterrupt+0x40>)
 8006420:	3a01      	subs	r2, #1
 8006422:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8006424:	4b02      	ldr	r3, [pc, #8]	; (8006430 <prvSetupTimerInterrupt+0x34>)
 8006426:	2207      	movs	r2, #7
 8006428:	601a      	str	r2, [r3, #0]
}
 800642a:	46c0      	nop			; (mov r8, r8)
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	e000e010 	.word	0xe000e010
 8006434:	e000e018 	.word	0xe000e018
 8006438:	20000118 	.word	0x20000118
 800643c:	e000e014 	.word	0xe000e014

08006440 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006448:	2300      	movs	r3, #0
 800644a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800644c:	f7ff faae 	bl	80059ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006450:	4b49      	ldr	r3, [pc, #292]	; (8006578 <pvPortMalloc+0x138>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006458:	f000 f8e0 	bl	800661c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800645c:	4b47      	ldr	r3, [pc, #284]	; (800657c <pvPortMalloc+0x13c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	4013      	ands	r3, r2
 8006464:	d000      	beq.n	8006468 <pvPortMalloc+0x28>
 8006466:	e079      	b.n	800655c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d012      	beq.n	8006494 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800646e:	2208      	movs	r2, #8
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	189b      	adds	r3, r3, r2
 8006474:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2207      	movs	r2, #7
 800647a:	4013      	ands	r3, r2
 800647c:	d00a      	beq.n	8006494 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2207      	movs	r2, #7
 8006482:	4393      	bics	r3, r2
 8006484:	3308      	adds	r3, #8
 8006486:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2207      	movs	r2, #7
 800648c:	4013      	ands	r3, r2
 800648e:	d001      	beq.n	8006494 <pvPortMalloc+0x54>
 8006490:	b672      	cpsid	i
 8006492:	e7fe      	b.n	8006492 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d060      	beq.n	800655c <pvPortMalloc+0x11c>
 800649a:	4b39      	ldr	r3, [pc, #228]	; (8006580 <pvPortMalloc+0x140>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d85b      	bhi.n	800655c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064a4:	4b37      	ldr	r3, [pc, #220]	; (8006584 <pvPortMalloc+0x144>)
 80064a6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80064a8:	4b36      	ldr	r3, [pc, #216]	; (8006584 <pvPortMalloc+0x144>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064ae:	e004      	b.n	80064ba <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d903      	bls.n	80064cc <pvPortMalloc+0x8c>
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1f1      	bne.n	80064b0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064cc:	4b2a      	ldr	r3, [pc, #168]	; (8006578 <pvPortMalloc+0x138>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d042      	beq.n	800655c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2208      	movs	r2, #8
 80064dc:	189b      	adds	r3, r3, r2
 80064de:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	685a      	ldr	r2, [r3, #4]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	1ad2      	subs	r2, r2, r3
 80064f0:	2308      	movs	r3, #8
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d916      	bls.n	8006526 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	18d3      	adds	r3, r2, r3
 80064fe:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	2207      	movs	r2, #7
 8006504:	4013      	ands	r3, r2
 8006506:	d001      	beq.n	800650c <pvPortMalloc+0xcc>
 8006508:	b672      	cpsid	i
 800650a:	e7fe      	b.n	800650a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	1ad2      	subs	r2, r2, r3
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	0018      	movs	r0, r3
 8006522:	f000 f8db 	bl	80066dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006526:	4b16      	ldr	r3, [pc, #88]	; (8006580 <pvPortMalloc+0x140>)
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	1ad2      	subs	r2, r2, r3
 8006530:	4b13      	ldr	r3, [pc, #76]	; (8006580 <pvPortMalloc+0x140>)
 8006532:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006534:	4b12      	ldr	r3, [pc, #72]	; (8006580 <pvPortMalloc+0x140>)
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	4b13      	ldr	r3, [pc, #76]	; (8006588 <pvPortMalloc+0x148>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	429a      	cmp	r2, r3
 800653e:	d203      	bcs.n	8006548 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006540:	4b0f      	ldr	r3, [pc, #60]	; (8006580 <pvPortMalloc+0x140>)
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	4b10      	ldr	r3, [pc, #64]	; (8006588 <pvPortMalloc+0x148>)
 8006546:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	4b0b      	ldr	r3, [pc, #44]	; (800657c <pvPortMalloc+0x13c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	431a      	orrs	r2, r3
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	2200      	movs	r2, #0
 800655a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800655c:	f7ff fa32 	bl	80059c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2207      	movs	r2, #7
 8006564:	4013      	ands	r3, r2
 8006566:	d001      	beq.n	800656c <pvPortMalloc+0x12c>
 8006568:	b672      	cpsid	i
 800656a:	e7fe      	b.n	800656a <pvPortMalloc+0x12a>
	return pvReturn;
 800656c:	68fb      	ldr	r3, [r7, #12]
}
 800656e:	0018      	movs	r0, r3
 8006570:	46bd      	mov	sp, r7
 8006572:	b006      	add	sp, #24
 8006574:	bd80      	pop	{r7, pc}
 8006576:	46c0      	nop			; (mov r8, r8)
 8006578:	20001220 	.word	0x20001220
 800657c:	2000122c 	.word	0x2000122c
 8006580:	20001224 	.word	0x20001224
 8006584:	20001218 	.word	0x20001218
 8006588:	20001228 	.word	0x20001228

0800658c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d035      	beq.n	800660a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800659e:	2308      	movs	r3, #8
 80065a0:	425b      	negs	r3, r3
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	18d3      	adds	r3, r2, r3
 80065a6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	4b18      	ldr	r3, [pc, #96]	; (8006614 <vPortFree+0x88>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4013      	ands	r3, r2
 80065b6:	d101      	bne.n	80065bc <vPortFree+0x30>
 80065b8:	b672      	cpsid	i
 80065ba:	e7fe      	b.n	80065ba <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d001      	beq.n	80065c8 <vPortFree+0x3c>
 80065c4:	b672      	cpsid	i
 80065c6:	e7fe      	b.n	80065c6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	4b11      	ldr	r3, [pc, #68]	; (8006614 <vPortFree+0x88>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4013      	ands	r3, r2
 80065d2:	d01a      	beq.n	800660a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d116      	bne.n	800660a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	4b0c      	ldr	r3, [pc, #48]	; (8006614 <vPortFree+0x88>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	43db      	mvns	r3, r3
 80065e6:	401a      	ands	r2, r3
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065ec:	f7ff f9de 	bl	80059ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	4b08      	ldr	r3, [pc, #32]	; (8006618 <vPortFree+0x8c>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	18d2      	adds	r2, r2, r3
 80065fa:	4b07      	ldr	r3, [pc, #28]	; (8006618 <vPortFree+0x8c>)
 80065fc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	0018      	movs	r0, r3
 8006602:	f000 f86b 	bl	80066dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006606:	f7ff f9dd 	bl	80059c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800660a:	46c0      	nop			; (mov r8, r8)
 800660c:	46bd      	mov	sp, r7
 800660e:	b004      	add	sp, #16
 8006610:	bd80      	pop	{r7, pc}
 8006612:	46c0      	nop			; (mov r8, r8)
 8006614:	2000122c 	.word	0x2000122c
 8006618:	20001224 	.word	0x20001224

0800661c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006622:	23c0      	movs	r3, #192	; 0xc0
 8006624:	011b      	lsls	r3, r3, #4
 8006626:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006628:	4b26      	ldr	r3, [pc, #152]	; (80066c4 <prvHeapInit+0xa8>)
 800662a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2207      	movs	r2, #7
 8006630:	4013      	ands	r3, r2
 8006632:	d00c      	beq.n	800664e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	3307      	adds	r3, #7
 8006638:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2207      	movs	r2, #7
 800663e:	4393      	bics	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	1ad2      	subs	r2, r2, r3
 8006648:	4b1e      	ldr	r3, [pc, #120]	; (80066c4 <prvHeapInit+0xa8>)
 800664a:	18d3      	adds	r3, r2, r3
 800664c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006652:	4b1d      	ldr	r3, [pc, #116]	; (80066c8 <prvHeapInit+0xac>)
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006658:	4b1b      	ldr	r3, [pc, #108]	; (80066c8 <prvHeapInit+0xac>)
 800665a:	2200      	movs	r2, #0
 800665c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	18d3      	adds	r3, r2, r3
 8006664:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006666:	2208      	movs	r2, #8
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	1a9b      	subs	r3, r3, r2
 800666c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2207      	movs	r2, #7
 8006672:	4393      	bics	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	4b14      	ldr	r3, [pc, #80]	; (80066cc <prvHeapInit+0xb0>)
 800667a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800667c:	4b13      	ldr	r3, [pc, #76]	; (80066cc <prvHeapInit+0xb0>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2200      	movs	r2, #0
 8006682:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006684:	4b11      	ldr	r3, [pc, #68]	; (80066cc <prvHeapInit+0xb0>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	1ad2      	subs	r2, r2, r3
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800669a:	4b0c      	ldr	r3, [pc, #48]	; (80066cc <prvHeapInit+0xb0>)
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	4b0a      	ldr	r3, [pc, #40]	; (80066d0 <prvHeapInit+0xb4>)
 80066a8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	4b09      	ldr	r3, [pc, #36]	; (80066d4 <prvHeapInit+0xb8>)
 80066b0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80066b2:	4b09      	ldr	r3, [pc, #36]	; (80066d8 <prvHeapInit+0xbc>)
 80066b4:	2280      	movs	r2, #128	; 0x80
 80066b6:	0612      	lsls	r2, r2, #24
 80066b8:	601a      	str	r2, [r3, #0]
}
 80066ba:	46c0      	nop			; (mov r8, r8)
 80066bc:	46bd      	mov	sp, r7
 80066be:	b004      	add	sp, #16
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	46c0      	nop			; (mov r8, r8)
 80066c4:	20000618 	.word	0x20000618
 80066c8:	20001218 	.word	0x20001218
 80066cc:	20001220 	.word	0x20001220
 80066d0:	20001228 	.word	0x20001228
 80066d4:	20001224 	.word	0x20001224
 80066d8:	2000122c 	.word	0x2000122c

080066dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066e4:	4b27      	ldr	r3, [pc, #156]	; (8006784 <prvInsertBlockIntoFreeList+0xa8>)
 80066e6:	60fb      	str	r3, [r7, #12]
 80066e8:	e002      	b.n	80066f0 <prvInsertBlockIntoFreeList+0x14>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d8f7      	bhi.n	80066ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	18d3      	adds	r3, r2, r3
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	429a      	cmp	r2, r3
 800670a:	d108      	bne.n	800671e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	18d2      	adds	r2, r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	18d2      	adds	r2, r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	429a      	cmp	r2, r3
 8006730:	d118      	bne.n	8006764 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	4b14      	ldr	r3, [pc, #80]	; (8006788 <prvInsertBlockIntoFreeList+0xac>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	429a      	cmp	r2, r3
 800673c:	d00d      	beq.n	800675a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	18d2      	adds	r2, r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	e008      	b.n	800676c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800675a:	4b0b      	ldr	r3, [pc, #44]	; (8006788 <prvInsertBlockIntoFreeList+0xac>)
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	601a      	str	r2, [r3, #0]
 8006762:	e003      	b.n	800676c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	429a      	cmp	r2, r3
 8006772:	d002      	beq.n	800677a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800677a:	46c0      	nop			; (mov r8, r8)
 800677c:	46bd      	mov	sp, r7
 800677e:	b004      	add	sp, #16
 8006780:	bd80      	pop	{r7, pc}
 8006782:	46c0      	nop			; (mov r8, r8)
 8006784:	20001218 	.word	0x20001218
 8006788:	20001220 	.word	0x20001220

0800678c <memset>:
 800678c:	0003      	movs	r3, r0
 800678e:	1882      	adds	r2, r0, r2
 8006790:	4293      	cmp	r3, r2
 8006792:	d100      	bne.n	8006796 <memset+0xa>
 8006794:	4770      	bx	lr
 8006796:	7019      	strb	r1, [r3, #0]
 8006798:	3301      	adds	r3, #1
 800679a:	e7f9      	b.n	8006790 <memset+0x4>

0800679c <__libc_init_array>:
 800679c:	b570      	push	{r4, r5, r6, lr}
 800679e:	2600      	movs	r6, #0
 80067a0:	4c0c      	ldr	r4, [pc, #48]	; (80067d4 <__libc_init_array+0x38>)
 80067a2:	4d0d      	ldr	r5, [pc, #52]	; (80067d8 <__libc_init_array+0x3c>)
 80067a4:	1b64      	subs	r4, r4, r5
 80067a6:	10a4      	asrs	r4, r4, #2
 80067a8:	42a6      	cmp	r6, r4
 80067aa:	d109      	bne.n	80067c0 <__libc_init_array+0x24>
 80067ac:	2600      	movs	r6, #0
 80067ae:	f000 f823 	bl	80067f8 <_init>
 80067b2:	4c0a      	ldr	r4, [pc, #40]	; (80067dc <__libc_init_array+0x40>)
 80067b4:	4d0a      	ldr	r5, [pc, #40]	; (80067e0 <__libc_init_array+0x44>)
 80067b6:	1b64      	subs	r4, r4, r5
 80067b8:	10a4      	asrs	r4, r4, #2
 80067ba:	42a6      	cmp	r6, r4
 80067bc:	d105      	bne.n	80067ca <__libc_init_array+0x2e>
 80067be:	bd70      	pop	{r4, r5, r6, pc}
 80067c0:	00b3      	lsls	r3, r6, #2
 80067c2:	58eb      	ldr	r3, [r5, r3]
 80067c4:	4798      	blx	r3
 80067c6:	3601      	adds	r6, #1
 80067c8:	e7ee      	b.n	80067a8 <__libc_init_array+0xc>
 80067ca:	00b3      	lsls	r3, r6, #2
 80067cc:	58eb      	ldr	r3, [r5, r3]
 80067ce:	4798      	blx	r3
 80067d0:	3601      	adds	r6, #1
 80067d2:	e7f2      	b.n	80067ba <__libc_init_array+0x1e>
 80067d4:	0800695c 	.word	0x0800695c
 80067d8:	0800695c 	.word	0x0800695c
 80067dc:	08006960 	.word	0x08006960
 80067e0:	0800695c 	.word	0x0800695c

080067e4 <memcpy>:
 80067e4:	2300      	movs	r3, #0
 80067e6:	b510      	push	{r4, lr}
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d100      	bne.n	80067ee <memcpy+0xa>
 80067ec:	bd10      	pop	{r4, pc}
 80067ee:	5ccc      	ldrb	r4, [r1, r3]
 80067f0:	54c4      	strb	r4, [r0, r3]
 80067f2:	3301      	adds	r3, #1
 80067f4:	e7f8      	b.n	80067e8 <memcpy+0x4>
	...

080067f8 <_init>:
 80067f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fa:	46c0      	nop			; (mov r8, r8)
 80067fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fe:	bc08      	pop	{r3}
 8006800:	469e      	mov	lr, r3
 8006802:	4770      	bx	lr

08006804 <_fini>:
 8006804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006806:	46c0      	nop			; (mov r8, r8)
 8006808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800680a:	bc08      	pop	{r3}
 800680c:	469e      	mov	lr, r3
 800680e:	4770      	bx	lr
